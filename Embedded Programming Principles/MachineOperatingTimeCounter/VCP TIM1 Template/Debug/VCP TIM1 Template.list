
C:\CubeMx Project 1\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08007cf0  08007cf0  00017cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000568  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b4  20000568  08008524  00020568  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000071c  08008524  0002071c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fdc3  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024a2  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000815c  00000000  00000000  000327fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b68  00000000  00000000  0003a960  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e18  00000000  00000000  0003b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000590a  00000000  00000000  0003c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000041bf  00000000  00000000  00041bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00045da9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002eac  00000000  00000000  00045e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000568 	.word	0x20000568
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cd8 	.word	0x08007cd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000056c 	.word	0x2000056c
 80001cc:	08007cd8 	.word	0x08007cd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec8:	f000 f876 	bl	8000fb8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4621      	mov	r1, r4
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f83c 	bl	8000f50 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed8:	2000      	movs	r0, #0
 8000eda:	bd10      	pop	{r4, pc}
 8000edc:	20000000 	.word	0x20000000

08000ee0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f822 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffe5 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f002 f837 	bl	8002f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	bd08      	pop	{r3, pc}
	...

08000ef8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <HAL_IncTick+0xc>)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000600 	.word	0x20000600

08000f08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f08:	4b01      	ldr	r3, [pc, #4]	; (8000f10 <HAL_GetTick+0x8>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000600 	.word	0x20000600

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000f18:	f7ff fff6 	bl	8000f08 <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000f1e:	f7ff fff3 	bl	8000f08 <HAL_GetTick>
 8000f22:	1b40      	subs	r0, r0, r5
 8000f24:	42a0      	cmp	r0, r4
 8000f26:	d3fa      	bcc.n	8000f1e <HAL_Delay+0xa>
  {
  }
}
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
	...

08000f2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f2e:	68d3      	ldr	r3, [r2, #12]
 8000f30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f3c:	0200      	lsls	r0, r0, #8
 8000f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f46:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000f48:	60d3      	str	r3, [r2, #12]
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_NVIC_SetPriority+0x60>)
 8000f52:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	2c04      	cmp	r4, #4
 8000f62:	bf28      	it	cs
 8000f64:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	2d06      	cmp	r5, #6

  return (
 8000f68:	f04f 0501 	mov.w	r5, #1
 8000f6c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f70:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f74:	bf8c      	ite	hi
 8000f76:	3b03      	subhi	r3, #3
 8000f78:	2300      	movls	r3, #0

  return (
 8000f7a:	400c      	ands	r4, r1
 8000f7c:	409c      	lsls	r4, r3
 8000f7e:	fa05 f303 	lsl.w	r3, r5, r3
 8000f82:	3b01      	subs	r3, #1
 8000f84:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000f86:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000f88:	ea42 0204 	orr.w	r2, r2, r4
 8000f8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	bfaf      	iteee	ge
 8000f92:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	f000 000f 	andlt.w	r0, r0, #15
 8000f9a:	4b06      	ldrlt	r3, [pc, #24]	; (8000fb4 <HAL_NVIC_SetPriority+0x64>)
 8000f9c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	bfa5      	ittet	ge
 8000fa0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fa4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fac:	bd30      	pop	{r4, r5, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	e000ed14 	.word	0xe000ed14

08000fb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	3801      	subs	r0, #1
 8000fba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fbe:	d20a      	bcs.n	8000fd6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	21f0      	movs	r1, #240	; 0xf0
 8000fc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fe6:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fe8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fea:	bf0c      	ite	eq
 8000fec:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ff0:	f022 0204 	bicne.w	r2, r2, #4
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ffc:	4770      	bx	lr

08000ffe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ffe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001000:	f7ff fffc 	bl	8000ffc <HAL_SYSTICK_Callback>
 8001004:	bd08      	pop	{r3, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800100c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800100e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	f8df c168 	ldr.w	ip, [pc, #360]	; 800117c <HAL_GPIO_Init+0x174>
 8001014:	4c57      	ldr	r4, [pc, #348]	; (8001174 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001016:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001018:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 800101c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800101e:	9a01      	ldr	r2, [sp, #4]
 8001020:	40da      	lsrs	r2, r3
 8001022:	f000 80a4 	beq.w	800116e <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001026:	2201      	movs	r2, #1
 8001028:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 800102c:	9a01      	ldr	r2, [sp, #4]
 800102e:	ea12 0509 	ands.w	r5, r2, r9
 8001032:	f000 809a 	beq.w	800116a <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	684a      	ldr	r2, [r1, #4]
 8001038:	f022 0a10 	bic.w	sl, r2, #16
 800103c:	f1ba 0f02 	cmp.w	sl, #2
 8001040:	d113      	bne.n	800106a <HAL_GPIO_Init+0x62>
 8001042:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001046:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800104a:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800104e:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001052:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001056:	fa08 f60b 	lsl.w	r6, r8, fp
 800105a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800105e:	690e      	ldr	r6, [r1, #16]
 8001060:	fa06 f60b 	lsl.w	r6, r6, fp
 8001064:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001066:	f8ce 6020 	str.w	r6, [lr, #32]
 800106a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800106e:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001072:	fa06 f60e 	lsl.w	r6, r6, lr
 8001076:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001078:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800107c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800107e:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001086:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108a:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800108e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	d811      	bhi.n	80010b6 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001092:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001094:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001098:	68cf      	ldr	r7, [r1, #12]
 800109a:	fa07 f70e 	lsl.w	r7, r7, lr
 800109e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80010a2:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010aa:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80010ae:	409f      	lsls	r7, r3
 80010b0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80010b4:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80010b8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010ba:	688f      	ldr	r7, [r1, #8]
 80010bc:	fa07 f70e 	lsl.w	r7, r7, lr
 80010c0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80010c2:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c4:	00d6      	lsls	r6, r2, #3
 80010c6:	d550      	bpl.n	800116a <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c8:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80010cc:	f046 0601 	orr.w	r6, r6, #1
 80010d0:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80010d4:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80010d8:	f006 0601 	and.w	r6, r6, #1
 80010dc:	9603      	str	r6, [sp, #12]
 80010de:	9e03      	ldr	r6, [sp, #12]
 80010e0:	f023 0603 	bic.w	r6, r3, #3
 80010e4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010e8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010ec:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80010f0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80010f6:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80010fa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010fe:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001102:	d00b      	beq.n	800111c <HAL_GPIO_Init+0x114>
 8001104:	4f1c      	ldr	r7, [pc, #112]	; (8001178 <HAL_GPIO_Init+0x170>)
 8001106:	42b8      	cmp	r0, r7
 8001108:	d00b      	beq.n	8001122 <HAL_GPIO_Init+0x11a>
 800110a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800110e:	42b8      	cmp	r0, r7
 8001110:	bf14      	ite	ne
 8001112:	f04f 0e07 	movne.w	lr, #7
 8001116:	f04f 0e02 	moveq.w	lr, #2
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x11e>
 800111c:	f04f 0e00 	mov.w	lr, #0
 8001120:	e001      	b.n	8001126 <HAL_GPIO_Init+0x11e>
 8001122:	f04f 0e01 	mov.w	lr, #1
 8001126:	fa0e f909 	lsl.w	r9, lr, r9
 800112a:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800112e:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001130:	4e10      	ldr	r6, [pc, #64]	; (8001174 <HAL_GPIO_Init+0x16c>)
 8001132:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001134:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001136:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800113a:	bf0c      	ite	eq
 800113c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800113e:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8001140:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8001142:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001144:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8001148:	bf0c      	ite	eq
 800114a:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800114c:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 800114e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001150:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001152:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001156:	bf0c      	ite	eq
 8001158:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800115a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 800115c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 800115e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001162:	bf54      	ite	pl
 8001164:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001166:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8001168:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800116a:	3301      	adds	r3, #1
 800116c:	e757      	b.n	800101e <HAL_GPIO_Init+0x16>
  }
}
 800116e:	b005      	add	sp, #20
 8001170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001174:	40010400 	.word	0x40010400
 8001178:	48000400 	.word	0x48000400
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	b10a      	cbz	r2, 8001186 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	6181      	str	r1, [r0, #24]
 8001184:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	6281      	str	r1, [r0, #40]	; 0x28
 8001188:	4770      	bx	lr
	...

0800118c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_PWREx_GetVoltageRange+0xc>)
 800118e:	6818      	ldr	r0, [r3, #0]
}
 8001190:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000

0800119c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119e:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a8:	d11a      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011aa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80011ae:	d020      	beq.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80011b2:	4913      	ldr	r1, [pc, #76]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80011b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011bc:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011c6:	2232      	movs	r2, #50	; 0x32
 80011c8:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80011ca:	b122      	cbz	r2, 80011d6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80011cc:	6959      	ldr	r1, [r3, #20]
 80011ce:	0549      	lsls	r1, r1, #21
 80011d0:	d501      	bpl.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80011d2:	3a01      	subs	r2, #1
 80011d4:	e7f9      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0x60>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	055b      	lsls	r3, r3, #21
 80011dc:	d40b      	bmi.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80011de:	e008      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e4:	bf1f      	itttt	ne
 80011e6:	681a      	ldrne	r2, [r3, #0]
 80011e8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80011ec:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80011f0:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000
 8001200:	000f4240 	.word	0x000f4240
 8001204:	20000000 	.word	0x20000000

08001208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001208:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800120a:	4d1e      	ldr	r5, [pc, #120]	; (8001284 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800120c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800120e:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001210:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001212:	d502      	bpl.n	800121a <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001214:	f7ff ffba 	bl	800118c <HAL_PWREx_GetVoltageRange>
 8001218:	e00e      	b.n	8001238 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	65ab      	str	r3, [r5, #88]	; 0x58
 8001222:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800122c:	f7ff ffae 	bl	800118c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001236:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001238:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800123c:	d106      	bne.n	800124c <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 800123e:	2c80      	cmp	r4, #128	; 0x80
 8001240:	d90c      	bls.n	800125c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001242:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001244:	bf8c      	ite	hi
 8001246:	2302      	movhi	r3, #2
 8001248:	2301      	movls	r3, #1
 800124a:	e00c      	b.n	8001266 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800124c:	2c80      	cmp	r4, #128	; 0x80
 800124e:	d807      	bhi.n	8001260 <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001250:	d008      	beq.n	8001264 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001252:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8001256:	4253      	negs	r3, r2
 8001258:	4153      	adcs	r3, r2
 800125a:	e004      	b.n	8001266 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800125c:	2300      	movs	r3, #0
 800125e:	e002      	b.n	8001266 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001260:	2303      	movs	r3, #3
 8001262:	e000      	b.n	8001266 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001264:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001268:	680a      	ldr	r2, [r1, #0]
 800126a:	f022 0207 	bic.w	r2, r2, #7
 800126e:	431a      	orrs	r2, r3
 8001270:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001272:	6808      	ldr	r0, [r1, #0]
 8001274:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001278:	1ac0      	subs	r0, r0, r3
 800127a:	bf18      	it	ne
 800127c:	2001      	movne	r0, #1
 800127e:	b003      	add	sp, #12
 8001280:	bd30      	pop	{r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800128e:	4c4a      	ldr	r4, [pc, #296]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001290:	68a3      	ldr	r3, [r4, #8]
 8001292:	f013 0f0c 	tst.w	r3, #12
 8001296:	d009      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001298:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	d126      	bne.n	80012f0 <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80012a2:	68e3      	ldr	r3, [r4, #12]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d121      	bne.n	80012f0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80012b0:	0712      	lsls	r2, r2, #28
 80012b2:	d40a      	bmi.n	80012ca <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80012bc:	fa92 f2a2 	rbit	r2, r2
 80012c0:	fab2 f282 	clz	r2, r2
 80012c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80012c8:	e007      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	22f0      	movs	r2, #240	; 0xf0
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	fab2 f282 	clz	r2, r2
 80012d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012da:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <HAL_RCC_GetSysClockFreq+0x130>)
 80012de:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80012e2:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80012e4:	f013 0f0c 	tst.w	r3, #12
 80012e8:	bf0c      	ite	eq
 80012ea:	4630      	moveq	r0, r6
 80012ec:	2000      	movne	r0, #0
 80012ee:	e011      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012f0:	68a3      	ldr	r3, [r4, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d007      	beq.n	800130a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d104      	bne.n	8001310 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001306:	482e      	ldr	r0, [pc, #184]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001308:	e000      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800130a:	482e      	ldr	r0, [pc, #184]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800130c:	2600      	movs	r6, #0
 800130e:	e001      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001310:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001312:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001314:	68a3      	ldr	r3, [r4, #8]
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d149      	bne.n	80013b4 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001320:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001322:	68d3      	ldr	r3, [r2, #12]
 8001324:	2070      	movs	r0, #112	; 0x70
 8001326:	fa90 f0a0 	rbit	r0, r0
 800132a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800132e:	fab0 f080 	clz	r0, r0
 8001332:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8001336:	f001 0303 	and.w	r3, r1, #3
 800133a:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800133c:	f100 0501 	add.w	r5, r0, #1
 8001340:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8001344:	d00c      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0xd4>
 8001346:	2b03      	cmp	r3, #3
 8001348:	d119      	bne.n	800137e <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800134a:	68d3      	ldr	r3, [r2, #12]
 800134c:	fa91 f1a1 	rbit	r1, r1
 8001350:	fab1 f181 	clz	r1, r1
 8001354:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001358:	fa23 f101 	lsr.w	r1, r3, r1
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x134>)
 800135e:	e009      	b.n	8001374 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001360:	68d3      	ldr	r3, [r2, #12]
 8001362:	fa91 f1a1 	rbit	r1, r1
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001368:	fab1 f181 	clz	r1, r1
 800136c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001370:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001374:	fbb2 f0f5 	udiv	r0, r2, r5
 8001378:	fb00 f301 	mul.w	r3, r0, r1
      break;
 800137c:	e00b      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800137e:	68d2      	ldr	r2, [r2, #12]
 8001380:	fa91 f1a1 	rbit	r1, r1
 8001384:	fab1 f181 	clz	r1, r1
 8001388:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 800138c:	40ca      	lsrs	r2, r1
 800138e:	fbb6 f0f5 	udiv	r0, r6, r5
 8001392:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8001396:	68e2      	ldr	r2, [r4, #12]
 8001398:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 800139c:	fa90 f0a0 	rbit	r0, r0
 80013a0:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 80013a4:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 80013a8:	fa22 f000 	lsr.w	r0, r2, r0
 80013ac:	3001      	adds	r0, #1
 80013ae:	0040      	lsls	r0, r0, #1
 80013b0:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08007d8c 	.word	0x08007d8c
 80013c0:	007a1200 	.word	0x007a1200
 80013c4:	00f42400 	.word	0x00f42400

080013c8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ce:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d2:	f140 808f 	bpl.w	80014f4 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80013d6:	4d9e      	ldr	r5, [pc, #632]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 80013d8:	68ab      	ldr	r3, [r5, #8]
 80013da:	f013 0f0c 	tst.w	r3, #12
 80013de:	d153      	bne.n	8001488 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	0798      	lsls	r0, r3, #30
 80013e4:	d503      	bpl.n	80013ee <HAL_RCC_OscConfig+0x26>
 80013e6:	69a3      	ldr	r3, [r4, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 8256 	beq.w	800189a <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ee:	682a      	ldr	r2, [r5, #0]
 80013f0:	4b97      	ldr	r3, [pc, #604]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 80013f2:	6a20      	ldr	r0, [r4, #32]
 80013f4:	0711      	lsls	r1, r2, #28
 80013f6:	bf56      	itet	pl
 80013f8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80013fc:	681b      	ldrmi	r3, [r3, #0]
 80013fe:	091b      	lsrpl	r3, r3, #4
 8001400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001404:	4283      	cmp	r3, r0
 8001406:	d216      	bcs.n	8001436 <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001408:	f7ff fefe 	bl	8001208 <RCC_SetFlashLatencyFromMSIRange>
 800140c:	2800      	cmp	r0, #0
 800140e:	f040 8244 	bne.w	800189a <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	602b      	str	r3, [r5, #0]
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	6a23      	ldr	r3, [r4, #32]
 8001422:	4313      	orrs	r3, r2
 8001424:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001426:	686b      	ldr	r3, [r5, #4]
 8001428:	69e2      	ldr	r2, [r4, #28]
 800142a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800142e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001432:	606b      	str	r3, [r5, #4]
 8001434:	e014      	b.n	8001460 <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	602b      	str	r3, [r5, #0]
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001444:	4303      	orrs	r3, r0
 8001446:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001448:	686b      	ldr	r3, [r5, #4]
 800144a:	69e2      	ldr	r2, [r4, #28]
 800144c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001454:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001456:	f7ff fed7 	bl	8001208 <RCC_SetFlashLatencyFromMSIRange>
 800145a:	2800      	cmp	r0, #0
 800145c:	f040 821d 	bne.w	800189a <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001460:	f7ff ff14 	bl	800128c <HAL_RCC_GetSysClockFreq>
 8001464:	68ab      	ldr	r3, [r5, #8]
 8001466:	22f0      	movs	r2, #240	; 0xf0
 8001468:	fa92 f2a2 	rbit	r2, r2
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001474:	40d3      	lsrs	r3, r2
 8001476:	4a77      	ldr	r2, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x28c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	40d8      	lsrs	r0, r3
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x290>)
 800147e:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fd19 	bl	8000eb8 <HAL_InitTick>
 8001486:	e035      	b.n	80014f4 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001488:	6983      	ldr	r3, [r0, #24]
 800148a:	b31b      	cbz	r3, 80014d4 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001494:	f7ff fd38 	bl	8000f08 <HAL_GetTick>
 8001498:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800149a:	682a      	ldr	r2, [r5, #0]
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 800149e:	0792      	lsls	r2, r2, #30
 80014a0:	d406      	bmi.n	80014b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a2:	f7ff fd31 	bl	8000f08 <HAL_GetTick>
 80014a6:	1b80      	subs	r0, r0, r6
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d9f6      	bls.n	800149a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ac:	2003      	movs	r0, #3
 80014ae:	e1f5      	b.n	800189c <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80014be:	6a22      	ldr	r2, [r4, #32]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	69e1      	ldr	r1, [r4, #28]
 80014c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80014cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	e00f      	b.n	80014f4 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fd14 	bl	8000f08 <HAL_GetTick>
 80014e0:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	079f      	lsls	r7, r3, #30
 80014e6:	d505      	bpl.n	80014f4 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e8:	f7ff fd0e 	bl	8000f08 <HAL_GetTick>
 80014ec:	1b80      	subs	r0, r0, r6
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f7      	bls.n	80014e2 <HAL_RCC_OscConfig+0x11a>
 80014f2:	e7db      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	07de      	lsls	r6, r3, #31
 80014f8:	d403      	bmi.n	8001502 <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	079d      	lsls	r5, r3, #30
 80014fe:	d448      	bmi.n	8001592 <HAL_RCC_OscConfig+0x1ca>
 8001500:	e09f      	b.n	8001642 <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001502:	4d53      	ldr	r5, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 8001504:	68ab      	ldr	r3, [r5, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b08      	cmp	r3, #8
 800150c:	d009      	beq.n	8001522 <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150e:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d10b      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001518:	68eb      	ldr	r3, [r5, #12]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b03      	cmp	r3, #3
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	0398      	lsls	r0, r3, #14
 8001526:	d5e8      	bpl.n	80014fa <HAL_RCC_OscConfig+0x132>
 8001528:	6863      	ldr	r3, [r4, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e5      	bne.n	80014fa <HAL_RCC_OscConfig+0x132>
 800152e:	e1b4      	b.n	800189a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	6863      	ldr	r3, [r4, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d006      	beq.n	8001546 <HAL_RCC_OscConfig+0x17e>
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x188>
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	602b      	str	r3, [r5, #0]
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x19a>
 8001550:	682a      	ldr	r2, [r5, #0]
 8001552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001556:	602a      	str	r2, [r5, #0]
 8001558:	682a      	ldr	r2, [r5, #0]
 800155a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800155e:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	b15b      	cbz	r3, 800157a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fcd1 	bl	8000f08 <HAL_GetTick>
 8001566:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	0399      	lsls	r1, r3, #14
 800156c:	d4c5      	bmi.n	80014fa <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156e:	f7ff fccb 	bl	8000f08 <HAL_GetTick>
 8001572:	1b80      	subs	r0, r0, r6
 8001574:	2864      	cmp	r0, #100	; 0x64
 8001576:	d9f7      	bls.n	8001568 <HAL_RCC_OscConfig+0x1a0>
 8001578:	e798      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fcc5 	bl	8000f08 <HAL_GetTick>
 800157e:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	039a      	lsls	r2, r3, #14
 8001584:	d5b9      	bpl.n	80014fa <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fcbf 	bl	8000f08 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2864      	cmp	r0, #100	; 0x64
 800158e:	d9f7      	bls.n	8001580 <HAL_RCC_OscConfig+0x1b8>
 8001590:	e78c      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001592:	4d2f      	ldr	r5, [pc, #188]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 8001594:	68ab      	ldr	r3, [r5, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800159e:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d11a      	bne.n	80015de <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015a8:	68eb      	ldr	r3, [r5, #12]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d115      	bne.n	80015de <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b2:	682b      	ldr	r3, [r5, #0]
 80015b4:	055b      	lsls	r3, r3, #21
 80015b6:	d503      	bpl.n	80015c0 <HAL_RCC_OscConfig+0x1f8>
 80015b8:	68e3      	ldr	r3, [r4, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 816d 	beq.w	800189a <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	686b      	ldr	r3, [r5, #4]
 80015c2:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	6921      	ldr	r1, [r4, #16]
 80015cc:	fab2 f282 	clz	r2, r2
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80015d8:	4313      	orrs	r3, r2
 80015da:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	e031      	b.n	8001642 <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015de:	68e3      	ldr	r3, [r4, #12]
 80015e0:	b1fb      	cbz	r3, 8001622 <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e2:	682b      	ldr	r3, [r5, #0]
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc8d 	bl	8000f08 <HAL_GetTick>
 80015ee:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <HAL_RCC_OscConfig+0x288>)
 80015f4:	055f      	lsls	r7, r3, #21
 80015f6:	d405      	bmi.n	8001604 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc86 	bl	8000f08 <HAL_GetTick>
 80015fc:	1b80      	subs	r0, r0, r6
 80015fe:	2802      	cmp	r0, #2
 8001600:	d9f6      	bls.n	80015f0 <HAL_RCC_OscConfig+0x228>
 8001602:	e753      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	6843      	ldr	r3, [r0, #4]
 8001606:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 800160a:	fa92 f2a2 	rbit	r2, r2
 800160e:	6921      	ldr	r1, [r4, #16]
 8001610:	fab2 f282 	clz	r2, r2
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800161c:	4313      	orrs	r3, r2
 800161e:	6043      	str	r3, [r0, #4]
 8001620:	e00f      	b.n	8001642 <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001628:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fc6d 	bl	8000f08 <HAL_GetTick>
 800162e:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	0558      	lsls	r0, r3, #21
 8001634:	d505      	bpl.n	8001642 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc67 	bl	8000f08 <HAL_GetTick>
 800163a:	1b80      	subs	r0, r0, r6
 800163c:	2802      	cmp	r0, #2
 800163e:	d9f7      	bls.n	8001630 <HAL_RCC_OscConfig+0x268>
 8001640:	e734      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	0719      	lsls	r1, r3, #28
 8001646:	d409      	bmi.n	800165c <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	075a      	lsls	r2, r3, #29
 800164c:	d42f      	bmi.n	80016ae <HAL_RCC_OscConfig+0x2e6>
 800164e:	e097      	b.n	8001780 <HAL_RCC_OscConfig+0x3b8>
 8001650:	40021000 	.word	0x40021000
 8001654:	08007d74 	.word	0x08007d74
 8001658:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	6963      	ldr	r3, [r4, #20]
 800165e:	4d91      	ldr	r5, [pc, #580]	; (80018a4 <HAL_RCC_OscConfig+0x4dc>)
 8001660:	b193      	cbz	r3, 8001688 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fc4b 	bl	8000f08 <HAL_GetTick>
 8001672:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001674:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	d4e5      	bmi.n	8001648 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fc44 	bl	8000f08 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x2ac>
 8001686:	e711      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001688:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fc38 	bl	8000f08 <HAL_GetTick>
 8001698:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800169a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800169e:	079f      	lsls	r7, r3, #30
 80016a0:	d5d2      	bpl.n	8001648 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc31 	bl	8000f08 <HAL_GetTick>
 80016a6:	1b80      	subs	r0, r0, r6
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f6      	bls.n	800169a <HAL_RCC_OscConfig+0x2d2>
 80016ac:	e6fe      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ae:	4d7d      	ldr	r5, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x4dc>)
 80016b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016b2:	00d8      	lsls	r0, r3, #3
 80016b4:	d40a      	bmi.n	80016cc <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	65ab      	str	r3, [r5, #88]	; 0x58
 80016be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016c8:	2701      	movs	r7, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80016cc:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	4e76      	ldr	r6, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x4e0>)
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	05d9      	lsls	r1, r3, #23
 80016d4:	d503      	bpl.n	80016de <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d6:	68a3      	ldr	r3, [r4, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d111      	bne.n	8001700 <HAL_RCC_OscConfig+0x338>
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fc0f 	bl	8000f08 <HAL_GetTick>
 80016ea:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ec:	6833      	ldr	r3, [r6, #0]
 80016ee:	05da      	lsls	r2, r3, #23
 80016f0:	d4f1      	bmi.n	80016d6 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fc09 	bl	8000f08 <HAL_GetTick>
 80016f6:	ebc8 0000 	rsb	r0, r8, r0
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d9f6      	bls.n	80016ec <HAL_RCC_OscConfig+0x324>
 80016fe:	e6d5      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x356>
 8001704:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001710:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800171c:	e00c      	b.n	8001738 <HAL_RCC_OscConfig+0x370>
 800171e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 800172a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800172e:	f022 0204 	bic.w	r2, r2, #4
 8001732:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	b173      	cbz	r3, 8001756 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fbe6 	bl	8000f08 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001742:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d40e      	bmi.n	8001768 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fbdd 	bl	8000f08 <HAL_GetTick>
 800174e:	1b80      	subs	r0, r0, r6
 8001750:	4540      	cmp	r0, r8
 8001752:	d9f6      	bls.n	8001742 <HAL_RCC_OscConfig+0x37a>
 8001754:	e6aa      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fbd7 	bl	8000f08 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001760:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001764:	0798      	lsls	r0, r3, #30
 8001766:	d405      	bmi.n	8001774 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001768:	b157      	cbz	r7, 8001780 <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800176c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001770:	65ab      	str	r3, [r5, #88]	; 0x58
 8001772:	e005      	b.n	8001780 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fbc8 	bl	8000f08 <HAL_GetTick>
 8001778:	1b80      	subs	r0, r0, r6
 800177a:	4540      	cmp	r0, r8
 800177c:	d9f0      	bls.n	8001760 <HAL_RCC_OscConfig+0x398>
 800177e:	e695      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	0699      	lsls	r1, r3, #26
 8001784:	d402      	bmi.n	800178c <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001788:	bb4a      	cbnz	r2, 80017de <HAL_RCC_OscConfig+0x416>
 800178a:	e05f      	b.n	800184c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800178c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800178e:	4d45      	ldr	r5, [pc, #276]	; (80018a4 <HAL_RCC_OscConfig+0x4dc>)
 8001790:	b193      	cbz	r3, 80017b8 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001792:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fbb3 	bl	8000f08 <HAL_GetTick>
 80017a2:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80017a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80017a8:	079a      	lsls	r2, r3, #30
 80017aa:	d4ec      	bmi.n	8001786 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ac:	f7ff fbac 	bl	8000f08 <HAL_GetTick>
 80017b0:	1b80      	subs	r0, r0, r6
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9f6      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3dc>
 80017b6:	e679      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fba0 	bl	8000f08 <HAL_GetTick>
 80017c8:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80017ca:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80017ce:	079b      	lsls	r3, r3, #30
 80017d0:	d5d9      	bpl.n	8001786 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d2:	f7ff fb99 	bl	8000f08 <HAL_GetTick>
 80017d6:	1b80      	subs	r0, r0, r6
 80017d8:	2802      	cmp	r0, #2
 80017da:	d9f6      	bls.n	80017ca <HAL_RCC_OscConfig+0x402>
 80017dc:	e666      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4d31      	ldr	r5, [pc, #196]	; (80018a4 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	68ab      	ldr	r3, [r5, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d057      	beq.n	800189a <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ec:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f4:	d138      	bne.n	8001868 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb87 	bl	8000f08 <HAL_GetTick>
 80017fa:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	4829      	ldr	r0, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x4dc>)
 8001800:	019f      	lsls	r7, r3, #6
 8001802:	d425      	bmi.n	8001850 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001804:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001808:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800180a:	06f6      	lsls	r6, r6, #27
 800180c:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8001810:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001812:	3a01      	subs	r2, #1
 8001814:	430b      	orrs	r3, r1
 8001816:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 800181a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8001824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	3b01      	subs	r3, #1
 800182a:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 800182e:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001836:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001838:	68c3      	ldr	r3, [r0, #12]
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fb62 	bl	8000f08 <HAL_GetTick>
 8001844:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	0199      	lsls	r1, r3, #6
 800184a:	d507      	bpl.n	800185c <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e025      	b.n	800189c <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fb5a 	bl	8000f08 <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	2802      	cmp	r0, #2
 8001858:	d9d0      	bls.n	80017fc <HAL_RCC_OscConfig+0x434>
 800185a:	e627      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fb54 	bl	8000f08 <HAL_GetTick>
 8001860:	1b00      	subs	r0, r0, r4
 8001862:	2802      	cmp	r0, #2
 8001864:	d9ef      	bls.n	8001846 <HAL_RCC_OscConfig+0x47e>
 8001866:	e621      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800186c:	bf5e      	ittt	pl
 800186e:	68eb      	ldrpl	r3, [r5, #12]
 8001870:	f023 0303 	bicpl.w	r3, r3, #3
 8001874:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001876:	68eb      	ldr	r3, [r5, #12]
 8001878:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fb41 	bl	8000f08 <HAL_GetTick>
 8001886:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	019b      	lsls	r3, r3, #6
 800188c:	d5de      	bpl.n	800184c <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fb3b 	bl	8000f08 <HAL_GetTick>
 8001892:	1b00      	subs	r0, r0, r4
 8001894:	2802      	cmp	r0, #2
 8001896:	d9f7      	bls.n	8001888 <HAL_RCC_OscConfig+0x4c0>
 8001898:	e608      	b.n	80014ac <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 800189c:	b002      	add	sp, #8
 800189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_RCC_ClockConfig+0x160>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ba:	4605      	mov	r5, r0
 80018bc:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018be:	d30a      	bcc.n	80018d6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	6829      	ldr	r1, [r5, #0]
 80018c2:	0788      	lsls	r0, r1, #30
 80018c4:	d514      	bpl.n	80018f0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c6:	4852      	ldr	r0, [pc, #328]	; (8001a10 <HAL_RCC_ClockConfig+0x164>)
 80018c8:	6883      	ldr	r3, [r0, #8]
 80018ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ce:	68ab      	ldr	r3, [r5, #8]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	6083      	str	r3, [r0, #8]
 80018d4:	e00c      	b.n	80018f0 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	f023 0307 	bic.w	r3, r3, #7
 80018dc:	430b      	orrs	r3, r1
 80018de:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e0:	6813      	ldr	r3, [r2, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	4299      	cmp	r1, r3
 80018e8:	d0ea      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
 80018ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f0:	07ca      	lsls	r2, r1, #31
 80018f2:	d406      	bmi.n	8001902 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_RCC_ClockConfig+0x160>)
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	429e      	cmp	r6, r3
 80018fe:	d351      	bcc.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
 8001900:	e05a      	b.n	80019b8 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	686b      	ldr	r3, [r5, #4]
 8001904:	4c42      	ldr	r4, [pc, #264]	; (8001a10 <HAL_RCC_ClockConfig+0x164>)
 8001906:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001908:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	d102      	bne.n	8001912 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800190c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001910:	e00a      	b.n	8001928 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	2b03      	cmp	r3, #3
 8001914:	d102      	bne.n	800191c <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001916:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800191a:	e005      	b.n	8001928 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800191c:	b913      	cbnz	r3, 8001924 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800191e:	f012 0f02 	tst.w	r2, #2
 8001922:	e001      	b.n	8001928 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001924:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001928:	d0df      	beq.n	80018ea <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192a:	68a2      	ldr	r2, [r4, #8]
 800192c:	f022 0203 	bic.w	r2, r2, #3
 8001930:	4313      	orrs	r3, r2
 8001932:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001934:	f7ff fae8 	bl	8000f08 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	686b      	ldr	r3, [r5, #4]
 800193a:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193c:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	d10c      	bne.n	800195e <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001944:	68a3      	ldr	r3, [r4, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d0d2      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7ff fadb 	bl	8000f08 <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	4540      	cmp	r0, r8
 8001956:	d9f5      	bls.n	8001944 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8001958:	2003      	movs	r0, #3
 800195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195e:	2b03      	cmp	r3, #3
 8001960:	d10a      	bne.n	8001978 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001962:	68a3      	ldr	r3, [r4, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d0c3      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff facc 	bl	8000f08 <HAL_GetTick>
 8001970:	1bc0      	subs	r0, r0, r7
 8001972:	4540      	cmp	r0, r8
 8001974:	d9f5      	bls.n	8001962 <HAL_RCC_ClockConfig+0xb6>
 8001976:	e7ef      	b.n	8001958 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001978:	b973      	cbnz	r3, 8001998 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	f013 0f0c 	tst.w	r3, #12
 8001980:	d0b8      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7ff fac1 	bl	8000f08 <HAL_GetTick>
 8001986:	1bc0      	subs	r0, r0, r7
 8001988:	4540      	cmp	r0, r8
 800198a:	d9f6      	bls.n	800197a <HAL_RCC_ClockConfig+0xce>
 800198c:	e7e4      	b.n	8001958 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f7ff fabb 	bl	8000f08 <HAL_GetTick>
 8001992:	1bc0      	subs	r0, r0, r7
 8001994:	4540      	cmp	r0, r8
 8001996:	d8df      	bhi.n	8001958 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001998:	68a3      	ldr	r3, [r4, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d1f5      	bne.n	800198e <HAL_RCC_ClockConfig+0xe2>
 80019a2:	e7a7      	b.n	80018f4 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	4333      	orrs	r3, r6
 80019ac:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	429e      	cmp	r6, r3
 80019b6:	d198      	bne.n	80018ea <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	6829      	ldr	r1, [r5, #0]
 80019ba:	4c15      	ldr	r4, [pc, #84]	; (8001a10 <HAL_RCC_ClockConfig+0x164>)
 80019bc:	f011 0f04 	tst.w	r1, #4
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c2:	68a3      	ldr	r3, [r4, #8]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	68eb      	ldr	r3, [r5, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	070b      	lsls	r3, r1, #28
 80019d0:	d506      	bpl.n	80019e0 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d2:	68a3      	ldr	r3, [r4, #8]
 80019d4:	692a      	ldr	r2, [r5, #16]
 80019d6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019de:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80019e0:	f7ff fc54 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80019e4:	68a3      	ldr	r3, [r4, #8]
 80019e6:	22f0      	movs	r2, #240	; 0xf0
 80019e8:	fa92 f2a2 	rbit	r2, r2
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	40d3      	lsrs	r3, r2
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_RCC_ClockConfig+0x168>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	40d8      	lsrs	r0, r3
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_ClockConfig+0x16c>)
 80019fe:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fa59 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001a06:	2000      	movs	r0, #0
}
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08007d74 	.word	0x08007d74
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	fa92 f2a2 	rbit	r2, r2
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a3c:	40d3      	lsrs	r3, r2
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a44:	6810      	ldr	r0, [r2, #0]
}
 8001a46:	40d8      	lsrs	r0, r3
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08007d84 	.word	0x08007d84
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	fa92 f2a2 	rbit	r2, r2
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a6c:	40d3      	lsrs	r3, r2
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001a74:	6810      	ldr	r0, [r2, #0]
}
 8001a76:	40d8      	lsrs	r0, r3
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08007d84 	.word	0x08007d84
 8001a84:	20000000 	.word	0x20000000

08001a88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <RCCEx_PLLSAI1_Config+0x16c>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a92:	4604      	mov	r4, r0
 8001a94:	460e      	mov	r6, r1
 8001a96:	461d      	mov	r5, r3
 8001a98:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a9a:	d013      	beq.n	8001ac4 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	4282      	cmp	r2, r0
 8001aa4:	d124      	bne.n	8001af0 <RCCEx_PLLSAI1_Config+0x68>
       || 
 8001aa6:	b31a      	cbz	r2, 8001af0 <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	2370      	movs	r3, #112	; 0x70
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001ab4:	f002 0370 	and.w	r3, r2, #112	; 0x70
 8001ab8:	40cb      	lsrs	r3, r1
 8001aba:	6862      	ldr	r2, [r4, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d116      	bne.n	8001af0 <RCCEx_PLLSAI1_Config+0x68>
 8001ac2:	e025      	b.n	8001b10 <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d008      	beq.n	8001ada <RCCEx_PLLSAI1_Config+0x52>
 8001ac8:	2803      	cmp	r0, #3
 8001aca:	d00a      	beq.n	8001ae2 <RCCEx_PLLSAI1_Config+0x5a>
 8001acc:	2801      	cmp	r0, #1
 8001ace:	d10f      	bne.n	8001af0 <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	079f      	lsls	r7, r3, #30
 8001ad4:	f140 808d 	bpl.w	8001bf2 <RCCEx_PLLSAI1_Config+0x16a>
 8001ad8:	e00c      	b.n	8001af4 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ae0:	e005      	b.n	8001aee <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	0391      	lsls	r1, r2, #14
 8001ae6:	d405      	bmi.n	8001af4 <RCCEx_PLLSAI1_Config+0x6c>
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001aee:	d101      	bne.n	8001af4 <RCCEx_PLLSAI1_Config+0x6c>
 8001af0:	2001      	movs	r0, #1
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001af4:	68e9      	ldr	r1, [r5, #12]
 8001af6:	2370      	movs	r3, #112	; 0x70
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	fab3 f283 	clz	r2, r3
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	4093      	lsls	r3, r2
 8001b06:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 8001b0a:	4310      	orrs	r0, r2
 8001b0c:	4318      	orrs	r0, r3
 8001b0e:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b16:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b18:	f7ff f9f6 	bl	8000f08 <HAL_GetTick>
 8001b1c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	4934      	ldr	r1, [pc, #208]	; (8001bf4 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b22:	011a      	lsls	r2, r3, #4
 8001b24:	d506      	bpl.n	8001b34 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b26:	f7ff f9ef 	bl	8000f08 <HAL_GetTick>
 8001b2a:	1bc0      	subs	r0, r0, r7
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	d9f6      	bls.n	8001b1e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
 8001b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b34:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001b38:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b3a:	b9b6      	cbnz	r6, 8001b6a <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001b3c:	6908      	ldr	r0, [r1, #16]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	fa96 f6a6 	rbit	r6, r6
 8001b4e:	fa07 f302 	lsl.w	r3, r7, r2
 8001b52:	68e2      	ldr	r2, [r4, #12]
 8001b54:	fab6 f686 	clz	r6, r6
 8001b58:	40b2      	lsls	r2, r6
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8001b60:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001b64:	431a      	orrs	r2, r3
 8001b66:	610a      	str	r2, [r1, #16]
 8001b68:	e02d      	b.n	8001bc6 <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b6a:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001b6c:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b6e:	d113      	bne.n	8001b98 <RCCEx_PLLSAI1_Config+0x110>
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	6926      	ldr	r6, [r4, #16]
 8001b82:	0876      	lsrs	r6, r6, #1
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	3e01      	subs	r6, #1
 8001b8a:	409e      	lsls	r6, r3
 8001b8c:	fa07 f302 	lsl.w	r3, r7, r2
 8001b90:	4333      	orrs	r3, r6
 8001b92:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 8001b96:	e012      	b.n	8001bbe <RCCEx_PLLSAI1_Config+0x136>
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	6966      	ldr	r6, [r4, #20]
 8001baa:	0876      	lsrs	r6, r6, #1
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	3e01      	subs	r6, #1
 8001bb2:	409e      	lsls	r6, r3
 8001bb4:	fa07 f302 	lsl.w	r3, r7, r2
 8001bb8:	4333      	orrs	r3, r6
 8001bba:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 8001bbe:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bcc:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff f99b 	bl	8000f08 <HAL_GetTick>
 8001bd2:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <RCCEx_PLLSAI1_Config+0x16c>)
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	d405      	bmi.n	8001be8 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001bdc:	f7ff f994 	bl	8000f08 <HAL_GetTick>
 8001be0:	1b80      	subs	r0, r0, r6
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f6      	bls.n	8001bd4 <RCCEx_PLLSAI1_Config+0x14c>
 8001be6:	e7a3      	b.n	8001b30 <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001be8:	6911      	ldr	r1, [r2, #16]
 8001bea:	69a3      	ldr	r3, [r4, #24]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6113      	str	r3, [r2, #16]
 8001bf0:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 8001bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001bfc:	6805      	ldr	r5, [r0, #0]
 8001bfe:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c02:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c06:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c0c:	d004      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001c0e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8001c14:	b9b1      	cbnz	r1, 8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001c16:	e005      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c18:	4a96      	ldr	r2, [pc, #600]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c1a:	68d3      	ldr	r3, [r2, #12]
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c22:	e004      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c24:	3004      	adds	r0, #4
 8001c26:	f7ff ff2f 	bl	8001a88 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8001c2a:	4605      	mov	r5, r0
 8001c2c:	b958      	cbnz	r0, 8001c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c2e:	4991      	ldr	r1, [pc, #580]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c30:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c40:	2500      	movs	r5, #0
 8001c42:	e000      	b.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c44:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	039e      	lsls	r6, r3, #14
 8001c4a:	d55a      	bpl.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4c:	4e89      	ldr	r6, [pc, #548]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c4e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c50:	00d8      	lsls	r0, r3, #3
 8001c52:	d40a      	bmi.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	65b3      	str	r3, [r6, #88]	; 0x58
 8001c5c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c66:	2701      	movs	r7, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001e78 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001c70:	f8d8 3000 	ldr.w	r3, [r8]
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f944 	bl	8000f08 <HAL_GetTick>
 8001c80:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c82:	f8d8 3000 	ldr.w	r3, [r8]
 8001c86:	05d9      	lsls	r1, r3, #23
 8001c88:	d406      	bmi.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff f93d 	bl	8000f08 <HAL_GetTick>
 8001c8e:	ebc9 0000 	rsb	r0, r9, r0
 8001c92:	2802      	cmp	r0, #2
 8001c94:	d9f5      	bls.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001c96:	e02e      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 8001c98:	bb75      	cbnz	r5, 8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c9a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001c9e:	4a75      	ldr	r2, [pc, #468]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ca4:	d014      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001ca6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001ca8:	428b      	cmp	r3, r1
 8001caa:	d011      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001cb4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001cb8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cbc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001cc8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd0:	07da      	lsls	r2, r3, #31
 8001cd2:	f140 80c2 	bpl.w	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f917 	bl	8000f08 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001ce0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001ce4:	079b      	lsls	r3, r3, #30
 8001ce6:	f100 80b8 	bmi.w	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7ff f90d 	bl	8000f08 <HAL_GetTick>
 8001cee:	ebc8 0000 	rsb	r0, r8, r0
 8001cf2:	4548      	cmp	r0, r9
 8001cf4:	d9f4      	bls.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8001cf6:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf8:	b11f      	cbz	r7, 8001d02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d00:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	07df      	lsls	r7, r3, #31
 8001d06:	d508      	bpl.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d08:	485a      	ldr	r0, [pc, #360]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d0a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d0e:	f022 0103 	bic.w	r1, r2, #3
 8001d12:	6a22      	ldr	r2, [r4, #32]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d1a:	079e      	lsls	r6, r3, #30
 8001d1c:	d508      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d1e:	4855      	ldr	r0, [pc, #340]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d20:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d24:	f022 010c 	bic.w	r1, r2, #12
 8001d28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d30:	0698      	lsls	r0, r3, #26
 8001d32:	d508      	bpl.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d34:	484f      	ldr	r0, [pc, #316]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d36:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d3a:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001d3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d40:	430a      	orrs	r2, r1
 8001d42:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d46:	0599      	lsls	r1, r3, #22
 8001d48:	d508      	bpl.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d4a:	484a      	ldr	r0, [pc, #296]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d4c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d50:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001d54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d56:	430a      	orrs	r2, r1
 8001d58:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d5c:	055a      	lsls	r2, r3, #21
 8001d5e:	d508      	bpl.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d60:	4844      	ldr	r0, [pc, #272]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d62:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d66:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d72:	065f      	lsls	r7, r3, #25
 8001d74:	d508      	bpl.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d76:	483f      	ldr	r0, [pc, #252]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d78:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d7c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001d80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d88:	05de      	lsls	r6, r3, #23
 8001d8a:	d508      	bpl.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d8c:	4839      	ldr	r0, [pc, #228]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d8e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001d92:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001d96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d9e:	0498      	lsls	r0, r3, #18
 8001da0:	d51a      	bpl.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001da2:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001da4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001da6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001daa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dae:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001db0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001db8:	d104      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dba:	68d3      	ldr	r3, [r2, #12]
 8001dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc0:	60d3      	str	r3, [r2, #12]
 8001dc2:	e009      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001dc4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	1d20      	adds	r0, r4, #4
 8001dce:	f7ff fe5b 	bl	8001a88 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	bf18      	it	ne
 8001dd6:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	0359      	lsls	r1, r3, #13
 8001ddc:	d51a      	bpl.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dde:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001de0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001de2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001de6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dea:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001df4:	d104      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001df6:	68d3      	ldr	r3, [r2, #12]
 8001df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dfc:	60d3      	str	r3, [r2, #12]
 8001dfe:	e009      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e00:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e06:	2101      	movs	r1, #1
 8001e08:	1d20      	adds	r0, r4, #4
 8001e0a:	f7ff fe3d 	bl	8001a88 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	bf18      	it	ne
 8001e12:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	045a      	lsls	r2, r3, #17
 8001e18:	d512      	bpl.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e1a:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e22:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e26:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e28:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e30:	d106      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e32:	2102      	movs	r1, #2
 8001e34:	1d20      	adds	r0, r4, #4
 8001e36:	f7ff fe27 	bl	8001a88 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	bf18      	it	ne
 8001e3e:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	d512      	bpl.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e46:	490b      	ldr	r1, [pc, #44]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e48:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001e58:	e008      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001e6a:	e745      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	b003      	add	sp, #12
 8001e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000

08001e7c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e7c:	6a03      	ldr	r3, [r0, #32]
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e84:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e86:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e88:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e8a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e8c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e8e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001e92:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e96:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e98:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e9a:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e9e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ea0:	4d12      	ldr	r5, [pc, #72]	; (8001eec <TIM_OC1_SetConfig+0x70>)
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d006      	beq.n	8001eb4 <TIM_OC1_SetConfig+0x38>
 8001ea6:	4e12      	ldr	r6, [pc, #72]	; (8001ef0 <TIM_OC1_SetConfig+0x74>)
 8001ea8:	42b0      	cmp	r0, r6
 8001eaa:	d003      	beq.n	8001eb4 <TIM_OC1_SetConfig+0x38>
 8001eac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eb0:	42b0      	cmp	r0, r6
 8001eb2:	d114      	bne.n	8001ede <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001eb4:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001eb6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001eba:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ebc:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec2:	d006      	beq.n	8001ed2 <TIM_OC1_SetConfig+0x56>
 8001ec4:	4d0a      	ldr	r5, [pc, #40]	; (8001ef0 <TIM_OC1_SetConfig+0x74>)
 8001ec6:	42a8      	cmp	r0, r5
 8001ec8:	d003      	beq.n	8001ed2 <TIM_OC1_SetConfig+0x56>
 8001eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ece:	42a8      	cmp	r0, r5
 8001ed0:	d105      	bne.n	8001ede <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ed2:	694e      	ldr	r6, [r1, #20]
 8001ed4:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ed6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001eda:	4335      	orrs	r5, r6
 8001edc:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ede:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ee0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ee2:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ee4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ee6:	6203      	str	r3, [r0, #32]
 8001ee8:	bd70      	pop	{r4, r5, r6, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40014000 	.word	0x40014000

08001ef4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ef4:	6a03      	ldr	r3, [r0, #32]
 8001ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efe:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f00:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f02:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f04:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f06:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001f0a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f0e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f10:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001f16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f1a:	4d0f      	ldr	r5, [pc, #60]	; (8001f58 <TIM_OC3_SetConfig+0x64>)
 8001f1c:	42a8      	cmp	r0, r5
 8001f1e:	d107      	bne.n	8001f30 <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001f20:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001f26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f2e:	e005      	b.n	8001f3c <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f30:	4d0a      	ldr	r5, [pc, #40]	; (8001f5c <TIM_OC3_SetConfig+0x68>)
 8001f32:	42a8      	cmp	r0, r5
 8001f34:	d002      	beq.n	8001f3c <TIM_OC3_SetConfig+0x48>
 8001f36:	4d0a      	ldr	r5, [pc, #40]	; (8001f60 <TIM_OC3_SetConfig+0x6c>)
 8001f38:	42a8      	cmp	r0, r5
 8001f3a:	d107      	bne.n	8001f4c <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001f3c:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001f42:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001f46:	698d      	ldr	r5, [r1, #24]
 8001f48:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f4e:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f50:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f52:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f54:	6203      	str	r3, [r0, #32]
}
 8001f56:	bd30      	pop	{r4, r5, pc}
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40014400 	.word	0x40014400

08001f64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f64:	6a03      	ldr	r3, [r0, #32]
 8001f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6c:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f6e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f72:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f74:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001f82:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001f88:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f8c:	4d0a      	ldr	r5, [pc, #40]	; (8001fb8 <TIM_OC4_SetConfig+0x54>)
 8001f8e:	42a8      	cmp	r0, r5
 8001f90:	d007      	beq.n	8001fa2 <TIM_OC4_SetConfig+0x3e>
 8001f92:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001f96:	42a8      	cmp	r0, r5
 8001f98:	d003      	beq.n	8001fa2 <TIM_OC4_SetConfig+0x3e>
 8001f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f9e:	42a8      	cmp	r0, r5
 8001fa0:	d104      	bne.n	8001fac <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001fa2:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fa4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001fa8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fae:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fb0:	684b      	ldr	r3, [r1, #4]
 8001fb2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb4:	6202      	str	r2, [r0, #32]
 8001fb6:	bd30      	pop	{r4, r5, pc}
 8001fb8:	40012c00 	.word	0x40012c00

08001fbc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc6:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001fc8:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001fca:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fcc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001fce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001fd2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fd6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001fd8:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001fda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001fde:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe2:	4d0b      	ldr	r5, [pc, #44]	; (8002010 <TIM_OC5_SetConfig+0x54>)
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	d007      	beq.n	8001ff8 <TIM_OC5_SetConfig+0x3c>
 8001fe8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001fec:	42a8      	cmp	r0, r5
 8001fee:	d003      	beq.n	8001ff8 <TIM_OC5_SetConfig+0x3c>
 8001ff0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ff4:	42a8      	cmp	r0, r5
 8001ff6:	d104      	bne.n	8002002 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001ff8:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001ffe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002002:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002004:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002006:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002008:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200a:	6203      	str	r3, [r0, #32]
 800200c:	bd30      	pop	{r4, r5, pc}
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00

08002014 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002014:	6a03      	ldr	r3, [r0, #32]
 8002016:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800201a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201c:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800201e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002020:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002022:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002024:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800202e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002032:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002034:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002038:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800203c:	4d0a      	ldr	r5, [pc, #40]	; (8002068 <TIM_OC6_SetConfig+0x54>)
 800203e:	42a8      	cmp	r0, r5
 8002040:	d007      	beq.n	8002052 <TIM_OC6_SetConfig+0x3e>
 8002042:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002046:	42a8      	cmp	r0, r5
 8002048:	d003      	beq.n	8002052 <TIM_OC6_SetConfig+0x3e>
 800204a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800204e:	42a8      	cmp	r0, r5
 8002050:	d104      	bne.n	800205c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002052:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002054:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002058:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800205e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002060:	684b      	ldr	r3, [r1, #4]
 8002062:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002064:	6202      	str	r2, [r0, #32]
 8002066:	bd30      	pop	{r4, r5, pc}
 8002068:	40012c00 	.word	0x40012c00

0800206c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800206e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002070:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002072:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	d002      	beq.n	800207c <TIM_Base_SetConfig+0x10>
 8002076:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800207a:	d109      	bne.n	8002090 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800207c:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002084:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002088:	d009      	beq.n	800209e <TIM_Base_SetConfig+0x32>
 800208a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800208e:	d006      	beq.n	800209e <TIM_Base_SetConfig+0x32>
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <TIM_Base_SetConfig+0x68>)
 8002092:	4290      	cmp	r0, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x32>
 8002096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209a:	4290      	cmp	r0, r2
 800209c:	d103      	bne.n	80020a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80020a6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a8:	688b      	ldr	r3, [r1, #8]
 80020aa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020ac:	680b      	ldr	r3, [r1, #0]
 80020ae:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <TIM_Base_SetConfig+0x64>)
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0x5a>
 80020b6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80020ba:	4298      	cmp	r0, r3
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0x5a>
 80020be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c2:	4298      	cmp	r0, r3
 80020c4:	d101      	bne.n	80020ca <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c6:	690b      	ldr	r3, [r1, #16]
 80020c8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ca:	2301      	movs	r3, #1
 80020cc:	6143      	str	r3, [r0, #20]
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40014000 	.word	0x40014000

080020d8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020d8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80020da:	4604      	mov	r4, r0
 80020dc:	b1a0      	cbz	r0, 8002108 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80020de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020e6:	b91b      	cbnz	r3, 80020f0 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ec:	f000 ff7e 	bl	8002fec <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80020f0:	2302      	movs	r3, #2
 80020f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f6:	6820      	ldr	r0, [r4, #0]
 80020f8:	1d21      	adds	r1, r4, #4
 80020fa:	f7ff ffb7 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020fe:	2301      	movs	r3, #1
 8002100:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002108:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800210a:	bd10      	pop	{r4, pc}

0800210c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210c:	6a03      	ldr	r3, [r0, #32]
 800210e:	f023 0310 	bic.w	r3, r3, #16
 8002112:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002114:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002116:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002118:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800211a:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800211c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800211e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002122:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002126:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800212a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800212c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002130:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002134:	4d0f      	ldr	r5, [pc, #60]	; (8002174 <TIM_OC2_SetConfig+0x68>)
 8002136:	42a8      	cmp	r0, r5
 8002138:	d107      	bne.n	800214a <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800213a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800213c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002140:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002148:	e005      	b.n	8002156 <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800214a:	4d0b      	ldr	r5, [pc, #44]	; (8002178 <TIM_OC2_SetConfig+0x6c>)
 800214c:	42a8      	cmp	r0, r5
 800214e:	d002      	beq.n	8002156 <TIM_OC2_SetConfig+0x4a>
 8002150:	4d0a      	ldr	r5, [pc, #40]	; (800217c <TIM_OC2_SetConfig+0x70>)
 8002152:	42a8      	cmp	r0, r5
 8002154:	d107      	bne.n	8002166 <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002156:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002158:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800215c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002160:	698d      	ldr	r5, [r1, #24]
 8002162:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002166:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002168:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800216a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800216c:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216e:	6203      	str	r3, [r0, #32]
}
 8002170:	bd30      	pop	{r4, r5, pc}
 8002172:	bf00      	nop
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40014000 	.word	0x40014000
 800217c:	40014400 	.word	0x40014400

08002180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002180:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002182:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002186:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002190:	d07b      	beq.n	800228a <HAL_TIM_PWM_ConfigChannel+0x10a>
 8002192:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8002194:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800219a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 800219e:	d03c      	beq.n	800221a <HAL_TIM_PWM_ConfigChannel+0x9a>
 80021a0:	d813      	bhi.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x4a>
 80021a2:	b34a      	cbz	r2, 80021f8 <HAL_TIM_PWM_ConfigChannel+0x78>
 80021a4:	2a04      	cmp	r2, #4
 80021a6:	d16a      	bne.n	800227e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	f7ff ffaf 	bl	800210c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021ae:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80021b0:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c8:	e025      	b.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 80021ca:	2a10      	cmp	r2, #16
 80021cc:	d036      	beq.n	800223c <HAL_TIM_PWM_ConfigChannel+0xbc>
 80021ce:	2a14      	cmp	r2, #20
 80021d0:	d044      	beq.n	800225c <HAL_TIM_PWM_ConfigChannel+0xdc>
 80021d2:	2a0c      	cmp	r2, #12
 80021d4:	d153      	bne.n	800227e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021d6:	6820      	ldr	r0, [r4, #0]
 80021d8:	f7ff fec4 	bl	8001f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021dc:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021de:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e6:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021f6:	e01f      	b.n	8002238 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	f7ff fe3f 	bl	8001e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	692a      	ldr	r2, [r5, #16]
 8002214:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002216:	619a      	str	r2, [r3, #24]
    }
    break;
 8002218:	e031      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	f7ff fe6a 	bl	8001ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	f042 0208 	orr.w	r2, r2, #8
 8002228:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	f022 0204 	bic.w	r2, r2, #4
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002232:	69d9      	ldr	r1, [r3, #28]
 8002234:	692a      	ldr	r2, [r5, #16]
 8002236:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002238:	61da      	str	r2, [r3, #28]
    }
    break;
 800223a:	e020      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800223c:	6820      	ldr	r0, [r4, #0]
 800223e:	f7ff febd 	bl	8001fbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800224c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002256:	692a      	ldr	r2, [r5, #16]
 8002258:	430a      	orrs	r2, r1
 800225a:	e00f      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	f7ff fed9 	bl	8002014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002262:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002264:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800226e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002278:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800227c:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800227e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002280:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002282:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002286:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800228a:	bd38      	pop	{r3, r4, r5, pc}

0800228c <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800228c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800228e:	2301      	movs	r3, #1
 8002290:	6a04      	ldr	r4, [r0, #32]
 8002292:	408b      	lsls	r3, r1
 8002294:	ea24 0303 	bic.w	r3, r4, r3
 8002298:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800229a:	6a03      	ldr	r3, [r0, #32]
 800229c:	408a      	lsls	r2, r1
 800229e:	ea42 0103 	orr.w	r1, r2, r3
 80022a2:	6201      	str	r1, [r0, #32]
 80022a4:	bd10      	pop	{r4, pc}
	...

080022a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6800      	ldr	r0, [r0, #0]
 80022b0:	f7ff ffec 	bl	800228c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_TIM_PWM_Stop+0x68>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_PWM_Stop+0x24>
 80022bc:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <HAL_TIM_PWM_Stop+0x24>
 80022c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10d      	bne.n	80022e8 <HAL_TIM_PWM_Stop+0x40>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80022cc:	6a19      	ldr	r1, [r3, #32]
 80022ce:	f241 1211 	movw	r2, #4369	; 0x1111
 80022d2:	400a      	ands	r2, r1
 80022d4:	b942      	cbnz	r2, 80022e8 <HAL_TIM_PWM_Stop+0x40>
 80022d6:	6a19      	ldr	r1, [r3, #32]
 80022d8:	f240 4244 	movw	r2, #1092	; 0x444
 80022dc:	400a      	ands	r2, r1
 80022de:	b91a      	cbnz	r2, 80022e8 <HAL_TIM_PWM_Stop+0x40>
 80022e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022e8:	6a19      	ldr	r1, [r3, #32]
 80022ea:	f241 1211 	movw	r2, #4369	; 0x1111
 80022ee:	400a      	ands	r2, r1
 80022f0:	b942      	cbnz	r2, 8002304 <HAL_TIM_PWM_Stop+0x5c>
 80022f2:	6a19      	ldr	r1, [r3, #32]
 80022f4:	f240 4244 	movw	r2, #1092	; 0x444
 80022f8:	400a      	ands	r2, r1
 80022fa:	b91a      	cbnz	r2, 8002304 <HAL_TIM_PWM_Stop+0x5c>
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002304:	2301      	movs	r3, #1
 8002306:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 800230a:	2000      	movs	r0, #0
 800230c:	bd10      	pop	{r4, pc}
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00

08002314 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002314:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002318:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800231a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800231c:	d018      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800231e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002320:	4c0c      	ldr	r4, [pc, #48]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002322:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002326:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002328:	bf02      	ittt	eq
 800232a:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800232c:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002330:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002332:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002334:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800233a:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800233c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002340:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002342:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002344:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002346:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002348:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 800234c:	4618      	mov	r0, r3
 800234e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002350:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	40012c00 	.word	0x40012c00

08002358 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002358:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800235c:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800235e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002360:	d034      	beq.n	80023cc <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002362:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002364:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	688b      	ldr	r3, [r1, #8]
 800236c:	4313      	orrs	r3, r2
 800236e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002372:	684b      	ldr	r3, [r1, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800237a:	680b      	ldr	r3, [r1, #0]
 800237c:	4313      	orrs	r3, r2
 800237e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002382:	690b      	ldr	r3, [r1, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800238a:	694b      	ldr	r3, [r1, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002390:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002394:	431a      	orrs	r2, r3
 8002396:	698b      	ldr	r3, [r1, #24]
 8002398:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800239c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 80023a2:	4294      	cmp	r4, r2
 80023a4:	d10c      	bne.n	80023c0 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023a6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80023a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023ac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80023b0:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023bc:	6a0b      	ldr	r3, [r1, #32]
 80023be:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80023c0:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80023c2:	2300      	movs	r3, #0
 80023c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023cc:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80023ce:	bd10      	pop	{r4, pc}
 80023d0:	40012c00 	.word	0x40012c00

080023d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023d8:	6805      	ldr	r5, [r0, #0]
 80023da:	6923      	ldr	r3, [r4, #16]
 80023dc:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023de:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023e0:	6828      	ldr	r0, [r5, #0]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	6963      	ldr	r3, [r4, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	ea43 0201 	orr.w	r2, r3, r1
 80023ec:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <UART_SetConfig+0x210>)
 80023ee:	4003      	ands	r3, r0
 80023f0:	4313      	orrs	r3, r2
 80023f2:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f4:	686b      	ldr	r3, [r5, #4]
 80023f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023fa:	68e3      	ldr	r3, [r4, #12]
 80023fc:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023fe:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002402:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002404:	bf18      	it	ne
 8002406:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002408:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800240a:	bf18      	it	ne
 800240c:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800240e:	68aa      	ldr	r2, [r5, #8]
 8002410:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002414:	4313      	orrs	r3, r2
 8002416:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <UART_SetConfig+0x218>)
 800241a:	429d      	cmp	r5, r3
 800241c:	d107      	bne.n	800242e <UART_SetConfig+0x5a>
 800241e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002422:	4a73      	ldr	r2, [pc, #460]	; (80025f0 <UART_SetConfig+0x21c>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	e009      	b.n	8002442 <UART_SetConfig+0x6e>
 800242e:	4b71      	ldr	r3, [pc, #452]	; (80025f4 <UART_SetConfig+0x220>)
 8002430:	429d      	cmp	r5, r3
 8002432:	d10b      	bne.n	800244c <UART_SetConfig+0x78>
 8002434:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002438:	4a6f      	ldr	r2, [pc, #444]	; (80025f8 <UART_SetConfig+0x224>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	d065      	beq.n	8002516 <UART_SetConfig+0x142>
 800244a:	e099      	b.n	8002580 <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800244c:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <UART_SetConfig+0x214>)
 800244e:	429d      	cmp	r5, r3
 8002450:	f040 8089 	bne.w	8002566 <UART_SetConfig+0x192>
 8002454:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002458:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800245c:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002460:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002464:	d014      	beq.n	8002490 <UART_SetConfig+0xbc>
 8002466:	d805      	bhi.n	8002474 <UART_SetConfig+0xa0>
 8002468:	2d00      	cmp	r5, #0
 800246a:	f040 80b7 	bne.w	80025dc <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800246e:	f7ff fadb 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
      break;
 8002472:	e010      	b.n	8002496 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002474:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002478:	d007      	beq.n	800248a <UART_SetConfig+0xb6>
 800247a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800247e:	f040 80ad 	bne.w	80025dc <UART_SetConfig+0x208>
 8002482:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8002484:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002488:	e008      	b.n	800249c <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800248a:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 800248c:	485b      	ldr	r0, [pc, #364]	; (80025fc <UART_SetConfig+0x228>)
 800248e:	e005      	b.n	800249c <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8002490:	f7fe fefc 	bl	800128c <HAL_RCC_GetSysClockFreq>
      break;
 8002494:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8002496:	2800      	cmp	r0, #0
 8002498:	f000 809e 	beq.w	80025d8 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800249c:	6862      	ldr	r2, [r4, #4]
 800249e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80024a2:	4283      	cmp	r3, r0
 80024a4:	f200 809a 	bhi.w	80025dc <UART_SetConfig+0x208>
 80024a8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80024ac:	f200 8096 	bhi.w	80025dc <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 80024b0:	2d08      	cmp	r5, #8
 80024b2:	d827      	bhi.n	8002504 <UART_SetConfig+0x130>
 80024b4:	e8df f005 	tbb	[pc, r5]
 80024b8:	26082605 	.word	0x26082605
 80024bc:	2626260e 	.word	0x2626260e
 80024c0:	1b          	.byte	0x1b
 80024c1:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024c2:	f7ff fab1 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 80024c6:	e007      	b.n	80024d8 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80024c8:	484d      	ldr	r0, [pc, #308]	; (8002600 <UART_SetConfig+0x22c>)
 80024ca:	0855      	lsrs	r5, r2, #1
 80024cc:	2300      	movs	r3, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	1940      	adds	r0, r0, r5
 80024d2:	e011      	b.n	80024f8 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024d4:	f7fe feda 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80024d8:	6862      	ldr	r2, [r4, #4]
 80024da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024de:	0856      	lsrs	r6, r2, #1
 80024e0:	2700      	movs	r7, #0
 80024e2:	fbe1 6700 	umlal	r6, r7, r1, r0
 80024e6:	2300      	movs	r3, #0
 80024e8:	4630      	mov	r0, r6
 80024ea:	4639      	mov	r1, r7
 80024ec:	e006      	b.n	80024fc <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80024ee:	0850      	lsrs	r0, r2, #1
 80024f0:	2100      	movs	r1, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80024f8:	f141 0100 	adc.w	r1, r1, #0
 80024fc:	f7fe fb50 	bl	8000ba0 <__aeabi_uldivmod>
          break;
 8002500:	2200      	movs	r2, #0
 8002502:	e000      	b.n	8002506 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8002504:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002506:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <UART_SetConfig+0x230>)
 8002508:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800250c:	4299      	cmp	r1, r3
 800250e:	d865      	bhi.n	80025dc <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	60d8      	str	r0, [r3, #12]
 8002514:	e063      	b.n	80025de <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002516:	2b08      	cmp	r3, #8
 8002518:	d828      	bhi.n	800256c <UART_SetConfig+0x198>
 800251a:	e8df f003 	tbb	[pc, r3]
 800251e:	0805      	.short	0x0805
 8002520:	2712270b 	.word	0x2712270b
 8002524:	2727      	.short	0x2727
 8002526:	1b          	.byte	0x1b
 8002527:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002528:	f7ff fa7e 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 800252c:	e00b      	b.n	8002546 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800252e:	f7ff fa93 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8002532:	e008      	b.n	8002546 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002534:	6860      	ldr	r0, [r4, #4]
 8002536:	0842      	lsrs	r2, r0, #1
 8002538:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 800253c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002540:	e00c      	b.n	800255c <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002542:	f7fe fea3 	bl	800128c <HAL_RCC_GetSysClockFreq>
 8002546:	6863      	ldr	r3, [r4, #4]
 8002548:	085a      	lsrs	r2, r3, #1
 800254a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	e005      	b.n	8002560 <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002554:	6860      	ldr	r0, [r4, #4]
 8002556:	0843      	lsrs	r3, r0, #1
 8002558:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800255c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002560:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002562:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002564:	e004      	b.n	8002570 <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800256a:	d137      	bne.n	80025dc <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800256c:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800256e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002570:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002574:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002576:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 800257a:	4303      	orrs	r3, r0
 800257c:	60cb      	str	r3, [r1, #12]
 800257e:	e02e      	b.n	80025de <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8002580:	2b08      	cmp	r3, #8
 8002582:	d82b      	bhi.n	80025dc <UART_SetConfig+0x208>
 8002584:	e8df f003 	tbb	[pc, r3]
 8002588:	2a0b0805 	.word	0x2a0b0805
 800258c:	2a2a2a14 	.word	0x2a2a2a14
 8002590:	1e          	.byte	0x1e
 8002591:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002592:	f7ff fa49 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8002596:	e00d      	b.n	80025b4 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002598:	f7ff fa5e 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 800259c:	e00a      	b.n	80025b4 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800259e:	6861      	ldr	r1, [r4, #4]
 80025a0:	084a      	lsrs	r2, r1, #1
 80025a2:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 80025a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	e00f      	b.n	80025d0 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025b0:	f7fe fe6c 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80025b4:	6863      	ldr	r3, [r4, #4]
 80025b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80025ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80025be:	b280      	uxth	r0, r0
 80025c0:	60e8      	str	r0, [r5, #12]
 80025c2:	e007      	b.n	80025d4 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	0853      	lsrs	r3, r2, #1
 80025c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d4:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 80025d6:	e002      	b.n	80025de <UART_SetConfig+0x20a>
 80025d8:	4602      	mov	r2, r0
 80025da:	e000      	b.n	80025de <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80025dc:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 80025de:	4610      	mov	r0, r2
 80025e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	efff69f3 	.word	0xefff69f3
 80025e8:	40008000 	.word	0x40008000
 80025ec:	40013800 	.word	0x40013800
 80025f0:	08007cf0 	.word	0x08007cf0
 80025f4:	40004400 	.word	0x40004400
 80025f8:	08007cf4 	.word	0x08007cf4
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	f4240000 	.word	0xf4240000
 8002604:	000ffcff 	.word	0x000ffcff

08002608 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002608:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800260a:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800260c:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800260e:	d506      	bpl.n	800261e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002610:	6804      	ldr	r4, [r0, #0]
 8002612:	6862      	ldr	r2, [r4, #4]
 8002614:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002618:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800261a:	430a      	orrs	r2, r1
 800261c:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800261e:	079c      	lsls	r4, r3, #30
 8002620:	d506      	bpl.n	8002630 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002622:	6804      	ldr	r4, [r0, #0]
 8002624:	6862      	ldr	r2, [r4, #4]
 8002626:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800262a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800262c:	430a      	orrs	r2, r1
 800262e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002630:	0759      	lsls	r1, r3, #29
 8002632:	d506      	bpl.n	8002642 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002634:	6804      	ldr	r4, [r0, #0]
 8002636:	6862      	ldr	r2, [r4, #4]
 8002638:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800263c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800263e:	430a      	orrs	r2, r1
 8002640:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002642:	071a      	lsls	r2, r3, #28
 8002644:	d506      	bpl.n	8002654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002646:	6804      	ldr	r4, [r0, #0]
 8002648:	6862      	ldr	r2, [r4, #4]
 800264a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800264e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002650:	430a      	orrs	r2, r1
 8002652:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002654:	06dc      	lsls	r4, r3, #27
 8002656:	d506      	bpl.n	8002666 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002658:	6804      	ldr	r4, [r0, #0]
 800265a:	68a2      	ldr	r2, [r4, #8]
 800265c:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002660:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002662:	430a      	orrs	r2, r1
 8002664:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002666:	0699      	lsls	r1, r3, #26
 8002668:	d506      	bpl.n	8002678 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800266a:	6804      	ldr	r4, [r0, #0]
 800266c:	68a2      	ldr	r2, [r4, #8]
 800266e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002672:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002674:	430a      	orrs	r2, r1
 8002676:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002678:	065a      	lsls	r2, r3, #25
 800267a:	d50f      	bpl.n	800269c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800267c:	6801      	ldr	r1, [r0, #0]
 800267e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002680:	684a      	ldr	r2, [r1, #4]
 8002682:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002686:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002688:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800268c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800268e:	d105      	bne.n	800269c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002690:	684a      	ldr	r2, [r1, #4]
 8002692:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002696:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002698:	4322      	orrs	r2, r4
 800269a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	d506      	bpl.n	80026ae <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026a0:	6801      	ldr	r1, [r0, #0]
 80026a2:	684b      	ldr	r3, [r1, #4]
 80026a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80026a8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b4:	9d06      	ldr	r5, [sp, #24]
 80026b6:	4604      	mov	r4, r0
 80026b8:	460f      	mov	r7, r1
 80026ba:	4616      	mov	r6, r2
 80026bc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026be:	6821      	ldr	r1, [r4, #0]
 80026c0:	69ca      	ldr	r2, [r1, #28]
 80026c2:	ea37 0302 	bics.w	r3, r7, r2
 80026c6:	bf0c      	ite	eq
 80026c8:	2201      	moveq	r2, #1
 80026ca:	2200      	movne	r2, #0
 80026cc:	42b2      	cmp	r2, r6
 80026ce:	d11d      	bne.n	800270c <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80026d0:	1c6b      	adds	r3, r5, #1
 80026d2:	d0f5      	beq.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026d4:	b99d      	cbnz	r5, 80026fe <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80026e8:	2320      	movs	r3, #32
 80026ea:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80026ee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026f2:	2300      	movs	r3, #0
 80026f4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80026f8:	2003      	movs	r0, #3
 80026fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026fe:	f7fe fc03 	bl	8000f08 <HAL_GetTick>
 8002702:	ebc8 0000 	rsb	r0, r8, r0
 8002706:	4285      	cmp	r5, r0
 8002708:	d2d9      	bcs.n	80026be <UART_WaitOnFlagUntilTimeout+0xe>
 800270a:	e7e4      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800270c:	2000      	movs	r0, #0
}
 800270e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002712 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002712:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002716:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002718:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800271c:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002724:	d14b      	bne.n	80027be <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8002726:	2900      	cmp	r1, #0
 8002728:	d047      	beq.n	80027ba <HAL_UART_Transmit+0xa8>
 800272a:	2a00      	cmp	r2, #0
 800272c:	d045      	beq.n	80027ba <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002732:	2b01      	cmp	r3, #1
 8002734:	d043      	beq.n	80027be <HAL_UART_Transmit+0xac>
 8002736:	2301      	movs	r3, #1
 8002738:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273c:	2300      	movs	r3, #0
 800273e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002740:	2321      	movs	r3, #33	; 0x21
 8002742:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fbdf 	bl	8000f08 <HAL_GetTick>

    huart->TxXferSize = Size;
 800274a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800274e:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002750:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8002754:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002758:	b292      	uxth	r2, r2
 800275a:	b302      	cbz	r2, 800279e <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 800275c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8002762:	3b01      	subs	r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276a:	2200      	movs	r2, #0
 800276c:	4633      	mov	r3, r6
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff ff9d 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 8002776:	b108      	cbz	r0, 800277c <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
 800277a:	e021      	b.n	80027c0 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68a3      	ldr	r3, [r4, #8]
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d107      	bne.n	8002796 <HAL_UART_Transmit+0x84>
 8002786:	6923      	ldr	r3, [r4, #16]
 8002788:	b92b      	cbnz	r3, 8002796 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800278a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8002794:	e7de      	b.n	8002754 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8002796:	782b      	ldrb	r3, [r5, #0]
 8002798:	8513      	strh	r3, [r2, #40]	; 0x28
 800279a:	3501      	adds	r5, #1
 800279c:	e7da      	b.n	8002754 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	9700      	str	r7, [sp, #0]
 80027a0:	4633      	mov	r3, r6
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ff83 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d1e4      	bne.n	8002778 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ae:	2320      	movs	r3, #32
 80027b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027b4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80027b8:	e002      	b.n	80027c0 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80027be:	2002      	movs	r0, #2
  }
}
 80027c0:	b002      	add	sp, #8
 80027c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027c6 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80027ca:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80027cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80027d0:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	4604      	mov	r4, r0
 80027d4:	460d      	mov	r5, r1
 80027d6:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80027d8:	d15d      	bne.n	8002896 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 80027da:	2900      	cmp	r1, #0
 80027dc:	d059      	beq.n	8002892 <HAL_UART_Receive+0xcc>
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d057      	beq.n	8002892 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027e2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d055      	beq.n	8002896 <HAL_UART_Receive+0xd0>
 80027ea:	2301      	movs	r3, #1
 80027ec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027f4:	2322      	movs	r3, #34	; 0x22
 80027f6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80027fa:	f7fe fb85 	bl	8000f08 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027fe:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8002800:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002808:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 800280a:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800280e:	d104      	bne.n	800281a <HAL_UART_Receive+0x54>
 8002810:	6923      	ldr	r3, [r4, #16]
 8002812:	b92b      	cbnz	r3, 8002820 <HAL_UART_Receive+0x5a>
 8002814:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002818:	e00d      	b.n	8002836 <HAL_UART_Receive+0x70>
 800281a:	b92b      	cbnz	r3, 8002828 <HAL_UART_Receive+0x62>
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	b90b      	cbnz	r3, 8002824 <HAL_UART_Receive+0x5e>
 8002820:	23ff      	movs	r3, #255	; 0xff
 8002822:	e008      	b.n	8002836 <HAL_UART_Receive+0x70>
 8002824:	237f      	movs	r3, #127	; 0x7f
 8002826:	e006      	b.n	8002836 <HAL_UART_Receive+0x70>
 8002828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282c:	d105      	bne.n	800283a <HAL_UART_Receive+0x74>
 800282e:	6923      	ldr	r3, [r4, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f7      	beq.n	8002824 <HAL_UART_Receive+0x5e>
 8002834:	233f      	movs	r3, #63	; 0x3f
 8002836:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800283a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 800283e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002842:	b280      	uxth	r0, r0
 8002844:	b1f8      	cbz	r0, 8002886 <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8002846:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	2200      	movs	r2, #0
 8002858:	463b      	mov	r3, r7
 800285a:	2120      	movs	r1, #32
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff ff27 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 8002862:	b9d0      	cbnz	r0, 800289a <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	68a3      	ldr	r3, [r4, #8]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	d106      	bne.n	800287c <HAL_UART_Receive+0xb6>
 800286e:	6922      	ldr	r2, [r4, #16]
 8002870:	b922      	cbnz	r2, 800287c <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002874:	4033      	ands	r3, r6
 8002876:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 800287a:	e7e0      	b.n	800283e <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800287c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800287e:	4033      	ands	r3, r6
 8002880:	702b      	strb	r3, [r5, #0]
 8002882:	3501      	adds	r5, #1
 8002884:	e7db      	b.n	800283e <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002886:	2320      	movs	r3, #32
 8002888:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800288c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002890:	e004      	b.n	800289c <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8002892:	2001      	movs	r0, #1
 8002894:	e002      	b.n	800289c <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002896:	2002      	movs	r0, #2
 8002898:	e000      	b.n	800289c <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800289a:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800289c:	b002      	add	sp, #8
 800289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028a4:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	2600      	movs	r6, #0
 80028a8:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028aa:	f7fe fb2d 	bl	8000f08 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028b4:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028b6:	d404      	bmi.n	80028c2 <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	075b      	lsls	r3, r3, #29
 80028be:	d51a      	bpl.n	80028f6 <UART_CheckIdleState+0x54>
 80028c0:	e00d      	b.n	80028de <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4632      	mov	r2, r6
 80028ca:	4603      	mov	r3, r0
 80028cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff feed 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d0ee      	beq.n	80028b8 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028da:	2003      	movs	r0, #3
 80028dc:	e013      	b.n	8002906 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	462b      	mov	r3, r5
 80028e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff fedf 	bl	80026b0 <UART_WaitOnFlagUntilTimeout>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d1f1      	bne.n	80028da <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80028f6:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028f8:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80028fa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028fe:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002906:	b002      	add	sp, #8
 8002908:	bd70      	pop	{r4, r5, r6, pc}

0800290a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800290a:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800290c:	4604      	mov	r4, r0
 800290e:	b360      	cbz	r0, 800296a <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002910:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002914:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002918:	b91b      	cbnz	r3, 8002922 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	f000 fb91 	bl	8003044 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002922:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	2324      	movs	r3, #36	; 0x24
 8002926:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002932:	4620      	mov	r0, r4
 8002934:	f7ff fd4e 	bl	80023d4 <UART_SetConfig>
 8002938:	2801      	cmp	r0, #1
 800293a:	d016      	beq.n	800296a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800293c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800293e:	b113      	cbz	r3, 8002946 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fe61 	bl	8002608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002956:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295e:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002960:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002966:	f7ff bf9c 	b.w	80028a2 <UART_CheckIdleState>
}
 800296a:	2001      	movs	r0, #1
 800296c:	bd10      	pop	{r4, pc}

0800296e <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	f7fe bc06 	b.w	8001180 <HAL_GPIO_WritePin>

08002974 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	f7fe bc03 	b.w	8001180 <HAL_GPIO_WritePin>
	...

0800297c <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 800297c:	b510      	push	{r4, lr}
 800297e:	4604      	mov	r4, r0
	if (data & 0x10) {
 8002980:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002982:	f04f 0110 	mov.w	r1, #16
 8002986:	481a      	ldr	r0, [pc, #104]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8002988:	d502      	bpl.n	8002990 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800298a:	f7ff fff0 	bl	800296e <GPIO_SetBits>
 800298e:	e001      	b.n	8002994 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002990:	f7ff fff0 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8002994:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002996:	f04f 0120 	mov.w	r1, #32
 800299a:	4815      	ldr	r0, [pc, #84]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 800299c:	d502      	bpl.n	80029a4 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800299e:	f7ff ffe6 	bl	800296e <GPIO_SetBits>
 80029a2:	e001      	b.n	80029a8 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80029a4:	f7ff ffe6 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80029a8:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80029aa:	f04f 0140 	mov.w	r1, #64	; 0x40
 80029ae:	4810      	ldr	r0, [pc, #64]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 80029b0:	d502      	bpl.n	80029b8 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80029b2:	f7ff ffdc 	bl	800296e <GPIO_SetBits>
 80029b6:	e001      	b.n	80029bc <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80029b8:	f7ff ffdc 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 80029bc:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80029be:	f04f 0180 	mov.w	r1, #128	; 0x80
 80029c2:	480b      	ldr	r0, [pc, #44]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 80029c4:	d502      	bpl.n	80029cc <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80029c6:	f7ff ffd2 	bl	800296e <GPIO_SetBits>
 80029ca:	e001      	b.n	80029d0 <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80029cc:	f7ff ffd2 	bl	8002974 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80029d0:	2201      	movs	r2, #1
 80029d2:	2102      	movs	r1, #2
 80029d4:	4806      	ldr	r0, [pc, #24]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
 80029d6:	f7fe fbd3 	bl	8001180 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80029da:	2002      	movs	r0, #2
 80029dc:	f7fe fa9a 	bl	8000f14 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80029e0:	2200      	movs	r2, #0
 80029e2:	2102      	movs	r1, #2
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <hd44780_wr_hi_nibble+0x74>)
}
 80029e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80029ea:	f7fe bbc9 	b.w	8001180 <HAL_GPIO_WritePin>
 80029ee:	bf00      	nop
 80029f0:	48000400 	.word	0x48000400

080029f4 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4604      	mov	r4, r0
	if (data & 0x01) {
 80029f8:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80029fa:	f04f 0110 	mov.w	r1, #16
 80029fe:	481a      	ldr	r0, [pc, #104]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 8002a00:	d502      	bpl.n	8002a08 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002a02:	f7ff ffb4 	bl	800296e <GPIO_SetBits>
 8002a06:	e001      	b.n	8002a0c <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002a08:	f7ff ffb4 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8002a0c:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a0e:	f04f 0120 	mov.w	r1, #32
 8002a12:	4815      	ldr	r0, [pc, #84]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 8002a14:	d502      	bpl.n	8002a1c <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a16:	f7ff ffaa 	bl	800296e <GPIO_SetBits>
 8002a1a:	e001      	b.n	8002a20 <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a1c:	f7ff ffaa 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8002a20:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002a22:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002a26:	4810      	ldr	r0, [pc, #64]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 8002a28:	d502      	bpl.n	8002a30 <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002a2a:	f7ff ffa0 	bl	800296e <GPIO_SetBits>
 8002a2e:	e001      	b.n	8002a34 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002a30:	f7ff ffa0 	bl	8002974 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8002a34:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002a36:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 8002a3c:	d502      	bpl.n	8002a44 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002a3e:	f7ff ff96 	bl	800296e <GPIO_SetBits>
 8002a42:	e001      	b.n	8002a48 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002a44:	f7ff ff96 	bl	8002974 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4806      	ldr	r0, [pc, #24]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
 8002a4e:	f7fe fb97 	bl	8001180 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7fe fa5e 	bl	8000f14 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <hd44780_wr_lo_nibble+0x74>)
}
 8002a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002a62:	f7fe bb8d 	b.w	8001180 <HAL_GPIO_WritePin>
 8002a66:	bf00      	nop
 8002a68:	48000400 	.word	0x48000400

08002a6c <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8002a70:	f7ff ff84 	bl	800297c <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8002a74:	4620      	mov	r0, r4
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 8002a7a:	f7ff bfbb 	b.w	80029f4 <hd44780_wr_lo_nibble>
	...

08002a80 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8002a80:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8002a82:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8002a84:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8002a86:	2101      	movs	r1, #1
 8002a88:	4803      	ldr	r0, [pc, #12]	; (8002a98 <hd44780_wr_cmd+0x18>)
 8002a8a:	f7fe fb79 	bl	8001180 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8002a8e:	4620      	mov	r0, r4
}
 8002a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 8002a94:	f7ff bfea 	b.w	8002a6c <hd44780_write>
 8002a98:	48000400 	.word	0x48000400

08002a9c <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8002a9c:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8002a9e:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 8002aa0:	4604      	mov	r4, r0
	hd44780_RS_On();
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <hd44780_wr_data+0x18>)
 8002aa6:	f7fe fb6b 	bl	8001180 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8002aaa:	4620      	mov	r0, r4
}
 8002aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 8002ab0:	f7ff bfdc 	b.w	8002a6c <hd44780_write>
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8002aba:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002abe:	4d29      	ldr	r5, [pc, #164]	; (8002b64 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002ac0:	f042 0202 	orr.w	r2, r2, #2
 8002ac4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8002ac8:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002ad2:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002ad6:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002ad8:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002ada:	a901      	add	r1, sp, #4
 8002adc:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002ade:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002ae0:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002ae2:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002ae4:	f7fe fa90 	bl	8001008 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002ae8:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002aea:	a901      	add	r1, sp, #4
 8002aec:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002aee:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002af2:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002af4:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002af6:	f7fe fa87 	bl	8001008 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8002afa:	4628      	mov	r0, r5
 8002afc:	2200      	movs	r2, #0
 8002afe:	2102      	movs	r1, #2
 8002b00:	f7fe fb3e 	bl	8001180 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8002b04:	4621      	mov	r1, r4
 8002b06:	4628      	mov	r0, r5
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f7fe fb39 	bl	8001180 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2108      	movs	r1, #8
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7fe fb34 	bl	8001180 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8002b18:	2010      	movs	r0, #16
 8002b1a:	f7fe f9fb 	bl	8000f14 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002b1e:	2030      	movs	r0, #48	; 0x30
 8002b20:	f7ff ff2c 	bl	800297c <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8002b24:	2005      	movs	r0, #5
 8002b26:	f7fe f9f5 	bl	8000f14 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002b2a:	2030      	movs	r0, #48	; 0x30
 8002b2c:	f7ff ff26 	bl	800297c <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fe f9ef 	bl	8000f14 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002b36:	2030      	movs	r0, #48	; 0x30
 8002b38:	f7ff ff20 	bl	800297c <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8002b3c:	2020      	movs	r0, #32
 8002b3e:	f7ff ff1d 	bl	800297c <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8002b42:	2028      	movs	r0, #40	; 0x28
 8002b44:	f7ff ff9c 	bl	8002a80 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8002b48:	200c      	movs	r0, #12
 8002b4a:	f7ff ff99 	bl	8002a80 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff ff96 	bl	8002a80 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f7ff ff93 	bl	8002a80 <hd44780_wr_cmd>

}
 8002b5a:	b006      	add	sp, #24
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	48000400 	.word	0x48000400

08002b68 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 8002b68:	2901      	cmp	r1, #1
 8002b6a:	bf88      	it	hi
 8002b6c:	2100      	movhi	r1, #0
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <HD44780_GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8002b70:	5c5b      	ldrb	r3, [r3, r1]
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;
 8002b72:	280f      	cmp	r0, #15
 8002b74:	bf88      	it	hi
 8002b76:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8002b78:	4418      	add	r0, r3
 8002b7a:	b2c0      	uxtb	r0, r0
 8002b7c:	f7ff bf80 	b.w	8002a80 <hd44780_wr_cmd>
 8002b80:	08007d01 	.word	0x08007d01

08002b84 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002b84:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8002b86:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002b88:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8002b8a:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8002b8c:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 8002b8e:	5ce0      	ldrb	r0, [r4, r3]
 8002b90:	f7ff ff84 	bl	8002a9c <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8002b94:	9b01      	ldr	r3, [sp, #4]
 8002b96:	3301      	adds	r3, #1
 8002b98:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8002b9a:	9b01      	ldr	r3, [sp, #4]
 8002b9c:	5ce3      	ldrb	r3, [r4, r3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f4      	bne.n	8002b8c <HD44780_PutStr+0x8>
}
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd10      	pop	{r4, pc}

08002ba6 <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7ff bf6a 	b.w	8002a80 <hd44780_wr_cmd>

08002bac <deBounceInit>:
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8002bac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 8002bae:	280f      	cmp	r0, #15
 8002bb0:	d831      	bhi.n	8002c16 <deBounceInit+0x6a>
 8002bb2:	e8df f000 	tbb	[pc, r0]
 8002bb6:	0a08      	.short	0x0a08
 8002bb8:	12100e0c 	.word	0x12100e0c
 8002bbc:	1b181614 	.word	0x1b181614
 8002bc0:	2724211e 	.word	0x2724211e
 8002bc4:	2d2a      	.short	0x2d2a
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e024      	b.n	8002c14 <deBounceInit+0x68>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e022      	b.n	8002c14 <deBounceInit+0x68>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e020      	b.n	8002c14 <deBounceInit+0x68>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e01e      	b.n	8002c14 <deBounceInit+0x68>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	e01c      	b.n	8002c14 <deBounceInit+0x68>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e01a      	b.n	8002c14 <deBounceInit+0x68>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002bde:	2340      	movs	r3, #64	; 0x40
 8002be0:	e018      	b.n	8002c14 <deBounceInit+0x68>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	e016      	b.n	8002c14 <deBounceInit+0x68>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bea:	e013      	b.n	8002c14 <deBounceInit+0x68>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf0:	e010      	b.n	8002c14 <deBounceInit+0x68>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf6:	e00d      	b.n	8002c14 <deBounceInit+0x68>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bfc:	e00a      	b.n	8002c14 <deBounceInit+0x68>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c02:	e007      	b.n	8002c14 <deBounceInit+0x68>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c08:	e004      	b.n	8002c14 <deBounceInit+0x68>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002c0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c0e:	e001      	b.n	8002c14 <deBounceInit+0x68>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c14:	9301      	str	r3, [sp, #4]
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c16:	2300      	movs	r3, #0
 8002c18:	9302      	str	r3, [sp, #8]
	switch (mode)
 8002c1a:	b11a      	cbz	r2, 8002c24 <deBounceInit+0x78>
 8002c1c:	2a01      	cmp	r2, #1
 8002c1e:	d103      	bne.n	8002c28 <deBounceInit+0x7c>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8002c20:	9203      	str	r2, [sp, #12]
 8002c22:	e001      	b.n	8002c28 <deBounceInit+0x7c>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	switch (mode)
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 8002c24:	2302      	movs	r3, #2
 8002c26:	9303      	str	r3, [sp, #12]
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
	}
	switch (port)
 8002c28:	2942      	cmp	r1, #66	; 0x42
 8002c2a:	d007      	beq.n	8002c3c <deBounceInit+0x90>
 8002c2c:	2943      	cmp	r1, #67	; 0x43
 8002c2e:	d008      	beq.n	8002c42 <deBounceInit+0x96>
 8002c30:	2941      	cmp	r1, #65	; 0x41
 8002c32:	d10a      	bne.n	8002c4a <deBounceInit+0x9e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8002c34:	a901      	add	r1, sp, #4
 8002c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3a:	e004      	b.n	8002c46 <deBounceInit+0x9a>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8002c3c:	a901      	add	r1, sp, #4
 8002c3e:	4807      	ldr	r0, [pc, #28]	; (8002c5c <deBounceInit+0xb0>)
 8002c40:	e001      	b.n	8002c46 <deBounceInit+0x9a>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8002c42:	4807      	ldr	r0, [pc, #28]	; (8002c60 <deBounceInit+0xb4>)
 8002c44:	a901      	add	r1, sp, #4
 8002c46:	f7fe f9df 	bl	8001008 <HAL_GPIO_Init>
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	a901      	add	r1, sp, #4
 8002c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c50:	f7fe f9da 	bl	8001008 <HAL_GPIO_Init>
}
 8002c54:	b007      	add	sp, #28
 8002c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c5a:	bf00      	nop
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	48000800 	.word	0x48000800

08002c64 <startUpLCDSplashScreen>:
//                 on line 1 of the display and
//				 : Disappears
// PARAMETERS    : None
// RETURNS       : nothing
void startUpLCDSplashScreen(void)
{
 8002c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char stringBuffer[16] =
 8002c66:	2210      	movs	r2, #16
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4668      	mov	r0, sp
 8002c6c:	f000 fafa 	bl	8003264 <memset>
	{ 0 };
	HD44780_GotoXY(0, 0);
 8002c70:	2100      	movs	r1, #0
 8002c72:	4608      	mov	r0, r1
 8002c74:	f7ff ff78 	bl	8002b68 <HD44780_GotoXY>
	snprintf(stringBuffer, 16, "   GPS Recieve");
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <startUpLCDSplashScreen+0x34>)
 8002c7a:	4668      	mov	r0, sp
 8002c7c:	f000 fb98 	bl	80033b0 <strcpy>
	HD44780_PutStr(stringBuffer);
 8002c80:	4668      	mov	r0, sp
 8002c82:	f7ff ff7f 	bl	8002b84 <HD44780_PutStr>
	HAL_Delay(2000);
 8002c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c8a:	f7fe f943 	bl	8000f14 <HAL_Delay>
	HD44780_ClrScr();
 8002c8e:	f7ff ff8a 	bl	8002ba6 <HD44780_ClrScr>
}
 8002c92:	b005      	add	sp, #20
 8002c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c98:	08007d05 	.word	0x08007d05

08002c9c <pushButtonInit>:
//                   Note: Don't use PA2 as it is connected to VCP TX and you'll
//                   lose printf output ability.
//   PARAMETERS    : None
//   RETURNS       : nothing
void pushButtonInit()
{
 8002c9c:	b508      	push	{r3, lr}
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2141      	movs	r1, #65	; 0x41
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff ff82 	bl	8002bac <deBounceInit>
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4610      	mov	r0, r2
 8002cac:	2141      	movs	r1, #65	; 0x41
 8002cae:	f7ff ff7d 	bl	8002bac <deBounceInit>
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2141      	movs	r1, #65	; 0x41
 8002cb6:	2004      	movs	r0, #4
 8002cb8:	f7ff ff78 	bl	8002bac <deBounceInit>
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2141      	movs	r1, #65	; 0x41
 8002cc0:	2003      	movs	r0, #3
}
 8002cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void pushButtonInit()
{
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002cc6:	f7ff bf71 	b.w	8002bac <deBounceInit>

08002cca <SystemClock_Config>:
	/* USER CODE END 3 */
}//closing brace for main

/** System Clock Configuration **/
void SystemClock_Config(void)
{
 8002cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ccc:	b0ad      	sub	sp, #180	; 0xb4

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002cce:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002cd0:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd2:	2502      	movs	r5, #2
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002cd4:	2610      	movs	r6, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002cd6:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cd8:	2707      	movs	r7, #7
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002cda:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cdc:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002cde:	9606      	str	r6, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ce0:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ce2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce4:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ce6:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002ce8:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 8002cea:	9613      	str	r6, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cec:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cee:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cf0:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	f7fe fb69 	bl	80013c8 <HAL_RCC_OscConfig>
 8002cf6:	b100      	cbz	r0, 8002cfa <SystemClock_Config+0x30>
 8002cf8:	e7fe      	b.n	8002cf8 <SystemClock_Config+0x2e>
		Error_Handler();
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002cfa:	230f      	movs	r3, #15
 8002cfc:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d02:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d04:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002d06:	f44f 63e0 	mov.w	r3, #1792	; 0x700

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002d0e:	9305      	str	r3, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d10:	f7fe fdcc 	bl	80018ac <HAL_RCC_ClockConfig>
 8002d14:	b100      	cbz	r0, 8002d18 <SystemClock_Config+0x4e>
 8002d16:	e7fe      	b.n	8002d16 <SystemClock_Config+0x4c>
	{
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8002d18:	f244 0302 	movw	r3, #16386	; 0x4002
 8002d1c:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d22:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d24:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d26:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d2c:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d2e:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002d30:	961a      	str	r6, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002d32:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d34:	951c      	str	r5, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d36:	951d      	str	r5, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002d38:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d3a:	f7fe ff5d 	bl	8001bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	b100      	cbz	r0, 8002d42 <SystemClock_Config+0x78>
 8002d40:	e7fe      	b.n	8002d40 <SystemClock_Config+0x76>
		Error_Handler();
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d46:	f7fe fa29 	bl	800119c <HAL_PWREx_ControlVoltageScaling>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	b100      	cbz	r0, 8002d50 <SystemClock_Config+0x86>
 8002d4e:	e7fe      	b.n	8002d4e <SystemClock_Config+0x84>
		Error_Handler();
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002d50:	f7fe fe64 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8002d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d5c:	f7fe f92c 	bl	8000fb8 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d60:	2004      	movs	r0, #4
 8002d62:	f7fe f93f 	bl	8000fe4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d66:	4622      	mov	r2, r4
 8002d68:	4621      	mov	r1, r4
 8002d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6e:	f7fe f8ef 	bl	8000f50 <HAL_NVIC_SetPriority>
}
 8002d72:	b02d      	add	sp, #180	; 0xb4
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d78 <main>:
}


/* USER CODE END 0 */
int main(void)
{
 8002d78:	b530      	push	{r4, r5, lr}
 8002d7a:	b099      	sub	sp, #100	; 0x64
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d7c:	f7fe f8b0 	bl	8000ee0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002d80:	f7ff ffa3 	bl	8002cca <SystemClock_Config>
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <main+0x1b0>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d86:	4869      	ldr	r0, [pc, #420]	; (8002f2c <main+0x1b4>)
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002d88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d8a:	f042 0204 	orr.w	r2, r2, #4
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d92:	f002 0204 	and.w	r2, r2, #4
 8002d96:	9200      	str	r2, [sp, #0]
 8002d98:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002da4:	f002 0201 	and.w	r2, r2, #1
 8002da8:	9201      	str	r2, [sp, #4]
 8002daa:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dae:	f042 0202 	orr.w	r2, r2, #2
 8002db2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	f003 0302 	and.w	r3, r3, #2
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002dbc:	9302      	str	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002dbe:	2108      	movs	r1, #8
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002dc0:	9b02      	ldr	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002dc2:	f7fe f9dd 	bl	8001180 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dc6:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2400      	movs	r4, #0

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dca:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	4857      	ldr	r0, [pc, #348]	; (8002f2c <main+0x1b4>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	940f      	str	r4, [sp, #60]	; 0x3c
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd0:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd2:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	f7fe f916 	bl	8001008 <HAL_GPIO_Init>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
 8002ddc:	4854      	ldr	r0, [pc, #336]	; (8002f30 <main+0x1b8>)
	huart2.Init.BaudRate = 9600;
 8002dde:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <main+0x1bc>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002de0:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 8002de2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002de6:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002dea:	230c      	movs	r3, #12
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002dec:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002dee:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002df0:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df2:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df4:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df6:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df8:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dfa:	f7ff fd86 	bl	800290a <HAL_UART_Init>
 8002dfe:	b100      	cbz	r0, 8002e02 <main+0x8a>
 8002e00:	e7fe      	b.n	8002e00 <main+0x88>

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 8002e02:	4c4d      	ldr	r4, [pc, #308]	; (8002f38 <main+0x1c0>)
 8002e04:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <main+0x1c4>)
 8002e06:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 0;
 8002e08:	6060      	str	r0, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0a:	60a0      	str	r0, [r4, #8]
	htim1.Init.Period = 9090;
 8002e0c:	f242 3382 	movw	r3, #9090	; 0x2382
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e10:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8002e12:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e14:	4620      	mov	r0, r4
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
 8002e16:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e18:	f7ff f95e 	bl	80020d8 <HAL_TIM_PWM_Init>
 8002e1c:	b100      	cbz	r0, 8002e20 <main+0xa8>
 8002e1e:	e7fe      	b.n	8002e1e <main+0xa6>
	{
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e20:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e22:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e24:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e26:	a903      	add	r1, sp, #12
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff fa73 	bl	8002314 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2e:	4605      	mov	r5, r0
 8002e30:	b100      	cbz	r0, 8002e34 <main+0xbc>
 8002e32:	e7fe      	b.n	8002e32 <main+0xba>
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e34:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e36:	4601      	mov	r1, r0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e38:	9306      	str	r3, [sp, #24]
	sConfigOC.Pulse = 4045;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e3a:	9008      	str	r0, [sp, #32]
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 8002e3c:	f640 73cd 	movw	r3, #4045	; 0xfcd
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e40:	9009      	str	r0, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e42:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e44:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e46:	900c      	str	r0, [sp, #48]	; 0x30
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e48:	4620      	mov	r0, r4
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 8002e4a:	9307      	str	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e4c:	f7ff fa2c 	bl	80022a8 <HAL_TIM_PWM_Stop>
	/*************************************/
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e50:	462a      	mov	r2, r5
 8002e52:	a906      	add	r1, sp, #24
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff f993 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	b100      	cbz	r0, 8002e5e <main+0xe6>
 8002e5c:	e7fe      	b.n	8002e5c <main+0xe4>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	{
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e62:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e64:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e66:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8002e68:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e6a:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e6c:	9312      	str	r3, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002e6e:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e70:	9014      	str	r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002e76:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e78:	9017      	str	r0, [sp, #92]	; 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e7a:	a90d      	add	r1, sp, #52	; 0x34
 8002e7c:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e7e:	9315      	str	r3, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e80:	f7ff fa6a 	bl	8002358 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e84:	b100      	cbz	r0, 8002e88 <main+0x110>
 8002e86:	e7fe      	b.n	8002e86 <main+0x10e>
	{
		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim1);
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f000 f8c3 	bl	8003014 <HAL_TIM_MspPostInit>
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();

	/* USER CODE BEGIN 2 */
	printf("Ready to Receive GPS string\r\n");
 8002e8e:	482c      	ldr	r0, [pc, #176]	; (8002f40 <main+0x1c8>)
 8002e90:	4d2c      	ldr	r5, [pc, #176]	; (8002f44 <main+0x1cc>)
 8002e92:	f000 fa53 	bl	800333c <puts>
	HD44780_Init();
 8002e96:	f7ff fe0f 	bl	8002ab8 <HD44780_Init>
	/* setup Port A bits 0,1,2 and 3, i.e.: PA0-PA3 for input */
	pushButtonInit();
 8002e9a:	f7ff feff 	bl	8002c9c <pushButtonInit>
	startUpLCDSplashScreen();
 8002e9e:	f7ff fee1 	bl	8002c64 <startUpLCDSplashScreen>
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		/* recChar will hold a single char received on the serial port*/
		char recChar = 0;
 8002ea2:	2400      	movs	r4, #0
		/* result will be checked to be ok or a timeout telling us whether
		* the char should be copied over to recBuffer, or if comm should be reset */
		HAL_StatusTypeDef result = 0;

		/*check for a char on the serial port with a timeout value */
		result = HAL_UART_Receive(&huart2, &recChar,1,10000);   //will wait up to 10s for
 8002ea4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	a90d      	add	r1, sp, #52	; 0x34
 8002eac:	4820      	ldr	r0, [pc, #128]	; (8002f30 <main+0x1b8>)
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		/* recChar will hold a single char received on the serial port*/
		char recChar = 0;
 8002eae:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		/* result will be checked to be ok or a timeout telling us whether
		* the char should be copied over to recBuffer, or if comm should be reset */
		HAL_StatusTypeDef result = 0;

		/*check for a char on the serial port with a timeout value */
		result = HAL_UART_Receive(&huart2, &recChar,1,10000);   //will wait up to 10s for
 8002eb2:	f7ff fc88 	bl	80027c6 <HAL_UART_Receive>
																// a char and then timeout
		if(result == HAL_OK)							//then we have rec'd a char
 8002eb6:	bb20      	cbnz	r0, 8002f02 <main+0x18a>
		{
			if(recChar == '$')							//STX! so let's start storing char in the recBuffer
 8002eb8:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8002ebc:	4c22      	ldr	r4, [pc, #136]	; (8002f48 <main+0x1d0>)
 8002ebe:	2a24      	cmp	r2, #36	; 0x24
 8002ec0:	d103      	bne.n	8002eca <main+0x152>
			{
				recBufferIndex = 0;						//$ is the first char in a sentence.
				recBuffer[recBufferIndex] = recChar;	//so we've got to store it at the
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <main+0x1d4>)
 8002ec4:	701a      	strb	r2, [r3, #0]
														//start of our recBuffer
				recBufferIndex++;						//and inc the index so the next char
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e008      	b.n	8002edc <main+0x164>
														//is stored in the next position in
														//the buffer
			}
			else if(recBufferIndex > 0)					//then we're receiving the rest of the sentence
 8002eca:	f994 3000 	ldrsb.w	r3, [r4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dd0a      	ble.n	8002ee8 <main+0x170>
			{
				recBuffer[recBufferIndex] = recChar;	//so place the rec'd char in the buffer
 8002ed2:	491e      	ldr	r1, [pc, #120]	; (8002f4c <main+0x1d4>)
				if(recBufferIndex <recBufferSize)		//and increment the index as long as
 8002ed4:	2b3f      	cmp	r3, #63	; 0x3f
														//is stored in the next position in
														//the buffer
			}
			else if(recBufferIndex > 0)					//then we're receiving the rest of the sentence
			{
				recBuffer[recBufferIndex] = recChar;	//so place the rec'd char in the buffer
 8002ed6:	54ca      	strb	r2, [r1, r3]
				if(recBufferIndex <recBufferSize)		//and increment the index as long as
 8002ed8:	dc02      	bgt.n	8002ee0 <main+0x168>
				{										//we don't exceed the size of the buffer
					recBufferIndex++;
 8002eda:	3301      	adds	r3, #1
 8002edc:	7023      	strb	r3, [r4, #0]
 8002ede:	e003      	b.n	8002ee8 <main+0x170>
				}
				else
				{
					recBufferIndex = 0;					//if we're we've exceeded the size of our
 8002ee0:	7020      	strb	r0, [r4, #0]
					printf("recBuffer Overflow\r\n");	//buffer so let's say so
 8002ee2:	481b      	ldr	r0, [pc, #108]	; (8002f50 <main+0x1d8>)
 8002ee4:	f000 fa2a 	bl	800333c <puts>
				}
			}
			if(recChar == '\r')							//if we get a cr then we know we're at the
 8002ee8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8002eec:	2b0d      	cmp	r3, #13
 8002eee:	d10f      	bne.n	8002f10 <main+0x198>
			{											//end of our sentence
				recBuffer[recBufferIndex] = '\0';		//put a null instead of cr in the buffer
 8002ef0:	f994 2000 	ldrsb.w	r2, [r4]
 8002ef4:	4915      	ldr	r1, [pc, #84]	; (8002f4c <main+0x1d4>)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	548b      	strb	r3, [r1, r2]
														//'cause that's what strings need
				recBufferIndex = 0;						//and reset the buffer index
 8002efa:	7023      	strb	r3, [r4, #0]
				sentenceReceived = 1;					//and set the flag 'cause we've got a
 8002efc:	2301      	movs	r3, #1
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	e006      	b.n	8002f10 <main+0x198>
														//complete senetence now.
			}
		}
		else if(result == HAL_TIMEOUT)
 8002f02:	2803      	cmp	r0, #3
 8002f04:	d104      	bne.n	8002f10 <main+0x198>
		{
			printf("serial port timeout\r\n");
 8002f06:	4813      	ldr	r0, [pc, #76]	; (8002f54 <main+0x1dc>)
 8002f08:	f000 fa18 	bl	800333c <puts>
			recBufferIndex = 0;
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <main+0x1d0>)
 8002f0e:	701c      	strb	r4, [r3, #0]
		}

		if(sentenceReceived)
 8002f10:	f995 3000 	ldrsb.w	r3, [r5]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0c4      	beq.n	8002ea2 <main+0x12a>
		{
			printf("recBuffer: %s\r\n",recBuffer);
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <main+0x1d4>)
 8002f1a:	480f      	ldr	r0, [pc, #60]	; (8002f58 <main+0x1e0>)
 8002f1c:	f000 f9aa 	bl	8003274 <printf>
			sentenceReceived = 0;						//as we've finished processing the sentence
 8002f20:	2300      	movs	r3, #0
 8002f22:	702b      	strb	r3, [r5, #0]
		}
	} //closing brace for while(1)
 8002f24:	e7bd      	b.n	8002ea2 <main+0x12a>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	200006a8 	.word	0x200006a8
 8002f34:	40004400 	.word	0x40004400
 8002f38:	2000066c 	.word	0x2000066c
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	08007d14 	.word	0x08007d14
 8002f44:	20000584 	.word	0x20000584
 8002f48:	200005c5 	.word	0x200005c5
 8002f4c:	20000585 	.word	0x20000585
 8002f50:	08007d31 	.word	0x08007d31
 8002f54:	08007d45 	.word	0x08007d45
 8002f58:	08007d5a 	.word	0x08007d5a

08002f5c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8002f5c:	e7fe      	b.n	8002f5c <Error_Handler>
	...

08002f60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f62:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	661a      	str	r2, [r3, #96]	; 0x60
 8002f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f6e:	f002 0201 	and.w	r2, r2, #1
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f86:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8a:	f7fd ffcf 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4611      	mov	r1, r2
 8002f92:	f06f 000b 	mvn.w	r0, #11
 8002f96:	f7fd ffdb 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	f06f 000a 	mvn.w	r0, #10
 8002fa2:	f7fd ffd5 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4611      	mov	r1, r2
 8002faa:	f06f 0009 	mvn.w	r0, #9
 8002fae:	f7fd ffcf 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f06f 0004 	mvn.w	r0, #4
 8002fba:	f7fd ffc9 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	f06f 0003 	mvn.w	r0, #3
 8002fc6:	f7fd ffc3 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4611      	mov	r1, r2
 8002fce:	f06f 0001 	mvn.w	r0, #1
 8002fd2:	f7fd ffbd 	bl	8000f50 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4611      	mov	r1, r2
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	f7fd ffb7 	bl	8000f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe2:	b003      	add	sp, #12
 8002fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8002fec:	6802      	ldr	r2, [r0, #0]
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_TIM_PWM_MspInit+0x24>)
 8002ff0:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ff2:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8002ff4:	d10a      	bne.n	800300c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003000:	661a      	str	r2, [r3, #96]	; 0x60
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800300c:	b002      	add	sp, #8
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00

08003014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003016:	6802      	ldr	r2, [r0, #0]
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_TIM_MspPostInit+0x2c>)
 800301a:	429a      	cmp	r2, r3
 800301c:	d10d      	bne.n	800303a <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800302e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003034:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f7fd ffe7 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800303a:	b007      	add	sp, #28
 800303c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003040:	40012c00 	.word	0x40012c00

08003044 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003044:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003046:	6802      	ldr	r2, [r0, #0]
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_UART_MspInit+0x5c>)
 800304a:	429a      	cmp	r2, r3
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800304c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800304e:	d125      	bne.n	800309c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003050:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003056:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800305c:	659a      	str	r2, [r3, #88]	; 0x58
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800306a:	2304      	movs	r3, #4
 800306c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003070:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003072:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003074:	a901      	add	r1, sp, #4
 8003076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800307a:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800307e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003080:	f7fd ffc2 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	a901      	add	r1, sp, #4
 800308a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800308e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003092:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003094:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003096:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f7fd ffb6 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800309c:	b006      	add	sp, #24
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	40004400 	.word	0x40004400

080030a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80030a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a6:	f7fd ff27 	bl	8000ef8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80030ae:	f7fd bfa6 	b.w	8000ffe <HAL_SYSTICK_IRQHandler>
	...

080030b4 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80030b4:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80030b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80030ba:	b085      	sub	sp, #20
 80030bc:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80030be:	4810      	ldr	r0, [pc, #64]	; (8003100 <_write+0x4c>)
 80030c0:	b292      	uxth	r2, r2
 80030c2:	f7ff fb26 	bl	8002712 <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 80030c6:	1e42      	subs	r2, r0, #1
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	2a02      	cmp	r2, #2
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80030cc:	4605      	mov	r5, r0
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 80030ce:	d813      	bhi.n	80030f8 <_write+0x44>
	{
		char stringBuffer[16] = {0};
 80030d0:	2210      	movs	r2, #16
 80030d2:	2100      	movs	r1, #0
 80030d4:	4668      	mov	r0, sp
 80030d6:	f000 f8c5 	bl	8003264 <memset>
		HD44780_GotoXY(1,0); //move to second line first position
 80030da:	2100      	movs	r1, #0
 80030dc:	2001      	movs	r0, #1
 80030de:	f7ff fd43 	bl	8002b68 <HD44780_GotoXY>
		snprintf(stringBuffer,16,"Error: %i",result);
 80030e2:	462b      	mov	r3, r5
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <_write+0x50>)
 80030e6:	2110      	movs	r1, #16
 80030e8:	4668      	mov	r0, sp
 80030ea:	f000 f92f 	bl	800334c <snprintf>
		HD44780_PutStr(stringBuffer);
 80030ee:	4668      	mov	r0, sp
 80030f0:	f7ff fd48 	bl	8002b84 <HD44780_PutStr>

		Error_Handler();
 80030f4:	f7ff ff32 	bl	8002f5c <Error_Handler>
	}
	return len;
}
 80030f8:	4620      	mov	r0, r4
 80030fa:	b005      	add	sp, #20
 80030fc:	bd30      	pop	{r4, r5, pc}
 80030fe:	bf00      	nop
 8003100:	200006a8 	.word	0x200006a8
 8003104:	08007d6a 	.word	0x08007d6a

08003108 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <_sbrk+0x14>)
 800310a:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 800310c:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800310e:	b909      	cbnz	r1, 8003114 <_sbrk+0xc>
		heap_end = & end;
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <_sbrk+0x18>)
 8003112:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003114:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8003116:	4402      	add	r2, r0
 8003118:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 800311a:	4770      	bx	lr
 800311c:	200005c8 	.word	0x200005c8
 8003120:	2000071c 	.word	0x2000071c

08003124 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <_close+0xc>)
 8003126:	2258      	movs	r2, #88	; 0x58
 8003128:	601a      	str	r2, [r3, #0]
	return -1;
}
 800312a:	f04f 30ff 	mov.w	r0, #4294967295
 800312e:	4770      	bx	lr
 8003130:	20000718 	.word	0x20000718

08003134 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <_fstat+0xc>)
 8003136:	2258      	movs	r2, #88	; 0x58
 8003138:	601a      	str	r2, [r3, #0]
	return -1;
}
 800313a:	f04f 30ff 	mov.w	r0, #4294967295
 800313e:	4770      	bx	lr
 8003140:	20000718 	.word	0x20000718

08003144 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <_isatty+0xc>)
 8003146:	2258      	movs	r2, #88	; 0x58
 8003148:	601a      	str	r2, [r3, #0]
	return 0;
}
 800314a:	2000      	movs	r0, #0
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000718 	.word	0x20000718

08003154 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <_lseek+0xc>)
 8003156:	2258      	movs	r2, #88	; 0x58
 8003158:	601a      	str	r2, [r3, #0]
	return -1;
}
 800315a:	f04f 30ff 	mov.w	r0, #4294967295
 800315e:	4770      	bx	lr
 8003160:	20000718 	.word	0x20000718

08003164 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003164:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8003166:	2201      	movs	r2, #1
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <_read+0x14>)
 800316e:	f7ff fb2a 	bl	80027c6 <HAL_UART_Receive>
	return 1;
}
 8003172:	2001      	movs	r0, #1
 8003174:	bd08      	pop	{r3, pc}
 8003176:	bf00      	nop
 8003178:	200006a8 	.word	0x200006a8

0800317c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800317c:	490f      	ldr	r1, [pc, #60]	; (80031bc <SystemInit+0x40>)
 800317e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003182:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <SystemInit+0x44>)
 800318c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800318e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003196:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800319e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80031a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80031a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031b2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031b8:	608b      	str	r3, [r1, #8]
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00
 80031c0:	40021000 	.word	0x40021000

080031c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031ca:	e003      	b.n	80031d4 <LoopCopyDataInit>

080031cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031d2:	3104      	adds	r1, #4

080031d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031dc:	d3f6      	bcc.n	80031cc <CopyDataInit>
	ldr	r2, =_sbss
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <LoopForever+0x12>)
	b	LoopFillZerobss
 80031e0:	e002      	b.n	80031e8 <LoopFillZerobss>

080031e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031e4:	f842 3b04 	str.w	r3, [r2], #4

080031e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <LoopForever+0x16>)
	cmp	r2, r3
 80031ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031ec:	d3f9      	bcc.n	80031e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031ee:	f7ff ffc5 	bl	800317c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f000 f811 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031f6:	f7ff fdbf 	bl	8002d78 <main>

080031fa <LoopForever>:

LoopForever:
    b LoopForever
 80031fa:	e7fe      	b.n	80031fa <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031fc:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003200:	08007fbc 	.word	0x08007fbc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003204:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003208:	20000568 	.word	0x20000568
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800320c:	20000568 	.word	0x20000568
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003210:	2000071c 	.word	0x2000071c

08003214 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC1_IRQHandler>
	...

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <__libc_init_array+0x3c>)
 800321c:	4c0e      	ldr	r4, [pc, #56]	; (8003258 <__libc_init_array+0x40>)
 800321e:	1ae4      	subs	r4, r4, r3
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2500      	movs	r5, #0
 8003224:	461e      	mov	r6, r3
 8003226:	42a5      	cmp	r5, r4
 8003228:	d004      	beq.n	8003234 <__libc_init_array+0x1c>
 800322a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800322e:	4798      	blx	r3
 8003230:	3501      	adds	r5, #1
 8003232:	e7f8      	b.n	8003226 <__libc_init_array+0xe>
 8003234:	f004 fd50 	bl	8007cd8 <_init>
 8003238:	4c08      	ldr	r4, [pc, #32]	; (800325c <__libc_init_array+0x44>)
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <__libc_init_array+0x48>)
 800323c:	1ae4      	subs	r4, r4, r3
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	2500      	movs	r5, #0
 8003242:	461e      	mov	r6, r3
 8003244:	42a5      	cmp	r5, r4
 8003246:	d004      	beq.n	8003252 <__libc_init_array+0x3a>
 8003248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324c:	4798      	blx	r3
 800324e:	3501      	adds	r5, #1
 8003250:	e7f8      	b.n	8003244 <__libc_init_array+0x2c>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	08007fb4 	.word	0x08007fb4
 8003258:	08007fb4 	.word	0x08007fb4
 800325c:	08007fb8 	.word	0x08007fb8
 8003260:	08007fb4 	.word	0x08007fb4

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d002      	beq.n	8003272 <memset+0xe>
 800326c:	f803 1b01 	strb.w	r1, [r3], #1
 8003270:	e7fa      	b.n	8003268 <memset+0x4>
 8003272:	4770      	bx	lr

08003274 <printf>:
 8003274:	b40f      	push	{r0, r1, r2, r3}
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <printf+0x2c>)
 8003278:	b513      	push	{r0, r1, r4, lr}
 800327a:	681c      	ldr	r4, [r3, #0]
 800327c:	b124      	cbz	r4, 8003288 <printf+0x14>
 800327e:	69a3      	ldr	r3, [r4, #24]
 8003280:	b913      	cbnz	r3, 8003288 <printf+0x14>
 8003282:	4620      	mov	r0, r4
 8003284:	f003 f82a 	bl	80062dc <__sinit>
 8003288:	ab05      	add	r3, sp, #20
 800328a:	9a04      	ldr	r2, [sp, #16]
 800328c:	68a1      	ldr	r1, [r4, #8]
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	4620      	mov	r0, r4
 8003292:	f001 f859 	bl	8004348 <_vfprintf_r>
 8003296:	b002      	add	sp, #8
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329c:	b004      	add	sp, #16
 800329e:	4770      	bx	lr
 80032a0:	200000f4 	.word	0x200000f4

080032a4 <_puts_r>:
 80032a4:	b530      	push	{r4, r5, lr}
 80032a6:	4605      	mov	r5, r0
 80032a8:	b089      	sub	sp, #36	; 0x24
 80032aa:	4608      	mov	r0, r1
 80032ac:	460c      	mov	r4, r1
 80032ae:	f7fc ff8f 	bl	80001d0 <strlen>
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <_puts_r+0x88>)
 80032b4:	9306      	str	r3, [sp, #24]
 80032b6:	2301      	movs	r3, #1
 80032b8:	9005      	str	r0, [sp, #20]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	4418      	add	r0, r3
 80032be:	ab04      	add	r3, sp, #16
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9404      	str	r4, [sp, #16]
 80032c6:	9003      	str	r0, [sp, #12]
 80032c8:	9302      	str	r3, [sp, #8]
 80032ca:	b125      	cbz	r5, 80032d6 <_puts_r+0x32>
 80032cc:	69ab      	ldr	r3, [r5, #24]
 80032ce:	b913      	cbnz	r3, 80032d6 <_puts_r+0x32>
 80032d0:	4628      	mov	r0, r5
 80032d2:	f003 f803 	bl	80062dc <__sinit>
 80032d6:	69ab      	ldr	r3, [r5, #24]
 80032d8:	68ac      	ldr	r4, [r5, #8]
 80032da:	b913      	cbnz	r3, 80032e2 <_puts_r+0x3e>
 80032dc:	4628      	mov	r0, r5
 80032de:	f002 fffd 	bl	80062dc <__sinit>
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <_puts_r+0x8c>)
 80032e4:	429c      	cmp	r4, r3
 80032e6:	d101      	bne.n	80032ec <_puts_r+0x48>
 80032e8:	686c      	ldr	r4, [r5, #4]
 80032ea:	e008      	b.n	80032fe <_puts_r+0x5a>
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <_puts_r+0x90>)
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d101      	bne.n	80032f6 <_puts_r+0x52>
 80032f2:	68ac      	ldr	r4, [r5, #8]
 80032f4:	e003      	b.n	80032fe <_puts_r+0x5a>
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <_puts_r+0x94>)
 80032f8:	429c      	cmp	r4, r3
 80032fa:	bf08      	it	eq
 80032fc:	68ec      	ldreq	r4, [r5, #12]
 80032fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003302:	049a      	lsls	r2, r3, #18
 8003304:	d406      	bmi.n	8003314 <_puts_r+0x70>
 8003306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800330c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	6662      	str	r2, [r4, #100]	; 0x64
 8003314:	aa01      	add	r2, sp, #4
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	f003 f965 	bl	80065e8 <__sfvwrite_r>
 800331e:	2800      	cmp	r0, #0
 8003320:	bf14      	ite	ne
 8003322:	f04f 30ff 	movne.w	r0, #4294967295
 8003326:	200a      	moveq	r0, #10
 8003328:	b009      	add	sp, #36	; 0x24
 800332a:	bd30      	pop	{r4, r5, pc}
 800332c:	08007d68 	.word	0x08007d68
 8003330:	08007e40 	.word	0x08007e40
 8003334:	08007e60 	.word	0x08007e60
 8003338:	08007e80 	.word	0x08007e80

0800333c <puts>:
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <puts+0xc>)
 800333e:	4601      	mov	r1, r0
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	f7ff bfaf 	b.w	80032a4 <_puts_r>
 8003346:	bf00      	nop
 8003348:	200000f4 	.word	0x200000f4

0800334c <snprintf>:
 800334c:	b40c      	push	{r2, r3}
 800334e:	b530      	push	{r4, r5, lr}
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <snprintf+0x60>)
 8003352:	1e0c      	subs	r4, r1, #0
 8003354:	b09d      	sub	sp, #116	; 0x74
 8003356:	681d      	ldr	r5, [r3, #0]
 8003358:	da04      	bge.n	8003364 <snprintf+0x18>
 800335a:	238b      	movs	r3, #139	; 0x8b
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	f04f 30ff 	mov.w	r0, #4294967295
 8003362:	e01e      	b.n	80033a2 <snprintf+0x56>
 8003364:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003368:	f8ad 3014 	strh.w	r3, [sp, #20]
 800336c:	bf14      	ite	ne
 800336e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003372:	4623      	moveq	r3, r4
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337c:	9002      	str	r0, [sp, #8]
 800337e:	9006      	str	r0, [sp, #24]
 8003380:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003384:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003386:	ab21      	add	r3, sp, #132	; 0x84
 8003388:	a902      	add	r1, sp, #8
 800338a:	4628      	mov	r0, r5
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	f000 f817 	bl	80033c0 <_svfprintf_r>
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	bfbc      	itt	lt
 8003396:	238b      	movlt	r3, #139	; 0x8b
 8003398:	602b      	strlt	r3, [r5, #0]
 800339a:	b114      	cbz	r4, 80033a2 <snprintf+0x56>
 800339c:	9b02      	ldr	r3, [sp, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	b01d      	add	sp, #116	; 0x74
 80033a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a8:	b002      	add	sp, #8
 80033aa:	4770      	bx	lr
 80033ac:	200000f4 	.word	0x200000f4

080033b0 <strcpy>:
 80033b0:	4603      	mov	r3, r0
 80033b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033b6:	f803 2b01 	strb.w	r2, [r3], #1
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	d1f9      	bne.n	80033b2 <strcpy+0x2>
 80033be:	4770      	bx	lr

080033c0 <_svfprintf_r>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	b0bd      	sub	sp, #244	; 0xf4
 80033c6:	468b      	mov	fp, r1
 80033c8:	9205      	str	r2, [sp, #20]
 80033ca:	461f      	mov	r7, r3
 80033cc:	4682      	mov	sl, r0
 80033ce:	f003 fa7d 	bl	80068cc <_localeconv_r>
 80033d2:	6803      	ldr	r3, [r0, #0]
 80033d4:	930d      	str	r3, [sp, #52]	; 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fc fefa 	bl	80001d0 <strlen>
 80033dc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80033e0:	9008      	str	r0, [sp, #32]
 80033e2:	0619      	lsls	r1, r3, #24
 80033e4:	d515      	bpl.n	8003412 <_svfprintf_r+0x52>
 80033e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80033ea:	b993      	cbnz	r3, 8003412 <_svfprintf_r+0x52>
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	4650      	mov	r0, sl
 80033f0:	f003 fae0 	bl	80069b4 <_malloc_r>
 80033f4:	f8cb 0000 	str.w	r0, [fp]
 80033f8:	f8cb 0010 	str.w	r0, [fp, #16]
 80033fc:	b930      	cbnz	r0, 800340c <_svfprintf_r+0x4c>
 80033fe:	230c      	movs	r3, #12
 8003400:	f8ca 3000 	str.w	r3, [sl]
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	f000 bf95 	b.w	8004336 <_svfprintf_r+0xf76>
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	f8cb 3014 	str.w	r3, [fp, #20]
 8003412:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003678 <_svfprintf_r+0x2b8>
 8003416:	ed8d 7b06 	vstr	d7, [sp, #24]
 800341a:	2300      	movs	r3, #0
 800341c:	ac2c      	add	r4, sp, #176	; 0xb0
 800341e:	941f      	str	r4, [sp, #124]	; 0x7c
 8003420:	9321      	str	r3, [sp, #132]	; 0x84
 8003422:	9320      	str	r3, [sp, #128]	; 0x80
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	9311      	str	r3, [sp, #68]	; 0x44
 8003428:	9310      	str	r3, [sp, #64]	; 0x40
 800342a:	930a      	str	r3, [sp, #40]	; 0x28
 800342c:	9d05      	ldr	r5, [sp, #20]
 800342e:	462b      	mov	r3, r5
 8003430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003434:	b11a      	cbz	r2, 800343e <_svfprintf_r+0x7e>
 8003436:	2a25      	cmp	r2, #37	; 0x25
 8003438:	d001      	beq.n	800343e <_svfprintf_r+0x7e>
 800343a:	461d      	mov	r5, r3
 800343c:	e7f7      	b.n	800342e <_svfprintf_r+0x6e>
 800343e:	9b05      	ldr	r3, [sp, #20]
 8003440:	1aee      	subs	r6, r5, r3
 8003442:	d017      	beq.n	8003474 <_svfprintf_r+0xb4>
 8003444:	e884 0048 	stmia.w	r4, {r3, r6}
 8003448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800344a:	4433      	add	r3, r6
 800344c:	9321      	str	r3, [sp, #132]	; 0x84
 800344e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003450:	3301      	adds	r3, #1
 8003452:	2b07      	cmp	r3, #7
 8003454:	9320      	str	r3, [sp, #128]	; 0x80
 8003456:	dc01      	bgt.n	800345c <_svfprintf_r+0x9c>
 8003458:	3408      	adds	r4, #8
 800345a:	e008      	b.n	800346e <_svfprintf_r+0xae>
 800345c:	aa1f      	add	r2, sp, #124	; 0x7c
 800345e:	4659      	mov	r1, fp
 8003460:	4650      	mov	r0, sl
 8003462:	f004 f9c0 	bl	80077e6 <__ssprint_r>
 8003466:	2800      	cmp	r0, #0
 8003468:	f040 862c 	bne.w	80040c4 <_svfprintf_r+0xd04>
 800346c:	ac2c      	add	r4, sp, #176	; 0xb0
 800346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003470:	4433      	add	r3, r6
 8003472:	930a      	str	r3, [sp, #40]	; 0x28
 8003474:	782b      	ldrb	r3, [r5, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 861d 	beq.w	80040b6 <_svfprintf_r+0xcf6>
 800347c:	2200      	movs	r2, #0
 800347e:	1c6b      	adds	r3, r5, #1
 8003480:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003484:	4611      	mov	r1, r2
 8003486:	f04f 39ff 	mov.w	r9, #4294967295
 800348a:	9209      	str	r2, [sp, #36]	; 0x24
 800348c:	4615      	mov	r5, r2
 800348e:	200a      	movs	r0, #10
 8003490:	1c5e      	adds	r6, r3, #1
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	9605      	str	r6, [sp, #20]
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	9b02      	ldr	r3, [sp, #8]
 800349a:	3b20      	subs	r3, #32
 800349c:	2b58      	cmp	r3, #88	; 0x58
 800349e:	f200 8263 	bhi.w	8003968 <_svfprintf_r+0x5a8>
 80034a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034a6:	005c      	.short	0x005c
 80034a8:	02610261 	.word	0x02610261
 80034ac:	0261006b 	.word	0x0261006b
 80034b0:	02610261 	.word	0x02610261
 80034b4:	02610261 	.word	0x02610261
 80034b8:	006e0261 	.word	0x006e0261
 80034bc:	02610059 	.word	0x02610059
 80034c0:	007c0079 	.word	0x007c0079
 80034c4:	00a30261 	.word	0x00a30261
 80034c8:	00a600a6 	.word	0x00a600a6
 80034cc:	00a600a6 	.word	0x00a600a6
 80034d0:	00a600a6 	.word	0x00a600a6
 80034d4:	00a600a6 	.word	0x00a600a6
 80034d8:	026100a6 	.word	0x026100a6
 80034dc:	02610261 	.word	0x02610261
 80034e0:	02610261 	.word	0x02610261
 80034e4:	02610261 	.word	0x02610261
 80034e8:	02610261 	.word	0x02610261
 80034ec:	00d60261 	.word	0x00d60261
 80034f0:	0261010b 	.word	0x0261010b
 80034f4:	0261010b 	.word	0x0261010b
 80034f8:	02610261 	.word	0x02610261
 80034fc:	00b90261 	.word	0x00b90261
 8003500:	02610261 	.word	0x02610261
 8003504:	02610152 	.word	0x02610152
 8003508:	02610261 	.word	0x02610261
 800350c:	02610261 	.word	0x02610261
 8003510:	02610199 	.word	0x02610199
 8003514:	00660261 	.word	0x00660261
 8003518:	02610261 	.word	0x02610261
 800351c:	02610261 	.word	0x02610261
 8003520:	02610261 	.word	0x02610261
 8003524:	02610261 	.word	0x02610261
 8003528:	02610261 	.word	0x02610261
 800352c:	006100cd 	.word	0x006100cd
 8003530:	010b010b 	.word	0x010b010b
 8003534:	00bc010b 	.word	0x00bc010b
 8003538:	02610061 	.word	0x02610061
 800353c:	00bf0261 	.word	0x00bf0261
 8003540:	01340261 	.word	0x01340261
 8003544:	016f0154 	.word	0x016f0154
 8003548:	026100ca 	.word	0x026100ca
 800354c:	02610180 	.word	0x02610180
 8003550:	0261019b 	.word	0x0261019b
 8003554:	01b30261 	.word	0x01b30261
 8003558:	2201      	movs	r2, #1
 800355a:	212b      	movs	r1, #43	; 0x2b
 800355c:	e002      	b.n	8003564 <_svfprintf_r+0x1a4>
 800355e:	b909      	cbnz	r1, 8003564 <_svfprintf_r+0x1a4>
 8003560:	2201      	movs	r2, #1
 8003562:	2120      	movs	r1, #32
 8003564:	9b05      	ldr	r3, [sp, #20]
 8003566:	e793      	b.n	8003490 <_svfprintf_r+0xd0>
 8003568:	2a00      	cmp	r2, #0
 800356a:	d077      	beq.n	800365c <_svfprintf_r+0x29c>
 800356c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003570:	e074      	b.n	800365c <_svfprintf_r+0x29c>
 8003572:	b10a      	cbz	r2, 8003578 <_svfprintf_r+0x1b8>
 8003574:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003578:	4b41      	ldr	r3, [pc, #260]	; (8003680 <_svfprintf_r+0x2c0>)
 800357a:	e14b      	b.n	8003814 <_svfprintf_r+0x454>
 800357c:	f045 0501 	orr.w	r5, r5, #1
 8003580:	e7f0      	b.n	8003564 <_svfprintf_r+0x1a4>
 8003582:	683e      	ldr	r6, [r7, #0]
 8003584:	9609      	str	r6, [sp, #36]	; 0x24
 8003586:	2e00      	cmp	r6, #0
 8003588:	f107 0304 	add.w	r3, r7, #4
 800358c:	db01      	blt.n	8003592 <_svfprintf_r+0x1d2>
 800358e:	461f      	mov	r7, r3
 8003590:	e7e8      	b.n	8003564 <_svfprintf_r+0x1a4>
 8003592:	4276      	negs	r6, r6
 8003594:	9609      	str	r6, [sp, #36]	; 0x24
 8003596:	461f      	mov	r7, r3
 8003598:	f045 0504 	orr.w	r5, r5, #4
 800359c:	e7e2      	b.n	8003564 <_svfprintf_r+0x1a4>
 800359e:	9e05      	ldr	r6, [sp, #20]
 80035a0:	9b05      	ldr	r3, [sp, #20]
 80035a2:	7836      	ldrb	r6, [r6, #0]
 80035a4:	9602      	str	r6, [sp, #8]
 80035a6:	2e2a      	cmp	r6, #42	; 0x2a
 80035a8:	f103 0301 	add.w	r3, r3, #1
 80035ac:	d002      	beq.n	80035b4 <_svfprintf_r+0x1f4>
 80035ae:	f04f 0900 	mov.w	r9, #0
 80035b2:	e00a      	b.n	80035ca <_svfprintf_r+0x20a>
 80035b4:	f8d7 9000 	ldr.w	r9, [r7]
 80035b8:	9305      	str	r3, [sp, #20]
 80035ba:	1d3e      	adds	r6, r7, #4
 80035bc:	f1b9 0f00 	cmp.w	r9, #0
 80035c0:	4637      	mov	r7, r6
 80035c2:	dacf      	bge.n	8003564 <_svfprintf_r+0x1a4>
 80035c4:	f04f 39ff 	mov.w	r9, #4294967295
 80035c8:	e7cc      	b.n	8003564 <_svfprintf_r+0x1a4>
 80035ca:	9305      	str	r3, [sp, #20]
 80035cc:	9b02      	ldr	r3, [sp, #8]
 80035ce:	3b30      	subs	r3, #48	; 0x30
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d808      	bhi.n	80035e6 <_svfprintf_r+0x226>
 80035d4:	fb00 3909 	mla	r9, r0, r9, r3
 80035d8:	9b05      	ldr	r3, [sp, #20]
 80035da:	461e      	mov	r6, r3
 80035dc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	4633      	mov	r3, r6
 80035e4:	e7f1      	b.n	80035ca <_svfprintf_r+0x20a>
 80035e6:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80035ea:	e755      	b.n	8003498 <_svfprintf_r+0xd8>
 80035ec:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80035f0:	e7b8      	b.n	8003564 <_svfprintf_r+0x1a4>
 80035f2:	2300      	movs	r3, #0
 80035f4:	9309      	str	r3, [sp, #36]	; 0x24
 80035f6:	9b02      	ldr	r3, [sp, #8]
 80035f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80035fa:	3b30      	subs	r3, #48	; 0x30
 80035fc:	fb00 3306 	mla	r3, r0, r6, r3
 8003600:	9309      	str	r3, [sp, #36]	; 0x24
 8003602:	9b05      	ldr	r3, [sp, #20]
 8003604:	461e      	mov	r6, r3
 8003606:	f816 3b01 	ldrb.w	r3, [r6], #1
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	9b02      	ldr	r3, [sp, #8]
 800360e:	9605      	str	r6, [sp, #20]
 8003610:	3b30      	subs	r3, #48	; 0x30
 8003612:	2b09      	cmp	r3, #9
 8003614:	d9ef      	bls.n	80035f6 <_svfprintf_r+0x236>
 8003616:	e73f      	b.n	8003498 <_svfprintf_r+0xd8>
 8003618:	f045 0508 	orr.w	r5, r5, #8
 800361c:	e7a2      	b.n	8003564 <_svfprintf_r+0x1a4>
 800361e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003622:	e79f      	b.n	8003564 <_svfprintf_r+0x1a4>
 8003624:	9b05      	ldr	r3, [sp, #20]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b6c      	cmp	r3, #108	; 0x6c
 800362a:	d103      	bne.n	8003634 <_svfprintf_r+0x274>
 800362c:	9b05      	ldr	r3, [sp, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	e002      	b.n	800363a <_svfprintf_r+0x27a>
 8003634:	f045 0510 	orr.w	r5, r5, #16
 8003638:	e794      	b.n	8003564 <_svfprintf_r+0x1a4>
 800363a:	f045 0520 	orr.w	r5, r5, #32
 800363e:	e791      	b.n	8003564 <_svfprintf_r+0x1a4>
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	9303      	str	r3, [sp, #12]
 8003644:	2600      	movs	r6, #0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800364c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003650:	e199      	b.n	8003986 <_svfprintf_r+0x5c6>
 8003652:	b10a      	cbz	r2, 8003658 <_svfprintf_r+0x298>
 8003654:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003658:	f045 0510 	orr.w	r5, r5, #16
 800365c:	06aa      	lsls	r2, r5, #26
 800365e:	d511      	bpl.n	8003684 <_svfprintf_r+0x2c4>
 8003660:	3707      	adds	r7, #7
 8003662:	f027 0707 	bic.w	r7, r7, #7
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003670:	e017      	b.n	80036a2 <_svfprintf_r+0x2e2>
 8003672:	bf00      	nop
 8003674:	f3af 8000 	nop.w
	...
 8003680:	08007ddc 	.word	0x08007ddc
 8003684:	f015 0f10 	tst.w	r5, #16
 8003688:	f107 0304 	add.w	r3, r7, #4
 800368c:	d002      	beq.n	8003694 <_svfprintf_r+0x2d4>
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	683e      	ldr	r6, [r7, #0]
 8003692:	e005      	b.n	80036a0 <_svfprintf_r+0x2e0>
 8003694:	683e      	ldr	r6, [r7, #0]
 8003696:	9303      	str	r3, [sp, #12]
 8003698:	f015 0f40 	tst.w	r5, #64	; 0x40
 800369c:	bf18      	it	ne
 800369e:	b236      	sxthne	r6, r6
 80036a0:	17f7      	asrs	r7, r6, #31
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	f177 0300 	sbcs.w	r3, r7, #0
 80036a8:	f280 80de 	bge.w	8003868 <_svfprintf_r+0x4a8>
 80036ac:	4276      	negs	r6, r6
 80036ae:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80036b2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80036b6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80036ba:	e0d5      	b.n	8003868 <_svfprintf_r+0x4a8>
 80036bc:	b10a      	cbz	r2, 80036c2 <_svfprintf_r+0x302>
 80036be:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80036c2:	3707      	adds	r7, #7
 80036c4:	f027 0707 	bic.w	r7, r7, #7
 80036c8:	f107 0308 	add.w	r3, r7, #8
 80036cc:	9303      	str	r3, [sp, #12]
 80036ce:	ed97 7b00 	vldr	d7, [r7]
 80036d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80036d6:	9b06      	ldr	r3, [sp, #24]
 80036d8:	9312      	str	r3, [sp, #72]	; 0x48
 80036da:	9b07      	ldr	r3, [sp, #28]
 80036dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295
 80036e6:	4bab      	ldr	r3, [pc, #684]	; (8003994 <_svfprintf_r+0x5d4>)
 80036e8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80036ec:	f7fd fa1a 	bl	8000b24 <__aeabi_dcmpun>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	f040 84f1 	bne.w	80040d8 <_svfprintf_r+0xd18>
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295
 80036fa:	4ba6      	ldr	r3, [pc, #664]	; (8003994 <_svfprintf_r+0x5d4>)
 80036fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003700:	f7fd f9f2 	bl	8000ae8 <__aeabi_dcmple>
 8003704:	2800      	cmp	r0, #0
 8003706:	f040 84e7 	bne.w	80040d8 <_svfprintf_r+0xd18>
 800370a:	f000 bdfd 	b.w	8004308 <_svfprintf_r+0xf48>
 800370e:	b10a      	cbz	r2, 8003714 <_svfprintf_r+0x354>
 8003710:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003714:	f015 0f20 	tst.w	r5, #32
 8003718:	f107 0304 	add.w	r3, r7, #4
 800371c:	d007      	beq.n	800372e <_svfprintf_r+0x36e>
 800371e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	17ce      	asrs	r6, r1, #31
 8003724:	4608      	mov	r0, r1
 8003726:	4631      	mov	r1, r6
 8003728:	e9c2 0100 	strd	r0, r1, [r2]
 800372c:	e00b      	b.n	8003746 <_svfprintf_r+0x386>
 800372e:	06e9      	lsls	r1, r5, #27
 8003730:	d406      	bmi.n	8003740 <_svfprintf_r+0x380>
 8003732:	066a      	lsls	r2, r5, #25
 8003734:	d504      	bpl.n	8003740 <_svfprintf_r+0x380>
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800373c:	8011      	strh	r1, [r2, #0]
 800373e:	e002      	b.n	8003746 <_svfprintf_r+0x386>
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	461f      	mov	r7, r3
 8003748:	e670      	b.n	800342c <_svfprintf_r+0x6c>
 800374a:	f045 0510 	orr.w	r5, r5, #16
 800374e:	f015 0320 	ands.w	r3, r5, #32
 8003752:	d009      	beq.n	8003768 <_svfprintf_r+0x3a8>
 8003754:	3707      	adds	r7, #7
 8003756:	f027 0707 	bic.w	r7, r7, #7
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	e07b      	b.n	8003860 <_svfprintf_r+0x4a0>
 8003768:	1d3a      	adds	r2, r7, #4
 800376a:	f015 0110 	ands.w	r1, r5, #16
 800376e:	9203      	str	r2, [sp, #12]
 8003770:	d105      	bne.n	800377e <_svfprintf_r+0x3be>
 8003772:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003776:	d002      	beq.n	800377e <_svfprintf_r+0x3be>
 8003778:	883e      	ldrh	r6, [r7, #0]
 800377a:	2700      	movs	r7, #0
 800377c:	e7f2      	b.n	8003764 <_svfprintf_r+0x3a4>
 800377e:	683e      	ldr	r6, [r7, #0]
 8003780:	2700      	movs	r7, #0
 8003782:	e06d      	b.n	8003860 <_svfprintf_r+0x4a0>
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	2330      	movs	r3, #48	; 0x30
 800378a:	2278      	movs	r2, #120	; 0x78
 800378c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003790:	4b81      	ldr	r3, [pc, #516]	; (8003998 <_svfprintf_r+0x5d8>)
 8003792:	683e      	ldr	r6, [r7, #0]
 8003794:	9311      	str	r3, [sp, #68]	; 0x44
 8003796:	2700      	movs	r7, #0
 8003798:	f045 0502 	orr.w	r5, r5, #2
 800379c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80037a0:	2302      	movs	r3, #2
 80037a2:	9202      	str	r2, [sp, #8]
 80037a4:	e05c      	b.n	8003860 <_svfprintf_r+0x4a0>
 80037a6:	2600      	movs	r6, #0
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	45b1      	cmp	r9, r6
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	f8d7 8000 	ldr.w	r8, [r7]
 80037b2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80037b6:	db0a      	blt.n	80037ce <_svfprintf_r+0x40e>
 80037b8:	464a      	mov	r2, r9
 80037ba:	4631      	mov	r1, r6
 80037bc:	4640      	mov	r0, r8
 80037be:	f7fc fd0f 	bl	80001e0 <memchr>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	f000 80ea 	beq.w	800399c <_svfprintf_r+0x5dc>
 80037c8:	ebc8 0900 	rsb	r9, r8, r0
 80037cc:	e0e7      	b.n	800399e <_svfprintf_r+0x5de>
 80037ce:	4640      	mov	r0, r8
 80037d0:	f7fc fcfe 	bl	80001d0 <strlen>
 80037d4:	4681      	mov	r9, r0
 80037d6:	e0e2      	b.n	800399e <_svfprintf_r+0x5de>
 80037d8:	f045 0510 	orr.w	r5, r5, #16
 80037dc:	06ae      	lsls	r6, r5, #26
 80037de:	d508      	bpl.n	80037f2 <_svfprintf_r+0x432>
 80037e0:	3707      	adds	r7, #7
 80037e2:	f027 0707 	bic.w	r7, r7, #7
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	9303      	str	r3, [sp, #12]
 80037ec:	e9d7 6700 	ldrd	r6, r7, [r7]
 80037f0:	e00a      	b.n	8003808 <_svfprintf_r+0x448>
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	f015 0f10 	tst.w	r5, #16
 80037f8:	9303      	str	r3, [sp, #12]
 80037fa:	d103      	bne.n	8003804 <_svfprintf_r+0x444>
 80037fc:	0668      	lsls	r0, r5, #25
 80037fe:	d501      	bpl.n	8003804 <_svfprintf_r+0x444>
 8003800:	883e      	ldrh	r6, [r7, #0]
 8003802:	e000      	b.n	8003806 <_svfprintf_r+0x446>
 8003804:	683e      	ldr	r6, [r7, #0]
 8003806:	2700      	movs	r7, #0
 8003808:	2301      	movs	r3, #1
 800380a:	e029      	b.n	8003860 <_svfprintf_r+0x4a0>
 800380c:	b10a      	cbz	r2, 8003812 <_svfprintf_r+0x452>
 800380e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <_svfprintf_r+0x5d8>)
 8003814:	9311      	str	r3, [sp, #68]	; 0x44
 8003816:	06a9      	lsls	r1, r5, #26
 8003818:	d508      	bpl.n	800382c <_svfprintf_r+0x46c>
 800381a:	3707      	adds	r7, #7
 800381c:	f027 0707 	bic.w	r7, r7, #7
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	9303      	str	r3, [sp, #12]
 8003826:	e9d7 6700 	ldrd	r6, r7, [r7]
 800382a:	e00a      	b.n	8003842 <_svfprintf_r+0x482>
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	f015 0f10 	tst.w	r5, #16
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	d103      	bne.n	800383e <_svfprintf_r+0x47e>
 8003836:	066a      	lsls	r2, r5, #25
 8003838:	d501      	bpl.n	800383e <_svfprintf_r+0x47e>
 800383a:	883e      	ldrh	r6, [r7, #0]
 800383c:	e000      	b.n	8003840 <_svfprintf_r+0x480>
 800383e:	683e      	ldr	r6, [r7, #0]
 8003840:	2700      	movs	r7, #0
 8003842:	07eb      	lsls	r3, r5, #31
 8003844:	d50b      	bpl.n	800385e <_svfprintf_r+0x49e>
 8003846:	ea56 0307 	orrs.w	r3, r6, r7
 800384a:	d008      	beq.n	800385e <_svfprintf_r+0x49e>
 800384c:	2330      	movs	r3, #48	; 0x30
 800384e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003852:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003856:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800385a:	f045 0502 	orr.w	r5, r5, #2
 800385e:	2302      	movs	r3, #2
 8003860:	2200      	movs	r2, #0
 8003862:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003866:	e000      	b.n	800386a <_svfprintf_r+0x4aa>
 8003868:	2301      	movs	r3, #1
 800386a:	f1b9 0f00 	cmp.w	r9, #0
 800386e:	f2c0 855c 	blt.w	800432a <_svfprintf_r+0xf6a>
 8003872:	ea56 0207 	orrs.w	r2, r6, r7
 8003876:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800387a:	d103      	bne.n	8003884 <_svfprintf_r+0x4c4>
 800387c:	f1b9 0f00 	cmp.w	r9, #0
 8003880:	d05f      	beq.n	8003942 <_svfprintf_r+0x582>
 8003882:	e006      	b.n	8003892 <_svfprintf_r+0x4d2>
 8003884:	460d      	mov	r5, r1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d025      	beq.n	80038d6 <_svfprintf_r+0x516>
 800388a:	2b02      	cmp	r3, #2
 800388c:	d046      	beq.n	800391c <_svfprintf_r+0x55c>
 800388e:	4629      	mov	r1, r5
 8003890:	e007      	b.n	80038a2 <_svfprintf_r+0x4e2>
 8003892:	460d      	mov	r5, r1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d022      	beq.n	80038de <_svfprintf_r+0x51e>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d03d      	beq.n	8003918 <_svfprintf_r+0x558>
 800389c:	4629      	mov	r1, r5
 800389e:	2600      	movs	r6, #0
 80038a0:	2700      	movs	r7, #0
 80038a2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80038a6:	08f2      	lsrs	r2, r6, #3
 80038a8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80038ac:	08f8      	lsrs	r0, r7, #3
 80038ae:	f006 0307 	and.w	r3, r6, #7
 80038b2:	4607      	mov	r7, r0
 80038b4:	4616      	mov	r6, r2
 80038b6:	3330      	adds	r3, #48	; 0x30
 80038b8:	ea56 0207 	orrs.w	r2, r6, r7
 80038bc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80038c0:	d1f1      	bne.n	80038a6 <_svfprintf_r+0x4e6>
 80038c2:	07e8      	lsls	r0, r5, #31
 80038c4:	d548      	bpl.n	8003958 <_svfprintf_r+0x598>
 80038c6:	2b30      	cmp	r3, #48	; 0x30
 80038c8:	d046      	beq.n	8003958 <_svfprintf_r+0x598>
 80038ca:	2330      	movs	r3, #48	; 0x30
 80038cc:	f808 3c01 	strb.w	r3, [r8, #-1]
 80038d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80038d4:	e040      	b.n	8003958 <_svfprintf_r+0x598>
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	bf08      	it	eq
 80038da:	2e0a      	cmpeq	r6, #10
 80038dc:	d205      	bcs.n	80038ea <_svfprintf_r+0x52a>
 80038de:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80038e2:	3630      	adds	r6, #48	; 0x30
 80038e4:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80038e8:	e029      	b.n	800393e <_svfprintf_r+0x57e>
 80038ea:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80038ee:	4630      	mov	r0, r6
 80038f0:	4639      	mov	r1, r7
 80038f2:	220a      	movs	r2, #10
 80038f4:	2300      	movs	r3, #0
 80038f6:	f7fd f953 	bl	8000ba0 <__aeabi_uldivmod>
 80038fa:	3230      	adds	r2, #48	; 0x30
 80038fc:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003900:	2300      	movs	r3, #0
 8003902:	4630      	mov	r0, r6
 8003904:	4639      	mov	r1, r7
 8003906:	220a      	movs	r2, #10
 8003908:	f7fd f94a 	bl	8000ba0 <__aeabi_uldivmod>
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	ea56 0307 	orrs.w	r3, r6, r7
 8003914:	d1eb      	bne.n	80038ee <_svfprintf_r+0x52e>
 8003916:	e012      	b.n	800393e <_svfprintf_r+0x57e>
 8003918:	2600      	movs	r6, #0
 800391a:	2700      	movs	r7, #0
 800391c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003920:	f006 030f 	and.w	r3, r6, #15
 8003924:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800392c:	0933      	lsrs	r3, r6, #4
 800392e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003932:	093a      	lsrs	r2, r7, #4
 8003934:	461e      	mov	r6, r3
 8003936:	4617      	mov	r7, r2
 8003938:	ea56 0307 	orrs.w	r3, r6, r7
 800393c:	d1f0      	bne.n	8003920 <_svfprintf_r+0x560>
 800393e:	4629      	mov	r1, r5
 8003940:	e00a      	b.n	8003958 <_svfprintf_r+0x598>
 8003942:	b93b      	cbnz	r3, 8003954 <_svfprintf_r+0x594>
 8003944:	07ea      	lsls	r2, r5, #31
 8003946:	d505      	bpl.n	8003954 <_svfprintf_r+0x594>
 8003948:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800394c:	2330      	movs	r3, #48	; 0x30
 800394e:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003952:	e001      	b.n	8003958 <_svfprintf_r+0x598>
 8003954:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003958:	464e      	mov	r6, r9
 800395a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800395e:	ebc8 0909 	rsb	r9, r8, r9
 8003962:	460d      	mov	r5, r1
 8003964:	2700      	movs	r7, #0
 8003966:	e01b      	b.n	80039a0 <_svfprintf_r+0x5e0>
 8003968:	b10a      	cbz	r2, 800396e <_svfprintf_r+0x5ae>
 800396a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800396e:	9b02      	ldr	r3, [sp, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 83a0 	beq.w	80040b6 <_svfprintf_r+0xcf6>
 8003976:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800397a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800397e:	2600      	movs	r6, #0
 8003980:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003984:	9703      	str	r7, [sp, #12]
 8003986:	f04f 0901 	mov.w	r9, #1
 800398a:	4637      	mov	r7, r6
 800398c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003990:	e006      	b.n	80039a0 <_svfprintf_r+0x5e0>
 8003992:	bf00      	nop
 8003994:	7fefffff 	.word	0x7fefffff
 8003998:	08007ded 	.word	0x08007ded
 800399c:	4606      	mov	r6, r0
 800399e:	4637      	mov	r7, r6
 80039a0:	454e      	cmp	r6, r9
 80039a2:	4633      	mov	r3, r6
 80039a4:	bfb8      	it	lt
 80039a6:	464b      	movlt	r3, r9
 80039a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80039aa:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80039ae:	b113      	cbz	r3, 80039b6 <_svfprintf_r+0x5f6>
 80039b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039b2:	3301      	adds	r3, #1
 80039b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80039b6:	f015 0302 	ands.w	r3, r5, #2
 80039ba:	9314      	str	r3, [sp, #80]	; 0x50
 80039bc:	bf1e      	ittt	ne
 80039be:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80039c0:	3302      	addne	r3, #2
 80039c2:	930b      	strne	r3, [sp, #44]	; 0x2c
 80039c4:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80039c8:	9315      	str	r3, [sp, #84]	; 0x54
 80039ca:	d139      	bne.n	8003a40 <_svfprintf_r+0x680>
 80039cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	930c      	str	r3, [sp, #48]	; 0x30
 80039d6:	dd33      	ble.n	8003a40 <_svfprintf_r+0x680>
 80039d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039da:	2b10      	cmp	r3, #16
 80039dc:	4ba6      	ldr	r3, [pc, #664]	; (8003c78 <_svfprintf_r+0x8b8>)
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	dd18      	ble.n	8003a14 <_svfprintf_r+0x654>
 80039e2:	2310      	movs	r3, #16
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039e8:	3310      	adds	r3, #16
 80039ea:	9321      	str	r3, [sp, #132]	; 0x84
 80039ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80039ee:	3301      	adds	r3, #1
 80039f0:	2b07      	cmp	r3, #7
 80039f2:	9320      	str	r3, [sp, #128]	; 0x80
 80039f4:	dc01      	bgt.n	80039fa <_svfprintf_r+0x63a>
 80039f6:	3408      	adds	r4, #8
 80039f8:	e008      	b.n	8003a0c <_svfprintf_r+0x64c>
 80039fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80039fc:	4659      	mov	r1, fp
 80039fe:	4650      	mov	r0, sl
 8003a00:	f003 fef1 	bl	80077e6 <__ssprint_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	f040 835d 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003a0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a0e:	3b10      	subs	r3, #16
 8003a10:	930c      	str	r3, [sp, #48]	; 0x30
 8003a12:	e7e1      	b.n	80039d8 <_svfprintf_r+0x618>
 8003a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a1c:	4413      	add	r3, r2
 8003a1e:	9321      	str	r3, [sp, #132]	; 0x84
 8003a20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a22:	3301      	adds	r3, #1
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	9320      	str	r3, [sp, #128]	; 0x80
 8003a28:	dc01      	bgt.n	8003a2e <_svfprintf_r+0x66e>
 8003a2a:	3408      	adds	r4, #8
 8003a2c:	e008      	b.n	8003a40 <_svfprintf_r+0x680>
 8003a2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a30:	4659      	mov	r1, fp
 8003a32:	4650      	mov	r0, sl
 8003a34:	f003 fed7 	bl	80077e6 <__ssprint_r>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	f040 8343 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003a3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a40:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003a44:	b1bb      	cbz	r3, 8003a76 <_svfprintf_r+0x6b6>
 8003a46:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a52:	3301      	adds	r3, #1
 8003a54:	9321      	str	r3, [sp, #132]	; 0x84
 8003a56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a58:	3301      	adds	r3, #1
 8003a5a:	2b07      	cmp	r3, #7
 8003a5c:	9320      	str	r3, [sp, #128]	; 0x80
 8003a5e:	dc01      	bgt.n	8003a64 <_svfprintf_r+0x6a4>
 8003a60:	3408      	adds	r4, #8
 8003a62:	e008      	b.n	8003a76 <_svfprintf_r+0x6b6>
 8003a64:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a66:	4659      	mov	r1, fp
 8003a68:	4650      	mov	r0, sl
 8003a6a:	f003 febc 	bl	80077e6 <__ssprint_r>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f040 8328 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003a74:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a78:	b1b3      	cbz	r3, 8003aa8 <_svfprintf_r+0x6e8>
 8003a7a:	ab18      	add	r3, sp, #96	; 0x60
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a84:	3302      	adds	r3, #2
 8003a86:	9321      	str	r3, [sp, #132]	; 0x84
 8003a88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	9320      	str	r3, [sp, #128]	; 0x80
 8003a90:	dc01      	bgt.n	8003a96 <_svfprintf_r+0x6d6>
 8003a92:	3408      	adds	r4, #8
 8003a94:	e008      	b.n	8003aa8 <_svfprintf_r+0x6e8>
 8003a96:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a98:	4659      	mov	r1, fp
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	f003 fea3 	bl	80077e6 <__ssprint_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	f040 830f 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003aa6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d135      	bne.n	8003b1a <_svfprintf_r+0x75a>
 8003aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dd30      	ble.n	8003b1a <_svfprintf_r+0x75a>
 8003ab8:	4a70      	ldr	r2, [pc, #448]	; (8003c7c <_svfprintf_r+0x8bc>)
 8003aba:	6022      	str	r2, [r4, #0]
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	dd18      	ble.n	8003af2 <_svfprintf_r+0x732>
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	6062      	str	r2, [r4, #4]
 8003ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ac6:	3210      	adds	r2, #16
 8003ac8:	9221      	str	r2, [sp, #132]	; 0x84
 8003aca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003acc:	3201      	adds	r2, #1
 8003ace:	2a07      	cmp	r2, #7
 8003ad0:	9220      	str	r2, [sp, #128]	; 0x80
 8003ad2:	dc01      	bgt.n	8003ad8 <_svfprintf_r+0x718>
 8003ad4:	3408      	adds	r4, #8
 8003ad6:	e00a      	b.n	8003aee <_svfprintf_r+0x72e>
 8003ad8:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ada:	4659      	mov	r1, fp
 8003adc:	4650      	mov	r0, sl
 8003ade:	930c      	str	r3, [sp, #48]	; 0x30
 8003ae0:	f003 fe81 	bl	80077e6 <__ssprint_r>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f040 82ed 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aec:	ac2c      	add	r4, sp, #176	; 0xb0
 8003aee:	3b10      	subs	r3, #16
 8003af0:	e7e2      	b.n	8003ab8 <_svfprintf_r+0x6f8>
 8003af2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	9321      	str	r3, [sp, #132]	; 0x84
 8003afa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003afc:	3301      	adds	r3, #1
 8003afe:	2b07      	cmp	r3, #7
 8003b00:	9320      	str	r3, [sp, #128]	; 0x80
 8003b02:	dc01      	bgt.n	8003b08 <_svfprintf_r+0x748>
 8003b04:	3408      	adds	r4, #8
 8003b06:	e008      	b.n	8003b1a <_svfprintf_r+0x75a>
 8003b08:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b0a:	4659      	mov	r1, fp
 8003b0c:	4650      	mov	r0, sl
 8003b0e:	f003 fe6a 	bl	80077e6 <__ssprint_r>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f040 82d6 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003b18:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b1a:	ebc9 0606 	rsb	r6, r9, r6
 8003b1e:	2e00      	cmp	r6, #0
 8003b20:	dd2e      	ble.n	8003b80 <_svfprintf_r+0x7c0>
 8003b22:	4b56      	ldr	r3, [pc, #344]	; (8003c7c <_svfprintf_r+0x8bc>)
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	2e10      	cmp	r6, #16
 8003b28:	dd16      	ble.n	8003b58 <_svfprintf_r+0x798>
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b30:	3310      	adds	r3, #16
 8003b32:	9321      	str	r3, [sp, #132]	; 0x84
 8003b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b36:	3301      	adds	r3, #1
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	9320      	str	r3, [sp, #128]	; 0x80
 8003b3c:	dc01      	bgt.n	8003b42 <_svfprintf_r+0x782>
 8003b3e:	3408      	adds	r4, #8
 8003b40:	e008      	b.n	8003b54 <_svfprintf_r+0x794>
 8003b42:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b44:	4659      	mov	r1, fp
 8003b46:	4650      	mov	r0, sl
 8003b48:	f003 fe4d 	bl	80077e6 <__ssprint_r>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f040 82b9 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003b52:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b54:	3e10      	subs	r6, #16
 8003b56:	e7e4      	b.n	8003b22 <_svfprintf_r+0x762>
 8003b58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b5a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003b5c:	6066      	str	r6, [r4, #4]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	4406      	add	r6, r0
 8003b62:	2b07      	cmp	r3, #7
 8003b64:	9621      	str	r6, [sp, #132]	; 0x84
 8003b66:	9320      	str	r3, [sp, #128]	; 0x80
 8003b68:	dc01      	bgt.n	8003b6e <_svfprintf_r+0x7ae>
 8003b6a:	3408      	adds	r4, #8
 8003b6c:	e008      	b.n	8003b80 <_svfprintf_r+0x7c0>
 8003b6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b70:	4659      	mov	r1, fp
 8003b72:	4650      	mov	r0, sl
 8003b74:	f003 fe37 	bl	80077e6 <__ssprint_r>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	f040 82a3 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003b7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b80:	05eb      	lsls	r3, r5, #23
 8003b82:	d414      	bmi.n	8003bae <_svfprintf_r+0x7ee>
 8003b84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b86:	e884 0300 	stmia.w	r4, {r8, r9}
 8003b8a:	444b      	add	r3, r9
 8003b8c:	9321      	str	r3, [sp, #132]	; 0x84
 8003b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b90:	3301      	adds	r3, #1
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	9320      	str	r3, [sp, #128]	; 0x80
 8003b96:	f340 8244 	ble.w	8004022 <_svfprintf_r+0xc62>
 8003b9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	f003 fe21 	bl	80077e6 <__ssprint_r>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	f040 828d 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003baa:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bac:	e23a      	b.n	8004024 <_svfprintf_r+0xc64>
 8003bae:	9b02      	ldr	r3, [sp, #8]
 8003bb0:	2b65      	cmp	r3, #101	; 0x65
 8003bb2:	f340 81ad 	ble.w	8003f10 <_svfprintf_r+0xb50>
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bbe:	f7fc ff7f 	bl	8000ac0 <__aeabi_dcmpeq>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d05e      	beq.n	8003c84 <_svfprintf_r+0x8c4>
 8003bc6:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <_svfprintf_r+0x8c0>)
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	9321      	str	r3, [sp, #132]	; 0x84
 8003bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	9320      	str	r3, [sp, #128]	; 0x80
 8003bdc:	dc01      	bgt.n	8003be2 <_svfprintf_r+0x822>
 8003bde:	3408      	adds	r4, #8
 8003be0:	e008      	b.n	8003bf4 <_svfprintf_r+0x834>
 8003be2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003be4:	4659      	mov	r1, fp
 8003be6:	4650      	mov	r0, sl
 8003be8:	f003 fdfd 	bl	80077e6 <__ssprint_r>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	f040 8269 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003bf2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bf6:	9a04      	ldr	r2, [sp, #16]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	db02      	blt.n	8003c02 <_svfprintf_r+0x842>
 8003bfc:	07ee      	lsls	r6, r5, #31
 8003bfe:	f140 8211 	bpl.w	8004024 <_svfprintf_r+0xc64>
 8003c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	9b08      	ldr	r3, [sp, #32]
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	9a08      	ldr	r2, [sp, #32]
 8003c0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c0e:	4413      	add	r3, r2
 8003c10:	9321      	str	r3, [sp, #132]	; 0x84
 8003c12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c14:	3301      	adds	r3, #1
 8003c16:	2b07      	cmp	r3, #7
 8003c18:	9320      	str	r3, [sp, #128]	; 0x80
 8003c1a:	dc01      	bgt.n	8003c20 <_svfprintf_r+0x860>
 8003c1c:	3408      	adds	r4, #8
 8003c1e:	e008      	b.n	8003c32 <_svfprintf_r+0x872>
 8003c20:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c22:	4659      	mov	r1, fp
 8003c24:	4650      	mov	r0, sl
 8003c26:	f003 fdde 	bl	80077e6 <__ssprint_r>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f040 824a 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003c30:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c32:	9b04      	ldr	r3, [sp, #16]
 8003c34:	1e5e      	subs	r6, r3, #1
 8003c36:	2e00      	cmp	r6, #0
 8003c38:	f340 81f4 	ble.w	8004024 <_svfprintf_r+0xc64>
 8003c3c:	4f0f      	ldr	r7, [pc, #60]	; (8003c7c <_svfprintf_r+0x8bc>)
 8003c3e:	f04f 0810 	mov.w	r8, #16
 8003c42:	2e10      	cmp	r6, #16
 8003c44:	f340 8159 	ble.w	8003efa <_svfprintf_r+0xb3a>
 8003c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c4a:	3310      	adds	r3, #16
 8003c4c:	9321      	str	r3, [sp, #132]	; 0x84
 8003c4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c50:	3301      	adds	r3, #1
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	e884 0180 	stmia.w	r4, {r7, r8}
 8003c58:	9320      	str	r3, [sp, #128]	; 0x80
 8003c5a:	dc01      	bgt.n	8003c60 <_svfprintf_r+0x8a0>
 8003c5c:	3408      	adds	r4, #8
 8003c5e:	e008      	b.n	8003c72 <_svfprintf_r+0x8b2>
 8003c60:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c62:	4659      	mov	r1, fp
 8003c64:	4650      	mov	r0, sl
 8003c66:	f003 fdbe 	bl	80077e6 <__ssprint_r>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f040 822a 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003c70:	ac2c      	add	r4, sp, #176	; 0xb0
 8003c72:	3e10      	subs	r6, #16
 8003c74:	e7e5      	b.n	8003c42 <_svfprintf_r+0x882>
 8003c76:	bf00      	nop
 8003c78:	08007e00 	.word	0x08007e00
 8003c7c:	08007dbc 	.word	0x08007dbc
 8003c80:	08007dfe 	.word	0x08007dfe
 8003c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	dc7c      	bgt.n	8003d84 <_svfprintf_r+0x9c4>
 8003c8a:	4b9f      	ldr	r3, [pc, #636]	; (8003f08 <_svfprintf_r+0xb48>)
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c94:	3301      	adds	r3, #1
 8003c96:	9321      	str	r3, [sp, #132]	; 0x84
 8003c98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	2b07      	cmp	r3, #7
 8003c9e:	9320      	str	r3, [sp, #128]	; 0x80
 8003ca0:	dc01      	bgt.n	8003ca6 <_svfprintf_r+0x8e6>
 8003ca2:	3408      	adds	r4, #8
 8003ca4:	e008      	b.n	8003cb8 <_svfprintf_r+0x8f8>
 8003ca6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ca8:	4659      	mov	r1, fp
 8003caa:	4650      	mov	r0, sl
 8003cac:	f003 fd9b 	bl	80077e6 <__ssprint_r>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 8207 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003cb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cba:	b923      	cbnz	r3, 8003cc6 <_svfprintf_r+0x906>
 8003cbc:	9b04      	ldr	r3, [sp, #16]
 8003cbe:	b913      	cbnz	r3, 8003cc6 <_svfprintf_r+0x906>
 8003cc0:	07e8      	lsls	r0, r5, #31
 8003cc2:	f140 81af 	bpl.w	8004024 <_svfprintf_r+0xc64>
 8003cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	9b08      	ldr	r3, [sp, #32]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	9a08      	ldr	r2, [sp, #32]
 8003cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cd2:	4413      	add	r3, r2
 8003cd4:	9321      	str	r3, [sp, #132]	; 0x84
 8003cd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cd8:	3301      	adds	r3, #1
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	9320      	str	r3, [sp, #128]	; 0x80
 8003cde:	dc02      	bgt.n	8003ce6 <_svfprintf_r+0x926>
 8003ce0:	f104 0308 	add.w	r3, r4, #8
 8003ce4:	e008      	b.n	8003cf8 <_svfprintf_r+0x938>
 8003ce6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ce8:	4659      	mov	r1, fp
 8003cea:	4650      	mov	r0, sl
 8003cec:	f003 fd7b 	bl	80077e6 <__ssprint_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f040 81e7 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003cf6:	ab2c      	add	r3, sp, #176	; 0xb0
 8003cf8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003cfa:	4276      	negs	r6, r6
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	dd30      	ble.n	8003d62 <_svfprintf_r+0x9a2>
 8003d00:	4f82      	ldr	r7, [pc, #520]	; (8003f0c <_svfprintf_r+0xb4c>)
 8003d02:	2410      	movs	r4, #16
 8003d04:	2e10      	cmp	r6, #16
 8003d06:	dd16      	ble.n	8003d36 <_svfprintf_r+0x976>
 8003d08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d0a:	601f      	str	r7, [r3, #0]
 8003d0c:	3210      	adds	r2, #16
 8003d0e:	9221      	str	r2, [sp, #132]	; 0x84
 8003d10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d12:	605c      	str	r4, [r3, #4]
 8003d14:	3201      	adds	r2, #1
 8003d16:	2a07      	cmp	r2, #7
 8003d18:	9220      	str	r2, [sp, #128]	; 0x80
 8003d1a:	dc01      	bgt.n	8003d20 <_svfprintf_r+0x960>
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	e008      	b.n	8003d32 <_svfprintf_r+0x972>
 8003d20:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d22:	4659      	mov	r1, fp
 8003d24:	4650      	mov	r0, sl
 8003d26:	f003 fd5e 	bl	80077e6 <__ssprint_r>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	f040 81ca 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003d30:	ab2c      	add	r3, sp, #176	; 0xb0
 8003d32:	3e10      	subs	r6, #16
 8003d34:	e7e6      	b.n	8003d04 <_svfprintf_r+0x944>
 8003d36:	4a75      	ldr	r2, [pc, #468]	; (8003f0c <_svfprintf_r+0xb4c>)
 8003d38:	e883 0044 	stmia.w	r3, {r2, r6}
 8003d3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d3e:	4416      	add	r6, r2
 8003d40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d42:	9621      	str	r6, [sp, #132]	; 0x84
 8003d44:	3201      	adds	r2, #1
 8003d46:	2a07      	cmp	r2, #7
 8003d48:	9220      	str	r2, [sp, #128]	; 0x80
 8003d4a:	dc01      	bgt.n	8003d50 <_svfprintf_r+0x990>
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	e008      	b.n	8003d62 <_svfprintf_r+0x9a2>
 8003d50:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d52:	4659      	mov	r1, fp
 8003d54:	4650      	mov	r0, sl
 8003d56:	f003 fd46 	bl	80077e6 <__ssprint_r>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	f040 81b2 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003d60:	ab2c      	add	r3, sp, #176	; 0xb0
 8003d62:	9a04      	ldr	r2, [sp, #16]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	9904      	ldr	r1, [sp, #16]
 8003d68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d6a:	f8c3 8000 	str.w	r8, [r3]
 8003d6e:	440a      	add	r2, r1
 8003d70:	9221      	str	r2, [sp, #132]	; 0x84
 8003d72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d74:	3201      	adds	r2, #1
 8003d76:	2a07      	cmp	r2, #7
 8003d78:	9220      	str	r2, [sp, #128]	; 0x80
 8003d7a:	f73f af0e 	bgt.w	8003b9a <_svfprintf_r+0x7da>
 8003d7e:	f103 0408 	add.w	r4, r3, #8
 8003d82:	e14f      	b.n	8004024 <_svfprintf_r+0xc64>
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	42bb      	cmp	r3, r7
 8003d88:	bfa8      	it	ge
 8003d8a:	463b      	movge	r3, r7
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	461e      	mov	r6, r3
 8003d90:	dd15      	ble.n	8003dbe <_svfprintf_r+0x9fe>
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d96:	f8c4 8000 	str.w	r8, [r4]
 8003d9a:	4433      	add	r3, r6
 8003d9c:	9321      	str	r3, [sp, #132]	; 0x84
 8003d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003da0:	3301      	adds	r3, #1
 8003da2:	2b07      	cmp	r3, #7
 8003da4:	9320      	str	r3, [sp, #128]	; 0x80
 8003da6:	dc01      	bgt.n	8003dac <_svfprintf_r+0x9ec>
 8003da8:	3408      	adds	r4, #8
 8003daa:	e008      	b.n	8003dbe <_svfprintf_r+0x9fe>
 8003dac:	aa1f      	add	r2, sp, #124	; 0x7c
 8003dae:	4659      	mov	r1, fp
 8003db0:	4650      	mov	r0, sl
 8003db2:	f003 fd18 	bl	80077e6 <__ssprint_r>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	f040 8184 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003dbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8003dbe:	2e00      	cmp	r6, #0
 8003dc0:	bfac      	ite	ge
 8003dc2:	1bbe      	subge	r6, r7, r6
 8003dc4:	463e      	movlt	r6, r7
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	dd30      	ble.n	8003e2c <_svfprintf_r+0xa6c>
 8003dca:	f04f 0910 	mov.w	r9, #16
 8003dce:	4b4f      	ldr	r3, [pc, #316]	; (8003f0c <_svfprintf_r+0xb4c>)
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	2e10      	cmp	r6, #16
 8003dd4:	dd16      	ble.n	8003e04 <_svfprintf_r+0xa44>
 8003dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dd8:	f8c4 9004 	str.w	r9, [r4, #4]
 8003ddc:	3310      	adds	r3, #16
 8003dde:	9321      	str	r3, [sp, #132]	; 0x84
 8003de0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003de2:	3301      	adds	r3, #1
 8003de4:	2b07      	cmp	r3, #7
 8003de6:	9320      	str	r3, [sp, #128]	; 0x80
 8003de8:	dc01      	bgt.n	8003dee <_svfprintf_r+0xa2e>
 8003dea:	3408      	adds	r4, #8
 8003dec:	e008      	b.n	8003e00 <_svfprintf_r+0xa40>
 8003dee:	aa1f      	add	r2, sp, #124	; 0x7c
 8003df0:	4659      	mov	r1, fp
 8003df2:	4650      	mov	r0, sl
 8003df4:	f003 fcf7 	bl	80077e6 <__ssprint_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	f040 8163 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003dfe:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e00:	3e10      	subs	r6, #16
 8003e02:	e7e4      	b.n	8003dce <_svfprintf_r+0xa0e>
 8003e04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e06:	6066      	str	r6, [r4, #4]
 8003e08:	441e      	add	r6, r3
 8003e0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e0c:	9621      	str	r6, [sp, #132]	; 0x84
 8003e0e:	3301      	adds	r3, #1
 8003e10:	2b07      	cmp	r3, #7
 8003e12:	9320      	str	r3, [sp, #128]	; 0x80
 8003e14:	dc01      	bgt.n	8003e1a <_svfprintf_r+0xa5a>
 8003e16:	3408      	adds	r4, #8
 8003e18:	e008      	b.n	8003e2c <_svfprintf_r+0xa6c>
 8003e1a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	4650      	mov	r0, sl
 8003e20:	f003 fce1 	bl	80077e6 <__ssprint_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f040 814d 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003e2a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e2e:	9a04      	ldr	r2, [sp, #16]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	4447      	add	r7, r8
 8003e34:	db01      	blt.n	8003e3a <_svfprintf_r+0xa7a>
 8003e36:	07e9      	lsls	r1, r5, #31
 8003e38:	d517      	bpl.n	8003e6a <_svfprintf_r+0xaaa>
 8003e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	9b08      	ldr	r3, [sp, #32]
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	9a08      	ldr	r2, [sp, #32]
 8003e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e46:	4413      	add	r3, r2
 8003e48:	9321      	str	r3, [sp, #132]	; 0x84
 8003e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	2b07      	cmp	r3, #7
 8003e50:	9320      	str	r3, [sp, #128]	; 0x80
 8003e52:	dc01      	bgt.n	8003e58 <_svfprintf_r+0xa98>
 8003e54:	3408      	adds	r4, #8
 8003e56:	e008      	b.n	8003e6a <_svfprintf_r+0xaaa>
 8003e58:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	f003 fcc2 	bl	80077e6 <__ssprint_r>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f040 812e 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003e68:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e6a:	9b04      	ldr	r3, [sp, #16]
 8003e6c:	9a04      	ldr	r2, [sp, #16]
 8003e6e:	eb08 0603 	add.w	r6, r8, r3
 8003e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e74:	1bf6      	subs	r6, r6, r7
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	429e      	cmp	r6, r3
 8003e7a:	bfa8      	it	ge
 8003e7c:	461e      	movge	r6, r3
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	dd14      	ble.n	8003eac <_svfprintf_r+0xaec>
 8003e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e84:	6027      	str	r7, [r4, #0]
 8003e86:	4433      	add	r3, r6
 8003e88:	9321      	str	r3, [sp, #132]	; 0x84
 8003e8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e8c:	6066      	str	r6, [r4, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	2b07      	cmp	r3, #7
 8003e92:	9320      	str	r3, [sp, #128]	; 0x80
 8003e94:	dc01      	bgt.n	8003e9a <_svfprintf_r+0xada>
 8003e96:	3408      	adds	r4, #8
 8003e98:	e008      	b.n	8003eac <_svfprintf_r+0xaec>
 8003e9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	f003 fca1 	bl	80077e6 <__ssprint_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f040 810d 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003eaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8003eac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eae:	9a04      	ldr	r2, [sp, #16]
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	eba2 0303 	sub.w	r3, r2, r3
 8003eb6:	bfac      	ite	ge
 8003eb8:	1b9e      	subge	r6, r3, r6
 8003eba:	461e      	movlt	r6, r3
 8003ebc:	2e00      	cmp	r6, #0
 8003ebe:	f340 80b1 	ble.w	8004024 <_svfprintf_r+0xc64>
 8003ec2:	4f12      	ldr	r7, [pc, #72]	; (8003f0c <_svfprintf_r+0xb4c>)
 8003ec4:	f04f 0810 	mov.w	r8, #16
 8003ec8:	2e10      	cmp	r6, #16
 8003eca:	dd16      	ble.n	8003efa <_svfprintf_r+0xb3a>
 8003ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ece:	3310      	adds	r3, #16
 8003ed0:	9321      	str	r3, [sp, #132]	; 0x84
 8003ed2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	2b07      	cmp	r3, #7
 8003ed8:	e884 0180 	stmia.w	r4, {r7, r8}
 8003edc:	9320      	str	r3, [sp, #128]	; 0x80
 8003ede:	dc01      	bgt.n	8003ee4 <_svfprintf_r+0xb24>
 8003ee0:	3408      	adds	r4, #8
 8003ee2:	e008      	b.n	8003ef6 <_svfprintf_r+0xb36>
 8003ee4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	4650      	mov	r0, sl
 8003eea:	f003 fc7c 	bl	80077e6 <__ssprint_r>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f040 80e8 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003ef4:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ef6:	3e10      	subs	r6, #16
 8003ef8:	e7e6      	b.n	8003ec8 <_svfprintf_r+0xb08>
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <_svfprintf_r+0xb4c>)
 8003efc:	e884 0048 	stmia.w	r4, {r3, r6}
 8003f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f02:	441e      	add	r6, r3
 8003f04:	9621      	str	r6, [sp, #132]	; 0x84
 8003f06:	e642      	b.n	8003b8e <_svfprintf_r+0x7ce>
 8003f08:	08007dfe 	.word	0x08007dfe
 8003f0c:	08007dbc 	.word	0x08007dbc
 8003f10:	9b04      	ldr	r3, [sp, #16]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	dc01      	bgt.n	8003f1a <_svfprintf_r+0xb5a>
 8003f16:	07ea      	lsls	r2, r5, #31
 8003f18:	d573      	bpl.n	8004002 <_svfprintf_r+0xc42>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f20:	f8c4 8000 	str.w	r8, [r4]
 8003f24:	3301      	adds	r3, #1
 8003f26:	9321      	str	r3, [sp, #132]	; 0x84
 8003f28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	9320      	str	r3, [sp, #128]	; 0x80
 8003f30:	dc01      	bgt.n	8003f36 <_svfprintf_r+0xb76>
 8003f32:	3408      	adds	r4, #8
 8003f34:	e008      	b.n	8003f48 <_svfprintf_r+0xb88>
 8003f36:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f38:	4659      	mov	r1, fp
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	f003 fc53 	bl	80077e6 <__ssprint_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	f040 80bf 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003f46:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	9b08      	ldr	r3, [sp, #32]
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	9a08      	ldr	r2, [sp, #32]
 8003f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f54:	4413      	add	r3, r2
 8003f56:	9321      	str	r3, [sp, #132]	; 0x84
 8003f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	2b07      	cmp	r3, #7
 8003f5e:	9320      	str	r3, [sp, #128]	; 0x80
 8003f60:	dc01      	bgt.n	8003f66 <_svfprintf_r+0xba6>
 8003f62:	3408      	adds	r4, #8
 8003f64:	e008      	b.n	8003f78 <_svfprintf_r+0xbb8>
 8003f66:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f68:	4659      	mov	r1, fp
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	f003 fc3b 	bl	80077e6 <__ssprint_r>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	f040 80a7 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003f76:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f80:	f7fc fd9e 	bl	8000ac0 <__aeabi_dcmpeq>
 8003f84:	9b04      	ldr	r3, [sp, #16]
 8003f86:	1e5e      	subs	r6, r3, #1
 8003f88:	b9b8      	cbnz	r0, 8003fba <_svfprintf_r+0xbfa>
 8003f8a:	f108 0301 	add.w	r3, r8, #1
 8003f8e:	e884 0048 	stmia.w	r4, {r3, r6}
 8003f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f94:	9a04      	ldr	r2, [sp, #16]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	9321      	str	r3, [sp, #132]	; 0x84
 8003f9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	2b07      	cmp	r3, #7
 8003fa2:	9320      	str	r3, [sp, #128]	; 0x80
 8003fa4:	dd34      	ble.n	8004010 <_svfprintf_r+0xc50>
 8003fa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fa8:	4659      	mov	r1, fp
 8003faa:	4650      	mov	r0, sl
 8003fac:	f003 fc1b 	bl	80077e6 <__ssprint_r>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f040 8087 	bne.w	80040c4 <_svfprintf_r+0xd04>
 8003fb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fb8:	e02b      	b.n	8004012 <_svfprintf_r+0xc52>
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	dd29      	ble.n	8004012 <_svfprintf_r+0xc52>
 8003fbe:	4fa7      	ldr	r7, [pc, #668]	; (800425c <_svfprintf_r+0xe9c>)
 8003fc0:	f04f 0810 	mov.w	r8, #16
 8003fc4:	2e10      	cmp	r6, #16
 8003fc6:	dd15      	ble.n	8003ff4 <_svfprintf_r+0xc34>
 8003fc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fca:	3310      	adds	r3, #16
 8003fcc:	9321      	str	r3, [sp, #132]	; 0x84
 8003fce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	e884 0180 	stmia.w	r4, {r7, r8}
 8003fd8:	9320      	str	r3, [sp, #128]	; 0x80
 8003fda:	dc01      	bgt.n	8003fe0 <_svfprintf_r+0xc20>
 8003fdc:	3408      	adds	r4, #8
 8003fde:	e007      	b.n	8003ff0 <_svfprintf_r+0xc30>
 8003fe0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	f003 fbfe 	bl	80077e6 <__ssprint_r>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d16a      	bne.n	80040c4 <_svfprintf_r+0xd04>
 8003fee:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ff0:	3e10      	subs	r6, #16
 8003ff2:	e7e7      	b.n	8003fc4 <_svfprintf_r+0xc04>
 8003ff4:	4b99      	ldr	r3, [pc, #612]	; (800425c <_svfprintf_r+0xe9c>)
 8003ff6:	e884 0048 	stmia.w	r4, {r3, r6}
 8003ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ffc:	441e      	add	r6, r3
 8003ffe:	9621      	str	r6, [sp, #132]	; 0x84
 8004000:	e7cc      	b.n	8003f9c <_svfprintf_r+0xbdc>
 8004002:	2301      	movs	r3, #1
 8004004:	6063      	str	r3, [r4, #4]
 8004006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004008:	f8c4 8000 	str.w	r8, [r4]
 800400c:	3301      	adds	r3, #1
 800400e:	e7c4      	b.n	8003f9a <_svfprintf_r+0xbda>
 8004010:	3408      	adds	r4, #8
 8004012:	ab1b      	add	r3, sp, #108	; 0x6c
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800401c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800401e:	4413      	add	r3, r2
 8004020:	e5b4      	b.n	8003b8c <_svfprintf_r+0x7cc>
 8004022:	3408      	adds	r4, #8
 8004024:	076b      	lsls	r3, r5, #29
 8004026:	d40b      	bmi.n	8004040 <_svfprintf_r+0xc80>
 8004028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800402e:	428a      	cmp	r2, r1
 8004030:	bfac      	ite	ge
 8004032:	189b      	addge	r3, r3, r2
 8004034:	185b      	addlt	r3, r3, r1
 8004036:	930a      	str	r3, [sp, #40]	; 0x28
 8004038:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800403a:	2b00      	cmp	r3, #0
 800403c:	d035      	beq.n	80040aa <_svfprintf_r+0xcea>
 800403e:	e02e      	b.n	800409e <_svfprintf_r+0xcde>
 8004040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004044:	1a9d      	subs	r5, r3, r2
 8004046:	2d00      	cmp	r5, #0
 8004048:	ddee      	ble.n	8004028 <_svfprintf_r+0xc68>
 800404a:	2610      	movs	r6, #16
 800404c:	4b84      	ldr	r3, [pc, #528]	; (8004260 <_svfprintf_r+0xea0>)
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2d10      	cmp	r5, #16
 8004052:	dd13      	ble.n	800407c <_svfprintf_r+0xcbc>
 8004054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004056:	6066      	str	r6, [r4, #4]
 8004058:	3310      	adds	r3, #16
 800405a:	9321      	str	r3, [sp, #132]	; 0x84
 800405c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800405e:	3301      	adds	r3, #1
 8004060:	2b07      	cmp	r3, #7
 8004062:	9320      	str	r3, [sp, #128]	; 0x80
 8004064:	dc01      	bgt.n	800406a <_svfprintf_r+0xcaa>
 8004066:	3408      	adds	r4, #8
 8004068:	e006      	b.n	8004078 <_svfprintf_r+0xcb8>
 800406a:	aa1f      	add	r2, sp, #124	; 0x7c
 800406c:	4659      	mov	r1, fp
 800406e:	4650      	mov	r0, sl
 8004070:	f003 fbb9 	bl	80077e6 <__ssprint_r>
 8004074:	bb30      	cbnz	r0, 80040c4 <_svfprintf_r+0xd04>
 8004076:	ac2c      	add	r4, sp, #176	; 0xb0
 8004078:	3d10      	subs	r5, #16
 800407a:	e7e7      	b.n	800404c <_svfprintf_r+0xc8c>
 800407c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800407e:	6065      	str	r5, [r4, #4]
 8004080:	441d      	add	r5, r3
 8004082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004084:	9521      	str	r5, [sp, #132]	; 0x84
 8004086:	3301      	adds	r3, #1
 8004088:	2b07      	cmp	r3, #7
 800408a:	9320      	str	r3, [sp, #128]	; 0x80
 800408c:	ddcc      	ble.n	8004028 <_svfprintf_r+0xc68>
 800408e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004090:	4659      	mov	r1, fp
 8004092:	4650      	mov	r0, sl
 8004094:	f003 fba7 	bl	80077e6 <__ssprint_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	d0c5      	beq.n	8004028 <_svfprintf_r+0xc68>
 800409c:	e012      	b.n	80040c4 <_svfprintf_r+0xd04>
 800409e:	aa1f      	add	r2, sp, #124	; 0x7c
 80040a0:	4659      	mov	r1, fp
 80040a2:	4650      	mov	r0, sl
 80040a4:	f003 fb9f 	bl	80077e6 <__ssprint_r>
 80040a8:	b960      	cbnz	r0, 80040c4 <_svfprintf_r+0xd04>
 80040aa:	2300      	movs	r3, #0
 80040ac:	9320      	str	r3, [sp, #128]	; 0x80
 80040ae:	9f03      	ldr	r7, [sp, #12]
 80040b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80040b2:	f7ff b9bb 	b.w	800342c <_svfprintf_r+0x6c>
 80040b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040b8:	b123      	cbz	r3, 80040c4 <_svfprintf_r+0xd04>
 80040ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80040bc:	4659      	mov	r1, fp
 80040be:	4650      	mov	r0, sl
 80040c0:	f003 fb91 	bl	80077e6 <__ssprint_r>
 80040c4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80040c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ce:	bf18      	it	ne
 80040d0:	f04f 33ff 	movne.w	r3, #4294967295
 80040d4:	4618      	mov	r0, r3
 80040d6:	e12e      	b.n	8004336 <_svfprintf_r+0xf76>
 80040d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	f7fc fd20 	bl	8000b24 <__aeabi_dcmpun>
 80040e4:	b160      	cbz	r0, 8004100 <_svfprintf_r+0xd40>
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <_svfprintf_r+0xea4>)
 80040e8:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <_svfprintf_r+0xea8>)
 80040ea:	9902      	ldr	r1, [sp, #8]
 80040ec:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80040f0:	2947      	cmp	r1, #71	; 0x47
 80040f2:	bfcc      	ite	gt
 80040f4:	4690      	movgt	r8, r2
 80040f6:	4698      	movle	r8, r3
 80040f8:	f04f 0903 	mov.w	r9, #3
 80040fc:	2600      	movs	r6, #0
 80040fe:	e44e      	b.n	800399e <_svfprintf_r+0x5de>
 8004100:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004104:	d00a      	beq.n	800411c <_svfprintf_r+0xd5c>
 8004106:	9b02      	ldr	r3, [sp, #8]
 8004108:	f023 0320 	bic.w	r3, r3, #32
 800410c:	2b47      	cmp	r3, #71	; 0x47
 800410e:	d107      	bne.n	8004120 <_svfprintf_r+0xd60>
 8004110:	f1b9 0f00 	cmp.w	r9, #0
 8004114:	bf08      	it	eq
 8004116:	f04f 0901 	moveq.w	r9, #1
 800411a:	e001      	b.n	8004120 <_svfprintf_r+0xd60>
 800411c:	f04f 0906 	mov.w	r9, #6
 8004120:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004124:	930c      	str	r3, [sp, #48]	; 0x30
 8004126:	9b07      	ldr	r3, [sp, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da07      	bge.n	800413c <_svfprintf_r+0xd7c>
 800412c:	9b06      	ldr	r3, [sp, #24]
 800412e:	930e      	str	r3, [sp, #56]	; 0x38
 8004130:	9b07      	ldr	r3, [sp, #28]
 8004132:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004136:	930f      	str	r3, [sp, #60]	; 0x3c
 8004138:	232d      	movs	r3, #45	; 0x2d
 800413a:	e004      	b.n	8004146 <_svfprintf_r+0xd86>
 800413c:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004140:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004144:	2300      	movs	r3, #0
 8004146:	930b      	str	r3, [sp, #44]	; 0x2c
 8004148:	9b02      	ldr	r3, [sp, #8]
 800414a:	f023 0720 	bic.w	r7, r3, #32
 800414e:	2f46      	cmp	r7, #70	; 0x46
 8004150:	d004      	beq.n	800415c <_svfprintf_r+0xd9c>
 8004152:	2f45      	cmp	r7, #69	; 0x45
 8004154:	d105      	bne.n	8004162 <_svfprintf_r+0xda2>
 8004156:	f109 0601 	add.w	r6, r9, #1
 800415a:	e003      	b.n	8004164 <_svfprintf_r+0xda4>
 800415c:	464e      	mov	r6, r9
 800415e:	2103      	movs	r1, #3
 8004160:	e001      	b.n	8004166 <_svfprintf_r+0xda6>
 8004162:	464e      	mov	r6, r9
 8004164:	2102      	movs	r1, #2
 8004166:	ab1d      	add	r3, sp, #116	; 0x74
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	ab1a      	add	r3, sp, #104	; 0x68
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4632      	mov	r2, r6
 8004170:	ab19      	add	r3, sp, #100	; 0x64
 8004172:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004176:	4650      	mov	r0, sl
 8004178:	f001 fa16 	bl	80055a8 <_dtoa_r>
 800417c:	2f47      	cmp	r7, #71	; 0x47
 800417e:	4680      	mov	r8, r0
 8004180:	d102      	bne.n	8004188 <_svfprintf_r+0xdc8>
 8004182:	07eb      	lsls	r3, r5, #31
 8004184:	f140 80cd 	bpl.w	8004322 <_svfprintf_r+0xf62>
 8004188:	eb08 0306 	add.w	r3, r8, r6
 800418c:	2f46      	cmp	r7, #70	; 0x46
 800418e:	9304      	str	r3, [sp, #16]
 8004190:	d111      	bne.n	80041b6 <_svfprintf_r+0xdf6>
 8004192:	f898 3000 	ldrb.w	r3, [r8]
 8004196:	2b30      	cmp	r3, #48	; 0x30
 8004198:	d109      	bne.n	80041ae <_svfprintf_r+0xdee>
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041a2:	f7fc fc8d 	bl	8000ac0 <__aeabi_dcmpeq>
 80041a6:	b910      	cbnz	r0, 80041ae <_svfprintf_r+0xdee>
 80041a8:	f1c6 0601 	rsb	r6, r6, #1
 80041ac:	9619      	str	r6, [sp, #100]	; 0x64
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041b2:	441a      	add	r2, r3
 80041b4:	9204      	str	r2, [sp, #16]
 80041b6:	2200      	movs	r2, #0
 80041b8:	2300      	movs	r3, #0
 80041ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041be:	f7fc fc7f 	bl	8000ac0 <__aeabi_dcmpeq>
 80041c2:	b908      	cbnz	r0, 80041c8 <_svfprintf_r+0xe08>
 80041c4:	2230      	movs	r2, #48	; 0x30
 80041c6:	e002      	b.n	80041ce <_svfprintf_r+0xe0e>
 80041c8:	9b04      	ldr	r3, [sp, #16]
 80041ca:	931d      	str	r3, [sp, #116]	; 0x74
 80041cc:	e007      	b.n	80041de <_svfprintf_r+0xe1e>
 80041ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80041d0:	9904      	ldr	r1, [sp, #16]
 80041d2:	4299      	cmp	r1, r3
 80041d4:	d903      	bls.n	80041de <_svfprintf_r+0xe1e>
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	911d      	str	r1, [sp, #116]	; 0x74
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e7f7      	b.n	80041ce <_svfprintf_r+0xe0e>
 80041de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80041e0:	2f47      	cmp	r7, #71	; 0x47
 80041e2:	ebc8 0303 	rsb	r3, r8, r3
 80041e6:	9304      	str	r3, [sp, #16]
 80041e8:	d108      	bne.n	80041fc <_svfprintf_r+0xe3c>
 80041ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041ec:	1cdf      	adds	r7, r3, #3
 80041ee:	db01      	blt.n	80041f4 <_svfprintf_r+0xe34>
 80041f0:	4599      	cmp	r9, r3
 80041f2:	da68      	bge.n	80042c6 <_svfprintf_r+0xf06>
 80041f4:	9b02      	ldr	r3, [sp, #8]
 80041f6:	3b02      	subs	r3, #2
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	e002      	b.n	8004202 <_svfprintf_r+0xe42>
 80041fc:	9b02      	ldr	r3, [sp, #8]
 80041fe:	2b65      	cmp	r3, #101	; 0x65
 8004200:	dc4a      	bgt.n	8004298 <_svfprintf_r+0xed8>
 8004202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004204:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004208:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800420c:	3b01      	subs	r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	9319      	str	r3, [sp, #100]	; 0x64
 8004212:	bfba      	itte	lt
 8004214:	425b      	neglt	r3, r3
 8004216:	222d      	movlt	r2, #45	; 0x2d
 8004218:	222b      	movge	r2, #43	; 0x2b
 800421a:	2b09      	cmp	r3, #9
 800421c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004220:	dd24      	ble.n	800426c <_svfprintf_r+0xeac>
 8004222:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004226:	200a      	movs	r0, #10
 8004228:	fb93 f1f0 	sdiv	r1, r3, r0
 800422c:	fb00 3311 	mls	r3, r0, r1, r3
 8004230:	3330      	adds	r3, #48	; 0x30
 8004232:	2909      	cmp	r1, #9
 8004234:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004238:	460b      	mov	r3, r1
 800423a:	dcf5      	bgt.n	8004228 <_svfprintf_r+0xe68>
 800423c:	3330      	adds	r3, #48	; 0x30
 800423e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004242:	1e51      	subs	r1, r2, #1
 8004244:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004248:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800424c:	4281      	cmp	r1, r0
 800424e:	461a      	mov	r2, r3
 8004250:	d213      	bcs.n	800427a <_svfprintf_r+0xeba>
 8004252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004256:	f803 2b01 	strb.w	r2, [r3], #1
 800425a:	e7f7      	b.n	800424c <_svfprintf_r+0xe8c>
 800425c:	08007dbc 	.word	0x08007dbc
 8004260:	08007e00 	.word	0x08007e00
 8004264:	08007dd4 	.word	0x08007dd4
 8004268:	08007dd8 	.word	0x08007dd8
 800426c:	2230      	movs	r2, #48	; 0x30
 800426e:	4413      	add	r3, r2
 8004270:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004274:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004278:	aa1c      	add	r2, sp, #112	; 0x70
 800427a:	ab1b      	add	r3, sp, #108	; 0x6c
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	9a04      	ldr	r2, [sp, #16]
 8004280:	9310      	str	r3, [sp, #64]	; 0x40
 8004282:	2a01      	cmp	r2, #1
 8004284:	eb03 0902 	add.w	r9, r3, r2
 8004288:	dc02      	bgt.n	8004290 <_svfprintf_r+0xed0>
 800428a:	f015 0701 	ands.w	r7, r5, #1
 800428e:	d032      	beq.n	80042f6 <_svfprintf_r+0xf36>
 8004290:	9b08      	ldr	r3, [sp, #32]
 8004292:	2700      	movs	r7, #0
 8004294:	4499      	add	r9, r3
 8004296:	e02e      	b.n	80042f6 <_svfprintf_r+0xf36>
 8004298:	9b02      	ldr	r3, [sp, #8]
 800429a:	2b66      	cmp	r3, #102	; 0x66
 800429c:	d113      	bne.n	80042c6 <_svfprintf_r+0xf06>
 800429e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	dd07      	ble.n	80042b4 <_svfprintf_r+0xef4>
 80042a4:	f1b9 0f00 	cmp.w	r9, #0
 80042a8:	d101      	bne.n	80042ae <_svfprintf_r+0xeee>
 80042aa:	07ee      	lsls	r6, r5, #31
 80042ac:	d521      	bpl.n	80042f2 <_svfprintf_r+0xf32>
 80042ae:	9a08      	ldr	r2, [sp, #32]
 80042b0:	4413      	add	r3, r2
 80042b2:	e006      	b.n	80042c2 <_svfprintf_r+0xf02>
 80042b4:	f1b9 0f00 	cmp.w	r9, #0
 80042b8:	d101      	bne.n	80042be <_svfprintf_r+0xefe>
 80042ba:	07ed      	lsls	r5, r5, #31
 80042bc:	d514      	bpl.n	80042e8 <_svfprintf_r+0xf28>
 80042be:	9b08      	ldr	r3, [sp, #32]
 80042c0:	3301      	adds	r3, #1
 80042c2:	444b      	add	r3, r9
 80042c4:	e015      	b.n	80042f2 <_svfprintf_r+0xf32>
 80042c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042c8:	9a04      	ldr	r2, [sp, #16]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	db03      	blt.n	80042d6 <_svfprintf_r+0xf16>
 80042ce:	07e8      	lsls	r0, r5, #31
 80042d0:	d50d      	bpl.n	80042ee <_svfprintf_r+0xf2e>
 80042d2:	9a08      	ldr	r2, [sp, #32]
 80042d4:	e006      	b.n	80042e4 <_svfprintf_r+0xf24>
 80042d6:	9a04      	ldr	r2, [sp, #16]
 80042d8:	9908      	ldr	r1, [sp, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	440a      	add	r2, r1
 80042de:	dc05      	bgt.n	80042ec <_svfprintf_r+0xf2c>
 80042e0:	f1c3 0301 	rsb	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	e002      	b.n	80042ee <_svfprintf_r+0xf2e>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e002      	b.n	80042f2 <_svfprintf_r+0xf32>
 80042ec:	4613      	mov	r3, r2
 80042ee:	2267      	movs	r2, #103	; 0x67
 80042f0:	9202      	str	r2, [sp, #8]
 80042f2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80042f4:	4699      	mov	r9, r3
 80042f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042f8:	b113      	cbz	r3, 8004300 <_svfprintf_r+0xf40>
 80042fa:	232d      	movs	r3, #45	; 0x2d
 80042fc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004300:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004302:	2600      	movs	r6, #0
 8004304:	f7ff bb4c 	b.w	80039a0 <_svfprintf_r+0x5e0>
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004310:	f7fc fbe0 	bl	8000ad4 <__aeabi_dcmplt>
 8004314:	b110      	cbz	r0, 800431c <_svfprintf_r+0xf5c>
 8004316:	232d      	movs	r3, #45	; 0x2d
 8004318:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <_svfprintf_r+0xf7c>)
 800431e:	4a08      	ldr	r2, [pc, #32]	; (8004340 <_svfprintf_r+0xf80>)
 8004320:	e6e3      	b.n	80040ea <_svfprintf_r+0xd2a>
 8004322:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004324:	1a1b      	subs	r3, r3, r0
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	e75f      	b.n	80041ea <_svfprintf_r+0xe2a>
 800432a:	ea56 0207 	orrs.w	r2, r6, r7
 800432e:	f47f aaaa 	bne.w	8003886 <_svfprintf_r+0x4c6>
 8004332:	f7ff baaf 	b.w	8003894 <_svfprintf_r+0x4d4>
 8004336:	b03d      	add	sp, #244	; 0xf4
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	08007dcc 	.word	0x08007dcc
 8004340:	08007dd0 	.word	0x08007dd0
 8004344:	00000000 	.word	0x00000000

08004348 <_vfprintf_r>:
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	b0bd      	sub	sp, #244	; 0xf4
 800434e:	468b      	mov	fp, r1
 8004350:	9205      	str	r2, [sp, #20]
 8004352:	461c      	mov	r4, r3
 8004354:	461f      	mov	r7, r3
 8004356:	4682      	mov	sl, r0
 8004358:	f002 fab8 	bl	80068cc <_localeconv_r>
 800435c:	6803      	ldr	r3, [r0, #0]
 800435e:	930d      	str	r3, [sp, #52]	; 0x34
 8004360:	4618      	mov	r0, r3
 8004362:	f7fb ff35 	bl	80001d0 <strlen>
 8004366:	9008      	str	r0, [sp, #32]
 8004368:	f1ba 0f00 	cmp.w	sl, #0
 800436c:	d005      	beq.n	800437a <_vfprintf_r+0x32>
 800436e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004372:	b913      	cbnz	r3, 800437a <_vfprintf_r+0x32>
 8004374:	4650      	mov	r0, sl
 8004376:	f001 ffb1 	bl	80062dc <__sinit>
 800437a:	4b9d      	ldr	r3, [pc, #628]	; (80045f0 <_vfprintf_r+0x2a8>)
 800437c:	459b      	cmp	fp, r3
 800437e:	d102      	bne.n	8004386 <_vfprintf_r+0x3e>
 8004380:	f8da b004 	ldr.w	fp, [sl, #4]
 8004384:	e00a      	b.n	800439c <_vfprintf_r+0x54>
 8004386:	4b9b      	ldr	r3, [pc, #620]	; (80045f4 <_vfprintf_r+0x2ac>)
 8004388:	459b      	cmp	fp, r3
 800438a:	d102      	bne.n	8004392 <_vfprintf_r+0x4a>
 800438c:	f8da b008 	ldr.w	fp, [sl, #8]
 8004390:	e004      	b.n	800439c <_vfprintf_r+0x54>
 8004392:	4b99      	ldr	r3, [pc, #612]	; (80045f8 <_vfprintf_r+0x2b0>)
 8004394:	459b      	cmp	fp, r3
 8004396:	bf08      	it	eq
 8004398:	f8da b00c 	ldreq.w	fp, [sl, #12]
 800439c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80043a0:	0498      	lsls	r0, r3, #18
 80043a2:	d409      	bmi.n	80043b8 <_vfprintf_r+0x70>
 80043a4:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80043a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b0:	f8ab 300c 	strh.w	r3, [fp, #12]
 80043b4:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 80043b8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80043bc:	0719      	lsls	r1, r3, #28
 80043be:	d509      	bpl.n	80043d4 <_vfprintf_r+0x8c>
 80043c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80043c4:	b133      	cbz	r3, 80043d4 <_vfprintf_r+0x8c>
 80043c6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80043ca:	f003 031a 	and.w	r3, r3, #26
 80043ce:	2b0a      	cmp	r3, #10
 80043d0:	d116      	bne.n	8004400 <_vfprintf_r+0xb8>
 80043d2:	e009      	b.n	80043e8 <_vfprintf_r+0xa0>
 80043d4:	4659      	mov	r1, fp
 80043d6:	4650      	mov	r0, sl
 80043d8:	f000 ffe6 	bl	80053a8 <__swsetup_r>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0f2      	beq.n	80043c6 <_vfprintf_r+0x7e>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f000 bfa3 	b.w	800532e <_vfprintf_r+0xfe6>
 80043e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db07      	blt.n	8004400 <_vfprintf_r+0xb8>
 80043f0:	4623      	mov	r3, r4
 80043f2:	9a05      	ldr	r2, [sp, #20]
 80043f4:	4659      	mov	r1, fp
 80043f6:	4650      	mov	r0, sl
 80043f8:	f000 ffa0 	bl	800533c <__sbprintf>
 80043fc:	f000 bf97 	b.w	800532e <_vfprintf_r+0xfe6>
 8004400:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80045e8 <_vfprintf_r+0x2a0>
 8004404:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004408:	2300      	movs	r3, #0
 800440a:	ac2c      	add	r4, sp, #176	; 0xb0
 800440c:	941f      	str	r4, [sp, #124]	; 0x7c
 800440e:	9321      	str	r3, [sp, #132]	; 0x84
 8004410:	9320      	str	r3, [sp, #128]	; 0x80
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	9311      	str	r3, [sp, #68]	; 0x44
 8004416:	9310      	str	r3, [sp, #64]	; 0x40
 8004418:	930a      	str	r3, [sp, #40]	; 0x28
 800441a:	9d05      	ldr	r5, [sp, #20]
 800441c:	462b      	mov	r3, r5
 800441e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004422:	b11a      	cbz	r2, 800442c <_vfprintf_r+0xe4>
 8004424:	2a25      	cmp	r2, #37	; 0x25
 8004426:	d001      	beq.n	800442c <_vfprintf_r+0xe4>
 8004428:	461d      	mov	r5, r3
 800442a:	e7f7      	b.n	800441c <_vfprintf_r+0xd4>
 800442c:	9b05      	ldr	r3, [sp, #20]
 800442e:	1aee      	subs	r6, r5, r3
 8004430:	d017      	beq.n	8004462 <_vfprintf_r+0x11a>
 8004432:	e884 0048 	stmia.w	r4, {r3, r6}
 8004436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004438:	4433      	add	r3, r6
 800443a:	9321      	str	r3, [sp, #132]	; 0x84
 800443c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800443e:	3301      	adds	r3, #1
 8004440:	2b07      	cmp	r3, #7
 8004442:	9320      	str	r3, [sp, #128]	; 0x80
 8004444:	dc01      	bgt.n	800444a <_vfprintf_r+0x102>
 8004446:	3408      	adds	r4, #8
 8004448:	e008      	b.n	800445c <_vfprintf_r+0x114>
 800444a:	aa1f      	add	r2, sp, #124	; 0x7c
 800444c:	4659      	mov	r1, fp
 800444e:	4650      	mov	r0, sl
 8004450:	f003 fa48 	bl	80078e4 <__sprint_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 8633 	bne.w	80050c0 <_vfprintf_r+0xd78>
 800445a:	ac2c      	add	r4, sp, #176	; 0xb0
 800445c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800445e:	4433      	add	r3, r6
 8004460:	930a      	str	r3, [sp, #40]	; 0x28
 8004462:	782b      	ldrb	r3, [r5, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8624 	beq.w	80050b2 <_vfprintf_r+0xd6a>
 800446a:	2200      	movs	r2, #0
 800446c:	1c6b      	adds	r3, r5, #1
 800446e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004472:	4611      	mov	r1, r2
 8004474:	f04f 39ff 	mov.w	r9, #4294967295
 8004478:	9209      	str	r2, [sp, #36]	; 0x24
 800447a:	4615      	mov	r5, r2
 800447c:	200a      	movs	r0, #10
 800447e:	1c5e      	adds	r6, r3, #1
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	9605      	str	r6, [sp, #20]
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	9b02      	ldr	r3, [sp, #8]
 8004488:	3b20      	subs	r3, #32
 800448a:	2b58      	cmp	r3, #88	; 0x58
 800448c:	f200 826a 	bhi.w	8004964 <_vfprintf_r+0x61c>
 8004490:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004494:	0268005c 	.word	0x0268005c
 8004498:	006c0268 	.word	0x006c0268
 800449c:	02680268 	.word	0x02680268
 80044a0:	02680268 	.word	0x02680268
 80044a4:	02680268 	.word	0x02680268
 80044a8:	0059006f 	.word	0x0059006f
 80044ac:	007a0268 	.word	0x007a0268
 80044b0:	0268007d 	.word	0x0268007d
 80044b4:	00b600a4 	.word	0x00b600a4
 80044b8:	00b600b6 	.word	0x00b600b6
 80044bc:	00b600b6 	.word	0x00b600b6
 80044c0:	00b600b6 	.word	0x00b600b6
 80044c4:	00b600b6 	.word	0x00b600b6
 80044c8:	02680268 	.word	0x02680268
 80044cc:	02680268 	.word	0x02680268
 80044d0:	02680268 	.word	0x02680268
 80044d4:	02680268 	.word	0x02680268
 80044d8:	02680268 	.word	0x02680268
 80044dc:	011200e6 	.word	0x011200e6
 80044e0:	01120268 	.word	0x01120268
 80044e4:	02680268 	.word	0x02680268
 80044e8:	02680268 	.word	0x02680268
 80044ec:	026800c9 	.word	0x026800c9
 80044f0:	01590268 	.word	0x01590268
 80044f4:	02680268 	.word	0x02680268
 80044f8:	02680268 	.word	0x02680268
 80044fc:	01a00268 	.word	0x01a00268
 8004500:	02680268 	.word	0x02680268
 8004504:	02680067 	.word	0x02680067
 8004508:	02680268 	.word	0x02680268
 800450c:	02680268 	.word	0x02680268
 8004510:	02680268 	.word	0x02680268
 8004514:	02680268 	.word	0x02680268
 8004518:	00dd0268 	.word	0x00dd0268
 800451c:	01120061 	.word	0x01120061
 8004520:	01120112 	.word	0x01120112
 8004524:	006100cc 	.word	0x006100cc
 8004528:	02680268 	.word	0x02680268
 800452c:	026800cf 	.word	0x026800cf
 8004530:	015b013b 	.word	0x015b013b
 8004534:	00da0176 	.word	0x00da0176
 8004538:	01870268 	.word	0x01870268
 800453c:	01a20268 	.word	0x01a20268
 8004540:	02680268 	.word	0x02680268
 8004544:	01ba      	.short	0x01ba
 8004546:	2201      	movs	r2, #1
 8004548:	212b      	movs	r1, #43	; 0x2b
 800454a:	e002      	b.n	8004552 <_vfprintf_r+0x20a>
 800454c:	b909      	cbnz	r1, 8004552 <_vfprintf_r+0x20a>
 800454e:	2201      	movs	r2, #1
 8004550:	2120      	movs	r1, #32
 8004552:	9b05      	ldr	r3, [sp, #20]
 8004554:	e793      	b.n	800447e <_vfprintf_r+0x136>
 8004556:	2a00      	cmp	r2, #0
 8004558:	f000 8087 	beq.w	800466a <_vfprintf_r+0x322>
 800455c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004560:	e083      	b.n	800466a <_vfprintf_r+0x322>
 8004562:	b10a      	cbz	r2, 8004568 <_vfprintf_r+0x220>
 8004564:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <_vfprintf_r+0x2b4>)
 800456a:	e151      	b.n	8004810 <_vfprintf_r+0x4c8>
 800456c:	f045 0501 	orr.w	r5, r5, #1
 8004570:	e7ef      	b.n	8004552 <_vfprintf_r+0x20a>
 8004572:	683e      	ldr	r6, [r7, #0]
 8004574:	9609      	str	r6, [sp, #36]	; 0x24
 8004576:	2e00      	cmp	r6, #0
 8004578:	f107 0304 	add.w	r3, r7, #4
 800457c:	db01      	blt.n	8004582 <_vfprintf_r+0x23a>
 800457e:	461f      	mov	r7, r3
 8004580:	e7e7      	b.n	8004552 <_vfprintf_r+0x20a>
 8004582:	4276      	negs	r6, r6
 8004584:	9609      	str	r6, [sp, #36]	; 0x24
 8004586:	461f      	mov	r7, r3
 8004588:	f045 0504 	orr.w	r5, r5, #4
 800458c:	e7e1      	b.n	8004552 <_vfprintf_r+0x20a>
 800458e:	9e05      	ldr	r6, [sp, #20]
 8004590:	9b05      	ldr	r3, [sp, #20]
 8004592:	7836      	ldrb	r6, [r6, #0]
 8004594:	9602      	str	r6, [sp, #8]
 8004596:	2e2a      	cmp	r6, #42	; 0x2a
 8004598:	f103 0301 	add.w	r3, r3, #1
 800459c:	d002      	beq.n	80045a4 <_vfprintf_r+0x25c>
 800459e:	f04f 0900 	mov.w	r9, #0
 80045a2:	e00a      	b.n	80045ba <_vfprintf_r+0x272>
 80045a4:	f8d7 9000 	ldr.w	r9, [r7]
 80045a8:	9305      	str	r3, [sp, #20]
 80045aa:	1d3e      	adds	r6, r7, #4
 80045ac:	f1b9 0f00 	cmp.w	r9, #0
 80045b0:	4637      	mov	r7, r6
 80045b2:	dace      	bge.n	8004552 <_vfprintf_r+0x20a>
 80045b4:	f04f 39ff 	mov.w	r9, #4294967295
 80045b8:	e7cb      	b.n	8004552 <_vfprintf_r+0x20a>
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	9b02      	ldr	r3, [sp, #8]
 80045be:	3b30      	subs	r3, #48	; 0x30
 80045c0:	2b09      	cmp	r3, #9
 80045c2:	d808      	bhi.n	80045d6 <_vfprintf_r+0x28e>
 80045c4:	fb00 3909 	mla	r9, r0, r9, r3
 80045c8:	9b05      	ldr	r3, [sp, #20]
 80045ca:	461e      	mov	r6, r3
 80045cc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	4633      	mov	r3, r6
 80045d4:	e7f1      	b.n	80045ba <_vfprintf_r+0x272>
 80045d6:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80045da:	e754      	b.n	8004486 <_vfprintf_r+0x13e>
 80045dc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80045e0:	e7b7      	b.n	8004552 <_vfprintf_r+0x20a>
 80045e2:	bf00      	nop
 80045e4:	f3af 8000 	nop.w
	...
 80045f0:	08007e40 	.word	0x08007e40
 80045f4:	08007e60 	.word	0x08007e60
 80045f8:	08007e80 	.word	0x08007e80
 80045fc:	08007ddc 	.word	0x08007ddc
 8004600:	2300      	movs	r3, #0
 8004602:	9309      	str	r3, [sp, #36]	; 0x24
 8004604:	9b02      	ldr	r3, [sp, #8]
 8004606:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004608:	3b30      	subs	r3, #48	; 0x30
 800460a:	fb00 3306 	mla	r3, r0, r6, r3
 800460e:	9309      	str	r3, [sp, #36]	; 0x24
 8004610:	9b05      	ldr	r3, [sp, #20]
 8004612:	461e      	mov	r6, r3
 8004614:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	9605      	str	r6, [sp, #20]
 800461e:	3b30      	subs	r3, #48	; 0x30
 8004620:	2b09      	cmp	r3, #9
 8004622:	d9ef      	bls.n	8004604 <_vfprintf_r+0x2bc>
 8004624:	e72f      	b.n	8004486 <_vfprintf_r+0x13e>
 8004626:	f045 0508 	orr.w	r5, r5, #8
 800462a:	e792      	b.n	8004552 <_vfprintf_r+0x20a>
 800462c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004630:	e78f      	b.n	8004552 <_vfprintf_r+0x20a>
 8004632:	9b05      	ldr	r3, [sp, #20]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b6c      	cmp	r3, #108	; 0x6c
 8004638:	d103      	bne.n	8004642 <_vfprintf_r+0x2fa>
 800463a:	9b05      	ldr	r3, [sp, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	e002      	b.n	8004648 <_vfprintf_r+0x300>
 8004642:	f045 0510 	orr.w	r5, r5, #16
 8004646:	e784      	b.n	8004552 <_vfprintf_r+0x20a>
 8004648:	f045 0520 	orr.w	r5, r5, #32
 800464c:	e781      	b.n	8004552 <_vfprintf_r+0x20a>
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	9303      	str	r3, [sp, #12]
 8004652:	2600      	movs	r6, #0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800465a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800465e:	e190      	b.n	8004982 <_vfprintf_r+0x63a>
 8004660:	b10a      	cbz	r2, 8004666 <_vfprintf_r+0x31e>
 8004662:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004666:	f045 0510 	orr.w	r5, r5, #16
 800466a:	06aa      	lsls	r2, r5, #26
 800466c:	d508      	bpl.n	8004680 <_vfprintf_r+0x338>
 800466e:	3707      	adds	r7, #7
 8004670:	f027 0707 	bic.w	r7, r7, #7
 8004674:	f107 0308 	add.w	r3, r7, #8
 8004678:	9303      	str	r3, [sp, #12]
 800467a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800467e:	e00e      	b.n	800469e <_vfprintf_r+0x356>
 8004680:	f015 0f10 	tst.w	r5, #16
 8004684:	f107 0304 	add.w	r3, r7, #4
 8004688:	d002      	beq.n	8004690 <_vfprintf_r+0x348>
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	683e      	ldr	r6, [r7, #0]
 800468e:	e005      	b.n	800469c <_vfprintf_r+0x354>
 8004690:	683e      	ldr	r6, [r7, #0]
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004698:	bf18      	it	ne
 800469a:	b236      	sxthne	r6, r6
 800469c:	17f7      	asrs	r7, r6, #31
 800469e:	2e00      	cmp	r6, #0
 80046a0:	f177 0300 	sbcs.w	r3, r7, #0
 80046a4:	f280 80de 	bge.w	8004864 <_vfprintf_r+0x51c>
 80046a8:	4276      	negs	r6, r6
 80046aa:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80046ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80046b2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80046b6:	e0d5      	b.n	8004864 <_vfprintf_r+0x51c>
 80046b8:	b10a      	cbz	r2, 80046be <_vfprintf_r+0x376>
 80046ba:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80046be:	3707      	adds	r7, #7
 80046c0:	f027 0707 	bic.w	r7, r7, #7
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	9303      	str	r3, [sp, #12]
 80046ca:	ed97 7b00 	vldr	d7, [r7]
 80046ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80046d2:	9b06      	ldr	r3, [sp, #24]
 80046d4:	9312      	str	r3, [sp, #72]	; 0x48
 80046d6:	9b07      	ldr	r3, [sp, #28]
 80046d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	4bab      	ldr	r3, [pc, #684]	; (8004990 <_vfprintf_r+0x648>)
 80046e4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80046e8:	f7fc fa1c 	bl	8000b24 <__aeabi_dcmpun>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	f040 84ee 	bne.w	80050ce <_vfprintf_r+0xd86>
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	4ba6      	ldr	r3, [pc, #664]	; (8004990 <_vfprintf_r+0x648>)
 80046f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80046fc:	f7fc f9f4 	bl	8000ae8 <__aeabi_dcmple>
 8004700:	2800      	cmp	r0, #0
 8004702:	f040 84e4 	bne.w	80050ce <_vfprintf_r+0xd86>
 8004706:	f000 bdfb 	b.w	8005300 <_vfprintf_r+0xfb8>
 800470a:	b10a      	cbz	r2, 8004710 <_vfprintf_r+0x3c8>
 800470c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004710:	f015 0f20 	tst.w	r5, #32
 8004714:	f107 0304 	add.w	r3, r7, #4
 8004718:	d007      	beq.n	800472a <_vfprintf_r+0x3e2>
 800471a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	17ce      	asrs	r6, r1, #31
 8004720:	4608      	mov	r0, r1
 8004722:	4631      	mov	r1, r6
 8004724:	e9c2 0100 	strd	r0, r1, [r2]
 8004728:	e00b      	b.n	8004742 <_vfprintf_r+0x3fa>
 800472a:	06e9      	lsls	r1, r5, #27
 800472c:	d406      	bmi.n	800473c <_vfprintf_r+0x3f4>
 800472e:	066a      	lsls	r2, r5, #25
 8004730:	d504      	bpl.n	800473c <_vfprintf_r+0x3f4>
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8004738:	8011      	strh	r1, [r2, #0]
 800473a:	e002      	b.n	8004742 <_vfprintf_r+0x3fa>
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	461f      	mov	r7, r3
 8004744:	e669      	b.n	800441a <_vfprintf_r+0xd2>
 8004746:	f045 0510 	orr.w	r5, r5, #16
 800474a:	f015 0320 	ands.w	r3, r5, #32
 800474e:	d009      	beq.n	8004764 <_vfprintf_r+0x41c>
 8004750:	3707      	adds	r7, #7
 8004752:	f027 0707 	bic.w	r7, r7, #7
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800475e:	9303      	str	r3, [sp, #12]
 8004760:	2300      	movs	r3, #0
 8004762:	e07b      	b.n	800485c <_vfprintf_r+0x514>
 8004764:	1d3a      	adds	r2, r7, #4
 8004766:	f015 0110 	ands.w	r1, r5, #16
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	d105      	bne.n	800477a <_vfprintf_r+0x432>
 800476e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004772:	d002      	beq.n	800477a <_vfprintf_r+0x432>
 8004774:	883e      	ldrh	r6, [r7, #0]
 8004776:	2700      	movs	r7, #0
 8004778:	e7f2      	b.n	8004760 <_vfprintf_r+0x418>
 800477a:	683e      	ldr	r6, [r7, #0]
 800477c:	2700      	movs	r7, #0
 800477e:	e06d      	b.n	800485c <_vfprintf_r+0x514>
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	9303      	str	r3, [sp, #12]
 8004784:	2330      	movs	r3, #48	; 0x30
 8004786:	2278      	movs	r2, #120	; 0x78
 8004788:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800478c:	4b81      	ldr	r3, [pc, #516]	; (8004994 <_vfprintf_r+0x64c>)
 800478e:	683e      	ldr	r6, [r7, #0]
 8004790:	9311      	str	r3, [sp, #68]	; 0x44
 8004792:	2700      	movs	r7, #0
 8004794:	f045 0502 	orr.w	r5, r5, #2
 8004798:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800479c:	2302      	movs	r3, #2
 800479e:	9202      	str	r2, [sp, #8]
 80047a0:	e05c      	b.n	800485c <_vfprintf_r+0x514>
 80047a2:	2600      	movs	r6, #0
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	45b1      	cmp	r9, r6
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	f8d7 8000 	ldr.w	r8, [r7]
 80047ae:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80047b2:	db0a      	blt.n	80047ca <_vfprintf_r+0x482>
 80047b4:	464a      	mov	r2, r9
 80047b6:	4631      	mov	r1, r6
 80047b8:	4640      	mov	r0, r8
 80047ba:	f7fb fd11 	bl	80001e0 <memchr>
 80047be:	2800      	cmp	r0, #0
 80047c0:	f000 80ea 	beq.w	8004998 <_vfprintf_r+0x650>
 80047c4:	ebc8 0900 	rsb	r9, r8, r0
 80047c8:	e0e7      	b.n	800499a <_vfprintf_r+0x652>
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7fb fd00 	bl	80001d0 <strlen>
 80047d0:	4681      	mov	r9, r0
 80047d2:	e0e2      	b.n	800499a <_vfprintf_r+0x652>
 80047d4:	f045 0510 	orr.w	r5, r5, #16
 80047d8:	06ae      	lsls	r6, r5, #26
 80047da:	d508      	bpl.n	80047ee <_vfprintf_r+0x4a6>
 80047dc:	3707      	adds	r7, #7
 80047de:	f027 0707 	bic.w	r7, r7, #7
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80047ec:	e00a      	b.n	8004804 <_vfprintf_r+0x4bc>
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	f015 0f10 	tst.w	r5, #16
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	d103      	bne.n	8004800 <_vfprintf_r+0x4b8>
 80047f8:	0668      	lsls	r0, r5, #25
 80047fa:	d501      	bpl.n	8004800 <_vfprintf_r+0x4b8>
 80047fc:	883e      	ldrh	r6, [r7, #0]
 80047fe:	e000      	b.n	8004802 <_vfprintf_r+0x4ba>
 8004800:	683e      	ldr	r6, [r7, #0]
 8004802:	2700      	movs	r7, #0
 8004804:	2301      	movs	r3, #1
 8004806:	e029      	b.n	800485c <_vfprintf_r+0x514>
 8004808:	b10a      	cbz	r2, 800480e <_vfprintf_r+0x4c6>
 800480a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800480e:	4b61      	ldr	r3, [pc, #388]	; (8004994 <_vfprintf_r+0x64c>)
 8004810:	9311      	str	r3, [sp, #68]	; 0x44
 8004812:	06a9      	lsls	r1, r5, #26
 8004814:	d508      	bpl.n	8004828 <_vfprintf_r+0x4e0>
 8004816:	3707      	adds	r7, #7
 8004818:	f027 0707 	bic.w	r7, r7, #7
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004826:	e00a      	b.n	800483e <_vfprintf_r+0x4f6>
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	f015 0f10 	tst.w	r5, #16
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	d103      	bne.n	800483a <_vfprintf_r+0x4f2>
 8004832:	066a      	lsls	r2, r5, #25
 8004834:	d501      	bpl.n	800483a <_vfprintf_r+0x4f2>
 8004836:	883e      	ldrh	r6, [r7, #0]
 8004838:	e000      	b.n	800483c <_vfprintf_r+0x4f4>
 800483a:	683e      	ldr	r6, [r7, #0]
 800483c:	2700      	movs	r7, #0
 800483e:	07eb      	lsls	r3, r5, #31
 8004840:	d50b      	bpl.n	800485a <_vfprintf_r+0x512>
 8004842:	ea56 0307 	orrs.w	r3, r6, r7
 8004846:	d008      	beq.n	800485a <_vfprintf_r+0x512>
 8004848:	2330      	movs	r3, #48	; 0x30
 800484a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800484e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004852:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004856:	f045 0502 	orr.w	r5, r5, #2
 800485a:	2302      	movs	r3, #2
 800485c:	2200      	movs	r2, #0
 800485e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004862:	e000      	b.n	8004866 <_vfprintf_r+0x51e>
 8004864:	2301      	movs	r3, #1
 8004866:	f1b9 0f00 	cmp.w	r9, #0
 800486a:	f2c0 855a 	blt.w	8005322 <_vfprintf_r+0xfda>
 800486e:	ea56 0207 	orrs.w	r2, r6, r7
 8004872:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8004876:	d103      	bne.n	8004880 <_vfprintf_r+0x538>
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	d05f      	beq.n	800493e <_vfprintf_r+0x5f6>
 800487e:	e006      	b.n	800488e <_vfprintf_r+0x546>
 8004880:	460d      	mov	r5, r1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d025      	beq.n	80048d2 <_vfprintf_r+0x58a>
 8004886:	2b02      	cmp	r3, #2
 8004888:	d046      	beq.n	8004918 <_vfprintf_r+0x5d0>
 800488a:	4629      	mov	r1, r5
 800488c:	e007      	b.n	800489e <_vfprintf_r+0x556>
 800488e:	460d      	mov	r5, r1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d022      	beq.n	80048da <_vfprintf_r+0x592>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d03d      	beq.n	8004914 <_vfprintf_r+0x5cc>
 8004898:	4629      	mov	r1, r5
 800489a:	2600      	movs	r6, #0
 800489c:	2700      	movs	r7, #0
 800489e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80048a2:	08f2      	lsrs	r2, r6, #3
 80048a4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80048a8:	08f8      	lsrs	r0, r7, #3
 80048aa:	f006 0307 	and.w	r3, r6, #7
 80048ae:	4607      	mov	r7, r0
 80048b0:	4616      	mov	r6, r2
 80048b2:	3330      	adds	r3, #48	; 0x30
 80048b4:	ea56 0207 	orrs.w	r2, r6, r7
 80048b8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80048bc:	d1f1      	bne.n	80048a2 <_vfprintf_r+0x55a>
 80048be:	07e8      	lsls	r0, r5, #31
 80048c0:	d548      	bpl.n	8004954 <_vfprintf_r+0x60c>
 80048c2:	2b30      	cmp	r3, #48	; 0x30
 80048c4:	d046      	beq.n	8004954 <_vfprintf_r+0x60c>
 80048c6:	2330      	movs	r3, #48	; 0x30
 80048c8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80048cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80048d0:	e040      	b.n	8004954 <_vfprintf_r+0x60c>
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	bf08      	it	eq
 80048d6:	2e0a      	cmpeq	r6, #10
 80048d8:	d205      	bcs.n	80048e6 <_vfprintf_r+0x59e>
 80048da:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80048de:	3630      	adds	r6, #48	; 0x30
 80048e0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80048e4:	e029      	b.n	800493a <_vfprintf_r+0x5f2>
 80048e6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80048ea:	4630      	mov	r0, r6
 80048ec:	4639      	mov	r1, r7
 80048ee:	220a      	movs	r2, #10
 80048f0:	2300      	movs	r3, #0
 80048f2:	f7fc f955 	bl	8000ba0 <__aeabi_uldivmod>
 80048f6:	3230      	adds	r2, #48	; 0x30
 80048f8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80048fc:	2300      	movs	r3, #0
 80048fe:	4630      	mov	r0, r6
 8004900:	4639      	mov	r1, r7
 8004902:	220a      	movs	r2, #10
 8004904:	f7fc f94c 	bl	8000ba0 <__aeabi_uldivmod>
 8004908:	4606      	mov	r6, r0
 800490a:	460f      	mov	r7, r1
 800490c:	ea56 0307 	orrs.w	r3, r6, r7
 8004910:	d1eb      	bne.n	80048ea <_vfprintf_r+0x5a2>
 8004912:	e012      	b.n	800493a <_vfprintf_r+0x5f2>
 8004914:	2600      	movs	r6, #0
 8004916:	2700      	movs	r7, #0
 8004918:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800491c:	f006 030f 	and.w	r3, r6, #15
 8004920:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004928:	0933      	lsrs	r3, r6, #4
 800492a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800492e:	093a      	lsrs	r2, r7, #4
 8004930:	461e      	mov	r6, r3
 8004932:	4617      	mov	r7, r2
 8004934:	ea56 0307 	orrs.w	r3, r6, r7
 8004938:	d1f0      	bne.n	800491c <_vfprintf_r+0x5d4>
 800493a:	4629      	mov	r1, r5
 800493c:	e00a      	b.n	8004954 <_vfprintf_r+0x60c>
 800493e:	b93b      	cbnz	r3, 8004950 <_vfprintf_r+0x608>
 8004940:	07ea      	lsls	r2, r5, #31
 8004942:	d505      	bpl.n	8004950 <_vfprintf_r+0x608>
 8004944:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800494e:	e001      	b.n	8004954 <_vfprintf_r+0x60c>
 8004950:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004954:	464e      	mov	r6, r9
 8004956:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800495a:	ebc8 0909 	rsb	r9, r8, r9
 800495e:	460d      	mov	r5, r1
 8004960:	2700      	movs	r7, #0
 8004962:	e01b      	b.n	800499c <_vfprintf_r+0x654>
 8004964:	b10a      	cbz	r2, 800496a <_vfprintf_r+0x622>
 8004966:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 83a0 	beq.w	80050b2 <_vfprintf_r+0xd6a>
 8004972:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004976:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800497a:	2600      	movs	r6, #0
 800497c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004980:	9703      	str	r7, [sp, #12]
 8004982:	f04f 0901 	mov.w	r9, #1
 8004986:	4637      	mov	r7, r6
 8004988:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800498c:	e006      	b.n	800499c <_vfprintf_r+0x654>
 800498e:	bf00      	nop
 8004990:	7fefffff 	.word	0x7fefffff
 8004994:	08007ded 	.word	0x08007ded
 8004998:	4606      	mov	r6, r0
 800499a:	4637      	mov	r7, r6
 800499c:	454e      	cmp	r6, r9
 800499e:	4633      	mov	r3, r6
 80049a0:	bfb8      	it	lt
 80049a2:	464b      	movlt	r3, r9
 80049a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a6:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80049aa:	b113      	cbz	r3, 80049b2 <_vfprintf_r+0x66a>
 80049ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ae:	3301      	adds	r3, #1
 80049b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b2:	f015 0302 	ands.w	r3, r5, #2
 80049b6:	9314      	str	r3, [sp, #80]	; 0x50
 80049b8:	bf1e      	ittt	ne
 80049ba:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80049bc:	3302      	addne	r3, #2
 80049be:	930b      	strne	r3, [sp, #44]	; 0x2c
 80049c0:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80049c4:	9315      	str	r3, [sp, #84]	; 0x54
 80049c6:	d139      	bne.n	8004a3c <_vfprintf_r+0x6f4>
 80049c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	930c      	str	r3, [sp, #48]	; 0x30
 80049d2:	dd33      	ble.n	8004a3c <_vfprintf_r+0x6f4>
 80049d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	4ba6      	ldr	r3, [pc, #664]	; (8004c74 <_vfprintf_r+0x92c>)
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	dd18      	ble.n	8004a10 <_vfprintf_r+0x6c8>
 80049de:	2310      	movs	r3, #16
 80049e0:	6063      	str	r3, [r4, #4]
 80049e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049e4:	3310      	adds	r3, #16
 80049e6:	9321      	str	r3, [sp, #132]	; 0x84
 80049e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049ea:	3301      	adds	r3, #1
 80049ec:	2b07      	cmp	r3, #7
 80049ee:	9320      	str	r3, [sp, #128]	; 0x80
 80049f0:	dc01      	bgt.n	80049f6 <_vfprintf_r+0x6ae>
 80049f2:	3408      	adds	r4, #8
 80049f4:	e008      	b.n	8004a08 <_vfprintf_r+0x6c0>
 80049f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80049f8:	4659      	mov	r1, fp
 80049fa:	4650      	mov	r0, sl
 80049fc:	f002 ff72 	bl	80078e4 <__sprint_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	f040 835d 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004a06:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0a:	3b10      	subs	r3, #16
 8004a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8004a0e:	e7e1      	b.n	80049d4 <_vfprintf_r+0x68c>
 8004a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a18:	4413      	add	r3, r2
 8004a1a:	9321      	str	r3, [sp, #132]	; 0x84
 8004a1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a1e:	3301      	adds	r3, #1
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	9320      	str	r3, [sp, #128]	; 0x80
 8004a24:	dc01      	bgt.n	8004a2a <_vfprintf_r+0x6e2>
 8004a26:	3408      	adds	r4, #8
 8004a28:	e008      	b.n	8004a3c <_vfprintf_r+0x6f4>
 8004a2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	4650      	mov	r0, sl
 8004a30:	f002 ff58 	bl	80078e4 <__sprint_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f040 8343 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004a3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a3c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004a40:	b1bb      	cbz	r3, 8004a72 <_vfprintf_r+0x72a>
 8004a42:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	6063      	str	r3, [r4, #4]
 8004a4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a4e:	3301      	adds	r3, #1
 8004a50:	9321      	str	r3, [sp, #132]	; 0x84
 8004a52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a54:	3301      	adds	r3, #1
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	9320      	str	r3, [sp, #128]	; 0x80
 8004a5a:	dc01      	bgt.n	8004a60 <_vfprintf_r+0x718>
 8004a5c:	3408      	adds	r4, #8
 8004a5e:	e008      	b.n	8004a72 <_vfprintf_r+0x72a>
 8004a60:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a62:	4659      	mov	r1, fp
 8004a64:	4650      	mov	r0, sl
 8004a66:	f002 ff3d 	bl	80078e4 <__sprint_r>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f040 8328 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004a70:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a74:	b1b3      	cbz	r3, 8004aa4 <_vfprintf_r+0x75c>
 8004a76:	ab18      	add	r3, sp, #96	; 0x60
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a80:	3302      	adds	r3, #2
 8004a82:	9321      	str	r3, [sp, #132]	; 0x84
 8004a84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a86:	3301      	adds	r3, #1
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	9320      	str	r3, [sp, #128]	; 0x80
 8004a8c:	dc01      	bgt.n	8004a92 <_vfprintf_r+0x74a>
 8004a8e:	3408      	adds	r4, #8
 8004a90:	e008      	b.n	8004aa4 <_vfprintf_r+0x75c>
 8004a92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a94:	4659      	mov	r1, fp
 8004a96:	4650      	mov	r0, sl
 8004a98:	f002 ff24 	bl	80078e4 <__sprint_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f040 830f 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004aa2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d135      	bne.n	8004b16 <_vfprintf_r+0x7ce>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dd30      	ble.n	8004b16 <_vfprintf_r+0x7ce>
 8004ab4:	4a70      	ldr	r2, [pc, #448]	; (8004c78 <_vfprintf_r+0x930>)
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	dd18      	ble.n	8004aee <_vfprintf_r+0x7a6>
 8004abc:	2210      	movs	r2, #16
 8004abe:	6062      	str	r2, [r4, #4]
 8004ac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ac2:	3210      	adds	r2, #16
 8004ac4:	9221      	str	r2, [sp, #132]	; 0x84
 8004ac6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ac8:	3201      	adds	r2, #1
 8004aca:	2a07      	cmp	r2, #7
 8004acc:	9220      	str	r2, [sp, #128]	; 0x80
 8004ace:	dc01      	bgt.n	8004ad4 <_vfprintf_r+0x78c>
 8004ad0:	3408      	adds	r4, #8
 8004ad2:	e00a      	b.n	8004aea <_vfprintf_r+0x7a2>
 8004ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ad6:	4659      	mov	r1, fp
 8004ad8:	4650      	mov	r0, sl
 8004ada:	930c      	str	r3, [sp, #48]	; 0x30
 8004adc:	f002 ff02 	bl	80078e4 <__sprint_r>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f040 82ed 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004aea:	3b10      	subs	r3, #16
 8004aec:	e7e2      	b.n	8004ab4 <_vfprintf_r+0x76c>
 8004aee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	9321      	str	r3, [sp, #132]	; 0x84
 8004af6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004af8:	3301      	adds	r3, #1
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	9320      	str	r3, [sp, #128]	; 0x80
 8004afe:	dc01      	bgt.n	8004b04 <_vfprintf_r+0x7bc>
 8004b00:	3408      	adds	r4, #8
 8004b02:	e008      	b.n	8004b16 <_vfprintf_r+0x7ce>
 8004b04:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b06:	4659      	mov	r1, fp
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f002 feeb 	bl	80078e4 <__sprint_r>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f040 82d6 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004b14:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b16:	ebc9 0606 	rsb	r6, r9, r6
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	dd2e      	ble.n	8004b7c <_vfprintf_r+0x834>
 8004b1e:	4b56      	ldr	r3, [pc, #344]	; (8004c78 <_vfprintf_r+0x930>)
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	2e10      	cmp	r6, #16
 8004b24:	dd16      	ble.n	8004b54 <_vfprintf_r+0x80c>
 8004b26:	2310      	movs	r3, #16
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	9321      	str	r3, [sp, #132]	; 0x84
 8004b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b32:	3301      	adds	r3, #1
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	9320      	str	r3, [sp, #128]	; 0x80
 8004b38:	dc01      	bgt.n	8004b3e <_vfprintf_r+0x7f6>
 8004b3a:	3408      	adds	r4, #8
 8004b3c:	e008      	b.n	8004b50 <_vfprintf_r+0x808>
 8004b3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b40:	4659      	mov	r1, fp
 8004b42:	4650      	mov	r0, sl
 8004b44:	f002 fece 	bl	80078e4 <__sprint_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f040 82b9 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004b4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b50:	3e10      	subs	r6, #16
 8004b52:	e7e4      	b.n	8004b1e <_vfprintf_r+0x7d6>
 8004b54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b56:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004b58:	6066      	str	r6, [r4, #4]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	4406      	add	r6, r0
 8004b5e:	2b07      	cmp	r3, #7
 8004b60:	9621      	str	r6, [sp, #132]	; 0x84
 8004b62:	9320      	str	r3, [sp, #128]	; 0x80
 8004b64:	dc01      	bgt.n	8004b6a <_vfprintf_r+0x822>
 8004b66:	3408      	adds	r4, #8
 8004b68:	e008      	b.n	8004b7c <_vfprintf_r+0x834>
 8004b6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	4650      	mov	r0, sl
 8004b70:	f002 feb8 	bl	80078e4 <__sprint_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f040 82a3 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004b7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b7c:	05eb      	lsls	r3, r5, #23
 8004b7e:	d414      	bmi.n	8004baa <_vfprintf_r+0x862>
 8004b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b82:	e884 0300 	stmia.w	r4, {r8, r9}
 8004b86:	444b      	add	r3, r9
 8004b88:	9321      	str	r3, [sp, #132]	; 0x84
 8004b8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	9320      	str	r3, [sp, #128]	; 0x80
 8004b92:	f340 8244 	ble.w	800501e <_vfprintf_r+0xcd6>
 8004b96:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b98:	4659      	mov	r1, fp
 8004b9a:	4650      	mov	r0, sl
 8004b9c:	f002 fea2 	bl	80078e4 <__sprint_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f040 828d 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004ba6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ba8:	e23a      	b.n	8005020 <_vfprintf_r+0xcd8>
 8004baa:	9b02      	ldr	r3, [sp, #8]
 8004bac:	2b65      	cmp	r3, #101	; 0x65
 8004bae:	f340 81ad 	ble.w	8004f0c <_vfprintf_r+0xbc4>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bba:	f7fb ff81 	bl	8000ac0 <__aeabi_dcmpeq>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d05e      	beq.n	8004c80 <_vfprintf_r+0x938>
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <_vfprintf_r+0x934>)
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bcc:	3301      	adds	r3, #1
 8004bce:	9321      	str	r3, [sp, #132]	; 0x84
 8004bd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	9320      	str	r3, [sp, #128]	; 0x80
 8004bd8:	dc01      	bgt.n	8004bde <_vfprintf_r+0x896>
 8004bda:	3408      	adds	r4, #8
 8004bdc:	e008      	b.n	8004bf0 <_vfprintf_r+0x8a8>
 8004bde:	aa1f      	add	r2, sp, #124	; 0x7c
 8004be0:	4659      	mov	r1, fp
 8004be2:	4650      	mov	r0, sl
 8004be4:	f002 fe7e 	bl	80078e4 <__sprint_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	f040 8269 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004bee:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	db02      	blt.n	8004bfe <_vfprintf_r+0x8b6>
 8004bf8:	07ef      	lsls	r7, r5, #31
 8004bfa:	f140 8211 	bpl.w	8005020 <_vfprintf_r+0xcd8>
 8004bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	9b08      	ldr	r3, [sp, #32]
 8004c04:	6063      	str	r3, [r4, #4]
 8004c06:	9a08      	ldr	r2, [sp, #32]
 8004c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c0a:	4413      	add	r3, r2
 8004c0c:	9321      	str	r3, [sp, #132]	; 0x84
 8004c0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c10:	3301      	adds	r3, #1
 8004c12:	2b07      	cmp	r3, #7
 8004c14:	9320      	str	r3, [sp, #128]	; 0x80
 8004c16:	dc01      	bgt.n	8004c1c <_vfprintf_r+0x8d4>
 8004c18:	3408      	adds	r4, #8
 8004c1a:	e008      	b.n	8004c2e <_vfprintf_r+0x8e6>
 8004c1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c1e:	4659      	mov	r1, fp
 8004c20:	4650      	mov	r0, sl
 8004c22:	f002 fe5f 	bl	80078e4 <__sprint_r>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f040 824a 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004c2c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	1e5e      	subs	r6, r3, #1
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	f340 81f4 	ble.w	8005020 <_vfprintf_r+0xcd8>
 8004c38:	4f0f      	ldr	r7, [pc, #60]	; (8004c78 <_vfprintf_r+0x930>)
 8004c3a:	f04f 0810 	mov.w	r8, #16
 8004c3e:	2e10      	cmp	r6, #16
 8004c40:	f340 8159 	ble.w	8004ef6 <_vfprintf_r+0xbae>
 8004c44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c46:	3310      	adds	r3, #16
 8004c48:	9321      	str	r3, [sp, #132]	; 0x84
 8004c4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	e884 0180 	stmia.w	r4, {r7, r8}
 8004c54:	9320      	str	r3, [sp, #128]	; 0x80
 8004c56:	dc01      	bgt.n	8004c5c <_vfprintf_r+0x914>
 8004c58:	3408      	adds	r4, #8
 8004c5a:	e008      	b.n	8004c6e <_vfprintf_r+0x926>
 8004c5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c5e:	4659      	mov	r1, fp
 8004c60:	4650      	mov	r0, sl
 8004c62:	f002 fe3f 	bl	80078e4 <__sprint_r>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f040 822a 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004c6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c6e:	3e10      	subs	r6, #16
 8004c70:	e7e5      	b.n	8004c3e <_vfprintf_r+0x8f6>
 8004c72:	bf00      	nop
 8004c74:	08007e10 	.word	0x08007e10
 8004c78:	08007e20 	.word	0x08007e20
 8004c7c:	08007dfe 	.word	0x08007dfe
 8004c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc7c      	bgt.n	8004d80 <_vfprintf_r+0xa38>
 8004c86:	4b9f      	ldr	r3, [pc, #636]	; (8004f04 <_vfprintf_r+0xbbc>)
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c90:	3301      	adds	r3, #1
 8004c92:	9321      	str	r3, [sp, #132]	; 0x84
 8004c94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c96:	3301      	adds	r3, #1
 8004c98:	2b07      	cmp	r3, #7
 8004c9a:	9320      	str	r3, [sp, #128]	; 0x80
 8004c9c:	dc01      	bgt.n	8004ca2 <_vfprintf_r+0x95a>
 8004c9e:	3408      	adds	r4, #8
 8004ca0:	e008      	b.n	8004cb4 <_vfprintf_r+0x96c>
 8004ca2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f002 fe1c 	bl	80078e4 <__sprint_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f040 8207 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004cb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cb6:	b923      	cbnz	r3, 8004cc2 <_vfprintf_r+0x97a>
 8004cb8:	9b04      	ldr	r3, [sp, #16]
 8004cba:	b913      	cbnz	r3, 8004cc2 <_vfprintf_r+0x97a>
 8004cbc:	07ee      	lsls	r6, r5, #31
 8004cbe:	f140 81af 	bpl.w	8005020 <_vfprintf_r+0xcd8>
 8004cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	9b08      	ldr	r3, [sp, #32]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	9a08      	ldr	r2, [sp, #32]
 8004ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cce:	4413      	add	r3, r2
 8004cd0:	9321      	str	r3, [sp, #132]	; 0x84
 8004cd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	9320      	str	r3, [sp, #128]	; 0x80
 8004cda:	dc02      	bgt.n	8004ce2 <_vfprintf_r+0x99a>
 8004cdc:	f104 0308 	add.w	r3, r4, #8
 8004ce0:	e008      	b.n	8004cf4 <_vfprintf_r+0x9ac>
 8004ce2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	f002 fdfc 	bl	80078e4 <__sprint_r>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f040 81e7 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004cf2:	ab2c      	add	r3, sp, #176	; 0xb0
 8004cf4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004cf6:	4276      	negs	r6, r6
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	dd30      	ble.n	8004d5e <_vfprintf_r+0xa16>
 8004cfc:	4f82      	ldr	r7, [pc, #520]	; (8004f08 <_vfprintf_r+0xbc0>)
 8004cfe:	2410      	movs	r4, #16
 8004d00:	2e10      	cmp	r6, #16
 8004d02:	dd16      	ble.n	8004d32 <_vfprintf_r+0x9ea>
 8004d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d06:	601f      	str	r7, [r3, #0]
 8004d08:	3210      	adds	r2, #16
 8004d0a:	9221      	str	r2, [sp, #132]	; 0x84
 8004d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d0e:	605c      	str	r4, [r3, #4]
 8004d10:	3201      	adds	r2, #1
 8004d12:	2a07      	cmp	r2, #7
 8004d14:	9220      	str	r2, [sp, #128]	; 0x80
 8004d16:	dc01      	bgt.n	8004d1c <_vfprintf_r+0x9d4>
 8004d18:	3308      	adds	r3, #8
 8004d1a:	e008      	b.n	8004d2e <_vfprintf_r+0x9e6>
 8004d1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d1e:	4659      	mov	r1, fp
 8004d20:	4650      	mov	r0, sl
 8004d22:	f002 fddf 	bl	80078e4 <__sprint_r>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f040 81ca 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004d2c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004d2e:	3e10      	subs	r6, #16
 8004d30:	e7e6      	b.n	8004d00 <_vfprintf_r+0x9b8>
 8004d32:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <_vfprintf_r+0xbc0>)
 8004d34:	e883 0044 	stmia.w	r3, {r2, r6}
 8004d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d3a:	4416      	add	r6, r2
 8004d3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d3e:	9621      	str	r6, [sp, #132]	; 0x84
 8004d40:	3201      	adds	r2, #1
 8004d42:	2a07      	cmp	r2, #7
 8004d44:	9220      	str	r2, [sp, #128]	; 0x80
 8004d46:	dc01      	bgt.n	8004d4c <_vfprintf_r+0xa04>
 8004d48:	3308      	adds	r3, #8
 8004d4a:	e008      	b.n	8004d5e <_vfprintf_r+0xa16>
 8004d4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d4e:	4659      	mov	r1, fp
 8004d50:	4650      	mov	r0, sl
 8004d52:	f002 fdc7 	bl	80078e4 <__sprint_r>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f040 81b2 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004d5c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	9904      	ldr	r1, [sp, #16]
 8004d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d66:	f8c3 8000 	str.w	r8, [r3]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	9221      	str	r2, [sp, #132]	; 0x84
 8004d6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d70:	3201      	adds	r2, #1
 8004d72:	2a07      	cmp	r2, #7
 8004d74:	9220      	str	r2, [sp, #128]	; 0x80
 8004d76:	f73f af0e 	bgt.w	8004b96 <_vfprintf_r+0x84e>
 8004d7a:	f103 0408 	add.w	r4, r3, #8
 8004d7e:	e14f      	b.n	8005020 <_vfprintf_r+0xcd8>
 8004d80:	9b04      	ldr	r3, [sp, #16]
 8004d82:	42bb      	cmp	r3, r7
 8004d84:	bfa8      	it	ge
 8004d86:	463b      	movge	r3, r7
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	461e      	mov	r6, r3
 8004d8c:	dd15      	ble.n	8004dba <_vfprintf_r+0xa72>
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d92:	f8c4 8000 	str.w	r8, [r4]
 8004d96:	4433      	add	r3, r6
 8004d98:	9321      	str	r3, [sp, #132]	; 0x84
 8004d9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	2b07      	cmp	r3, #7
 8004da0:	9320      	str	r3, [sp, #128]	; 0x80
 8004da2:	dc01      	bgt.n	8004da8 <_vfprintf_r+0xa60>
 8004da4:	3408      	adds	r4, #8
 8004da6:	e008      	b.n	8004dba <_vfprintf_r+0xa72>
 8004da8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004daa:	4659      	mov	r1, fp
 8004dac:	4650      	mov	r0, sl
 8004dae:	f002 fd99 	bl	80078e4 <__sprint_r>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	f040 8184 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004db8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	bfac      	ite	ge
 8004dbe:	1bbe      	subge	r6, r7, r6
 8004dc0:	463e      	movlt	r6, r7
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	dd30      	ble.n	8004e28 <_vfprintf_r+0xae0>
 8004dc6:	f04f 0910 	mov.w	r9, #16
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <_vfprintf_r+0xbc0>)
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	2e10      	cmp	r6, #16
 8004dd0:	dd16      	ble.n	8004e00 <_vfprintf_r+0xab8>
 8004dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dd4:	f8c4 9004 	str.w	r9, [r4, #4]
 8004dd8:	3310      	adds	r3, #16
 8004dda:	9321      	str	r3, [sp, #132]	; 0x84
 8004ddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dde:	3301      	adds	r3, #1
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	9320      	str	r3, [sp, #128]	; 0x80
 8004de4:	dc01      	bgt.n	8004dea <_vfprintf_r+0xaa2>
 8004de6:	3408      	adds	r4, #8
 8004de8:	e008      	b.n	8004dfc <_vfprintf_r+0xab4>
 8004dea:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dec:	4659      	mov	r1, fp
 8004dee:	4650      	mov	r0, sl
 8004df0:	f002 fd78 	bl	80078e4 <__sprint_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f040 8163 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004dfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dfc:	3e10      	subs	r6, #16
 8004dfe:	e7e4      	b.n	8004dca <_vfprintf_r+0xa82>
 8004e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e02:	6066      	str	r6, [r4, #4]
 8004e04:	441e      	add	r6, r3
 8004e06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e08:	9621      	str	r6, [sp, #132]	; 0x84
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	2b07      	cmp	r3, #7
 8004e0e:	9320      	str	r3, [sp, #128]	; 0x80
 8004e10:	dc01      	bgt.n	8004e16 <_vfprintf_r+0xace>
 8004e12:	3408      	adds	r4, #8
 8004e14:	e008      	b.n	8004e28 <_vfprintf_r+0xae0>
 8004e16:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e18:	4659      	mov	r1, fp
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	f002 fd62 	bl	80078e4 <__sprint_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	f040 814d 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004e26:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e2a:	9a04      	ldr	r2, [sp, #16]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	4447      	add	r7, r8
 8004e30:	db01      	blt.n	8004e36 <_vfprintf_r+0xaee>
 8004e32:	07e8      	lsls	r0, r5, #31
 8004e34:	d517      	bpl.n	8004e66 <_vfprintf_r+0xb1e>
 8004e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	9b08      	ldr	r3, [sp, #32]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	9a08      	ldr	r2, [sp, #32]
 8004e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e42:	4413      	add	r3, r2
 8004e44:	9321      	str	r3, [sp, #132]	; 0x84
 8004e46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e48:	3301      	adds	r3, #1
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	9320      	str	r3, [sp, #128]	; 0x80
 8004e4e:	dc01      	bgt.n	8004e54 <_vfprintf_r+0xb0c>
 8004e50:	3408      	adds	r4, #8
 8004e52:	e008      	b.n	8004e66 <_vfprintf_r+0xb1e>
 8004e54:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e56:	4659      	mov	r1, fp
 8004e58:	4650      	mov	r0, sl
 8004e5a:	f002 fd43 	bl	80078e4 <__sprint_r>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f040 812e 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004e64:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e66:	9b04      	ldr	r3, [sp, #16]
 8004e68:	9a04      	ldr	r2, [sp, #16]
 8004e6a:	eb08 0603 	add.w	r6, r8, r3
 8004e6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e70:	1bf6      	subs	r6, r6, r7
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	429e      	cmp	r6, r3
 8004e76:	bfa8      	it	ge
 8004e78:	461e      	movge	r6, r3
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	dd14      	ble.n	8004ea8 <_vfprintf_r+0xb60>
 8004e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e80:	6027      	str	r7, [r4, #0]
 8004e82:	4433      	add	r3, r6
 8004e84:	9321      	str	r3, [sp, #132]	; 0x84
 8004e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e88:	6066      	str	r6, [r4, #4]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	2b07      	cmp	r3, #7
 8004e8e:	9320      	str	r3, [sp, #128]	; 0x80
 8004e90:	dc01      	bgt.n	8004e96 <_vfprintf_r+0xb4e>
 8004e92:	3408      	adds	r4, #8
 8004e94:	e008      	b.n	8004ea8 <_vfprintf_r+0xb60>
 8004e96:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e98:	4659      	mov	r1, fp
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	f002 fd22 	bl	80078e4 <__sprint_r>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f040 810d 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004ea6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eaa:	9a04      	ldr	r2, [sp, #16]
 8004eac:	2e00      	cmp	r6, #0
 8004eae:	eba2 0303 	sub.w	r3, r2, r3
 8004eb2:	bfac      	ite	ge
 8004eb4:	1b9e      	subge	r6, r3, r6
 8004eb6:	461e      	movlt	r6, r3
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	f340 80b1 	ble.w	8005020 <_vfprintf_r+0xcd8>
 8004ebe:	4f12      	ldr	r7, [pc, #72]	; (8004f08 <_vfprintf_r+0xbc0>)
 8004ec0:	f04f 0810 	mov.w	r8, #16
 8004ec4:	2e10      	cmp	r6, #16
 8004ec6:	dd16      	ble.n	8004ef6 <_vfprintf_r+0xbae>
 8004ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eca:	3310      	adds	r3, #16
 8004ecc:	9321      	str	r3, [sp, #132]	; 0x84
 8004ece:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	e884 0180 	stmia.w	r4, {r7, r8}
 8004ed8:	9320      	str	r3, [sp, #128]	; 0x80
 8004eda:	dc01      	bgt.n	8004ee0 <_vfprintf_r+0xb98>
 8004edc:	3408      	adds	r4, #8
 8004ede:	e008      	b.n	8004ef2 <_vfprintf_r+0xbaa>
 8004ee0:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	f002 fcfd 	bl	80078e4 <__sprint_r>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f040 80e8 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004ef0:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ef2:	3e10      	subs	r6, #16
 8004ef4:	e7e6      	b.n	8004ec4 <_vfprintf_r+0xb7c>
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <_vfprintf_r+0xbc0>)
 8004ef8:	e884 0048 	stmia.w	r4, {r3, r6}
 8004efc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004efe:	441e      	add	r6, r3
 8004f00:	9621      	str	r6, [sp, #132]	; 0x84
 8004f02:	e642      	b.n	8004b8a <_vfprintf_r+0x842>
 8004f04:	08007dfe 	.word	0x08007dfe
 8004f08:	08007e20 	.word	0x08007e20
 8004f0c:	9b04      	ldr	r3, [sp, #16]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	dc01      	bgt.n	8004f16 <_vfprintf_r+0xbce>
 8004f12:	07e9      	lsls	r1, r5, #31
 8004f14:	d573      	bpl.n	8004ffe <_vfprintf_r+0xcb6>
 8004f16:	2301      	movs	r3, #1
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f1c:	f8c4 8000 	str.w	r8, [r4]
 8004f20:	3301      	adds	r3, #1
 8004f22:	9321      	str	r3, [sp, #132]	; 0x84
 8004f24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f26:	3301      	adds	r3, #1
 8004f28:	2b07      	cmp	r3, #7
 8004f2a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f2c:	dc01      	bgt.n	8004f32 <_vfprintf_r+0xbea>
 8004f2e:	3408      	adds	r4, #8
 8004f30:	e008      	b.n	8004f44 <_vfprintf_r+0xbfc>
 8004f32:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f34:	4659      	mov	r1, fp
 8004f36:	4650      	mov	r0, sl
 8004f38:	f002 fcd4 	bl	80078e4 <__sprint_r>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f040 80bf 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004f42:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	9b08      	ldr	r3, [sp, #32]
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	9a08      	ldr	r2, [sp, #32]
 8004f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f50:	4413      	add	r3, r2
 8004f52:	9321      	str	r3, [sp, #132]	; 0x84
 8004f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f56:	3301      	adds	r3, #1
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f5c:	dc01      	bgt.n	8004f62 <_vfprintf_r+0xc1a>
 8004f5e:	3408      	adds	r4, #8
 8004f60:	e008      	b.n	8004f74 <_vfprintf_r+0xc2c>
 8004f62:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f64:	4659      	mov	r1, fp
 8004f66:	4650      	mov	r0, sl
 8004f68:	f002 fcbc 	bl	80078e4 <__sprint_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f040 80a7 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004f72:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f7c:	f7fb fda0 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f80:	9b04      	ldr	r3, [sp, #16]
 8004f82:	1e5e      	subs	r6, r3, #1
 8004f84:	b9b8      	cbnz	r0, 8004fb6 <_vfprintf_r+0xc6e>
 8004f86:	f108 0301 	add.w	r3, r8, #1
 8004f8a:	e884 0048 	stmia.w	r4, {r3, r6}
 8004f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f90:	9a04      	ldr	r2, [sp, #16]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	9321      	str	r3, [sp, #132]	; 0x84
 8004f98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	2b07      	cmp	r3, #7
 8004f9e:	9320      	str	r3, [sp, #128]	; 0x80
 8004fa0:	dd34      	ble.n	800500c <_vfprintf_r+0xcc4>
 8004fa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	f002 fc9c 	bl	80078e4 <__sprint_r>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 8087 	bne.w	80050c0 <_vfprintf_r+0xd78>
 8004fb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fb4:	e02b      	b.n	800500e <_vfprintf_r+0xcc6>
 8004fb6:	2e00      	cmp	r6, #0
 8004fb8:	dd29      	ble.n	800500e <_vfprintf_r+0xcc6>
 8004fba:	4fa6      	ldr	r7, [pc, #664]	; (8005254 <_vfprintf_r+0xf0c>)
 8004fbc:	f04f 0810 	mov.w	r8, #16
 8004fc0:	2e10      	cmp	r6, #16
 8004fc2:	dd15      	ble.n	8004ff0 <_vfprintf_r+0xca8>
 8004fc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	9321      	str	r3, [sp, #132]	; 0x84
 8004fca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fcc:	3301      	adds	r3, #1
 8004fce:	2b07      	cmp	r3, #7
 8004fd0:	e884 0180 	stmia.w	r4, {r7, r8}
 8004fd4:	9320      	str	r3, [sp, #128]	; 0x80
 8004fd6:	dc01      	bgt.n	8004fdc <_vfprintf_r+0xc94>
 8004fd8:	3408      	adds	r4, #8
 8004fda:	e007      	b.n	8004fec <_vfprintf_r+0xca4>
 8004fdc:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fde:	4659      	mov	r1, fp
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	f002 fc7f 	bl	80078e4 <__sprint_r>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d16a      	bne.n	80050c0 <_vfprintf_r+0xd78>
 8004fea:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fec:	3e10      	subs	r6, #16
 8004fee:	e7e7      	b.n	8004fc0 <_vfprintf_r+0xc78>
 8004ff0:	4b98      	ldr	r3, [pc, #608]	; (8005254 <_vfprintf_r+0xf0c>)
 8004ff2:	e884 0048 	stmia.w	r4, {r3, r6}
 8004ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff8:	441e      	add	r6, r3
 8004ffa:	9621      	str	r6, [sp, #132]	; 0x84
 8004ffc:	e7cc      	b.n	8004f98 <_vfprintf_r+0xc50>
 8004ffe:	2301      	movs	r3, #1
 8005000:	6063      	str	r3, [r4, #4]
 8005002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005004:	f8c4 8000 	str.w	r8, [r4]
 8005008:	3301      	adds	r3, #1
 800500a:	e7c4      	b.n	8004f96 <_vfprintf_r+0xc4e>
 800500c:	3408      	adds	r4, #8
 800500e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800501a:	4413      	add	r3, r2
 800501c:	e5b4      	b.n	8004b88 <_vfprintf_r+0x840>
 800501e:	3408      	adds	r4, #8
 8005020:	076a      	lsls	r2, r5, #29
 8005022:	d40b      	bmi.n	800503c <_vfprintf_r+0xcf4>
 8005024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800502a:	428a      	cmp	r2, r1
 800502c:	bfac      	ite	ge
 800502e:	189b      	addge	r3, r3, r2
 8005030:	185b      	addlt	r3, r3, r1
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005036:	2b00      	cmp	r3, #0
 8005038:	d035      	beq.n	80050a6 <_vfprintf_r+0xd5e>
 800503a:	e02e      	b.n	800509a <_vfprintf_r+0xd52>
 800503c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005040:	1a9d      	subs	r5, r3, r2
 8005042:	2d00      	cmp	r5, #0
 8005044:	ddee      	ble.n	8005024 <_vfprintf_r+0xcdc>
 8005046:	2610      	movs	r6, #16
 8005048:	4b83      	ldr	r3, [pc, #524]	; (8005258 <_vfprintf_r+0xf10>)
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2d10      	cmp	r5, #16
 800504e:	dd13      	ble.n	8005078 <_vfprintf_r+0xd30>
 8005050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005052:	6066      	str	r6, [r4, #4]
 8005054:	3310      	adds	r3, #16
 8005056:	9321      	str	r3, [sp, #132]	; 0x84
 8005058:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800505a:	3301      	adds	r3, #1
 800505c:	2b07      	cmp	r3, #7
 800505e:	9320      	str	r3, [sp, #128]	; 0x80
 8005060:	dc01      	bgt.n	8005066 <_vfprintf_r+0xd1e>
 8005062:	3408      	adds	r4, #8
 8005064:	e006      	b.n	8005074 <_vfprintf_r+0xd2c>
 8005066:	aa1f      	add	r2, sp, #124	; 0x7c
 8005068:	4659      	mov	r1, fp
 800506a:	4650      	mov	r0, sl
 800506c:	f002 fc3a 	bl	80078e4 <__sprint_r>
 8005070:	bb30      	cbnz	r0, 80050c0 <_vfprintf_r+0xd78>
 8005072:	ac2c      	add	r4, sp, #176	; 0xb0
 8005074:	3d10      	subs	r5, #16
 8005076:	e7e7      	b.n	8005048 <_vfprintf_r+0xd00>
 8005078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800507a:	6065      	str	r5, [r4, #4]
 800507c:	441d      	add	r5, r3
 800507e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005080:	9521      	str	r5, [sp, #132]	; 0x84
 8005082:	3301      	adds	r3, #1
 8005084:	2b07      	cmp	r3, #7
 8005086:	9320      	str	r3, [sp, #128]	; 0x80
 8005088:	ddcc      	ble.n	8005024 <_vfprintf_r+0xcdc>
 800508a:	aa1f      	add	r2, sp, #124	; 0x7c
 800508c:	4659      	mov	r1, fp
 800508e:	4650      	mov	r0, sl
 8005090:	f002 fc28 	bl	80078e4 <__sprint_r>
 8005094:	2800      	cmp	r0, #0
 8005096:	d0c5      	beq.n	8005024 <_vfprintf_r+0xcdc>
 8005098:	e012      	b.n	80050c0 <_vfprintf_r+0xd78>
 800509a:	aa1f      	add	r2, sp, #124	; 0x7c
 800509c:	4659      	mov	r1, fp
 800509e:	4650      	mov	r0, sl
 80050a0:	f002 fc20 	bl	80078e4 <__sprint_r>
 80050a4:	b960      	cbnz	r0, 80050c0 <_vfprintf_r+0xd78>
 80050a6:	2300      	movs	r3, #0
 80050a8:	9320      	str	r3, [sp, #128]	; 0x80
 80050aa:	9f03      	ldr	r7, [sp, #12]
 80050ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80050ae:	f7ff b9b4 	b.w	800441a <_vfprintf_r+0xd2>
 80050b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050b4:	b123      	cbz	r3, 80050c0 <_vfprintf_r+0xd78>
 80050b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80050b8:	4659      	mov	r1, fp
 80050ba:	4650      	mov	r0, sl
 80050bc:	f002 fc12 	bl	80078e4 <__sprint_r>
 80050c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80050c4:	065b      	lsls	r3, r3, #25
 80050c6:	f53f a98b 	bmi.w	80043e0 <_vfprintf_r+0x98>
 80050ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050cc:	e12f      	b.n	800532e <_vfprintf_r+0xfe6>
 80050ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	f7fb fd25 	bl	8000b24 <__aeabi_dcmpun>
 80050da:	b160      	cbz	r0, 80050f6 <_vfprintf_r+0xdae>
 80050dc:	4b5f      	ldr	r3, [pc, #380]	; (800525c <_vfprintf_r+0xf14>)
 80050de:	4a60      	ldr	r2, [pc, #384]	; (8005260 <_vfprintf_r+0xf18>)
 80050e0:	9902      	ldr	r1, [sp, #8]
 80050e2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80050e6:	2947      	cmp	r1, #71	; 0x47
 80050e8:	bfcc      	ite	gt
 80050ea:	4690      	movgt	r8, r2
 80050ec:	4698      	movle	r8, r3
 80050ee:	f04f 0903 	mov.w	r9, #3
 80050f2:	2600      	movs	r6, #0
 80050f4:	e451      	b.n	800499a <_vfprintf_r+0x652>
 80050f6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050fa:	d00a      	beq.n	8005112 <_vfprintf_r+0xdca>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	f023 0320 	bic.w	r3, r3, #32
 8005102:	2b47      	cmp	r3, #71	; 0x47
 8005104:	d107      	bne.n	8005116 <_vfprintf_r+0xdce>
 8005106:	f1b9 0f00 	cmp.w	r9, #0
 800510a:	bf08      	it	eq
 800510c:	f04f 0901 	moveq.w	r9, #1
 8005110:	e001      	b.n	8005116 <_vfprintf_r+0xdce>
 8005112:	f04f 0906 	mov.w	r9, #6
 8005116:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800511a:	930c      	str	r3, [sp, #48]	; 0x30
 800511c:	9b07      	ldr	r3, [sp, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	da07      	bge.n	8005132 <_vfprintf_r+0xdea>
 8005122:	9b06      	ldr	r3, [sp, #24]
 8005124:	930e      	str	r3, [sp, #56]	; 0x38
 8005126:	9b07      	ldr	r3, [sp, #28]
 8005128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800512c:	930f      	str	r3, [sp, #60]	; 0x3c
 800512e:	232d      	movs	r3, #45	; 0x2d
 8005130:	e004      	b.n	800513c <_vfprintf_r+0xdf4>
 8005132:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005136:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800513a:	2300      	movs	r3, #0
 800513c:	930b      	str	r3, [sp, #44]	; 0x2c
 800513e:	9b02      	ldr	r3, [sp, #8]
 8005140:	f023 0720 	bic.w	r7, r3, #32
 8005144:	2f46      	cmp	r7, #70	; 0x46
 8005146:	d004      	beq.n	8005152 <_vfprintf_r+0xe0a>
 8005148:	2f45      	cmp	r7, #69	; 0x45
 800514a:	d105      	bne.n	8005158 <_vfprintf_r+0xe10>
 800514c:	f109 0601 	add.w	r6, r9, #1
 8005150:	e003      	b.n	800515a <_vfprintf_r+0xe12>
 8005152:	464e      	mov	r6, r9
 8005154:	2103      	movs	r1, #3
 8005156:	e001      	b.n	800515c <_vfprintf_r+0xe14>
 8005158:	464e      	mov	r6, r9
 800515a:	2102      	movs	r1, #2
 800515c:	ab1d      	add	r3, sp, #116	; 0x74
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	ab1a      	add	r3, sp, #104	; 0x68
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4632      	mov	r2, r6
 8005166:	ab19      	add	r3, sp, #100	; 0x64
 8005168:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800516c:	4650      	mov	r0, sl
 800516e:	f000 fa1b 	bl	80055a8 <_dtoa_r>
 8005172:	2f47      	cmp	r7, #71	; 0x47
 8005174:	4680      	mov	r8, r0
 8005176:	d102      	bne.n	800517e <_vfprintf_r+0xe36>
 8005178:	07eb      	lsls	r3, r5, #31
 800517a:	f140 80ce 	bpl.w	800531a <_vfprintf_r+0xfd2>
 800517e:	eb08 0306 	add.w	r3, r8, r6
 8005182:	2f46      	cmp	r7, #70	; 0x46
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	d111      	bne.n	80051ac <_vfprintf_r+0xe64>
 8005188:	f898 3000 	ldrb.w	r3, [r8]
 800518c:	2b30      	cmp	r3, #48	; 0x30
 800518e:	d109      	bne.n	80051a4 <_vfprintf_r+0xe5c>
 8005190:	2200      	movs	r2, #0
 8005192:	2300      	movs	r3, #0
 8005194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005198:	f7fb fc92 	bl	8000ac0 <__aeabi_dcmpeq>
 800519c:	b910      	cbnz	r0, 80051a4 <_vfprintf_r+0xe5c>
 800519e:	f1c6 0601 	rsb	r6, r6, #1
 80051a2:	9619      	str	r6, [sp, #100]	; 0x64
 80051a4:	9a04      	ldr	r2, [sp, #16]
 80051a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051a8:	441a      	add	r2, r3
 80051aa:	9204      	str	r2, [sp, #16]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051b4:	f7fb fc84 	bl	8000ac0 <__aeabi_dcmpeq>
 80051b8:	b908      	cbnz	r0, 80051be <_vfprintf_r+0xe76>
 80051ba:	2230      	movs	r2, #48	; 0x30
 80051bc:	e002      	b.n	80051c4 <_vfprintf_r+0xe7c>
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	931d      	str	r3, [sp, #116]	; 0x74
 80051c2:	e007      	b.n	80051d4 <_vfprintf_r+0xe8c>
 80051c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051c6:	9904      	ldr	r1, [sp, #16]
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d903      	bls.n	80051d4 <_vfprintf_r+0xe8c>
 80051cc:	1c59      	adds	r1, r3, #1
 80051ce:	911d      	str	r1, [sp, #116]	; 0x74
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e7f7      	b.n	80051c4 <_vfprintf_r+0xe7c>
 80051d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051d6:	2f47      	cmp	r7, #71	; 0x47
 80051d8:	ebc8 0303 	rsb	r3, r8, r3
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	d108      	bne.n	80051f2 <_vfprintf_r+0xeaa>
 80051e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e2:	1cdf      	adds	r7, r3, #3
 80051e4:	db01      	blt.n	80051ea <_vfprintf_r+0xea2>
 80051e6:	4599      	cmp	r9, r3
 80051e8:	da69      	bge.n	80052be <_vfprintf_r+0xf76>
 80051ea:	9b02      	ldr	r3, [sp, #8]
 80051ec:	3b02      	subs	r3, #2
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	e002      	b.n	80051f8 <_vfprintf_r+0xeb0>
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	2b65      	cmp	r3, #101	; 0x65
 80051f6:	dc4b      	bgt.n	8005290 <_vfprintf_r+0xf48>
 80051f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80051fe:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005202:	3b01      	subs	r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	9319      	str	r3, [sp, #100]	; 0x64
 8005208:	bfba      	itte	lt
 800520a:	425b      	neglt	r3, r3
 800520c:	222d      	movlt	r2, #45	; 0x2d
 800520e:	222b      	movge	r2, #43	; 0x2b
 8005210:	2b09      	cmp	r3, #9
 8005212:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005216:	dd25      	ble.n	8005264 <_vfprintf_r+0xf1c>
 8005218:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800521c:	200a      	movs	r0, #10
 800521e:	fb93 f1f0 	sdiv	r1, r3, r0
 8005222:	fb00 3311 	mls	r3, r0, r1, r3
 8005226:	3330      	adds	r3, #48	; 0x30
 8005228:	2909      	cmp	r1, #9
 800522a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800522e:	460b      	mov	r3, r1
 8005230:	dcf5      	bgt.n	800521e <_vfprintf_r+0xed6>
 8005232:	3330      	adds	r3, #48	; 0x30
 8005234:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005238:	1e51      	subs	r1, r2, #1
 800523a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800523e:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005242:	4281      	cmp	r1, r0
 8005244:	461a      	mov	r2, r3
 8005246:	d214      	bcs.n	8005272 <_vfprintf_r+0xf2a>
 8005248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524c:	f803 2b01 	strb.w	r2, [r3], #1
 8005250:	e7f7      	b.n	8005242 <_vfprintf_r+0xefa>
 8005252:	bf00      	nop
 8005254:	08007e20 	.word	0x08007e20
 8005258:	08007e10 	.word	0x08007e10
 800525c:	08007dd4 	.word	0x08007dd4
 8005260:	08007dd8 	.word	0x08007dd8
 8005264:	2230      	movs	r2, #48	; 0x30
 8005266:	4413      	add	r3, r2
 8005268:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800526c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005270:	aa1c      	add	r2, sp, #112	; 0x70
 8005272:	ab1b      	add	r3, sp, #108	; 0x6c
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	9a04      	ldr	r2, [sp, #16]
 8005278:	9310      	str	r3, [sp, #64]	; 0x40
 800527a:	2a01      	cmp	r2, #1
 800527c:	eb03 0902 	add.w	r9, r3, r2
 8005280:	dc02      	bgt.n	8005288 <_vfprintf_r+0xf40>
 8005282:	f015 0701 	ands.w	r7, r5, #1
 8005286:	d032      	beq.n	80052ee <_vfprintf_r+0xfa6>
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	2700      	movs	r7, #0
 800528c:	4499      	add	r9, r3
 800528e:	e02e      	b.n	80052ee <_vfprintf_r+0xfa6>
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	2b66      	cmp	r3, #102	; 0x66
 8005294:	d113      	bne.n	80052be <_vfprintf_r+0xf76>
 8005296:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005298:	2b00      	cmp	r3, #0
 800529a:	dd07      	ble.n	80052ac <_vfprintf_r+0xf64>
 800529c:	f1b9 0f00 	cmp.w	r9, #0
 80052a0:	d101      	bne.n	80052a6 <_vfprintf_r+0xf5e>
 80052a2:	07ee      	lsls	r6, r5, #31
 80052a4:	d521      	bpl.n	80052ea <_vfprintf_r+0xfa2>
 80052a6:	9a08      	ldr	r2, [sp, #32]
 80052a8:	4413      	add	r3, r2
 80052aa:	e006      	b.n	80052ba <_vfprintf_r+0xf72>
 80052ac:	f1b9 0f00 	cmp.w	r9, #0
 80052b0:	d101      	bne.n	80052b6 <_vfprintf_r+0xf6e>
 80052b2:	07ed      	lsls	r5, r5, #31
 80052b4:	d514      	bpl.n	80052e0 <_vfprintf_r+0xf98>
 80052b6:	9b08      	ldr	r3, [sp, #32]
 80052b8:	3301      	adds	r3, #1
 80052ba:	444b      	add	r3, r9
 80052bc:	e015      	b.n	80052ea <_vfprintf_r+0xfa2>
 80052be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	4293      	cmp	r3, r2
 80052c4:	db03      	blt.n	80052ce <_vfprintf_r+0xf86>
 80052c6:	07e8      	lsls	r0, r5, #31
 80052c8:	d50d      	bpl.n	80052e6 <_vfprintf_r+0xf9e>
 80052ca:	9a08      	ldr	r2, [sp, #32]
 80052cc:	e006      	b.n	80052dc <_vfprintf_r+0xf94>
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	9908      	ldr	r1, [sp, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	440a      	add	r2, r1
 80052d6:	dc05      	bgt.n	80052e4 <_vfprintf_r+0xf9c>
 80052d8:	f1c3 0301 	rsb	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	e002      	b.n	80052e6 <_vfprintf_r+0xf9e>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e002      	b.n	80052ea <_vfprintf_r+0xfa2>
 80052e4:	4613      	mov	r3, r2
 80052e6:	2267      	movs	r2, #103	; 0x67
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80052ec:	4699      	mov	r9, r3
 80052ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f0:	b113      	cbz	r3, 80052f8 <_vfprintf_r+0xfb0>
 80052f2:	232d      	movs	r3, #45	; 0x2d
 80052f4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80052f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052fa:	2600      	movs	r6, #0
 80052fc:	f7ff bb4e 	b.w	800499c <_vfprintf_r+0x654>
 8005300:	2200      	movs	r2, #0
 8005302:	2300      	movs	r3, #0
 8005304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005308:	f7fb fbe4 	bl	8000ad4 <__aeabi_dcmplt>
 800530c:	b110      	cbz	r0, 8005314 <_vfprintf_r+0xfcc>
 800530e:	232d      	movs	r3, #45	; 0x2d
 8005310:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <_vfprintf_r+0xfec>)
 8005316:	4a08      	ldr	r2, [pc, #32]	; (8005338 <_vfprintf_r+0xff0>)
 8005318:	e6e2      	b.n	80050e0 <_vfprintf_r+0xd98>
 800531a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800531c:	1a1b      	subs	r3, r3, r0
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	e75e      	b.n	80051e0 <_vfprintf_r+0xe98>
 8005322:	ea56 0207 	orrs.w	r2, r6, r7
 8005326:	f47f aaac 	bne.w	8004882 <_vfprintf_r+0x53a>
 800532a:	f7ff bab1 	b.w	8004890 <_vfprintf_r+0x548>
 800532e:	b03d      	add	sp, #244	; 0xf4
 8005330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005334:	08007dcc 	.word	0x08007dcc
 8005338:	08007dd0 	.word	0x08007dd0

0800533c <__sbprintf>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	8989      	ldrh	r1, [r1, #12]
 8005342:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8005346:	f021 0102 	bic.w	r1, r1, #2
 800534a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800534e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005350:	9119      	str	r1, [sp, #100]	; 0x64
 8005352:	89e1      	ldrh	r1, [r4, #14]
 8005354:	f8ad 100e 	strh.w	r1, [sp, #14]
 8005358:	6a21      	ldr	r1, [r4, #32]
 800535a:	9108      	str	r1, [sp, #32]
 800535c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800535e:	910a      	str	r1, [sp, #40]	; 0x28
 8005360:	a91a      	add	r1, sp, #104	; 0x68
 8005362:	9100      	str	r1, [sp, #0]
 8005364:	9104      	str	r1, [sp, #16]
 8005366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800536a:	9102      	str	r1, [sp, #8]
 800536c:	9105      	str	r1, [sp, #20]
 800536e:	2100      	movs	r1, #0
 8005370:	9106      	str	r1, [sp, #24]
 8005372:	4669      	mov	r1, sp
 8005374:	4606      	mov	r6, r0
 8005376:	f7fe ffe7 	bl	8004348 <_vfprintf_r>
 800537a:	1e05      	subs	r5, r0, #0
 800537c:	db07      	blt.n	800538e <__sbprintf+0x52>
 800537e:	4669      	mov	r1, sp
 8005380:	4630      	mov	r0, r6
 8005382:	f000 ff41 	bl	8006208 <_fflush_r>
 8005386:	2800      	cmp	r0, #0
 8005388:	bf18      	it	ne
 800538a:	f04f 35ff 	movne.w	r5, #4294967295
 800538e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005392:	065b      	lsls	r3, r3, #25
 8005394:	bf48      	it	mi
 8005396:	89a3      	ldrhmi	r3, [r4, #12]
 8005398:	4628      	mov	r0, r5
 800539a:	bf44      	itt	mi
 800539c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80053a0:	81a3      	strhmi	r3, [r4, #12]
 80053a2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80053a6:	bd70      	pop	{r4, r5, r6, pc}

080053a8 <__swsetup_r>:
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <__swsetup_r+0xcc>)
 80053aa:	b570      	push	{r4, r5, r6, lr}
 80053ac:	681d      	ldr	r5, [r3, #0]
 80053ae:	4606      	mov	r6, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	b125      	cbz	r5, 80053be <__swsetup_r+0x16>
 80053b4:	69ab      	ldr	r3, [r5, #24]
 80053b6:	b913      	cbnz	r3, 80053be <__swsetup_r+0x16>
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 ff8f 	bl	80062dc <__sinit>
 80053be:	4b2e      	ldr	r3, [pc, #184]	; (8005478 <__swsetup_r+0xd0>)
 80053c0:	429c      	cmp	r4, r3
 80053c2:	d101      	bne.n	80053c8 <__swsetup_r+0x20>
 80053c4:	686c      	ldr	r4, [r5, #4]
 80053c6:	e008      	b.n	80053da <__swsetup_r+0x32>
 80053c8:	4b2c      	ldr	r3, [pc, #176]	; (800547c <__swsetup_r+0xd4>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d101      	bne.n	80053d2 <__swsetup_r+0x2a>
 80053ce:	68ac      	ldr	r4, [r5, #8]
 80053d0:	e003      	b.n	80053da <__swsetup_r+0x32>
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <__swsetup_r+0xd8>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	bf08      	it	eq
 80053d8:	68ec      	ldreq	r4, [r5, #12]
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	b29a      	uxth	r2, r3
 80053e0:	0715      	lsls	r5, r2, #28
 80053e2:	d41d      	bmi.n	8005420 <__swsetup_r+0x78>
 80053e4:	06d0      	lsls	r0, r2, #27
 80053e6:	d402      	bmi.n	80053ee <__swsetup_r+0x46>
 80053e8:	2209      	movs	r2, #9
 80053ea:	6032      	str	r2, [r6, #0]
 80053ec:	e03a      	b.n	8005464 <__swsetup_r+0xbc>
 80053ee:	0751      	lsls	r1, r2, #29
 80053f0:	d512      	bpl.n	8005418 <__swsetup_r+0x70>
 80053f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053f4:	b141      	cbz	r1, 8005408 <__swsetup_r+0x60>
 80053f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d002      	beq.n	8005404 <__swsetup_r+0x5c>
 80053fe:	4630      	mov	r0, r6
 8005400:	f001 f834 	bl	800646c <_free_r>
 8005404:	2300      	movs	r3, #0
 8005406:	6363      	str	r3, [r4, #52]	; 0x34
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	2300      	movs	r3, #0
 8005412:	6063      	str	r3, [r4, #4]
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f043 0308 	orr.w	r3, r3, #8
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	b94b      	cbnz	r3, 8005438 <__swsetup_r+0x90>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800542a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542e:	d003      	beq.n	8005438 <__swsetup_r+0x90>
 8005430:	4621      	mov	r1, r4
 8005432:	4630      	mov	r0, r6
 8005434:	f001 fa7a 	bl	800692c <__smakebuf_r>
 8005438:	89a2      	ldrh	r2, [r4, #12]
 800543a:	f012 0301 	ands.w	r3, r2, #1
 800543e:	d005      	beq.n	800544c <__swsetup_r+0xa4>
 8005440:	2300      	movs	r3, #0
 8005442:	60a3      	str	r3, [r4, #8]
 8005444:	6963      	ldr	r3, [r4, #20]
 8005446:	425b      	negs	r3, r3
 8005448:	61a3      	str	r3, [r4, #24]
 800544a:	e003      	b.n	8005454 <__swsetup_r+0xac>
 800544c:	0792      	lsls	r2, r2, #30
 800544e:	bf58      	it	pl
 8005450:	6963      	ldrpl	r3, [r4, #20]
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	b95b      	cbnz	r3, 8005470 <__swsetup_r+0xc8>
 8005458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8005460:	b280      	uxth	r0, r0
 8005462:	b130      	cbz	r0, 8005472 <__swsetup_r+0xca>
 8005464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	2000      	movs	r0, #0
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	200000f4 	.word	0x200000f4
 8005478:	08007e40 	.word	0x08007e40
 800547c:	08007e60 	.word	0x08007e60
 8005480:	08007e80 	.word	0x08007e80

08005484 <quorem>:
 8005484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	6903      	ldr	r3, [r0, #16]
 800548a:	690c      	ldr	r4, [r1, #16]
 800548c:	429c      	cmp	r4, r3
 800548e:	4680      	mov	r8, r0
 8005490:	f300 8083 	bgt.w	800559a <quorem+0x116>
 8005494:	3c01      	subs	r4, #1
 8005496:	f101 0714 	add.w	r7, r1, #20
 800549a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800549e:	f100 0614 	add.w	r6, r0, #20
 80054a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054a6:	eb06 030e 	add.w	r3, r6, lr
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	3501      	adds	r5, #1
 80054ae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80054b2:	fbb3 f5f5 	udiv	r5, r3, r5
 80054b6:	eb07 090e 	add.w	r9, r7, lr
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	d039      	beq.n	8005532 <quorem+0xae>
 80054be:	f04f 0a00 	mov.w	sl, #0
 80054c2:	4638      	mov	r0, r7
 80054c4:	46b4      	mov	ip, r6
 80054c6:	46d3      	mov	fp, sl
 80054c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054cc:	b293      	uxth	r3, r2
 80054ce:	fb05 a303 	mla	r3, r5, r3, sl
 80054d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ebc3 030b 	rsb	r3, r3, fp
 80054dc:	0c12      	lsrs	r2, r2, #16
 80054de:	f8bc b000 	ldrh.w	fp, [ip]
 80054e2:	fb05 a202 	mla	r2, r5, r2, sl
 80054e6:	fa13 f38b 	uxtah	r3, r3, fp
 80054ea:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80054ee:	fa1f fb82 	uxth.w	fp, r2
 80054f2:	f8dc 2000 	ldr.w	r2, [ip]
 80054f6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80054fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005504:	4581      	cmp	r9, r0
 8005506:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800550a:	f84c 3b04 	str.w	r3, [ip], #4
 800550e:	d2db      	bcs.n	80054c8 <quorem+0x44>
 8005510:	f856 300e 	ldr.w	r3, [r6, lr]
 8005514:	b96b      	cbnz	r3, 8005532 <quorem+0xae>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	3b04      	subs	r3, #4
 800551a:	429e      	cmp	r6, r3
 800551c:	461a      	mov	r2, r3
 800551e:	d302      	bcc.n	8005526 <quorem+0xa2>
 8005520:	f8c8 4010 	str.w	r4, [r8, #16]
 8005524:	e005      	b.n	8005532 <quorem+0xae>
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	3b04      	subs	r3, #4
 800552a:	2a00      	cmp	r2, #0
 800552c:	d1f8      	bne.n	8005520 <quorem+0x9c>
 800552e:	3c01      	subs	r4, #1
 8005530:	e7f3      	b.n	800551a <quorem+0x96>
 8005532:	4640      	mov	r0, r8
 8005534:	f001 fe93 	bl	800725e <__mcmp>
 8005538:	2800      	cmp	r0, #0
 800553a:	db2c      	blt.n	8005596 <quorem+0x112>
 800553c:	3501      	adds	r5, #1
 800553e:	4630      	mov	r0, r6
 8005540:	f04f 0e00 	mov.w	lr, #0
 8005544:	f857 1b04 	ldr.w	r1, [r7], #4
 8005548:	f8d0 c000 	ldr.w	ip, [r0]
 800554c:	b28a      	uxth	r2, r1
 800554e:	ebc2 030e 	rsb	r3, r2, lr
 8005552:	0c09      	lsrs	r1, r1, #16
 8005554:	fa13 f38c 	uxtah	r3, r3, ip
 8005558:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800555c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005566:	45b9      	cmp	r9, r7
 8005568:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800556c:	f840 3b04 	str.w	r3, [r0], #4
 8005570:	d2e8      	bcs.n	8005544 <quorem+0xc0>
 8005572:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005576:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800557a:	b962      	cbnz	r2, 8005596 <quorem+0x112>
 800557c:	3b04      	subs	r3, #4
 800557e:	429e      	cmp	r6, r3
 8005580:	461a      	mov	r2, r3
 8005582:	d302      	bcc.n	800558a <quorem+0x106>
 8005584:	f8c8 4010 	str.w	r4, [r8, #16]
 8005588:	e005      	b.n	8005596 <quorem+0x112>
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	3b04      	subs	r3, #4
 800558e:	2a00      	cmp	r2, #0
 8005590:	d1f8      	bne.n	8005584 <quorem+0x100>
 8005592:	3c01      	subs	r4, #1
 8005594:	e7f3      	b.n	800557e <quorem+0xfa>
 8005596:	4628      	mov	r0, r5
 8005598:	e000      	b.n	800559c <quorem+0x118>
 800559a:	2000      	movs	r0, #0
 800559c:	b003      	add	sp, #12
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	0000      	movs	r0, r0
 80055a4:	0000      	movs	r0, r0
	...

080055a8 <_dtoa_r>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	ec59 8b10 	vmov	r8, r9, d0
 80055b0:	b097      	sub	sp, #92	; 0x5c
 80055b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055b4:	9106      	str	r1, [sp, #24]
 80055b6:	4682      	mov	sl, r0
 80055b8:	9209      	str	r2, [sp, #36]	; 0x24
 80055ba:	9310      	str	r3, [sp, #64]	; 0x40
 80055bc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80055be:	e9cd 8900 	strd	r8, r9, [sp]
 80055c2:	b945      	cbnz	r5, 80055d6 <_dtoa_r+0x2e>
 80055c4:	2010      	movs	r0, #16
 80055c6:	f001 f9ed 	bl	80069a4 <malloc>
 80055ca:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80055ce:	6045      	str	r5, [r0, #4]
 80055d0:	6085      	str	r5, [r0, #8]
 80055d2:	6005      	str	r5, [r0, #0]
 80055d4:	60c5      	str	r5, [r0, #12]
 80055d6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	b159      	cbz	r1, 80055f6 <_dtoa_r+0x4e>
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	604a      	str	r2, [r1, #4]
 80055e2:	2301      	movs	r3, #1
 80055e4:	4093      	lsls	r3, r2
 80055e6:	608b      	str	r3, [r1, #8]
 80055e8:	4650      	mov	r0, sl
 80055ea:	f001 fc60 	bl	8006eae <_Bfree>
 80055ee:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	4a9f      	ldr	r2, [pc, #636]	; (8005878 <_dtoa_r+0x2d0>)
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bfbf      	itttt	lt
 80055fe:	2301      	movlt	r3, #1
 8005600:	6023      	strlt	r3, [r4, #0]
 8005602:	9b01      	ldrlt	r3, [sp, #4]
 8005604:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005608:	bfb8      	it	lt
 800560a:	9301      	strlt	r3, [sp, #4]
 800560c:	9f01      	ldr	r7, [sp, #4]
 800560e:	bfa4      	itt	ge
 8005610:	2300      	movge	r3, #0
 8005612:	6023      	strge	r3, [r4, #0]
 8005614:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8005618:	0d1b      	lsrs	r3, r3, #20
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	4293      	cmp	r3, r2
 800561e:	d11d      	bne.n	800565c <_dtoa_r+0xb4>
 8005620:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005622:	f242 730f 	movw	r3, #9999	; 0x270f
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	9b00      	ldr	r3, [sp, #0]
 800562a:	b943      	cbnz	r3, 800563e <_dtoa_r+0x96>
 800562c:	4a93      	ldr	r2, [pc, #588]	; (800587c <_dtoa_r+0x2d4>)
 800562e:	4b94      	ldr	r3, [pc, #592]	; (8005880 <_dtoa_r+0x2d8>)
 8005630:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8005634:	2800      	cmp	r0, #0
 8005636:	bf14      	ite	ne
 8005638:	4618      	movne	r0, r3
 800563a:	4610      	moveq	r0, r2
 800563c:	e000      	b.n	8005640 <_dtoa_r+0x98>
 800563e:	4890      	ldr	r0, [pc, #576]	; (8005880 <_dtoa_r+0x2d8>)
 8005640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 854a 	beq.w	80060dc <_dtoa_r+0xb34>
 8005648:	78c3      	ldrb	r3, [r0, #3]
 800564a:	b113      	cbz	r3, 8005652 <_dtoa_r+0xaa>
 800564c:	f100 0308 	add.w	r3, r0, #8
 8005650:	e000      	b.n	8005654 <_dtoa_r+0xac>
 8005652:	1cc3      	adds	r3, r0, #3
 8005654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	f000 bd40 	b.w	80060dc <_dtoa_r+0xb34>
 800565c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005660:	2200      	movs	r2, #0
 8005662:	2300      	movs	r3, #0
 8005664:	4620      	mov	r0, r4
 8005666:	4629      	mov	r1, r5
 8005668:	f7fb fa2a 	bl	8000ac0 <__aeabi_dcmpeq>
 800566c:	4680      	mov	r8, r0
 800566e:	b158      	cbz	r0, 8005688 <_dtoa_r+0xe0>
 8005670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005672:	2301      	movs	r3, #1
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8522 	beq.w	80060c2 <_dtoa_r+0xb1a>
 800567e:	4881      	ldr	r0, [pc, #516]	; (8005884 <_dtoa_r+0x2dc>)
 8005680:	6018      	str	r0, [r3, #0]
 8005682:	3801      	subs	r0, #1
 8005684:	f000 bd2a 	b.w	80060dc <_dtoa_r+0xb34>
 8005688:	aa14      	add	r2, sp, #80	; 0x50
 800568a:	a915      	add	r1, sp, #84	; 0x54
 800568c:	ec45 4b10 	vmov	d0, r4, r5
 8005690:	4650      	mov	r0, sl
 8005692:	f001 fe5f 	bl	8007354 <__d2b>
 8005696:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800569a:	9002      	str	r0, [sp, #8]
 800569c:	b15e      	cbz	r6, 80056b6 <_dtoa_r+0x10e>
 800569e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056a2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056a6:	4620      	mov	r0, r4
 80056a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056ac:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80056b0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80056b4:	e01d      	b.n	80056f2 <_dtoa_r+0x14a>
 80056b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80056ba:	441e      	add	r6, r3
 80056bc:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	dd0a      	ble.n	80056da <_dtoa_r+0x132>
 80056c4:	9a00      	ldr	r2, [sp, #0]
 80056c6:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80056ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80056ce:	fa22 f000 	lsr.w	r0, r2, r0
 80056d2:	fa07 f303 	lsl.w	r3, r7, r3
 80056d6:	4318      	orrs	r0, r3
 80056d8:	e004      	b.n	80056e4 <_dtoa_r+0x13c>
 80056da:	f1c3 0020 	rsb	r0, r3, #32
 80056de:	9b00      	ldr	r3, [sp, #0]
 80056e0:	fa03 f000 	lsl.w	r0, r3, r0
 80056e4:	f7fa ff0e 	bl	8000504 <__aeabi_ui2d>
 80056e8:	2301      	movs	r3, #1
 80056ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80056ee:	3e01      	subs	r6, #1
 80056f0:	9311      	str	r3, [sp, #68]	; 0x44
 80056f2:	2200      	movs	r2, #0
 80056f4:	4b64      	ldr	r3, [pc, #400]	; (8005888 <_dtoa_r+0x2e0>)
 80056f6:	f7fa fdc7 	bl	8000288 <__aeabi_dsub>
 80056fa:	a359      	add	r3, pc, #356	; (adr r3, 8005860 <_dtoa_r+0x2b8>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa ff76 	bl	80005f0 <__aeabi_dmul>
 8005704:	a358      	add	r3, pc, #352	; (adr r3, 8005868 <_dtoa_r+0x2c0>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fdbf 	bl	800028c <__adddf3>
 800570e:	4604      	mov	r4, r0
 8005710:	4630      	mov	r0, r6
 8005712:	460d      	mov	r5, r1
 8005714:	f7fa ff06 	bl	8000524 <__aeabi_i2d>
 8005718:	a355      	add	r3, pc, #340	; (adr r3, 8005870 <_dtoa_r+0x2c8>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f7fa ff67 	bl	80005f0 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fa fdaf 	bl	800028c <__adddf3>
 800572e:	4604      	mov	r4, r0
 8005730:	460d      	mov	r5, r1
 8005732:	f7fb fa0d 	bl	8000b50 <__aeabi_d2iz>
 8005736:	2200      	movs	r2, #0
 8005738:	4683      	mov	fp, r0
 800573a:	2300      	movs	r3, #0
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fb f9c8 	bl	8000ad4 <__aeabi_dcmplt>
 8005744:	b158      	cbz	r0, 800575e <_dtoa_r+0x1b6>
 8005746:	4658      	mov	r0, fp
 8005748:	f7fa feec 	bl	8000524 <__aeabi_i2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4620      	mov	r0, r4
 8005752:	4629      	mov	r1, r5
 8005754:	f7fb f9b4 	bl	8000ac0 <__aeabi_dcmpeq>
 8005758:	b908      	cbnz	r0, 800575e <_dtoa_r+0x1b6>
 800575a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800575e:	f1bb 0f16 	cmp.w	fp, #22
 8005762:	d80d      	bhi.n	8005780 <_dtoa_r+0x1d8>
 8005764:	4949      	ldr	r1, [pc, #292]	; (800588c <_dtoa_r+0x2e4>)
 8005766:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800576a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800576e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005772:	f7fb f9cd 	bl	8000b10 <__aeabi_dcmpgt>
 8005776:	b130      	cbz	r0, 8005786 <_dtoa_r+0x1de>
 8005778:	f10b 3bff 	add.w	fp, fp, #4294967295
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <_dtoa_r+0x1da>
 8005780:	2301      	movs	r3, #1
 8005782:	930d      	str	r3, [sp, #52]	; 0x34
 8005784:	e000      	b.n	8005788 <_dtoa_r+0x1e0>
 8005786:	900d      	str	r0, [sp, #52]	; 0x34
 8005788:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800578a:	1b9e      	subs	r6, r3, r6
 800578c:	1e73      	subs	r3, r6, #1
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	bf43      	ittte	mi
 8005792:	f1c3 0900 	rsbmi	r9, r3, #0
 8005796:	2300      	movmi	r3, #0
 8005798:	9305      	strmi	r3, [sp, #20]
 800579a:	f04f 0900 	movpl.w	r9, #0
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	db07      	blt.n	80057b4 <_dtoa_r+0x20c>
 80057a4:	9b05      	ldr	r3, [sp, #20]
 80057a6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80057aa:	445b      	add	r3, fp
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	e006      	b.n	80057c2 <_dtoa_r+0x21a>
 80057b4:	f1cb 0300 	rsb	r3, fp, #0
 80057b8:	9307      	str	r3, [sp, #28]
 80057ba:	2300      	movs	r3, #0
 80057bc:	ebcb 0909 	rsb	r9, fp, r9
 80057c0:	930c      	str	r3, [sp, #48]	; 0x30
 80057c2:	9b06      	ldr	r3, [sp, #24]
 80057c4:	2b09      	cmp	r3, #9
 80057c6:	d827      	bhi.n	8005818 <_dtoa_r+0x270>
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	bfc4      	itt	gt
 80057cc:	3b04      	subgt	r3, #4
 80057ce:	9306      	strgt	r3, [sp, #24]
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	f1a3 0302 	sub.w	r3, r3, #2
 80057d6:	bfcc      	ite	gt
 80057d8:	2500      	movgt	r5, #0
 80057da:	2501      	movle	r5, #1
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d820      	bhi.n	8005822 <_dtoa_r+0x27a>
 80057e0:	e8df f003 	tbb	[pc, r3]
 80057e4:	04020e06 	.word	0x04020e06
 80057e8:	2301      	movs	r3, #1
 80057ea:	e002      	b.n	80057f2 <_dtoa_r+0x24a>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e008      	b.n	8005802 <_dtoa_r+0x25a>
 80057f0:	2300      	movs	r3, #0
 80057f2:	9308      	str	r3, [sp, #32]
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd1c      	ble.n	8005834 <_dtoa_r+0x28c>
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	4698      	mov	r8, r3
 80057fe:	e01e      	b.n	800583e <_dtoa_r+0x296>
 8005800:	2300      	movs	r3, #0
 8005802:	9308      	str	r3, [sp, #32]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	445b      	add	r3, fp
 8005808:	f103 0801 	add.w	r8, r3, #1
 800580c:	9303      	str	r3, [sp, #12]
 800580e:	4643      	mov	r3, r8
 8005810:	2b01      	cmp	r3, #1
 8005812:	bfb8      	it	lt
 8005814:	2301      	movlt	r3, #1
 8005816:	e012      	b.n	800583e <_dtoa_r+0x296>
 8005818:	2501      	movs	r5, #1
 800581a:	2300      	movs	r3, #0
 800581c:	9306      	str	r3, [sp, #24]
 800581e:	9508      	str	r5, [sp, #32]
 8005820:	e001      	b.n	8005826 <_dtoa_r+0x27e>
 8005822:	2301      	movs	r3, #1
 8005824:	9308      	str	r3, [sp, #32]
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	9303      	str	r3, [sp, #12]
 800582c:	4698      	mov	r8, r3
 800582e:	2200      	movs	r2, #0
 8005830:	2312      	movs	r3, #18
 8005832:	e003      	b.n	800583c <_dtoa_r+0x294>
 8005834:	2301      	movs	r3, #1
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	4698      	mov	r8, r3
 800583a:	461a      	mov	r2, r3
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8005842:	2200      	movs	r2, #0
 8005844:	6062      	str	r2, [r4, #4]
 8005846:	2104      	movs	r1, #4
 8005848:	f101 0214 	add.w	r2, r1, #20
 800584c:	429a      	cmp	r2, r3
 800584e:	d81f      	bhi.n	8005890 <_dtoa_r+0x2e8>
 8005850:	6862      	ldr	r2, [r4, #4]
 8005852:	3201      	adds	r2, #1
 8005854:	6062      	str	r2, [r4, #4]
 8005856:	0049      	lsls	r1, r1, #1
 8005858:	e7f6      	b.n	8005848 <_dtoa_r+0x2a0>
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
 8005860:	636f4361 	.word	0x636f4361
 8005864:	3fd287a7 	.word	0x3fd287a7
 8005868:	8b60c8b3 	.word	0x8b60c8b3
 800586c:	3fc68a28 	.word	0x3fc68a28
 8005870:	509f79fb 	.word	0x509f79fb
 8005874:	3fd34413 	.word	0x3fd34413
 8005878:	7ff00000 	.word	0x7ff00000
 800587c:	08007e30 	.word	0x08007e30
 8005880:	08007e39 	.word	0x08007e39
 8005884:	08007dff 	.word	0x08007dff
 8005888:	3ff80000 	.word	0x3ff80000
 800588c:	08007eb0 	.word	0x08007eb0
 8005890:	6861      	ldr	r1, [r4, #4]
 8005892:	4650      	mov	r0, sl
 8005894:	f001 fad6 	bl	8006e44 <_Balloc>
 8005898:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800589c:	6020      	str	r0, [r4, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	f1b8 0f0e 	cmp.w	r8, #14
 80058a6:	f200 815d 	bhi.w	8005b64 <_dtoa_r+0x5bc>
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	f000 815a 	beq.w	8005b64 <_dtoa_r+0x5bc>
 80058b0:	ed9d 7b00 	vldr	d7, [sp]
 80058b4:	f1bb 0f00 	cmp.w	fp, #0
 80058b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80058bc:	dd31      	ble.n	8005922 <_dtoa_r+0x37a>
 80058be:	4aa0      	ldr	r2, [pc, #640]	; (8005b40 <_dtoa_r+0x598>)
 80058c0:	f00b 030f 	and.w	r3, fp, #15
 80058c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058c8:	ed93 7b00 	vldr	d7, [r3]
 80058cc:	ea4f 142b 	mov.w	r4, fp, asr #4
 80058d0:	06e2      	lsls	r2, r4, #27
 80058d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80058d6:	d50c      	bpl.n	80058f2 <_dtoa_r+0x34a>
 80058d8:	4b9a      	ldr	r3, [pc, #616]	; (8005b44 <_dtoa_r+0x59c>)
 80058da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058e2:	f7fa ffaf 	bl	8000844 <__aeabi_ddiv>
 80058e6:	f004 040f 	and.w	r4, r4, #15
 80058ea:	e9cd 0100 	strd	r0, r1, [sp]
 80058ee:	2603      	movs	r6, #3
 80058f0:	e000      	b.n	80058f4 <_dtoa_r+0x34c>
 80058f2:	2602      	movs	r6, #2
 80058f4:	4d93      	ldr	r5, [pc, #588]	; (8005b44 <_dtoa_r+0x59c>)
 80058f6:	b16c      	cbz	r4, 8005914 <_dtoa_r+0x36c>
 80058f8:	07e3      	lsls	r3, r4, #31
 80058fa:	d508      	bpl.n	800590e <_dtoa_r+0x366>
 80058fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005904:	f7fa fe74 	bl	80005f0 <__aeabi_dmul>
 8005908:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800590c:	3601      	adds	r6, #1
 800590e:	1064      	asrs	r4, r4, #1
 8005910:	3508      	adds	r5, #8
 8005912:	e7f0      	b.n	80058f6 <_dtoa_r+0x34e>
 8005914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800591c:	f7fa ff92 	bl	8000844 <__aeabi_ddiv>
 8005920:	e020      	b.n	8005964 <_dtoa_r+0x3bc>
 8005922:	f1cb 0400 	rsb	r4, fp, #0
 8005926:	b304      	cbz	r4, 800596a <_dtoa_r+0x3c2>
 8005928:	4b85      	ldr	r3, [pc, #532]	; (8005b40 <_dtoa_r+0x598>)
 800592a:	4d86      	ldr	r5, [pc, #536]	; (8005b44 <_dtoa_r+0x59c>)
 800592c:	f004 020f 	and.w	r2, r4, #15
 8005930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800593c:	f7fa fe58 	bl	80005f0 <__aeabi_dmul>
 8005940:	e9cd 0100 	strd	r0, r1, [sp]
 8005944:	1124      	asrs	r4, r4, #4
 8005946:	2300      	movs	r3, #0
 8005948:	2602      	movs	r6, #2
 800594a:	b154      	cbz	r4, 8005962 <_dtoa_r+0x3ba>
 800594c:	07e7      	lsls	r7, r4, #31
 800594e:	d505      	bpl.n	800595c <_dtoa_r+0x3b4>
 8005950:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005954:	f7fa fe4c 	bl	80005f0 <__aeabi_dmul>
 8005958:	3601      	adds	r6, #1
 800595a:	2301      	movs	r3, #1
 800595c:	1064      	asrs	r4, r4, #1
 800595e:	3508      	adds	r5, #8
 8005960:	e7f3      	b.n	800594a <_dtoa_r+0x3a2>
 8005962:	b11b      	cbz	r3, 800596c <_dtoa_r+0x3c4>
 8005964:	e9cd 0100 	strd	r0, r1, [sp]
 8005968:	e000      	b.n	800596c <_dtoa_r+0x3c4>
 800596a:	2602      	movs	r6, #2
 800596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596e:	b1eb      	cbz	r3, 80059ac <_dtoa_r+0x404>
 8005970:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005974:	2200      	movs	r2, #0
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <_dtoa_r+0x5a0>)
 8005978:	4620      	mov	r0, r4
 800597a:	4629      	mov	r1, r5
 800597c:	f7fb f8aa 	bl	8000ad4 <__aeabi_dcmplt>
 8005980:	b1a0      	cbz	r0, 80059ac <_dtoa_r+0x404>
 8005982:	f1b8 0f00 	cmp.w	r8, #0
 8005986:	d011      	beq.n	80059ac <_dtoa_r+0x404>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f340 80e6 	ble.w	8005b5c <_dtoa_r+0x5b4>
 8005990:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005994:	930a      	str	r3, [sp, #40]	; 0x28
 8005996:	2200      	movs	r2, #0
 8005998:	4b6c      	ldr	r3, [pc, #432]	; (8005b4c <_dtoa_r+0x5a4>)
 800599a:	4620      	mov	r0, r4
 800599c:	4629      	mov	r1, r5
 800599e:	f7fa fe27 	bl	80005f0 <__aeabi_dmul>
 80059a2:	3601      	adds	r6, #1
 80059a4:	e9cd 0100 	strd	r0, r1, [sp]
 80059a8:	9f03      	ldr	r7, [sp, #12]
 80059aa:	e002      	b.n	80059b2 <_dtoa_r+0x40a>
 80059ac:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80059b0:	4647      	mov	r7, r8
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7fa fdb6 	bl	8000524 <__aeabi_i2d>
 80059b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059bc:	f7fa fe18 	bl	80005f0 <__aeabi_dmul>
 80059c0:	2200      	movs	r2, #0
 80059c2:	4b63      	ldr	r3, [pc, #396]	; (8005b50 <_dtoa_r+0x5a8>)
 80059c4:	f7fa fc62 	bl	800028c <__adddf3>
 80059c8:	4604      	mov	r4, r0
 80059ca:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80059ce:	b9cf      	cbnz	r7, 8005a04 <_dtoa_r+0x45c>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <_dtoa_r+0x5ac>)
 80059d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d8:	f7fa fc56 	bl	8000288 <__aeabi_dsub>
 80059dc:	4622      	mov	r2, r4
 80059de:	462b      	mov	r3, r5
 80059e0:	e9cd 0100 	strd	r0, r1, [sp]
 80059e4:	f7fb f894 	bl	8000b10 <__aeabi_dcmpgt>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f040 8241 	bne.w	8005e70 <_dtoa_r+0x8c8>
 80059ee:	4622      	mov	r2, r4
 80059f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80059f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059f8:	f7fb f86c 	bl	8000ad4 <__aeabi_dcmplt>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f040 822e 	bne.w	8005e5e <_dtoa_r+0x8b6>
 8005a02:	e0ab      	b.n	8005b5c <_dtoa_r+0x5b4>
 8005a04:	9a08      	ldr	r2, [sp, #32]
 8005a06:	4b4e      	ldr	r3, [pc, #312]	; (8005b40 <_dtoa_r+0x598>)
 8005a08:	1e79      	subs	r1, r7, #1
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d04a      	beq.n	8005aa4 <_dtoa_r+0x4fc>
 8005a0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	2000      	movs	r0, #0
 8005a18:	494f      	ldr	r1, [pc, #316]	; (8005b58 <_dtoa_r+0x5b0>)
 8005a1a:	f7fa ff13 	bl	8000844 <__aeabi_ddiv>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fc31 	bl	8000288 <__aeabi_dsub>
 8005a26:	9c04      	ldr	r4, [sp, #16]
 8005a28:	4605      	mov	r5, r0
 8005a2a:	460e      	mov	r6, r1
 8005a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a30:	f7fb f88e 	bl	8000b50 <__aeabi_d2iz>
 8005a34:	9012      	str	r0, [sp, #72]	; 0x48
 8005a36:	f7fa fd75 	bl	8000524 <__aeabi_i2d>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a42:	f7fa fc21 	bl	8000288 <__aeabi_dsub>
 8005a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a48:	3330      	adds	r3, #48	; 0x30
 8005a4a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4633      	mov	r3, r6
 8005a52:	e9cd 0100 	strd	r0, r1, [sp]
 8005a56:	f7fb f83d 	bl	8000ad4 <__aeabi_dcmplt>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f040 8321 	bne.w	80060a2 <_dtoa_r+0xafa>
 8005a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a64:	2000      	movs	r0, #0
 8005a66:	4938      	ldr	r1, [pc, #224]	; (8005b48 <_dtoa_r+0x5a0>)
 8005a68:	f7fa fc0e 	bl	8000288 <__aeabi_dsub>
 8005a6c:	462a      	mov	r2, r5
 8005a6e:	4633      	mov	r3, r6
 8005a70:	f7fb f830 	bl	8000ad4 <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f040 80d2 	bne.w	8005c1e <_dtoa_r+0x676>
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	1ae3      	subs	r3, r4, r3
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	da6c      	bge.n	8005b5c <_dtoa_r+0x5b4>
 8005a82:	2200      	movs	r2, #0
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <_dtoa_r+0x5a4>)
 8005a86:	4628      	mov	r0, r5
 8005a88:	4631      	mov	r1, r6
 8005a8a:	f7fa fdb1 	bl	80005f0 <__aeabi_dmul>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4605      	mov	r5, r0
 8005a92:	460e      	mov	r6, r1
 8005a94:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <_dtoa_r+0x5a4>)
 8005a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a9a:	f7fa fda9 	bl	80005f0 <__aeabi_dmul>
 8005a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005aa2:	e7c3      	b.n	8005a2c <_dtoa_r+0x484>
 8005aa4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab0:	f7fa fd9e 	bl	80005f0 <__aeabi_dmul>
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005aba:	19dc      	adds	r4, r3, r7
 8005abc:	461d      	mov	r5, r3
 8005abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ac2:	f7fb f845 	bl	8000b50 <__aeabi_d2iz>
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	f7fa fd2c 	bl	8000524 <__aeabi_i2d>
 8005acc:	3630      	adds	r6, #48	; 0x30
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad6:	f7fa fbd7 	bl	8000288 <__aeabi_dsub>
 8005ada:	f805 6b01 	strb.w	r6, [r5], #1
 8005ade:	42ac      	cmp	r4, r5
 8005ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	d123      	bne.n	8005b32 <_dtoa_r+0x58a>
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <_dtoa_r+0x5b0>)
 8005aec:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005af0:	f7fa fbcc 	bl	800028c <__adddf3>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005afc:	f7fb f808 	bl	8000b10 <__aeabi_dcmpgt>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f040 808c 	bne.w	8005c1e <_dtoa_r+0x676>
 8005b06:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	4912      	ldr	r1, [pc, #72]	; (8005b58 <_dtoa_r+0x5b0>)
 8005b0e:	f7fa fbbb 	bl	8000288 <__aeabi_dsub>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b1a:	f7fa ffdb 	bl	8000ad4 <__aeabi_dcmplt>
 8005b1e:	b1e8      	cbz	r0, 8005b5c <_dtoa_r+0x5b4>
 8005b20:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	f104 32ff 	add.w	r2, r4, #4294967295
 8005b2a:	f040 82ba 	bne.w	80060a2 <_dtoa_r+0xafa>
 8005b2e:	4614      	mov	r4, r2
 8005b30:	e7f6      	b.n	8005b20 <_dtoa_r+0x578>
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <_dtoa_r+0x5a4>)
 8005b34:	f7fa fd5c 	bl	80005f0 <__aeabi_dmul>
 8005b38:	e9cd 0100 	strd	r0, r1, [sp]
 8005b3c:	e7bf      	b.n	8005abe <_dtoa_r+0x516>
 8005b3e:	bf00      	nop
 8005b40:	08007eb0 	.word	0x08007eb0
 8005b44:	08007f78 	.word	0x08007f78
 8005b48:	3ff00000 	.word	0x3ff00000
 8005b4c:	40240000 	.word	0x40240000
 8005b50:	401c0000 	.word	0x401c0000
 8005b54:	40140000 	.word	0x40140000
 8005b58:	3fe00000 	.word	0x3fe00000
 8005b5c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005b60:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db7c      	blt.n	8005c64 <_dtoa_r+0x6bc>
 8005b6a:	f1bb 0f0e 	cmp.w	fp, #14
 8005b6e:	dc79      	bgt.n	8005c64 <_dtoa_r+0x6bc>
 8005b70:	4b8f      	ldr	r3, [pc, #572]	; (8005db0 <_dtoa_r+0x808>)
 8005b72:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b76:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da14      	bge.n	8005baa <_dtoa_r+0x602>
 8005b80:	f1b8 0f00 	cmp.w	r8, #0
 8005b84:	dc11      	bgt.n	8005baa <_dtoa_r+0x602>
 8005b86:	f040 816c 	bne.w	8005e62 <_dtoa_r+0x8ba>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4b89      	ldr	r3, [pc, #548]	; (8005db4 <_dtoa_r+0x80c>)
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4639      	mov	r1, r7
 8005b92:	f7fa fd2d 	bl	80005f0 <__aeabi_dmul>
 8005b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b9a:	f7fa ffaf 	bl	8000afc <__aeabi_dcmpge>
 8005b9e:	4645      	mov	r5, r8
 8005ba0:	4646      	mov	r6, r8
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f040 815f 	bne.w	8005e66 <_dtoa_r+0x8be>
 8005ba8:	e166      	b.n	8005e78 <_dtoa_r+0x8d0>
 8005baa:	9c04      	ldr	r4, [sp, #16]
 8005bac:	4632      	mov	r2, r6
 8005bae:	463b      	mov	r3, r7
 8005bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb4:	f7fa fe46 	bl	8000844 <__aeabi_ddiv>
 8005bb8:	f7fa ffca 	bl	8000b50 <__aeabi_d2iz>
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	f7fa fcb1 	bl	8000524 <__aeabi_i2d>
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	f7fa fd13 	bl	80005f0 <__aeabi_dmul>
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4602      	mov	r2, r0
 8005bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bd2:	f7fa fb59 	bl	8000288 <__aeabi_dsub>
 8005bd6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8005bda:	f804 eb01 	strb.w	lr, [r4], #1
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	ebc3 0e04 	rsb	lr, r3, r4
 8005be4:	45f0      	cmp	r8, lr
 8005be6:	e9cd 0100 	strd	r0, r1, [sp]
 8005bea:	d12e      	bne.n	8005c4a <_dtoa_r+0x6a2>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	f7fa fb4c 	bl	800028c <__adddf3>
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	4689      	mov	r9, r1
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa ff68 	bl	8000ad4 <__aeabi_dcmplt>
 8005c04:	b978      	cbnz	r0, 8005c26 <_dtoa_r+0x67e>
 8005c06:	4642      	mov	r2, r8
 8005c08:	464b      	mov	r3, r9
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	f7fa ff57 	bl	8000ac0 <__aeabi_dcmpeq>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f000 8247 	beq.w	80060a6 <_dtoa_r+0xafe>
 8005c18:	07e9      	lsls	r1, r5, #31
 8005c1a:	d404      	bmi.n	8005c26 <_dtoa_r+0x67e>
 8005c1c:	e243      	b.n	80060a6 <_dtoa_r+0xafe>
 8005c1e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005c22:	e000      	b.n	8005c26 <_dtoa_r+0x67e>
 8005c24:	461c      	mov	r4, r3
 8005c26:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005c2a:	2a39      	cmp	r2, #57	; 0x39
 8005c2c:	f104 33ff 	add.w	r3, r4, #4294967295
 8005c30:	d107      	bne.n	8005c42 <_dtoa_r+0x69a>
 8005c32:	9a04      	ldr	r2, [sp, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1f5      	bne.n	8005c24 <_dtoa_r+0x67c>
 8005c38:	9904      	ldr	r1, [sp, #16]
 8005c3a:	2230      	movs	r2, #48	; 0x30
 8005c3c:	f10b 0b01 	add.w	fp, fp, #1
 8005c40:	700a      	strb	r2, [r1, #0]
 8005c42:	781a      	ldrb	r2, [r3, #0]
 8005c44:	3201      	adds	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e22d      	b.n	80060a6 <_dtoa_r+0xafe>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4b5a      	ldr	r3, [pc, #360]	; (8005db8 <_dtoa_r+0x810>)
 8005c4e:	f7fa fccf 	bl	80005f0 <__aeabi_dmul>
 8005c52:	2200      	movs	r2, #0
 8005c54:	2300      	movs	r3, #0
 8005c56:	e9cd 0100 	strd	r0, r1, [sp]
 8005c5a:	f7fa ff31 	bl	8000ac0 <__aeabi_dcmpeq>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0a4      	beq.n	8005bac <_dtoa_r+0x604>
 8005c62:	e220      	b.n	80060a6 <_dtoa_r+0xafe>
 8005c64:	9a08      	ldr	r2, [sp, #32]
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	d02d      	beq.n	8005cc6 <_dtoa_r+0x71e>
 8005c6a:	9a06      	ldr	r2, [sp, #24]
 8005c6c:	2a01      	cmp	r2, #1
 8005c6e:	dc0a      	bgt.n	8005c86 <_dtoa_r+0x6de>
 8005c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c72:	b112      	cbz	r2, 8005c7a <_dtoa_r+0x6d2>
 8005c74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c78:	e002      	b.n	8005c80 <_dtoa_r+0x6d8>
 8005c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c7c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c80:	9d07      	ldr	r5, [sp, #28]
 8005c82:	464c      	mov	r4, r9
 8005c84:	e015      	b.n	8005cb2 <_dtoa_r+0x70a>
 8005c86:	9b07      	ldr	r3, [sp, #28]
 8005c88:	f108 35ff 	add.w	r5, r8, #4294967295
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	bfbf      	itttt	lt
 8005c90:	9b07      	ldrlt	r3, [sp, #28]
 8005c92:	9507      	strlt	r5, [sp, #28]
 8005c94:	1aea      	sublt	r2, r5, r3
 8005c96:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005c98:	bfb7      	itett	lt
 8005c9a:	189b      	addlt	r3, r3, r2
 8005c9c:	1b5d      	subge	r5, r3, r5
 8005c9e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005ca0:	2500      	movlt	r5, #0
 8005ca2:	f1b8 0f00 	cmp.w	r8, #0
 8005ca6:	bfb9      	ittee	lt
 8005ca8:	ebc8 0409 	rsblt	r4, r8, r9
 8005cac:	2300      	movlt	r3, #0
 8005cae:	464c      	movge	r4, r9
 8005cb0:	4643      	movge	r3, r8
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	441a      	add	r2, r3
 8005cb8:	4650      	mov	r0, sl
 8005cba:	4499      	add	r9, r3
 8005cbc:	9205      	str	r2, [sp, #20]
 8005cbe:	f001 f995 	bl	8006fec <__i2b>
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	e002      	b.n	8005ccc <_dtoa_r+0x724>
 8005cc6:	9d07      	ldr	r5, [sp, #28]
 8005cc8:	9e08      	ldr	r6, [sp, #32]
 8005cca:	464c      	mov	r4, r9
 8005ccc:	b15c      	cbz	r4, 8005ce6 <_dtoa_r+0x73e>
 8005cce:	9b05      	ldr	r3, [sp, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dd08      	ble.n	8005ce6 <_dtoa_r+0x73e>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	9a05      	ldr	r2, [sp, #20]
 8005cd8:	bfa8      	it	ge
 8005cda:	4623      	movge	r3, r4
 8005cdc:	ebc3 0909 	rsb	r9, r3, r9
 8005ce0:	1ae4      	subs	r4, r4, r3
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dd1d      	ble.n	8005d28 <_dtoa_r+0x780>
 8005cec:	9b08      	ldr	r3, [sp, #32]
 8005cee:	b1ab      	cbz	r3, 8005d1c <_dtoa_r+0x774>
 8005cf0:	b185      	cbz	r5, 8005d14 <_dtoa_r+0x76c>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f001 fa12 	bl	8007120 <__pow5mult>
 8005cfc:	9a02      	ldr	r2, [sp, #8]
 8005cfe:	4601      	mov	r1, r0
 8005d00:	4606      	mov	r6, r0
 8005d02:	4650      	mov	r0, sl
 8005d04:	f001 f97b 	bl	8006ffe <__multiply>
 8005d08:	9902      	ldr	r1, [sp, #8]
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	f001 f8ce 	bl	8006eae <_Bfree>
 8005d12:	9702      	str	r7, [sp, #8]
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	1b5a      	subs	r2, r3, r5
 8005d18:	d006      	beq.n	8005d28 <_dtoa_r+0x780>
 8005d1a:	e000      	b.n	8005d1e <_dtoa_r+0x776>
 8005d1c:	9a07      	ldr	r2, [sp, #28]
 8005d1e:	9902      	ldr	r1, [sp, #8]
 8005d20:	4650      	mov	r0, sl
 8005d22:	f001 f9fd 	bl	8007120 <__pow5mult>
 8005d26:	9002      	str	r0, [sp, #8]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	f001 f95e 	bl	8006fec <__i2b>
 8005d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d32:	4605      	mov	r5, r0
 8005d34:	b35b      	cbz	r3, 8005d8e <_dtoa_r+0x7e6>
 8005d36:	461a      	mov	r2, r3
 8005d38:	4601      	mov	r1, r0
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	f001 f9f0 	bl	8007120 <__pow5mult>
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	4605      	mov	r5, r0
 8005d46:	dc18      	bgt.n	8005d7a <_dtoa_r+0x7d2>
 8005d48:	9b00      	ldr	r3, [sp, #0]
 8005d4a:	b983      	cbnz	r3, 8005d6e <_dtoa_r+0x7c6>
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d52:	b973      	cbnz	r3, 8005d72 <_dtoa_r+0x7ca>
 8005d54:	9b01      	ldr	r3, [sp, #4]
 8005d56:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005d5a:	0d3f      	lsrs	r7, r7, #20
 8005d5c:	053f      	lsls	r7, r7, #20
 8005d5e:	b14f      	cbz	r7, 8005d74 <_dtoa_r+0x7cc>
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	3301      	adds	r3, #1
 8005d64:	f109 0901 	add.w	r9, r9, #1
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	2701      	movs	r7, #1
 8005d6c:	e002      	b.n	8005d74 <_dtoa_r+0x7cc>
 8005d6e:	2700      	movs	r7, #0
 8005d70:	e000      	b.n	8005d74 <_dtoa_r+0x7cc>
 8005d72:	9f00      	ldr	r7, [sp, #0]
 8005d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d76:	b173      	cbz	r3, 8005d96 <_dtoa_r+0x7ee>
 8005d78:	e000      	b.n	8005d7c <_dtoa_r+0x7d4>
 8005d7a:	2700      	movs	r7, #0
 8005d7c:	692b      	ldr	r3, [r5, #16]
 8005d7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005d82:	6918      	ldr	r0, [r3, #16]
 8005d84:	f001 f8e5 	bl	8006f52 <__hi0bits>
 8005d88:	f1c0 0020 	rsb	r0, r0, #32
 8005d8c:	e004      	b.n	8005d98 <_dtoa_r+0x7f0>
 8005d8e:	9b06      	ldr	r3, [sp, #24]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	ddd9      	ble.n	8005d48 <_dtoa_r+0x7a0>
 8005d94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005d96:	2001      	movs	r0, #1
 8005d98:	9b05      	ldr	r3, [sp, #20]
 8005d9a:	4418      	add	r0, r3
 8005d9c:	f010 001f 	ands.w	r0, r0, #31
 8005da0:	d00e      	beq.n	8005dc0 <_dtoa_r+0x818>
 8005da2:	f1c0 0320 	rsb	r3, r0, #32
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	dd08      	ble.n	8005dbc <_dtoa_r+0x814>
 8005daa:	f1c0 001c 	rsb	r0, r0, #28
 8005dae:	e008      	b.n	8005dc2 <_dtoa_r+0x81a>
 8005db0:	08007eb0 	.word	0x08007eb0
 8005db4:	40140000 	.word	0x40140000
 8005db8:	40240000 	.word	0x40240000
 8005dbc:	d006      	beq.n	8005dcc <_dtoa_r+0x824>
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	301c      	adds	r0, #28
 8005dc2:	9b05      	ldr	r3, [sp, #20]
 8005dc4:	4403      	add	r3, r0
 8005dc6:	4481      	add	r9, r0
 8005dc8:	4404      	add	r4, r0
 8005dca:	9305      	str	r3, [sp, #20]
 8005dcc:	f1b9 0f00 	cmp.w	r9, #0
 8005dd0:	dd05      	ble.n	8005dde <_dtoa_r+0x836>
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	9902      	ldr	r1, [sp, #8]
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f001 f9f0 	bl	80071bc <__lshift>
 8005ddc:	9002      	str	r0, [sp, #8]
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dd05      	ble.n	8005df0 <_dtoa_r+0x848>
 8005de4:	4629      	mov	r1, r5
 8005de6:	461a      	mov	r2, r3
 8005de8:	4650      	mov	r0, sl
 8005dea:	f001 f9e7 	bl	80071bc <__lshift>
 8005dee:	4605      	mov	r5, r0
 8005df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df2:	b1eb      	cbz	r3, 8005e30 <_dtoa_r+0x888>
 8005df4:	4629      	mov	r1, r5
 8005df6:	9802      	ldr	r0, [sp, #8]
 8005df8:	f001 fa31 	bl	800725e <__mcmp>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	da17      	bge.n	8005e30 <_dtoa_r+0x888>
 8005e00:	2300      	movs	r3, #0
 8005e02:	220a      	movs	r2, #10
 8005e04:	9902      	ldr	r1, [sp, #8]
 8005e06:	4650      	mov	r0, sl
 8005e08:	f001 f868 	bl	8006edc <__multadd>
 8005e0c:	9b08      	ldr	r3, [sp, #32]
 8005e0e:	9002      	str	r0, [sp, #8]
 8005e10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8158 	beq.w	80060ca <_dtoa_r+0xb22>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	220a      	movs	r2, #10
 8005e20:	4650      	mov	r0, sl
 8005e22:	f001 f85b 	bl	8006edc <__multadd>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	dc37      	bgt.n	8005e9e <_dtoa_r+0x8f6>
 8005e2e:	e033      	b.n	8005e98 <_dtoa_r+0x8f0>
 8005e30:	f1b8 0f00 	cmp.w	r8, #0
 8005e34:	dc2a      	bgt.n	8005e8c <_dtoa_r+0x8e4>
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	dd27      	ble.n	8005e8c <_dtoa_r+0x8e4>
 8005e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	b983      	cbnz	r3, 8005e66 <_dtoa_r+0x8be>
 8005e44:	4629      	mov	r1, r5
 8005e46:	2205      	movs	r2, #5
 8005e48:	4650      	mov	r0, sl
 8005e4a:	f001 f847 	bl	8006edc <__multadd>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	4605      	mov	r5, r0
 8005e52:	9802      	ldr	r0, [sp, #8]
 8005e54:	f001 fa03 	bl	800725e <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dc0d      	bgt.n	8005e78 <_dtoa_r+0x8d0>
 8005e5c:	e003      	b.n	8005e66 <_dtoa_r+0x8be>
 8005e5e:	463d      	mov	r5, r7
 8005e60:	e000      	b.n	8005e64 <_dtoa_r+0x8bc>
 8005e62:	2500      	movs	r5, #0
 8005e64:	462e      	mov	r6, r5
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	9c04      	ldr	r4, [sp, #16]
 8005e6a:	ea6f 0b03 	mvn.w	fp, r3
 8005e6e:	e00a      	b.n	8005e86 <_dtoa_r+0x8de>
 8005e70:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005e74:	463d      	mov	r5, r7
 8005e76:	463e      	mov	r6, r7
 8005e78:	9b04      	ldr	r3, [sp, #16]
 8005e7a:	9a04      	ldr	r2, [sp, #16]
 8005e7c:	1c5c      	adds	r4, r3, #1
 8005e7e:	2331      	movs	r3, #49	; 0x31
 8005e80:	7013      	strb	r3, [r2, #0]
 8005e82:	f10b 0b01 	add.w	fp, fp, #1
 8005e86:	46b0      	mov	r8, r6
 8005e88:	2600      	movs	r6, #0
 8005e8a:	e0f7      	b.n	800607c <_dtoa_r+0xad4>
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e92:	b923      	cbnz	r3, 8005e9e <_dtoa_r+0x8f6>
 8005e94:	9c04      	ldr	r4, [sp, #16]
 8005e96:	e0b1      	b.n	8005ffc <_dtoa_r+0xa54>
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	dcd0      	bgt.n	8005e40 <_dtoa_r+0x898>
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	dd05      	ble.n	8005eae <_dtoa_r+0x906>
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f001 f988 	bl	80071bc <__lshift>
 8005eac:	4606      	mov	r6, r0
 8005eae:	b19f      	cbz	r7, 8005ed8 <_dtoa_r+0x930>
 8005eb0:	6871      	ldr	r1, [r6, #4]
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f000 ffc6 	bl	8006e44 <_Balloc>
 8005eb8:	6932      	ldr	r2, [r6, #16]
 8005eba:	3202      	adds	r2, #2
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	f106 010c 	add.w	r1, r6, #12
 8005ec4:	300c      	adds	r0, #12
 8005ec6:	f000 ff95 	bl	8006df4 <memcpy>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4650      	mov	r0, sl
 8005ed0:	f001 f974 	bl	80071bc <__lshift>
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	e000      	b.n	8005eda <_dtoa_r+0x932>
 8005ed8:	46b0      	mov	r8, r6
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	9802      	ldr	r0, [sp, #8]
 8005eea:	f7ff facb 	bl	8005484 <quorem>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005ef6:	9802      	ldr	r0, [sp, #8]
 8005ef8:	f001 f9b1 	bl	800725e <__mcmp>
 8005efc:	4642      	mov	r2, r8
 8005efe:	9000      	str	r0, [sp, #0]
 8005f00:	4629      	mov	r1, r5
 8005f02:	4650      	mov	r0, sl
 8005f04:	f001 f9c7 	bl	8007296 <__mdiff>
 8005f08:	68c3      	ldr	r3, [r0, #12]
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	b93b      	cbnz	r3, 8005f1e <_dtoa_r+0x976>
 8005f0e:	4601      	mov	r1, r0
 8005f10:	9007      	str	r0, [sp, #28]
 8005f12:	9802      	ldr	r0, [sp, #8]
 8005f14:	f001 f9a3 	bl	800725e <__mcmp>
 8005f18:	9a07      	ldr	r2, [sp, #28]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	e000      	b.n	8005f20 <_dtoa_r+0x978>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4611      	mov	r1, r2
 8005f22:	4650      	mov	r0, sl
 8005f24:	9307      	str	r3, [sp, #28]
 8005f26:	f000 ffc2 	bl	8006eae <_Bfree>
 8005f2a:	9b07      	ldr	r3, [sp, #28]
 8005f2c:	b94b      	cbnz	r3, 8005f42 <_dtoa_r+0x99a>
 8005f2e:	9a06      	ldr	r2, [sp, #24]
 8005f30:	b93a      	cbnz	r2, 8005f42 <_dtoa_r+0x99a>
 8005f32:	9a05      	ldr	r2, [sp, #20]
 8005f34:	b92a      	cbnz	r2, 8005f42 <_dtoa_r+0x99a>
 8005f36:	2f39      	cmp	r7, #57	; 0x39
 8005f38:	d028      	beq.n	8005f8c <_dtoa_r+0x9e4>
 8005f3a:	9b00      	ldr	r3, [sp, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dc1a      	bgt.n	8005f76 <_dtoa_r+0x9ce>
 8005f40:	e01b      	b.n	8005f7a <_dtoa_r+0x9d2>
 8005f42:	9a00      	ldr	r2, [sp, #0]
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	db04      	blt.n	8005f52 <_dtoa_r+0x9aa>
 8005f48:	d11a      	bne.n	8005f80 <_dtoa_r+0x9d8>
 8005f4a:	9a06      	ldr	r2, [sp, #24]
 8005f4c:	b9c2      	cbnz	r2, 8005f80 <_dtoa_r+0x9d8>
 8005f4e:	9a05      	ldr	r2, [sp, #20]
 8005f50:	b9b2      	cbnz	r2, 8005f80 <_dtoa_r+0x9d8>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd11      	ble.n	8005f7a <_dtoa_r+0x9d2>
 8005f56:	2201      	movs	r2, #1
 8005f58:	9902      	ldr	r1, [sp, #8]
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f001 f92e 	bl	80071bc <__lshift>
 8005f60:	4629      	mov	r1, r5
 8005f62:	9002      	str	r0, [sp, #8]
 8005f64:	f001 f97b 	bl	800725e <__mcmp>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	dc02      	bgt.n	8005f72 <_dtoa_r+0x9ca>
 8005f6c:	d105      	bne.n	8005f7a <_dtoa_r+0x9d2>
 8005f6e:	07fa      	lsls	r2, r7, #31
 8005f70:	d503      	bpl.n	8005f7a <_dtoa_r+0x9d2>
 8005f72:	2f39      	cmp	r7, #57	; 0x39
 8005f74:	d00a      	beq.n	8005f8c <_dtoa_r+0x9e4>
 8005f76:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8005f7a:	f109 0401 	add.w	r4, r9, #1
 8005f7e:	e00c      	b.n	8005f9a <_dtoa_r+0x9f2>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f109 0401 	add.w	r4, r9, #1
 8005f86:	dd0b      	ble.n	8005fa0 <_dtoa_r+0x9f8>
 8005f88:	2f39      	cmp	r7, #57	; 0x39
 8005f8a:	d105      	bne.n	8005f98 <_dtoa_r+0x9f0>
 8005f8c:	2339      	movs	r3, #57	; 0x39
 8005f8e:	f889 3000 	strb.w	r3, [r9]
 8005f92:	f109 0901 	add.w	r9, r9, #1
 8005f96:	e054      	b.n	8006042 <_dtoa_r+0xa9a>
 8005f98:	3701      	adds	r7, #1
 8005f9a:	f889 7000 	strb.w	r7, [r9]
 8005f9e:	e06d      	b.n	800607c <_dtoa_r+0xad4>
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005fa8:	1ae3      	subs	r3, r4, r3
 8005faa:	4293      	cmp	r3, r2
 8005fac:	46a1      	mov	r9, r4
 8005fae:	d03a      	beq.n	8006026 <_dtoa_r+0xa7e>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	9902      	ldr	r1, [sp, #8]
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	f000 ff90 	bl	8006edc <__multadd>
 8005fbc:	4546      	cmp	r6, r8
 8005fbe:	9002      	str	r0, [sp, #8]
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	f04f 020a 	mov.w	r2, #10
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4650      	mov	r0, sl
 8005fcc:	d104      	bne.n	8005fd8 <_dtoa_r+0xa30>
 8005fce:	f000 ff85 	bl	8006edc <__multadd>
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	e786      	b.n	8005ee6 <_dtoa_r+0x93e>
 8005fd8:	f000 ff80 	bl	8006edc <__multadd>
 8005fdc:	4641      	mov	r1, r8
 8005fde:	4606      	mov	r6, r0
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	f000 ff79 	bl	8006edc <__multadd>
 8005fea:	4680      	mov	r8, r0
 8005fec:	e77b      	b.n	8005ee6 <_dtoa_r+0x93e>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	220a      	movs	r2, #10
 8005ff2:	9902      	ldr	r1, [sp, #8]
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	f000 ff71 	bl	8006edc <__multadd>
 8005ffa:	9002      	str	r0, [sp, #8]
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	9802      	ldr	r0, [sp, #8]
 8006000:	f7ff fa40 	bl	8005484 <quorem>
 8006004:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006008:	f804 7b01 	strb.w	r7, [r4], #1
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	9a03      	ldr	r2, [sp, #12]
 8006010:	1ae3      	subs	r3, r4, r3
 8006012:	4293      	cmp	r3, r2
 8006014:	dbeb      	blt.n	8005fee <_dtoa_r+0xa46>
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	2a01      	cmp	r2, #1
 800601a:	bfac      	ite	ge
 800601c:	189b      	addge	r3, r3, r2
 800601e:	3301      	addlt	r3, #1
 8006020:	46b0      	mov	r8, r6
 8006022:	4699      	mov	r9, r3
 8006024:	2600      	movs	r6, #0
 8006026:	2201      	movs	r2, #1
 8006028:	9902      	ldr	r1, [sp, #8]
 800602a:	4650      	mov	r0, sl
 800602c:	f001 f8c6 	bl	80071bc <__lshift>
 8006030:	4629      	mov	r1, r5
 8006032:	9002      	str	r0, [sp, #8]
 8006034:	f001 f913 	bl	800725e <__mcmp>
 8006038:	2800      	cmp	r0, #0
 800603a:	dc02      	bgt.n	8006042 <_dtoa_r+0xa9a>
 800603c:	d115      	bne.n	800606a <_dtoa_r+0xac2>
 800603e:	07fb      	lsls	r3, r7, #31
 8006040:	d513      	bpl.n	800606a <_dtoa_r+0xac2>
 8006042:	464c      	mov	r4, r9
 8006044:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006048:	2b39      	cmp	r3, #57	; 0x39
 800604a:	f104 32ff 	add.w	r2, r4, #4294967295
 800604e:	d109      	bne.n	8006064 <_dtoa_r+0xabc>
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	4293      	cmp	r3, r2
 8006054:	d104      	bne.n	8006060 <_dtoa_r+0xab8>
 8006056:	f10b 0b01 	add.w	fp, fp, #1
 800605a:	2331      	movs	r3, #49	; 0x31
 800605c:	9a04      	ldr	r2, [sp, #16]
 800605e:	e002      	b.n	8006066 <_dtoa_r+0xabe>
 8006060:	4614      	mov	r4, r2
 8006062:	e7ef      	b.n	8006044 <_dtoa_r+0xa9c>
 8006064:	3301      	adds	r3, #1
 8006066:	7013      	strb	r3, [r2, #0]
 8006068:	e008      	b.n	800607c <_dtoa_r+0xad4>
 800606a:	464c      	mov	r4, r9
 800606c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006070:	2b30      	cmp	r3, #48	; 0x30
 8006072:	f104 32ff 	add.w	r2, r4, #4294967295
 8006076:	d101      	bne.n	800607c <_dtoa_r+0xad4>
 8006078:	4614      	mov	r4, r2
 800607a:	e7f7      	b.n	800606c <_dtoa_r+0xac4>
 800607c:	4629      	mov	r1, r5
 800607e:	4650      	mov	r0, sl
 8006080:	f000 ff15 	bl	8006eae <_Bfree>
 8006084:	f1b8 0f00 	cmp.w	r8, #0
 8006088:	d00d      	beq.n	80060a6 <_dtoa_r+0xafe>
 800608a:	b12e      	cbz	r6, 8006098 <_dtoa_r+0xaf0>
 800608c:	4546      	cmp	r6, r8
 800608e:	d003      	beq.n	8006098 <_dtoa_r+0xaf0>
 8006090:	4631      	mov	r1, r6
 8006092:	4650      	mov	r0, sl
 8006094:	f000 ff0b 	bl	8006eae <_Bfree>
 8006098:	4641      	mov	r1, r8
 800609a:	4650      	mov	r0, sl
 800609c:	f000 ff07 	bl	8006eae <_Bfree>
 80060a0:	e001      	b.n	80060a6 <_dtoa_r+0xafe>
 80060a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80060a6:	9902      	ldr	r1, [sp, #8]
 80060a8:	4650      	mov	r0, sl
 80060aa:	f000 ff00 	bl	8006eae <_Bfree>
 80060ae:	2300      	movs	r3, #0
 80060b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060b2:	7023      	strb	r3, [r4, #0]
 80060b4:	f10b 0301 	add.w	r3, fp, #1
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060bc:	b11b      	cbz	r3, 80060c6 <_dtoa_r+0xb1e>
 80060be:	601c      	str	r4, [r3, #0]
 80060c0:	e001      	b.n	80060c6 <_dtoa_r+0xb1e>
 80060c2:	4808      	ldr	r0, [pc, #32]	; (80060e4 <_dtoa_r+0xb3c>)
 80060c4:	e00a      	b.n	80060dc <_dtoa_r+0xb34>
 80060c6:	9804      	ldr	r0, [sp, #16]
 80060c8:	e008      	b.n	80060dc <_dtoa_r+0xb34>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f73f aee1 	bgt.w	8005e94 <_dtoa_r+0x8ec>
 80060d2:	9b06      	ldr	r3, [sp, #24]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f77f aedd 	ble.w	8005e94 <_dtoa_r+0x8ec>
 80060da:	e6b1      	b.n	8005e40 <_dtoa_r+0x898>
 80060dc:	b017      	add	sp, #92	; 0x5c
 80060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e2:	bf00      	nop
 80060e4:	08007dfe 	.word	0x08007dfe

080060e8 <__sflush_r>:
 80060e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060ec:	b293      	uxth	r3, r2
 80060ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	4605      	mov	r5, r0
 80060f4:	0718      	lsls	r0, r3, #28
 80060f6:	460c      	mov	r4, r1
 80060f8:	d460      	bmi.n	80061bc <__sflush_r+0xd4>
 80060fa:	684b      	ldr	r3, [r1, #4]
 80060fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006100:	2b00      	cmp	r3, #0
 8006102:	818a      	strh	r2, [r1, #12]
 8006104:	dc02      	bgt.n	800610c <__sflush_r+0x24>
 8006106:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	dd17      	ble.n	800613c <__sflush_r+0x54>
 800610c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800610e:	b1ae      	cbz	r6, 800613c <__sflush_r+0x54>
 8006110:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006114:	2300      	movs	r3, #0
 8006116:	b292      	uxth	r2, r2
 8006118:	682f      	ldr	r7, [r5, #0]
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	b10a      	cbz	r2, 8006122 <__sflush_r+0x3a>
 800611e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006120:	e015      	b.n	800614e <__sflush_r+0x66>
 8006122:	6a21      	ldr	r1, [r4, #32]
 8006124:	2301      	movs	r3, #1
 8006126:	4628      	mov	r0, r5
 8006128:	47b0      	blx	r6
 800612a:	1c41      	adds	r1, r0, #1
 800612c:	d10f      	bne.n	800614e <__sflush_r+0x66>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b16b      	cbz	r3, 800614e <__sflush_r+0x66>
 8006132:	2b1d      	cmp	r3, #29
 8006134:	d001      	beq.n	800613a <__sflush_r+0x52>
 8006136:	2b16      	cmp	r3, #22
 8006138:	d103      	bne.n	8006142 <__sflush_r+0x5a>
 800613a:	602f      	str	r7, [r5, #0]
 800613c:	2000      	movs	r0, #0
 800613e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	075a      	lsls	r2, r3, #29
 8006152:	d505      	bpl.n	8006160 <__sflush_r+0x78>
 8006154:	6863      	ldr	r3, [r4, #4]
 8006156:	1ac0      	subs	r0, r0, r3
 8006158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800615a:	b10b      	cbz	r3, 8006160 <__sflush_r+0x78>
 800615c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800615e:	1ac0      	subs	r0, r0, r3
 8006160:	2300      	movs	r3, #0
 8006162:	4602      	mov	r2, r0
 8006164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006166:	6a21      	ldr	r1, [r4, #32]
 8006168:	4628      	mov	r0, r5
 800616a:	47b0      	blx	r6
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	d106      	bne.n	8006180 <__sflush_r+0x98>
 8006172:	6829      	ldr	r1, [r5, #0]
 8006174:	291d      	cmp	r1, #29
 8006176:	d83e      	bhi.n	80061f6 <__sflush_r+0x10e>
 8006178:	4a22      	ldr	r2, [pc, #136]	; (8006204 <__sflush_r+0x11c>)
 800617a:	40ca      	lsrs	r2, r1
 800617c:	07d6      	lsls	r6, r2, #31
 800617e:	d53a      	bpl.n	80061f6 <__sflush_r+0x10e>
 8006180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006184:	b21b      	sxth	r3, r3
 8006186:	2200      	movs	r2, #0
 8006188:	6062      	str	r2, [r4, #4]
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	6922      	ldr	r2, [r4, #16]
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	6022      	str	r2, [r4, #0]
 8006192:	d504      	bpl.n	800619e <__sflush_r+0xb6>
 8006194:	1c42      	adds	r2, r0, #1
 8006196:	d101      	bne.n	800619c <__sflush_r+0xb4>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b903      	cbnz	r3, 800619e <__sflush_r+0xb6>
 800619c:	6560      	str	r0, [r4, #84]	; 0x54
 800619e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a0:	602f      	str	r7, [r5, #0]
 80061a2:	2900      	cmp	r1, #0
 80061a4:	d0ca      	beq.n	800613c <__sflush_r+0x54>
 80061a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061aa:	4299      	cmp	r1, r3
 80061ac:	d002      	beq.n	80061b4 <__sflush_r+0xcc>
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 f95c 	bl	800646c <_free_r>
 80061b4:	2000      	movs	r0, #0
 80061b6:	6360      	str	r0, [r4, #52]	; 0x34
 80061b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061bc:	690f      	ldr	r7, [r1, #16]
 80061be:	2f00      	cmp	r7, #0
 80061c0:	d0bc      	beq.n	800613c <__sflush_r+0x54>
 80061c2:	079b      	lsls	r3, r3, #30
 80061c4:	680e      	ldr	r6, [r1, #0]
 80061c6:	bf08      	it	eq
 80061c8:	694b      	ldreq	r3, [r1, #20]
 80061ca:	600f      	str	r7, [r1, #0]
 80061cc:	bf18      	it	ne
 80061ce:	2300      	movne	r3, #0
 80061d0:	ebc7 0806 	rsb	r8, r7, r6
 80061d4:	608b      	str	r3, [r1, #8]
 80061d6:	e002      	b.n	80061de <__sflush_r+0xf6>
 80061d8:	4407      	add	r7, r0
 80061da:	ebc0 0808 	rsb	r8, r0, r8
 80061de:	f1b8 0f00 	cmp.w	r8, #0
 80061e2:	ddab      	ble.n	800613c <__sflush_r+0x54>
 80061e4:	4643      	mov	r3, r8
 80061e6:	463a      	mov	r2, r7
 80061e8:	6a21      	ldr	r1, [r4, #32]
 80061ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b0      	blx	r6
 80061f0:	2800      	cmp	r0, #0
 80061f2:	dcf1      	bgt.n	80061d8 <__sflush_r+0xf0>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	20400001 	.word	0x20400001

08006208 <_fflush_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	690b      	ldr	r3, [r1, #16]
 800620c:	4605      	mov	r5, r0
 800620e:	460c      	mov	r4, r1
 8006210:	b1db      	cbz	r3, 800624a <_fflush_r+0x42>
 8006212:	b118      	cbz	r0, 800621c <_fflush_r+0x14>
 8006214:	6983      	ldr	r3, [r0, #24]
 8006216:	b90b      	cbnz	r3, 800621c <_fflush_r+0x14>
 8006218:	f000 f860 	bl	80062dc <__sinit>
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <_fflush_r+0x48>)
 800621e:	429c      	cmp	r4, r3
 8006220:	d101      	bne.n	8006226 <_fflush_r+0x1e>
 8006222:	686c      	ldr	r4, [r5, #4]
 8006224:	e008      	b.n	8006238 <_fflush_r+0x30>
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <_fflush_r+0x4c>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d101      	bne.n	8006230 <_fflush_r+0x28>
 800622c:	68ac      	ldr	r4, [r5, #8]
 800622e:	e003      	b.n	8006238 <_fflush_r+0x30>
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <_fflush_r+0x50>)
 8006232:	429c      	cmp	r4, r3
 8006234:	bf08      	it	eq
 8006236:	68ec      	ldreq	r4, [r5, #12]
 8006238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623c:	b12b      	cbz	r3, 800624a <_fflush_r+0x42>
 800623e:	4621      	mov	r1, r4
 8006240:	4628      	mov	r0, r5
 8006242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006246:	f7ff bf4f 	b.w	80060e8 <__sflush_r>
 800624a:	2000      	movs	r0, #0
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	08007e40 	.word	0x08007e40
 8006254:	08007e60 	.word	0x08007e60
 8006258:	08007e80 	.word	0x08007e80

0800625c <_cleanup_r>:
 800625c:	4901      	ldr	r1, [pc, #4]	; (8006264 <_cleanup_r+0x8>)
 800625e:	f000 bb0d 	b.w	800687c <_fwalk_reent>
 8006262:	bf00      	nop
 8006264:	080079e9 	.word	0x080079e9

08006268 <std.isra.0>:
 8006268:	2300      	movs	r3, #0
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	6003      	str	r3, [r0, #0]
 8006270:	6043      	str	r3, [r0, #4]
 8006272:	6083      	str	r3, [r0, #8]
 8006274:	8181      	strh	r1, [r0, #12]
 8006276:	6643      	str	r3, [r0, #100]	; 0x64
 8006278:	81c2      	strh	r2, [r0, #14]
 800627a:	6103      	str	r3, [r0, #16]
 800627c:	6143      	str	r3, [r0, #20]
 800627e:	6183      	str	r3, [r0, #24]
 8006280:	4619      	mov	r1, r3
 8006282:	2208      	movs	r2, #8
 8006284:	305c      	adds	r0, #92	; 0x5c
 8006286:	f7fc ffed 	bl	8003264 <memset>
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <std.isra.0+0x38>)
 800628c:	6263      	str	r3, [r4, #36]	; 0x24
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <std.isra.0+0x3c>)
 8006290:	62a3      	str	r3, [r4, #40]	; 0x28
 8006292:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <std.isra.0+0x40>)
 8006294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006296:	4b05      	ldr	r3, [pc, #20]	; (80062ac <std.isra.0+0x44>)
 8006298:	6224      	str	r4, [r4, #32]
 800629a:	6323      	str	r3, [r4, #48]	; 0x30
 800629c:	bd10      	pop	{r4, pc}
 800629e:	bf00      	nop
 80062a0:	08007761 	.word	0x08007761
 80062a4:	08007783 	.word	0x08007783
 80062a8:	080077bb 	.word	0x080077bb
 80062ac:	080077df 	.word	0x080077df

080062b0 <__sfmoreglue>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	2368      	movs	r3, #104	; 0x68
 80062b4:	1e4d      	subs	r5, r1, #1
 80062b6:	435d      	muls	r5, r3
 80062b8:	460e      	mov	r6, r1
 80062ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062be:	f000 fb79 	bl	80069b4 <_malloc_r>
 80062c2:	4604      	mov	r4, r0
 80062c4:	b140      	cbz	r0, 80062d8 <__sfmoreglue+0x28>
 80062c6:	2100      	movs	r1, #0
 80062c8:	e880 0042 	stmia.w	r0, {r1, r6}
 80062cc:	300c      	adds	r0, #12
 80062ce:	60a0      	str	r0, [r4, #8]
 80062d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062d4:	f7fc ffc6 	bl	8003264 <memset>
 80062d8:	4620      	mov	r0, r4
 80062da:	bd70      	pop	{r4, r5, r6, pc}

080062dc <__sinit>:
 80062dc:	6983      	ldr	r3, [r0, #24]
 80062de:	b510      	push	{r4, lr}
 80062e0:	4604      	mov	r4, r0
 80062e2:	bb4b      	cbnz	r3, 8006338 <__sinit+0x5c>
 80062e4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80062e8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80062ec:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <__sinit+0x60>)
 80062f2:	4a13      	ldr	r2, [pc, #76]	; (8006340 <__sinit+0x64>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6282      	str	r2, [r0, #40]	; 0x28
 80062f8:	4298      	cmp	r0, r3
 80062fa:	bf04      	itt	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	6183      	streq	r3, [r0, #24]
 8006300:	f000 f820 	bl	8006344 <__sfp>
 8006304:	6060      	str	r0, [r4, #4]
 8006306:	4620      	mov	r0, r4
 8006308:	f000 f81c 	bl	8006344 <__sfp>
 800630c:	60a0      	str	r0, [r4, #8]
 800630e:	4620      	mov	r0, r4
 8006310:	f000 f818 	bl	8006344 <__sfp>
 8006314:	2200      	movs	r2, #0
 8006316:	60e0      	str	r0, [r4, #12]
 8006318:	2104      	movs	r1, #4
 800631a:	6860      	ldr	r0, [r4, #4]
 800631c:	f7ff ffa4 	bl	8006268 <std.isra.0>
 8006320:	2201      	movs	r2, #1
 8006322:	2109      	movs	r1, #9
 8006324:	68a0      	ldr	r0, [r4, #8]
 8006326:	f7ff ff9f 	bl	8006268 <std.isra.0>
 800632a:	2202      	movs	r2, #2
 800632c:	2112      	movs	r1, #18
 800632e:	68e0      	ldr	r0, [r4, #12]
 8006330:	f7ff ff9a 	bl	8006268 <std.isra.0>
 8006334:	2301      	movs	r3, #1
 8006336:	61a3      	str	r3, [r4, #24]
 8006338:	bd10      	pop	{r4, pc}
 800633a:	bf00      	nop
 800633c:	08007ea4 	.word	0x08007ea4
 8006340:	0800625d 	.word	0x0800625d

08006344 <__sfp>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <__sfp+0x74>)
 8006348:	681e      	ldr	r6, [r3, #0]
 800634a:	69b3      	ldr	r3, [r6, #24]
 800634c:	4607      	mov	r7, r0
 800634e:	b913      	cbnz	r3, 8006356 <__sfp+0x12>
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff ffc3 	bl	80062dc <__sinit>
 8006356:	36d8      	adds	r6, #216	; 0xd8
 8006358:	68b4      	ldr	r4, [r6, #8]
 800635a:	6873      	ldr	r3, [r6, #4]
 800635c:	3b01      	subs	r3, #1
 800635e:	d404      	bmi.n	800636a <__sfp+0x26>
 8006360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006364:	b17d      	cbz	r5, 8006386 <__sfp+0x42>
 8006366:	3468      	adds	r4, #104	; 0x68
 8006368:	e7f8      	b.n	800635c <__sfp+0x18>
 800636a:	6833      	ldr	r3, [r6, #0]
 800636c:	b10b      	cbz	r3, 8006372 <__sfp+0x2e>
 800636e:	6836      	ldr	r6, [r6, #0]
 8006370:	e7f2      	b.n	8006358 <__sfp+0x14>
 8006372:	2104      	movs	r1, #4
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff ff9b 	bl	80062b0 <__sfmoreglue>
 800637a:	6030      	str	r0, [r6, #0]
 800637c:	2800      	cmp	r0, #0
 800637e:	d1f6      	bne.n	800636e <__sfp+0x2a>
 8006380:	230c      	movs	r3, #12
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800638a:	81e3      	strh	r3, [r4, #14]
 800638c:	2301      	movs	r3, #1
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	6665      	str	r5, [r4, #100]	; 0x64
 8006392:	6025      	str	r5, [r4, #0]
 8006394:	60a5      	str	r5, [r4, #8]
 8006396:	6065      	str	r5, [r4, #4]
 8006398:	6125      	str	r5, [r4, #16]
 800639a:	6165      	str	r5, [r4, #20]
 800639c:	61a5      	str	r5, [r4, #24]
 800639e:	2208      	movs	r2, #8
 80063a0:	4629      	mov	r1, r5
 80063a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063a6:	f7fc ff5d 	bl	8003264 <memset>
 80063aa:	6365      	str	r5, [r4, #52]	; 0x34
 80063ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80063ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80063b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80063b2:	4620      	mov	r0, r4
 80063b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b6:	bf00      	nop
 80063b8:	08007ea4 	.word	0x08007ea4

080063bc <__sfp_lock_acquire>:
 80063bc:	4770      	bx	lr

080063be <__sfp_lock_release>:
 80063be:	4770      	bx	lr

080063c0 <_malloc_trim_r>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4f25      	ldr	r7, [pc, #148]	; (800645c <_malloc_trim_r+0x9c>)
 80063c6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006468 <_malloc_trim_r+0xa8>
 80063ca:	4689      	mov	r9, r1
 80063cc:	4606      	mov	r6, r0
 80063ce:	f000 fd37 	bl	8006e40 <__malloc_lock>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	685d      	ldr	r5, [r3, #4]
 80063d6:	f1a8 0411 	sub.w	r4, r8, #17
 80063da:	f025 0503 	bic.w	r5, r5, #3
 80063de:	442c      	add	r4, r5
 80063e0:	ebc9 0404 	rsb	r4, r9, r4
 80063e4:	fbb4 f4f8 	udiv	r4, r4, r8
 80063e8:	3c01      	subs	r4, #1
 80063ea:	fb08 f404 	mul.w	r4, r8, r4
 80063ee:	4544      	cmp	r4, r8
 80063f0:	da05      	bge.n	80063fe <_malloc_trim_r+0x3e>
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 fd25 	bl	8006e42 <__malloc_unlock>
 80063f8:	2000      	movs	r0, #0
 80063fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fe:	2100      	movs	r1, #0
 8006400:	4630      	mov	r0, r6
 8006402:	f001 f99d 	bl	8007740 <_sbrk_r>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	442b      	add	r3, r5
 800640a:	4298      	cmp	r0, r3
 800640c:	d1f1      	bne.n	80063f2 <_malloc_trim_r+0x32>
 800640e:	4261      	negs	r1, r4
 8006410:	4630      	mov	r0, r6
 8006412:	f001 f995 	bl	8007740 <_sbrk_r>
 8006416:	3001      	adds	r0, #1
 8006418:	d110      	bne.n	800643c <_malloc_trim_r+0x7c>
 800641a:	2100      	movs	r1, #0
 800641c:	4630      	mov	r0, r6
 800641e:	f001 f98f 	bl	8007740 <_sbrk_r>
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	1a83      	subs	r3, r0, r2
 8006426:	2b0f      	cmp	r3, #15
 8006428:	dde3      	ble.n	80063f2 <_malloc_trim_r+0x32>
 800642a:	490d      	ldr	r1, [pc, #52]	; (8006460 <_malloc_trim_r+0xa0>)
 800642c:	6809      	ldr	r1, [r1, #0]
 800642e:	1a40      	subs	r0, r0, r1
 8006430:	490c      	ldr	r1, [pc, #48]	; (8006464 <_malloc_trim_r+0xa4>)
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6008      	str	r0, [r1, #0]
 8006438:	6053      	str	r3, [r2, #4]
 800643a:	e7da      	b.n	80063f2 <_malloc_trim_r+0x32>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a09      	ldr	r2, [pc, #36]	; (8006464 <_malloc_trim_r+0xa4>)
 8006440:	1b2d      	subs	r5, r5, r4
 8006442:	f045 0501 	orr.w	r5, r5, #1
 8006446:	605d      	str	r5, [r3, #4]
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	4630      	mov	r0, r6
 800644c:	1b1c      	subs	r4, r3, r4
 800644e:	6014      	str	r4, [r2, #0]
 8006450:	f000 fcf7 	bl	8006e42 <__malloc_unlock>
 8006454:	2001      	movs	r0, #1
 8006456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645a:	bf00      	nop
 800645c:	20000154 	.word	0x20000154
 8006460:	20000560 	.word	0x20000560
 8006464:	200005d8 	.word	0x200005d8
 8006468:	00000080 	.word	0x00000080

0800646c <_free_r>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4604      	mov	r4, r0
 8006472:	4688      	mov	r8, r1
 8006474:	2900      	cmp	r1, #0
 8006476:	f000 80ad 	beq.w	80065d4 <_free_r+0x168>
 800647a:	f000 fce1 	bl	8006e40 <__malloc_lock>
 800647e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006482:	4d55      	ldr	r5, [pc, #340]	; (80065d8 <_free_r+0x16c>)
 8006484:	f022 0001 	bic.w	r0, r2, #1
 8006488:	f1a8 0308 	sub.w	r3, r8, #8
 800648c:	181f      	adds	r7, r3, r0
 800648e:	68a9      	ldr	r1, [r5, #8]
 8006490:	687e      	ldr	r6, [r7, #4]
 8006492:	428f      	cmp	r7, r1
 8006494:	f026 0603 	bic.w	r6, r6, #3
 8006498:	f002 0201 	and.w	r2, r2, #1
 800649c:	d11b      	bne.n	80064d6 <_free_r+0x6a>
 800649e:	4430      	add	r0, r6
 80064a0:	b93a      	cbnz	r2, 80064b2 <_free_r+0x46>
 80064a2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	4410      	add	r0, r2
 80064aa:	6899      	ldr	r1, [r3, #8]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	60ca      	str	r2, [r1, #12]
 80064b0:	6091      	str	r1, [r2, #8]
 80064b2:	f040 0201 	orr.w	r2, r0, #1
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	60ab      	str	r3, [r5, #8]
 80064ba:	4b48      	ldr	r3, [pc, #288]	; (80065dc <_free_r+0x170>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4298      	cmp	r0, r3
 80064c0:	d304      	bcc.n	80064cc <_free_r+0x60>
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <_free_r+0x174>)
 80064c4:	4620      	mov	r0, r4
 80064c6:	6819      	ldr	r1, [r3, #0]
 80064c8:	f7ff ff7a 	bl	80063c0 <_malloc_trim_r>
 80064cc:	4620      	mov	r0, r4
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	f000 bcb6 	b.w	8006e42 <__malloc_unlock>
 80064d6:	607e      	str	r6, [r7, #4]
 80064d8:	b97a      	cbnz	r2, 80064fa <_free_r+0x8e>
 80064da:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80064de:	1a5b      	subs	r3, r3, r1
 80064e0:	4408      	add	r0, r1
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	f105 0e08 	add.w	lr, r5, #8
 80064e8:	4571      	cmp	r1, lr
 80064ea:	d008      	beq.n	80064fe <_free_r+0x92>
 80064ec:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80064f0:	f8c1 e00c 	str.w	lr, [r1, #12]
 80064f4:	f8ce 1008 	str.w	r1, [lr, #8]
 80064f8:	e002      	b.n	8006500 <_free_r+0x94>
 80064fa:	2200      	movs	r2, #0
 80064fc:	e000      	b.n	8006500 <_free_r+0x94>
 80064fe:	2201      	movs	r2, #1
 8006500:	19b9      	adds	r1, r7, r6
 8006502:	6849      	ldr	r1, [r1, #4]
 8006504:	07c9      	lsls	r1, r1, #31
 8006506:	d40e      	bmi.n	8006526 <_free_r+0xba>
 8006508:	4430      	add	r0, r6
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	b942      	cbnz	r2, 8006520 <_free_r+0xb4>
 800650e:	4e35      	ldr	r6, [pc, #212]	; (80065e4 <_free_r+0x178>)
 8006510:	42b1      	cmp	r1, r6
 8006512:	d105      	bne.n	8006520 <_free_r+0xb4>
 8006514:	616b      	str	r3, [r5, #20]
 8006516:	612b      	str	r3, [r5, #16]
 8006518:	2201      	movs	r2, #1
 800651a:	60d9      	str	r1, [r3, #12]
 800651c:	6099      	str	r1, [r3, #8]
 800651e:	e002      	b.n	8006526 <_free_r+0xba>
 8006520:	68fe      	ldr	r6, [r7, #12]
 8006522:	60ce      	str	r6, [r1, #12]
 8006524:	60b1      	str	r1, [r6, #8]
 8006526:	f040 0101 	orr.w	r1, r0, #1
 800652a:	6059      	str	r1, [r3, #4]
 800652c:	5018      	str	r0, [r3, r0]
 800652e:	2a00      	cmp	r2, #0
 8006530:	d1cc      	bne.n	80064cc <_free_r+0x60>
 8006532:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006536:	d212      	bcs.n	800655e <_free_r+0xf2>
 8006538:	08c0      	lsrs	r0, r0, #3
 800653a:	1081      	asrs	r1, r0, #2
 800653c:	2201      	movs	r2, #1
 800653e:	fa02 f101 	lsl.w	r1, r2, r1
 8006542:	686a      	ldr	r2, [r5, #4]
 8006544:	3001      	adds	r0, #1
 8006546:	430a      	orrs	r2, r1
 8006548:	606a      	str	r2, [r5, #4]
 800654a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800654e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006552:	6099      	str	r1, [r3, #8]
 8006554:	3a08      	subs	r2, #8
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800655c:	e038      	b.n	80065d0 <_free_r+0x164>
 800655e:	0a42      	lsrs	r2, r0, #9
 8006560:	2a04      	cmp	r2, #4
 8006562:	d802      	bhi.n	800656a <_free_r+0xfe>
 8006564:	0982      	lsrs	r2, r0, #6
 8006566:	3238      	adds	r2, #56	; 0x38
 8006568:	e015      	b.n	8006596 <_free_r+0x12a>
 800656a:	2a14      	cmp	r2, #20
 800656c:	d801      	bhi.n	8006572 <_free_r+0x106>
 800656e:	325b      	adds	r2, #91	; 0x5b
 8006570:	e011      	b.n	8006596 <_free_r+0x12a>
 8006572:	2a54      	cmp	r2, #84	; 0x54
 8006574:	d802      	bhi.n	800657c <_free_r+0x110>
 8006576:	0b02      	lsrs	r2, r0, #12
 8006578:	326e      	adds	r2, #110	; 0x6e
 800657a:	e00c      	b.n	8006596 <_free_r+0x12a>
 800657c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006580:	d802      	bhi.n	8006588 <_free_r+0x11c>
 8006582:	0bc2      	lsrs	r2, r0, #15
 8006584:	3277      	adds	r2, #119	; 0x77
 8006586:	e006      	b.n	8006596 <_free_r+0x12a>
 8006588:	f240 5154 	movw	r1, #1364	; 0x554
 800658c:	428a      	cmp	r2, r1
 800658e:	bf9a      	itte	ls
 8006590:	0c82      	lsrls	r2, r0, #18
 8006592:	327c      	addls	r2, #124	; 0x7c
 8006594:	227e      	movhi	r2, #126	; 0x7e
 8006596:	1c51      	adds	r1, r2, #1
 8006598:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800659c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80065a0:	4f0d      	ldr	r7, [pc, #52]	; (80065d8 <_free_r+0x16c>)
 80065a2:	428e      	cmp	r6, r1
 80065a4:	d10b      	bne.n	80065be <_free_r+0x152>
 80065a6:	2101      	movs	r1, #1
 80065a8:	1092      	asrs	r2, r2, #2
 80065aa:	fa01 f202 	lsl.w	r2, r1, r2
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4311      	orrs	r1, r2
 80065b2:	6079      	str	r1, [r7, #4]
 80065b4:	4631      	mov	r1, r6
 80065b6:	e008      	b.n	80065ca <_free_r+0x15e>
 80065b8:	6889      	ldr	r1, [r1, #8]
 80065ba:	428e      	cmp	r6, r1
 80065bc:	d004      	beq.n	80065c8 <_free_r+0x15c>
 80065be:	684a      	ldr	r2, [r1, #4]
 80065c0:	f022 0203 	bic.w	r2, r2, #3
 80065c4:	4290      	cmp	r0, r2
 80065c6:	d3f7      	bcc.n	80065b8 <_free_r+0x14c>
 80065c8:	68ce      	ldr	r6, [r1, #12]
 80065ca:	60de      	str	r6, [r3, #12]
 80065cc:	6099      	str	r1, [r3, #8]
 80065ce:	60b3      	str	r3, [r6, #8]
 80065d0:	60cb      	str	r3, [r1, #12]
 80065d2:	e77b      	b.n	80064cc <_free_r+0x60>
 80065d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d8:	20000154 	.word	0x20000154
 80065dc:	2000055c 	.word	0x2000055c
 80065e0:	200005d4 	.word	0x200005d4
 80065e4:	2000015c 	.word	0x2000015c

080065e8 <__sfvwrite_r>:
 80065e8:	6893      	ldr	r3, [r2, #8]
 80065ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ee:	4606      	mov	r6, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	4690      	mov	r8, r2
 80065f4:	b90b      	cbnz	r3, 80065fa <__sfvwrite_r+0x12>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e13b      	b.n	8006872 <__sfvwrite_r+0x28a>
 80065fa:	898b      	ldrh	r3, [r1, #12]
 80065fc:	0718      	lsls	r0, r3, #28
 80065fe:	d50f      	bpl.n	8006620 <__sfvwrite_r+0x38>
 8006600:	690b      	ldr	r3, [r1, #16]
 8006602:	b16b      	cbz	r3, 8006620 <__sfvwrite_r+0x38>
 8006604:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8006608:	f8d8 b000 	ldr.w	fp, [r8]
 800660c:	f009 0502 	and.w	r5, r9, #2
 8006610:	b2ad      	uxth	r5, r5
 8006612:	b355      	cbz	r5, 800666a <__sfvwrite_r+0x82>
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	464f      	mov	r7, r9
 800661a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8006878 <__sfvwrite_r+0x290>
 800661e:	e01b      	b.n	8006658 <__sfvwrite_r+0x70>
 8006620:	4621      	mov	r1, r4
 8006622:	4630      	mov	r0, r6
 8006624:	f7fe fec0 	bl	80053a8 <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0eb      	beq.n	8006604 <__sfvwrite_r+0x1c>
 800662c:	e11f      	b.n	800686e <__sfvwrite_r+0x286>
 800662e:	4557      	cmp	r7, sl
 8006630:	463b      	mov	r3, r7
 8006632:	464a      	mov	r2, r9
 8006634:	bf28      	it	cs
 8006636:	4653      	movcs	r3, sl
 8006638:	6a21      	ldr	r1, [r4, #32]
 800663a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800663c:	4630      	mov	r0, r6
 800663e:	47a8      	blx	r5
 8006640:	2800      	cmp	r0, #0
 8006642:	f340 8110 	ble.w	8006866 <__sfvwrite_r+0x27e>
 8006646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800664a:	4481      	add	r9, r0
 800664c:	1a3f      	subs	r7, r7, r0
 800664e:	1a18      	subs	r0, r3, r0
 8006650:	f8c8 0008 	str.w	r0, [r8, #8]
 8006654:	2800      	cmp	r0, #0
 8006656:	d0ce      	beq.n	80065f6 <__sfvwrite_r+0xe>
 8006658:	2f00      	cmp	r7, #0
 800665a:	d1e8      	bne.n	800662e <__sfvwrite_r+0x46>
 800665c:	f8db 9000 	ldr.w	r9, [fp]
 8006660:	f8db 7004 	ldr.w	r7, [fp, #4]
 8006664:	f10b 0b08 	add.w	fp, fp, #8
 8006668:	e7f6      	b.n	8006658 <__sfvwrite_r+0x70>
 800666a:	f019 0901 	ands.w	r9, r9, #1
 800666e:	d003      	beq.n	8006678 <__sfvwrite_r+0x90>
 8006670:	9500      	str	r5, [sp, #0]
 8006672:	46a9      	mov	r9, r5
 8006674:	46aa      	mov	sl, r5
 8006676:	e0bd      	b.n	80067f4 <__sfvwrite_r+0x20c>
 8006678:	464f      	mov	r7, r9
 800667a:	b937      	cbnz	r7, 800668a <__sfvwrite_r+0xa2>
 800667c:	f8db 9000 	ldr.w	r9, [fp]
 8006680:	f8db 7004 	ldr.w	r7, [fp, #4]
 8006684:	f10b 0b08 	add.w	fp, fp, #8
 8006688:	e7f7      	b.n	800667a <__sfvwrite_r+0x92>
 800668a:	89a2      	ldrh	r2, [r4, #12]
 800668c:	68a5      	ldr	r5, [r4, #8]
 800668e:	0591      	lsls	r1, r2, #22
 8006690:	d552      	bpl.n	8006738 <__sfvwrite_r+0x150>
 8006692:	42af      	cmp	r7, r5
 8006694:	d342      	bcc.n	800671c <__sfvwrite_r+0x134>
 8006696:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800669a:	d03d      	beq.n	8006718 <__sfvwrite_r+0x130>
 800669c:	6921      	ldr	r1, [r4, #16]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	1a5b      	subs	r3, r3, r1
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	6963      	ldr	r3, [r4, #20]
 80066a6:	2002      	movs	r0, #2
 80066a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80066ac:	fb93 faf0 	sdiv	sl, r3, r0
 80066b0:	9b00      	ldr	r3, [sp, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	443b      	add	r3, r7
 80066b6:	459a      	cmp	sl, r3
 80066b8:	bf38      	it	cc
 80066ba:	469a      	movcc	sl, r3
 80066bc:	0553      	lsls	r3, r2, #21
 80066be:	d510      	bpl.n	80066e2 <__sfvwrite_r+0xfa>
 80066c0:	4651      	mov	r1, sl
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 f976 	bl	80069b4 <_malloc_r>
 80066c8:	4605      	mov	r5, r0
 80066ca:	b1c0      	cbz	r0, 80066fe <__sfvwrite_r+0x116>
 80066cc:	9a00      	ldr	r2, [sp, #0]
 80066ce:	6921      	ldr	r1, [r4, #16]
 80066d0:	f000 fb90 	bl	8006df4 <memcpy>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	e010      	b.n	8006704 <__sfvwrite_r+0x11c>
 80066e2:	4652      	mov	r2, sl
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 fe83 	bl	80073f0 <_realloc_r>
 80066ea:	4605      	mov	r5, r0
 80066ec:	b950      	cbnz	r0, 8006704 <__sfvwrite_r+0x11c>
 80066ee:	6921      	ldr	r1, [r4, #16]
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff febb 	bl	800646c <_free_r>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	230c      	movs	r3, #12
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	e0b0      	b.n	8006866 <__sfvwrite_r+0x27e>
 8006704:	9b00      	ldr	r3, [sp, #0]
 8006706:	6125      	str	r5, [r4, #16]
 8006708:	441d      	add	r5, r3
 800670a:	ebc3 030a 	rsb	r3, r3, sl
 800670e:	6025      	str	r5, [r4, #0]
 8006710:	f8c4 a014 	str.w	sl, [r4, #20]
 8006714:	463d      	mov	r5, r7
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	42af      	cmp	r7, r5
 800671a:	d200      	bcs.n	800671e <__sfvwrite_r+0x136>
 800671c:	463d      	mov	r5, r7
 800671e:	462a      	mov	r2, r5
 8006720:	4649      	mov	r1, r9
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	f000 fb71 	bl	8006e0a <memmove>
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	1b5b      	subs	r3, r3, r5
 800672c:	60a3      	str	r3, [r4, #8]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	441d      	add	r5, r3
 8006732:	6025      	str	r5, [r4, #0]
 8006734:	463d      	mov	r5, r7
 8006736:	e029      	b.n	800678c <__sfvwrite_r+0x1a4>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	4298      	cmp	r0, r3
 800673e:	d802      	bhi.n	8006746 <__sfvwrite_r+0x15e>
 8006740:	6962      	ldr	r2, [r4, #20]
 8006742:	4297      	cmp	r7, r2
 8006744:	d213      	bcs.n	800676e <__sfvwrite_r+0x186>
 8006746:	42bd      	cmp	r5, r7
 8006748:	bf28      	it	cs
 800674a:	463d      	movcs	r5, r7
 800674c:	462a      	mov	r2, r5
 800674e:	4649      	mov	r1, r9
 8006750:	f000 fb5b 	bl	8006e0a <memmove>
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	1b5b      	subs	r3, r3, r5
 800675a:	442a      	add	r2, r5
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	b9a3      	cbnz	r3, 800678c <__sfvwrite_r+0x1a4>
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff fd4f 	bl	8006208 <_fflush_r>
 800676a:	b178      	cbz	r0, 800678c <__sfvwrite_r+0x1a4>
 800676c:	e07b      	b.n	8006866 <__sfvwrite_r+0x27e>
 800676e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006772:	42bb      	cmp	r3, r7
 8006774:	bf28      	it	cs
 8006776:	463b      	movcs	r3, r7
 8006778:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800677a:	fb93 f3f2 	sdiv	r3, r3, r2
 800677e:	6a21      	ldr	r1, [r4, #32]
 8006780:	4353      	muls	r3, r2
 8006782:	4630      	mov	r0, r6
 8006784:	464a      	mov	r2, r9
 8006786:	47a8      	blx	r5
 8006788:	1e05      	subs	r5, r0, #0
 800678a:	dd6c      	ble.n	8006866 <__sfvwrite_r+0x27e>
 800678c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006790:	44a9      	add	r9, r5
 8006792:	1b7f      	subs	r7, r7, r5
 8006794:	1b5d      	subs	r5, r3, r5
 8006796:	f8c8 5008 	str.w	r5, [r8, #8]
 800679a:	2d00      	cmp	r5, #0
 800679c:	f47f af6d 	bne.w	800667a <__sfvwrite_r+0x92>
 80067a0:	e729      	b.n	80065f6 <__sfvwrite_r+0xe>
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	b383      	cbz	r3, 8006808 <__sfvwrite_r+0x220>
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	6921      	ldr	r1, [r4, #16]
 80067aa:	6962      	ldr	r2, [r4, #20]
 80067ac:	4555      	cmp	r5, sl
 80067ae:	462b      	mov	r3, r5
 80067b0:	bf28      	it	cs
 80067b2:	4653      	movcs	r3, sl
 80067b4:	4288      	cmp	r0, r1
 80067b6:	d936      	bls.n	8006826 <__sfvwrite_r+0x23e>
 80067b8:	68a7      	ldr	r7, [r4, #8]
 80067ba:	4417      	add	r7, r2
 80067bc:	42bb      	cmp	r3, r7
 80067be:	dd32      	ble.n	8006826 <__sfvwrite_r+0x23e>
 80067c0:	4649      	mov	r1, r9
 80067c2:	463a      	mov	r2, r7
 80067c4:	f000 fb21 	bl	8006e0a <memmove>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	443b      	add	r3, r7
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	4621      	mov	r1, r4
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fd19 	bl	8006208 <_fflush_r>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d145      	bne.n	8006866 <__sfvwrite_r+0x27e>
 80067da:	1bed      	subs	r5, r5, r7
 80067dc:	d03c      	beq.n	8006858 <__sfvwrite_r+0x270>
 80067de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067e2:	44b9      	add	r9, r7
 80067e4:	ebc7 0a0a 	rsb	sl, r7, sl
 80067e8:	1bdf      	subs	r7, r3, r7
 80067ea:	f8c8 7008 	str.w	r7, [r8, #8]
 80067ee:	2f00      	cmp	r7, #0
 80067f0:	f43f af01 	beq.w	80065f6 <__sfvwrite_r+0xe>
 80067f4:	f1ba 0f00 	cmp.w	sl, #0
 80067f8:	d1d3      	bne.n	80067a2 <__sfvwrite_r+0x1ba>
 80067fa:	2300      	movs	r3, #0
 80067fc:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f10b 0b08 	add.w	fp, fp, #8
 8006806:	e7f5      	b.n	80067f4 <__sfvwrite_r+0x20c>
 8006808:	4652      	mov	r2, sl
 800680a:	210a      	movs	r1, #10
 800680c:	4648      	mov	r0, r9
 800680e:	f7f9 fce7 	bl	80001e0 <memchr>
 8006812:	b118      	cbz	r0, 800681c <__sfvwrite_r+0x234>
 8006814:	3001      	adds	r0, #1
 8006816:	ebc9 0500 	rsb	r5, r9, r0
 800681a:	e001      	b.n	8006820 <__sfvwrite_r+0x238>
 800681c:	f10a 0501 	add.w	r5, sl, #1
 8006820:	2301      	movs	r3, #1
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	e7bf      	b.n	80067a6 <__sfvwrite_r+0x1be>
 8006826:	4293      	cmp	r3, r2
 8006828:	db08      	blt.n	800683c <__sfvwrite_r+0x254>
 800682a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800682c:	6a21      	ldr	r1, [r4, #32]
 800682e:	4613      	mov	r3, r2
 8006830:	4630      	mov	r0, r6
 8006832:	464a      	mov	r2, r9
 8006834:	47b8      	blx	r7
 8006836:	1e07      	subs	r7, r0, #0
 8006838:	dccf      	bgt.n	80067da <__sfvwrite_r+0x1f2>
 800683a:	e014      	b.n	8006866 <__sfvwrite_r+0x27e>
 800683c:	461a      	mov	r2, r3
 800683e:	4649      	mov	r1, r9
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	f000 fae2 	bl	8006e0a <memmove>
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	68a2      	ldr	r2, [r4, #8]
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	60a2      	str	r2, [r4, #8]
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	441a      	add	r2, r3
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	461f      	mov	r7, r3
 8006856:	e7c0      	b.n	80067da <__sfvwrite_r+0x1f2>
 8006858:	4621      	mov	r1, r4
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff fcd4 	bl	8006208 <_fflush_r>
 8006860:	b908      	cbnz	r0, 8006866 <__sfvwrite_r+0x27e>
 8006862:	9500      	str	r5, [sp, #0]
 8006864:	e7bb      	b.n	80067de <__sfvwrite_r+0x1f6>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	b003      	add	sp, #12
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	7ffffc00 	.word	0x7ffffc00

0800687c <_fwalk_reent>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4680      	mov	r8, r0
 8006882:	4689      	mov	r9, r1
 8006884:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8006888:	2600      	movs	r6, #0
 800688a:	b194      	cbz	r4, 80068b2 <_fwalk_reent+0x36>
 800688c:	68a5      	ldr	r5, [r4, #8]
 800688e:	6867      	ldr	r7, [r4, #4]
 8006890:	3f01      	subs	r7, #1
 8006892:	d40c      	bmi.n	80068ae <_fwalk_reent+0x32>
 8006894:	89ab      	ldrh	r3, [r5, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d907      	bls.n	80068aa <_fwalk_reent+0x2e>
 800689a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800689e:	3301      	adds	r3, #1
 80068a0:	d003      	beq.n	80068aa <_fwalk_reent+0x2e>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4640      	mov	r0, r8
 80068a6:	47c8      	blx	r9
 80068a8:	4306      	orrs	r6, r0
 80068aa:	3568      	adds	r5, #104	; 0x68
 80068ac:	e7f0      	b.n	8006890 <_fwalk_reent+0x14>
 80068ae:	6824      	ldr	r4, [r4, #0]
 80068b0:	e7eb      	b.n	800688a <_fwalk_reent+0xe>
 80068b2:	4630      	mov	r0, r6
 80068b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068b8 <__locale_charset>:
 80068b8:	4800      	ldr	r0, [pc, #0]	; (80068bc <__locale_charset+0x4>)
 80068ba:	4770      	bx	lr
 80068bc:	20000130 	.word	0x20000130

080068c0 <__locale_mb_cur_max>:
 80068c0:	4b01      	ldr	r3, [pc, #4]	; (80068c8 <__locale_mb_cur_max+0x8>)
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000150 	.word	0x20000150

080068cc <_localeconv_r>:
 80068cc:	4800      	ldr	r0, [pc, #0]	; (80068d0 <_localeconv_r+0x4>)
 80068ce:	4770      	bx	lr
 80068d0:	200000f8 	.word	0x200000f8

080068d4 <__swhatbuf_r>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	460e      	mov	r6, r1
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	2900      	cmp	r1, #0
 80068de:	b090      	sub	sp, #64	; 0x40
 80068e0:	4614      	mov	r4, r2
 80068e2:	461d      	mov	r5, r3
 80068e4:	da0a      	bge.n	80068fc <__swhatbuf_r+0x28>
 80068e6:	89b3      	ldrh	r3, [r6, #12]
 80068e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ec:	2200      	movs	r2, #0
 80068ee:	b298      	uxth	r0, r3
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	b1b0      	cbz	r0, 8006922 <__swhatbuf_r+0x4e>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	4610      	mov	r0, r2
 80068fa:	e015      	b.n	8006928 <__swhatbuf_r+0x54>
 80068fc:	aa01      	add	r2, sp, #4
 80068fe:	f001 f915 	bl	8007b2c <_fstat_r>
 8006902:	2800      	cmp	r0, #0
 8006904:	dbef      	blt.n	80068e6 <__swhatbuf_r+0x12>
 8006906:	9a02      	ldr	r2, [sp, #8]
 8006908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800690c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006910:	425a      	negs	r2, r3
 8006912:	415a      	adcs	r2, r3
 8006914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006918:	602a      	str	r2, [r5, #0]
 800691a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	e002      	b.n	8006928 <__swhatbuf_r+0x54>
 8006922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	b010      	add	sp, #64	; 0x40
 800692a:	bd70      	pop	{r4, r5, r6, pc}

0800692c <__smakebuf_r>:
 800692c:	898b      	ldrh	r3, [r1, #12]
 800692e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006930:	079e      	lsls	r6, r3, #30
 8006932:	4605      	mov	r5, r0
 8006934:	460c      	mov	r4, r1
 8006936:	d410      	bmi.n	800695a <__smakebuf_r+0x2e>
 8006938:	ab01      	add	r3, sp, #4
 800693a:	466a      	mov	r2, sp
 800693c:	f7ff ffca 	bl	80068d4 <__swhatbuf_r>
 8006940:	9900      	ldr	r1, [sp, #0]
 8006942:	4606      	mov	r6, r0
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f835 	bl	80069b4 <_malloc_r>
 800694a:	b968      	cbnz	r0, 8006968 <__smakebuf_r+0x3c>
 800694c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006950:	059a      	lsls	r2, r3, #22
 8006952:	d422      	bmi.n	800699a <__smakebuf_r+0x6e>
 8006954:	f043 0302 	orr.w	r3, r3, #2
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	2301      	movs	r3, #1
 8006964:	6163      	str	r3, [r4, #20]
 8006966:	e018      	b.n	800699a <__smakebuf_r+0x6e>
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <__smakebuf_r+0x74>)
 800696a:	62ab      	str	r3, [r5, #40]	; 0x28
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	6163      	str	r3, [r4, #20]
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	6120      	str	r0, [r4, #16]
 800697e:	b14b      	cbz	r3, 8006994 <__smakebuf_r+0x68>
 8006980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006984:	4628      	mov	r0, r5
 8006986:	f001 f8e3 	bl	8007b50 <_isatty_r>
 800698a:	b118      	cbz	r0, 8006994 <__smakebuf_r+0x68>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	89a0      	ldrh	r0, [r4, #12]
 8006996:	4330      	orrs	r0, r6
 8006998:	81a0      	strh	r0, [r4, #12]
 800699a:	b002      	add	sp, #8
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	bf00      	nop
 80069a0:	0800625d 	.word	0x0800625d

080069a4 <malloc>:
 80069a4:	4b02      	ldr	r3, [pc, #8]	; (80069b0 <malloc+0xc>)
 80069a6:	4601      	mov	r1, r0
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	f000 b803 	b.w	80069b4 <_malloc_r>
 80069ae:	bf00      	nop
 80069b0:	200000f4 	.word	0x200000f4

080069b4 <_malloc_r>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	f101 040b 	add.w	r4, r1, #11
 80069bc:	2c16      	cmp	r4, #22
 80069be:	b085      	sub	sp, #20
 80069c0:	4681      	mov	r9, r0
 80069c2:	d903      	bls.n	80069cc <_malloc_r+0x18>
 80069c4:	f034 0407 	bics.w	r4, r4, #7
 80069c8:	d501      	bpl.n	80069ce <_malloc_r+0x1a>
 80069ca:	e002      	b.n	80069d2 <_malloc_r+0x1e>
 80069cc:	2410      	movs	r4, #16
 80069ce:	428c      	cmp	r4, r1
 80069d0:	d203      	bcs.n	80069da <_malloc_r+0x26>
 80069d2:	230c      	movs	r3, #12
 80069d4:	f8c9 3000 	str.w	r3, [r9]
 80069d8:	e1ea      	b.n	8006db0 <_malloc_r+0x3fc>
 80069da:	4648      	mov	r0, r9
 80069dc:	f000 fa30 	bl	8006e40 <__malloc_lock>
 80069e0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80069e4:	4d9e      	ldr	r5, [pc, #632]	; (8006c60 <_malloc_r+0x2ac>)
 80069e6:	d217      	bcs.n	8006a18 <_malloc_r+0x64>
 80069e8:	f104 0208 	add.w	r2, r4, #8
 80069ec:	442a      	add	r2, r5
 80069ee:	f1a2 0108 	sub.w	r1, r2, #8
 80069f2:	6856      	ldr	r6, [r2, #4]
 80069f4:	428e      	cmp	r6, r1
 80069f6:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80069fa:	d102      	bne.n	8006a02 <_malloc_r+0x4e>
 80069fc:	68d6      	ldr	r6, [r2, #12]
 80069fe:	42b2      	cmp	r2, r6
 8006a00:	d008      	beq.n	8006a14 <_malloc_r+0x60>
 8006a02:	6873      	ldr	r3, [r6, #4]
 8006a04:	68f2      	ldr	r2, [r6, #12]
 8006a06:	68b1      	ldr	r1, [r6, #8]
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	60ca      	str	r2, [r1, #12]
 8006a0e:	4433      	add	r3, r6
 8006a10:	6091      	str	r1, [r2, #8]
 8006a12:	e02f      	b.n	8006a74 <_malloc_r+0xc0>
 8006a14:	3302      	adds	r3, #2
 8006a16:	e03d      	b.n	8006a94 <_malloc_r+0xe0>
 8006a18:	0a63      	lsrs	r3, r4, #9
 8006a1a:	d01a      	beq.n	8006a52 <_malloc_r+0x9e>
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d802      	bhi.n	8006a26 <_malloc_r+0x72>
 8006a20:	09a3      	lsrs	r3, r4, #6
 8006a22:	3338      	adds	r3, #56	; 0x38
 8006a24:	e018      	b.n	8006a58 <_malloc_r+0xa4>
 8006a26:	2b14      	cmp	r3, #20
 8006a28:	d801      	bhi.n	8006a2e <_malloc_r+0x7a>
 8006a2a:	335b      	adds	r3, #91	; 0x5b
 8006a2c:	e014      	b.n	8006a58 <_malloc_r+0xa4>
 8006a2e:	2b54      	cmp	r3, #84	; 0x54
 8006a30:	d802      	bhi.n	8006a38 <_malloc_r+0x84>
 8006a32:	0b23      	lsrs	r3, r4, #12
 8006a34:	336e      	adds	r3, #110	; 0x6e
 8006a36:	e00f      	b.n	8006a58 <_malloc_r+0xa4>
 8006a38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006a3c:	d802      	bhi.n	8006a44 <_malloc_r+0x90>
 8006a3e:	0be3      	lsrs	r3, r4, #15
 8006a40:	3377      	adds	r3, #119	; 0x77
 8006a42:	e009      	b.n	8006a58 <_malloc_r+0xa4>
 8006a44:	f240 5254 	movw	r2, #1364	; 0x554
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d804      	bhi.n	8006a56 <_malloc_r+0xa2>
 8006a4c:	0ca3      	lsrs	r3, r4, #18
 8006a4e:	337c      	adds	r3, #124	; 0x7c
 8006a50:	e002      	b.n	8006a58 <_malloc_r+0xa4>
 8006a52:	233f      	movs	r3, #63	; 0x3f
 8006a54:	e000      	b.n	8006a58 <_malloc_r+0xa4>
 8006a56:	237e      	movs	r3, #126	; 0x7e
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006a5e:	f1a2 0008 	sub.w	r0, r2, #8
 8006a62:	6856      	ldr	r6, [r2, #4]
 8006a64:	e00c      	b.n	8006a80 <_malloc_r+0xcc>
 8006a66:	2900      	cmp	r1, #0
 8006a68:	68f1      	ldr	r1, [r6, #12]
 8006a6a:	db08      	blt.n	8006a7e <_malloc_r+0xca>
 8006a6c:	68b3      	ldr	r3, [r6, #8]
 8006a6e:	60d9      	str	r1, [r3, #12]
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	18b3      	adds	r3, r6, r2
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	e1a3      	b.n	8006dc6 <_malloc_r+0x412>
 8006a7e:	460e      	mov	r6, r1
 8006a80:	4286      	cmp	r6, r0
 8006a82:	d006      	beq.n	8006a92 <_malloc_r+0xde>
 8006a84:	6872      	ldr	r2, [r6, #4]
 8006a86:	f022 0203 	bic.w	r2, r2, #3
 8006a8a:	1b11      	subs	r1, r2, r4
 8006a8c:	290f      	cmp	r1, #15
 8006a8e:	ddea      	ble.n	8006a66 <_malloc_r+0xb2>
 8006a90:	3b01      	subs	r3, #1
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a72      	ldr	r2, [pc, #456]	; (8006c60 <_malloc_r+0x2ac>)
 8006a96:	692e      	ldr	r6, [r5, #16]
 8006a98:	f102 0708 	add.w	r7, r2, #8
 8006a9c:	42be      	cmp	r6, r7
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	d079      	beq.n	8006b96 <_malloc_r+0x1e2>
 8006aa2:	6870      	ldr	r0, [r6, #4]
 8006aa4:	f020 0003 	bic.w	r0, r0, #3
 8006aa8:	ebc4 0e00 	rsb	lr, r4, r0
 8006aac:	f1be 0f0f 	cmp.w	lr, #15
 8006ab0:	dd0d      	ble.n	8006ace <_malloc_r+0x11a>
 8006ab2:	1933      	adds	r3, r6, r4
 8006ab4:	f044 0401 	orr.w	r4, r4, #1
 8006ab8:	6074      	str	r4, [r6, #4]
 8006aba:	6153      	str	r3, [r2, #20]
 8006abc:	6113      	str	r3, [r2, #16]
 8006abe:	f04e 0201 	orr.w	r2, lr, #1
 8006ac2:	60df      	str	r7, [r3, #12]
 8006ac4:	609f      	str	r7, [r3, #8]
 8006ac6:	605a      	str	r2, [r3, #4]
 8006ac8:	f843 e00e 	str.w	lr, [r3, lr]
 8006acc:	e17b      	b.n	8006dc6 <_malloc_r+0x412>
 8006ace:	f1be 0f00 	cmp.w	lr, #0
 8006ad2:	6157      	str	r7, [r2, #20]
 8006ad4:	6117      	str	r7, [r2, #16]
 8006ad6:	db05      	blt.n	8006ae4 <_malloc_r+0x130>
 8006ad8:	4430      	add	r0, r6
 8006ada:	6843      	ldr	r3, [r0, #4]
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6043      	str	r3, [r0, #4]
 8006ae2:	e170      	b.n	8006dc6 <_malloc_r+0x412>
 8006ae4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006ae8:	d215      	bcs.n	8006b16 <_malloc_r+0x162>
 8006aea:	08c0      	lsrs	r0, r0, #3
 8006aec:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006af0:	2701      	movs	r7, #1
 8006af2:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006af6:	6857      	ldr	r7, [r2, #4]
 8006af8:	3001      	adds	r0, #1
 8006afa:	ea4e 0707 	orr.w	r7, lr, r7
 8006afe:	6057      	str	r7, [r2, #4]
 8006b00:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006b04:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006b08:	f8c6 e008 	str.w	lr, [r6, #8]
 8006b0c:	3f08      	subs	r7, #8
 8006b0e:	60f7      	str	r7, [r6, #12]
 8006b10:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006b14:	e03d      	b.n	8006b92 <_malloc_r+0x1de>
 8006b16:	0a42      	lsrs	r2, r0, #9
 8006b18:	2a04      	cmp	r2, #4
 8006b1a:	d802      	bhi.n	8006b22 <_malloc_r+0x16e>
 8006b1c:	0982      	lsrs	r2, r0, #6
 8006b1e:	3238      	adds	r2, #56	; 0x38
 8006b20:	e015      	b.n	8006b4e <_malloc_r+0x19a>
 8006b22:	2a14      	cmp	r2, #20
 8006b24:	d801      	bhi.n	8006b2a <_malloc_r+0x176>
 8006b26:	325b      	adds	r2, #91	; 0x5b
 8006b28:	e011      	b.n	8006b4e <_malloc_r+0x19a>
 8006b2a:	2a54      	cmp	r2, #84	; 0x54
 8006b2c:	d802      	bhi.n	8006b34 <_malloc_r+0x180>
 8006b2e:	0b02      	lsrs	r2, r0, #12
 8006b30:	326e      	adds	r2, #110	; 0x6e
 8006b32:	e00c      	b.n	8006b4e <_malloc_r+0x19a>
 8006b34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006b38:	d802      	bhi.n	8006b40 <_malloc_r+0x18c>
 8006b3a:	0bc2      	lsrs	r2, r0, #15
 8006b3c:	3277      	adds	r2, #119	; 0x77
 8006b3e:	e006      	b.n	8006b4e <_malloc_r+0x19a>
 8006b40:	f240 5754 	movw	r7, #1364	; 0x554
 8006b44:	42ba      	cmp	r2, r7
 8006b46:	bf9a      	itte	ls
 8006b48:	0c82      	lsrls	r2, r0, #18
 8006b4a:	327c      	addls	r2, #124	; 0x7c
 8006b4c:	227e      	movhi	r2, #126	; 0x7e
 8006b4e:	1c57      	adds	r7, r2, #1
 8006b50:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006b54:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006b58:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006c60 <_malloc_r+0x2ac>
 8006b5c:	45be      	cmp	lr, r7
 8006b5e:	d10d      	bne.n	8006b7c <_malloc_r+0x1c8>
 8006b60:	2001      	movs	r0, #1
 8006b62:	1092      	asrs	r2, r2, #2
 8006b64:	fa00 f202 	lsl.w	r2, r0, r2
 8006b68:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006b6c:	4310      	orrs	r0, r2
 8006b6e:	f8cc 0004 	str.w	r0, [ip, #4]
 8006b72:	4672      	mov	r2, lr
 8006b74:	e009      	b.n	8006b8a <_malloc_r+0x1d6>
 8006b76:	68bf      	ldr	r7, [r7, #8]
 8006b78:	45be      	cmp	lr, r7
 8006b7a:	d004      	beq.n	8006b86 <_malloc_r+0x1d2>
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f022 0203 	bic.w	r2, r2, #3
 8006b82:	4290      	cmp	r0, r2
 8006b84:	d3f7      	bcc.n	8006b76 <_malloc_r+0x1c2>
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	46be      	mov	lr, r7
 8006b8a:	60f2      	str	r2, [r6, #12]
 8006b8c:	f8c6 e008 	str.w	lr, [r6, #8]
 8006b90:	6096      	str	r6, [r2, #8]
 8006b92:	f8ce 600c 	str.w	r6, [lr, #12]
 8006b96:	2001      	movs	r0, #1
 8006b98:	109a      	asrs	r2, r3, #2
 8006b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b9e:	6868      	ldr	r0, [r5, #4]
 8006ba0:	4282      	cmp	r2, r0
 8006ba2:	d85f      	bhi.n	8006c64 <_malloc_r+0x2b0>
 8006ba4:	4202      	tst	r2, r0
 8006ba6:	d106      	bne.n	8006bb6 <_malloc_r+0x202>
 8006ba8:	f023 0303 	bic.w	r3, r3, #3
 8006bac:	0052      	lsls	r2, r2, #1
 8006bae:	4202      	tst	r2, r0
 8006bb0:	f103 0304 	add.w	r3, r3, #4
 8006bb4:	d0fa      	beq.n	8006bac <_malloc_r+0x1f8>
 8006bb6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8006bba:	46c2      	mov	sl, r8
 8006bbc:	469c      	mov	ip, r3
 8006bbe:	f8da 600c 	ldr.w	r6, [sl, #12]
 8006bc2:	4556      	cmp	r6, sl
 8006bc4:	d02c      	beq.n	8006c20 <_malloc_r+0x26c>
 8006bc6:	6870      	ldr	r0, [r6, #4]
 8006bc8:	68f7      	ldr	r7, [r6, #12]
 8006bca:	f020 0003 	bic.w	r0, r0, #3
 8006bce:	ebc4 0e00 	rsb	lr, r4, r0
 8006bd2:	f1be 0f0f 	cmp.w	lr, #15
 8006bd6:	dd11      	ble.n	8006bfc <_malloc_r+0x248>
 8006bd8:	1933      	adds	r3, r6, r4
 8006bda:	f044 0401 	orr.w	r4, r4, #1
 8006bde:	6074      	str	r4, [r6, #4]
 8006be0:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8006be4:	60d7      	str	r7, [r2, #12]
 8006be6:	60ba      	str	r2, [r7, #8]
 8006be8:	f04e 0201 	orr.w	r2, lr, #1
 8006bec:	616b      	str	r3, [r5, #20]
 8006bee:	612b      	str	r3, [r5, #16]
 8006bf0:	60d9      	str	r1, [r3, #12]
 8006bf2:	6099      	str	r1, [r3, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	f843 e00e 	str.w	lr, [r3, lr]
 8006bfa:	e00b      	b.n	8006c14 <_malloc_r+0x260>
 8006bfc:	f1be 0f00 	cmp.w	lr, #0
 8006c00:	db0c      	blt.n	8006c1c <_malloc_r+0x268>
 8006c02:	1833      	adds	r3, r6, r0
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006c10:	60df      	str	r7, [r3, #12]
 8006c12:	60bb      	str	r3, [r7, #8]
 8006c14:	4648      	mov	r0, r9
 8006c16:	f000 f914 	bl	8006e42 <__malloc_unlock>
 8006c1a:	e0d8      	b.n	8006dce <_malloc_r+0x41a>
 8006c1c:	463e      	mov	r6, r7
 8006c1e:	e7d0      	b.n	8006bc2 <_malloc_r+0x20e>
 8006c20:	f10c 0c01 	add.w	ip, ip, #1
 8006c24:	f01c 0f03 	tst.w	ip, #3
 8006c28:	f10a 0a08 	add.w	sl, sl, #8
 8006c2c:	d1c7      	bne.n	8006bbe <_malloc_r+0x20a>
 8006c2e:	0798      	lsls	r0, r3, #30
 8006c30:	d104      	bne.n	8006c3c <_malloc_r+0x288>
 8006c32:	686b      	ldr	r3, [r5, #4]
 8006c34:	ea23 0302 	bic.w	r3, r3, r2
 8006c38:	606b      	str	r3, [r5, #4]
 8006c3a:	e005      	b.n	8006c48 <_malloc_r+0x294>
 8006c3c:	f858 0908 	ldr.w	r0, [r8], #-8
 8006c40:	4580      	cmp	r8, r0
 8006c42:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c46:	d0f2      	beq.n	8006c2e <_malloc_r+0x27a>
 8006c48:	6868      	ldr	r0, [r5, #4]
 8006c4a:	0052      	lsls	r2, r2, #1
 8006c4c:	4282      	cmp	r2, r0
 8006c4e:	d809      	bhi.n	8006c64 <_malloc_r+0x2b0>
 8006c50:	b142      	cbz	r2, 8006c64 <_malloc_r+0x2b0>
 8006c52:	4663      	mov	r3, ip
 8006c54:	4202      	tst	r2, r0
 8006c56:	d1ae      	bne.n	8006bb6 <_malloc_r+0x202>
 8006c58:	3304      	adds	r3, #4
 8006c5a:	0052      	lsls	r2, r2, #1
 8006c5c:	e7fa      	b.n	8006c54 <_malloc_r+0x2a0>
 8006c5e:	bf00      	nop
 8006c60:	20000154 	.word	0x20000154
 8006c64:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006c68:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006c6c:	f026 0603 	bic.w	r6, r6, #3
 8006c70:	42b4      	cmp	r4, r6
 8006c72:	d803      	bhi.n	8006c7c <_malloc_r+0x2c8>
 8006c74:	1b33      	subs	r3, r6, r4
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	f300 809c 	bgt.w	8006db4 <_malloc_r+0x400>
 8006c7c:	4a56      	ldr	r2, [pc, #344]	; (8006dd8 <_malloc_r+0x424>)
 8006c7e:	4957      	ldr	r1, [pc, #348]	; (8006ddc <_malloc_r+0x428>)
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	6808      	ldr	r0, [r1, #0]
 8006c84:	9101      	str	r1, [sp, #4]
 8006c86:	f102 0810 	add.w	r8, r2, #16
 8006c8a:	4a55      	ldr	r2, [pc, #340]	; (8006de0 <_malloc_r+0x42c>)
 8006c8c:	9203      	str	r2, [sp, #12]
 8006c8e:	3001      	adds	r0, #1
 8006c90:	bf18      	it	ne
 8006c92:	f102 31ff 	addne.w	r1, r2, #4294967295
 8006c96:	44a0      	add	r8, r4
 8006c98:	bf1e      	ittt	ne
 8006c9a:	4488      	addne	r8, r1
 8006c9c:	4251      	negne	r1, r2
 8006c9e:	ea01 0808 	andne.w	r8, r1, r8
 8006ca2:	eb0b 0306 	add.w	r3, fp, r6
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	4648      	mov	r0, r9
 8006caa:	9302      	str	r3, [sp, #8]
 8006cac:	f000 fd48 	bl	8007740 <_sbrk_r>
 8006cb0:	1c42      	adds	r2, r0, #1
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	d06f      	beq.n	8006d96 <_malloc_r+0x3e2>
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	9a03      	ldr	r2, [sp, #12]
 8006cba:	4283      	cmp	r3, r0
 8006cbc:	d901      	bls.n	8006cc2 <_malloc_r+0x30e>
 8006cbe:	45ab      	cmp	fp, r5
 8006cc0:	d169      	bne.n	8006d96 <_malloc_r+0x3e2>
 8006cc2:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006dec <_malloc_r+0x438>
 8006cc6:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006df0 <_malloc_r+0x43c>
 8006cca:	f8da 0000 	ldr.w	r0, [sl]
 8006cce:	42bb      	cmp	r3, r7
 8006cd0:	4440      	add	r0, r8
 8006cd2:	f8ca 0000 	str.w	r0, [sl]
 8006cd6:	d108      	bne.n	8006cea <_malloc_r+0x336>
 8006cd8:	ea13 0f0c 	tst.w	r3, ip
 8006cdc:	d105      	bne.n	8006cea <_malloc_r+0x336>
 8006cde:	68ab      	ldr	r3, [r5, #8]
 8006ce0:	4446      	add	r6, r8
 8006ce2:	f046 0601 	orr.w	r6, r6, #1
 8006ce6:	605e      	str	r6, [r3, #4]
 8006ce8:	e049      	b.n	8006d7e <_malloc_r+0x3ca>
 8006cea:	9901      	ldr	r1, [sp, #4]
 8006cec:	f8d1 e000 	ldr.w	lr, [r1]
 8006cf0:	f1be 3fff 	cmp.w	lr, #4294967295
 8006cf4:	bf15      	itete	ne
 8006cf6:	1afb      	subne	r3, r7, r3
 8006cf8:	4b38      	ldreq	r3, [pc, #224]	; (8006ddc <_malloc_r+0x428>)
 8006cfa:	181b      	addne	r3, r3, r0
 8006cfc:	601f      	streq	r7, [r3, #0]
 8006cfe:	bf18      	it	ne
 8006d00:	f8ca 3000 	strne.w	r3, [sl]
 8006d04:	f017 0307 	ands.w	r3, r7, #7
 8006d08:	bf1c      	itt	ne
 8006d0a:	f1c3 0308 	rsbne	r3, r3, #8
 8006d0e:	18ff      	addne	r7, r7, r3
 8006d10:	44b8      	add	r8, r7
 8006d12:	441a      	add	r2, r3
 8006d14:	ea08 080c 	and.w	r8, r8, ip
 8006d18:	ebc8 0802 	rsb	r8, r8, r2
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4648      	mov	r0, r9
 8006d20:	f000 fd0e 	bl	8007740 <_sbrk_r>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	bf04      	itt	eq
 8006d28:	4638      	moveq	r0, r7
 8006d2a:	f04f 0800 	moveq.w	r8, #0
 8006d2e:	f8da 3000 	ldr.w	r3, [sl]
 8006d32:	60af      	str	r7, [r5, #8]
 8006d34:	1bc2      	subs	r2, r0, r7
 8006d36:	4442      	add	r2, r8
 8006d38:	4443      	add	r3, r8
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	45ab      	cmp	fp, r5
 8006d40:	f8ca 3000 	str.w	r3, [sl]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	d01a      	beq.n	8006d7e <_malloc_r+0x3ca>
 8006d48:	2e0f      	cmp	r6, #15
 8006d4a:	d802      	bhi.n	8006d52 <_malloc_r+0x39e>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	e021      	b.n	8006d96 <_malloc_r+0x3e2>
 8006d52:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006d56:	3e0c      	subs	r6, #12
 8006d58:	f026 0607 	bic.w	r6, r6, #7
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	4333      	orrs	r3, r6
 8006d62:	f8cb 3004 	str.w	r3, [fp, #4]
 8006d66:	eb0b 0306 	add.w	r3, fp, r6
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	2e0f      	cmp	r6, #15
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	d904      	bls.n	8006d7e <_malloc_r+0x3ca>
 8006d74:	f10b 0108 	add.w	r1, fp, #8
 8006d78:	4648      	mov	r0, r9
 8006d7a:	f7ff fb77 	bl	800646c <_free_r>
 8006d7e:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <_malloc_r+0x430>)
 8006d80:	f8da 3000 	ldr.w	r3, [sl]
 8006d84:	6811      	ldr	r1, [r2, #0]
 8006d86:	428b      	cmp	r3, r1
 8006d88:	bf88      	it	hi
 8006d8a:	6013      	strhi	r3, [r2, #0]
 8006d8c:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <_malloc_r+0x434>)
 8006d8e:	6811      	ldr	r1, [r2, #0]
 8006d90:	428b      	cmp	r3, r1
 8006d92:	bf88      	it	hi
 8006d94:	6013      	strhi	r3, [r2, #0]
 8006d96:	68ab      	ldr	r3, [r5, #8]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	f022 0203 	bic.w	r2, r2, #3
 8006d9e:	4294      	cmp	r4, r2
 8006da0:	eba2 0304 	sub.w	r3, r2, r4
 8006da4:	d801      	bhi.n	8006daa <_malloc_r+0x3f6>
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	dc04      	bgt.n	8006db4 <_malloc_r+0x400>
 8006daa:	4648      	mov	r0, r9
 8006dac:	f000 f849 	bl	8006e42 <__malloc_unlock>
 8006db0:	2600      	movs	r6, #0
 8006db2:	e00c      	b.n	8006dce <_malloc_r+0x41a>
 8006db4:	68ae      	ldr	r6, [r5, #8]
 8006db6:	f044 0201 	orr.w	r2, r4, #1
 8006dba:	4434      	add	r4, r6
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	6072      	str	r2, [r6, #4]
 8006dc2:	60ac      	str	r4, [r5, #8]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	4648      	mov	r0, r9
 8006dc8:	f000 f83b 	bl	8006e42 <__malloc_unlock>
 8006dcc:	3608      	adds	r6, #8
 8006dce:	4630      	mov	r0, r6
 8006dd0:	b005      	add	sp, #20
 8006dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200005d4 	.word	0x200005d4
 8006ddc:	20000560 	.word	0x20000560
 8006de0:	00000080 	.word	0x00000080
 8006de4:	200005d0 	.word	0x200005d0
 8006de8:	200005cc 	.word	0x200005cc
 8006dec:	200005d8 	.word	0x200005d8
 8006df0:	0000007f 	.word	0x0000007f

08006df4 <memcpy>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	1e43      	subs	r3, r0, #1
 8006df8:	440a      	add	r2, r1
 8006dfa:	4291      	cmp	r1, r2
 8006dfc:	d004      	beq.n	8006e08 <memcpy+0x14>
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e06:	e7f8      	b.n	8006dfa <memcpy+0x6>
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <memmove>:
 8006e0a:	4288      	cmp	r0, r1
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	eb01 0302 	add.w	r3, r1, r2
 8006e12:	d801      	bhi.n	8006e18 <memmove+0xe>
 8006e14:	1e42      	subs	r2, r0, #1
 8006e16:	e00b      	b.n	8006e30 <memmove+0x26>
 8006e18:	4298      	cmp	r0, r3
 8006e1a:	d2fb      	bcs.n	8006e14 <memmove+0xa>
 8006e1c:	1881      	adds	r1, r0, r2
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	42d3      	cmn	r3, r2
 8006e22:	d004      	beq.n	8006e2e <memmove+0x24>
 8006e24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e2c:	e7f8      	b.n	8006e20 <memmove+0x16>
 8006e2e:	bd10      	pop	{r4, pc}
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d004      	beq.n	8006e3e <memmove+0x34>
 8006e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e3c:	e7f8      	b.n	8006e30 <memmove+0x26>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <__malloc_lock>:
 8006e40:	4770      	bx	lr

08006e42 <__malloc_unlock>:
 8006e42:	4770      	bx	lr

08006e44 <_Balloc>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460e      	mov	r6, r1
 8006e4c:	b93d      	cbnz	r5, 8006e5e <_Balloc+0x1a>
 8006e4e:	2010      	movs	r0, #16
 8006e50:	f7ff fda8 	bl	80069a4 <malloc>
 8006e54:	6260      	str	r0, [r4, #36]	; 0x24
 8006e56:	6045      	str	r5, [r0, #4]
 8006e58:	6085      	str	r5, [r0, #8]
 8006e5a:	6005      	str	r5, [r0, #0]
 8006e5c:	60c5      	str	r5, [r0, #12]
 8006e5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e60:	68eb      	ldr	r3, [r5, #12]
 8006e62:	b143      	cbz	r3, 8006e76 <_Balloc+0x32>
 8006e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e6c:	b178      	cbz	r0, 8006e8e <_Balloc+0x4a>
 8006e6e:	6802      	ldr	r2, [r0, #0]
 8006e70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e74:	e017      	b.n	8006ea6 <_Balloc+0x62>
 8006e76:	2221      	movs	r2, #33	; 0x21
 8006e78:	2104      	movs	r1, #4
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fd76 	bl	800796c <_calloc_r>
 8006e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e82:	60e8      	str	r0, [r5, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1ec      	bne.n	8006e64 <_Balloc+0x20>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	2101      	movs	r1, #1
 8006e90:	fa01 f506 	lsl.w	r5, r1, r6
 8006e94:	1d6a      	adds	r2, r5, #5
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 fd67 	bl	800796c <_calloc_r>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d0f3      	beq.n	8006e8a <_Balloc+0x46>
 8006ea2:	6046      	str	r6, [r0, #4]
 8006ea4:	6085      	str	r5, [r0, #8]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6103      	str	r3, [r0, #16]
 8006eaa:	60c3      	str	r3, [r0, #12]
 8006eac:	bd70      	pop	{r4, r5, r6, pc}

08006eae <_Bfree>:
 8006eae:	b570      	push	{r4, r5, r6, lr}
 8006eb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	b93c      	cbnz	r4, 8006ec8 <_Bfree+0x1a>
 8006eb8:	2010      	movs	r0, #16
 8006eba:	f7ff fd73 	bl	80069a4 <malloc>
 8006ebe:	6270      	str	r0, [r6, #36]	; 0x24
 8006ec0:	6044      	str	r4, [r0, #4]
 8006ec2:	6084      	str	r4, [r0, #8]
 8006ec4:	6004      	str	r4, [r0, #0]
 8006ec6:	60c4      	str	r4, [r0, #12]
 8006ec8:	b13d      	cbz	r5, 8006eda <_Bfree+0x2c>
 8006eca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ecc:	686a      	ldr	r2, [r5, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ed4:	6029      	str	r1, [r5, #0]
 8006ed6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006eda:	bd70      	pop	{r4, r5, r6, pc}

08006edc <__multadd>:
 8006edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee0:	690d      	ldr	r5, [r1, #16]
 8006ee2:	461f      	mov	r7, r3
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f101 0e14 	add.w	lr, r1, #20
 8006eec:	2300      	movs	r3, #0
 8006eee:	f8de 0000 	ldr.w	r0, [lr]
 8006ef2:	b281      	uxth	r1, r0
 8006ef4:	fb02 7101 	mla	r1, r2, r1, r7
 8006ef8:	0c0f      	lsrs	r7, r1, #16
 8006efa:	0c00      	lsrs	r0, r0, #16
 8006efc:	fb02 7000 	mla	r0, r2, r0, r7
 8006f00:	b289      	uxth	r1, r1
 8006f02:	3301      	adds	r3, #1
 8006f04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006f08:	429d      	cmp	r5, r3
 8006f0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006f0e:	f84e 1b04 	str.w	r1, [lr], #4
 8006f12:	dcec      	bgt.n	8006eee <__multadd+0x12>
 8006f14:	b1d7      	cbz	r7, 8006f4c <__multadd+0x70>
 8006f16:	68a3      	ldr	r3, [r4, #8]
 8006f18:	429d      	cmp	r5, r3
 8006f1a:	db12      	blt.n	8006f42 <__multadd+0x66>
 8006f1c:	6861      	ldr	r1, [r4, #4]
 8006f1e:	4630      	mov	r0, r6
 8006f20:	3101      	adds	r1, #1
 8006f22:	f7ff ff8f 	bl	8006e44 <_Balloc>
 8006f26:	6922      	ldr	r2, [r4, #16]
 8006f28:	3202      	adds	r2, #2
 8006f2a:	f104 010c 	add.w	r1, r4, #12
 8006f2e:	4680      	mov	r8, r0
 8006f30:	0092      	lsls	r2, r2, #2
 8006f32:	300c      	adds	r0, #12
 8006f34:	f7ff ff5e 	bl	8006df4 <memcpy>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff ffb7 	bl	8006eae <_Bfree>
 8006f40:	4644      	mov	r4, r8
 8006f42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f46:	3501      	adds	r5, #1
 8006f48:	615f      	str	r7, [r3, #20]
 8006f4a:	6125      	str	r5, [r4, #16]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f52 <__hi0bits>:
 8006f52:	0c03      	lsrs	r3, r0, #16
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	b913      	cbnz	r3, 8006f5e <__hi0bits+0xc>
 8006f58:	0400      	lsls	r0, r0, #16
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	e000      	b.n	8006f60 <__hi0bits+0xe>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f64:	bf04      	itt	eq
 8006f66:	0200      	lsleq	r0, r0, #8
 8006f68:	3308      	addeq	r3, #8
 8006f6a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f6e:	bf04      	itt	eq
 8006f70:	0100      	lsleq	r0, r0, #4
 8006f72:	3304      	addeq	r3, #4
 8006f74:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f78:	bf04      	itt	eq
 8006f7a:	0080      	lsleq	r0, r0, #2
 8006f7c:	3302      	addeq	r3, #2
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	db03      	blt.n	8006f8a <__hi0bits+0x38>
 8006f82:	0042      	lsls	r2, r0, #1
 8006f84:	d503      	bpl.n	8006f8e <__hi0bits+0x3c>
 8006f86:	1c58      	adds	r0, r3, #1
 8006f88:	4770      	bx	lr
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	4770      	bx	lr
 8006f8e:	2020      	movs	r0, #32
 8006f90:	4770      	bx	lr

08006f92 <__lo0bits>:
 8006f92:	6803      	ldr	r3, [r0, #0]
 8006f94:	f013 0207 	ands.w	r2, r3, #7
 8006f98:	d00b      	beq.n	8006fb2 <__lo0bits+0x20>
 8006f9a:	07d9      	lsls	r1, r3, #31
 8006f9c:	d422      	bmi.n	8006fe4 <__lo0bits+0x52>
 8006f9e:	079a      	lsls	r2, r3, #30
 8006fa0:	bf4b      	itete	mi
 8006fa2:	085b      	lsrmi	r3, r3, #1
 8006fa4:	089b      	lsrpl	r3, r3, #2
 8006fa6:	6003      	strmi	r3, [r0, #0]
 8006fa8:	6003      	strpl	r3, [r0, #0]
 8006faa:	bf4c      	ite	mi
 8006fac:	2001      	movmi	r0, #1
 8006fae:	2002      	movpl	r0, #2
 8006fb0:	4770      	bx	lr
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	b909      	cbnz	r1, 8006fba <__lo0bits+0x28>
 8006fb6:	0c1b      	lsrs	r3, r3, #16
 8006fb8:	2210      	movs	r2, #16
 8006fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fbe:	bf04      	itt	eq
 8006fc0:	0a1b      	lsreq	r3, r3, #8
 8006fc2:	3208      	addeq	r2, #8
 8006fc4:	0719      	lsls	r1, r3, #28
 8006fc6:	bf04      	itt	eq
 8006fc8:	091b      	lsreq	r3, r3, #4
 8006fca:	3204      	addeq	r2, #4
 8006fcc:	0799      	lsls	r1, r3, #30
 8006fce:	bf04      	itt	eq
 8006fd0:	089b      	lsreq	r3, r3, #2
 8006fd2:	3202      	addeq	r2, #2
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d402      	bmi.n	8006fde <__lo0bits+0x4c>
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	d005      	beq.n	8006fe8 <__lo0bits+0x56>
 8006fdc:	3201      	adds	r2, #1
 8006fde:	6003      	str	r3, [r0, #0]
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4770      	bx	lr
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4770      	bx	lr
 8006fe8:	2020      	movs	r0, #32
 8006fea:	4770      	bx	lr

08006fec <__i2b>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	460c      	mov	r4, r1
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	f7ff ff27 	bl	8006e44 <_Balloc>
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	6144      	str	r4, [r0, #20]
 8006ffa:	6102      	str	r2, [r0, #16]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__multiply>:
 8006ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007002:	4614      	mov	r4, r2
 8007004:	690a      	ldr	r2, [r1, #16]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	bfb8      	it	lt
 800700c:	460b      	movlt	r3, r1
 800700e:	4688      	mov	r8, r1
 8007010:	bfbc      	itt	lt
 8007012:	46a0      	movlt	r8, r4
 8007014:	461c      	movlt	r4, r3
 8007016:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800701a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800701e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007022:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007026:	eb07 0609 	add.w	r6, r7, r9
 800702a:	429e      	cmp	r6, r3
 800702c:	bfc8      	it	gt
 800702e:	3101      	addgt	r1, #1
 8007030:	f7ff ff08 	bl	8006e44 <_Balloc>
 8007034:	f100 0514 	add.w	r5, r0, #20
 8007038:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800703c:	462b      	mov	r3, r5
 800703e:	2200      	movs	r2, #0
 8007040:	4563      	cmp	r3, ip
 8007042:	d202      	bcs.n	800704a <__multiply+0x4c>
 8007044:	f843 2b04 	str.w	r2, [r3], #4
 8007048:	e7fa      	b.n	8007040 <__multiply+0x42>
 800704a:	f104 0214 	add.w	r2, r4, #20
 800704e:	f108 0114 	add.w	r1, r8, #20
 8007052:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007056:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	9201      	str	r2, [sp, #4]
 8007060:	4293      	cmp	r3, r2
 8007062:	d957      	bls.n	8007114 <__multiply+0x116>
 8007064:	f8b2 b000 	ldrh.w	fp, [r2]
 8007068:	f1bb 0f00 	cmp.w	fp, #0
 800706c:	d023      	beq.n	80070b6 <__multiply+0xb8>
 800706e:	4689      	mov	r9, r1
 8007070:	46ae      	mov	lr, r5
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	f859 4b04 	ldr.w	r4, [r9], #4
 800707a:	f8be a000 	ldrh.w	sl, [lr]
 800707e:	b2a3      	uxth	r3, r4
 8007080:	fb0b a303 	mla	r3, fp, r3, sl
 8007084:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007088:	f8de 4000 	ldr.w	r4, [lr]
 800708c:	4443      	add	r3, r8
 800708e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007092:	fb0b 840a 	mla	r4, fp, sl, r8
 8007096:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800709a:	46f2      	mov	sl, lr
 800709c:	b29b      	uxth	r3, r3
 800709e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070a2:	454f      	cmp	r7, r9
 80070a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070a8:	f84a 3b04 	str.w	r3, [sl], #4
 80070ac:	d901      	bls.n	80070b2 <__multiply+0xb4>
 80070ae:	46d6      	mov	lr, sl
 80070b0:	e7e1      	b.n	8007076 <__multiply+0x78>
 80070b2:	f8ce 8004 	str.w	r8, [lr, #4]
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80070bc:	3204      	adds	r2, #4
 80070be:	f1ba 0f00 	cmp.w	sl, #0
 80070c2:	d021      	beq.n	8007108 <__multiply+0x10a>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	462c      	mov	r4, r5
 80070c8:	4689      	mov	r9, r1
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	f8b9 e000 	ldrh.w	lr, [r9]
 80070d2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80070d6:	fb0a be0e 	mla	lr, sl, lr, fp
 80070da:	44f0      	add	r8, lr
 80070dc:	46a3      	mov	fp, r4
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80070e4:	f84b 3b04 	str.w	r3, [fp], #4
 80070e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80070ec:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	fb0a e303 	mla	r3, sl, r3, lr
 80070f6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80070fa:	454f      	cmp	r7, r9
 80070fc:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007100:	d901      	bls.n	8007106 <__multiply+0x108>
 8007102:	465c      	mov	r4, fp
 8007104:	e7e3      	b.n	80070ce <__multiply+0xd0>
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	3504      	adds	r5, #4
 800710a:	e7a7      	b.n	800705c <__multiply+0x5e>
 800710c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007110:	b913      	cbnz	r3, 8007118 <__multiply+0x11a>
 8007112:	3e01      	subs	r6, #1
 8007114:	2e00      	cmp	r6, #0
 8007116:	dcf9      	bgt.n	800710c <__multiply+0x10e>
 8007118:	6106      	str	r6, [r0, #16]
 800711a:	b003      	add	sp, #12
 800711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007120 <__pow5mult>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4615      	mov	r5, r2
 8007126:	f012 0203 	ands.w	r2, r2, #3
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	d007      	beq.n	8007140 <__pow5mult+0x20>
 8007130:	3a01      	subs	r2, #1
 8007132:	4c21      	ldr	r4, [pc, #132]	; (80071b8 <__pow5mult+0x98>)
 8007134:	2300      	movs	r3, #0
 8007136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800713a:	f7ff fecf 	bl	8006edc <__multadd>
 800713e:	4607      	mov	r7, r0
 8007140:	10ad      	asrs	r5, r5, #2
 8007142:	d036      	beq.n	80071b2 <__pow5mult+0x92>
 8007144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007146:	b93c      	cbnz	r4, 8007158 <__pow5mult+0x38>
 8007148:	2010      	movs	r0, #16
 800714a:	f7ff fc2b 	bl	80069a4 <malloc>
 800714e:	6270      	str	r0, [r6, #36]	; 0x24
 8007150:	6044      	str	r4, [r0, #4]
 8007152:	6084      	str	r4, [r0, #8]
 8007154:	6004      	str	r4, [r0, #0]
 8007156:	60c4      	str	r4, [r0, #12]
 8007158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800715c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007160:	b94c      	cbnz	r4, 8007176 <__pow5mult+0x56>
 8007162:	f240 2171 	movw	r1, #625	; 0x271
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ff40 	bl	8006fec <__i2b>
 800716c:	2300      	movs	r3, #0
 800716e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007172:	4604      	mov	r4, r0
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	07eb      	lsls	r3, r5, #31
 800717c:	d50a      	bpl.n	8007194 <__pow5mult+0x74>
 800717e:	4639      	mov	r1, r7
 8007180:	4622      	mov	r2, r4
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff3b 	bl	8006ffe <__multiply>
 8007188:	4639      	mov	r1, r7
 800718a:	4681      	mov	r9, r0
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fe8e 	bl	8006eae <_Bfree>
 8007192:	464f      	mov	r7, r9
 8007194:	106d      	asrs	r5, r5, #1
 8007196:	d00c      	beq.n	80071b2 <__pow5mult+0x92>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	b108      	cbz	r0, 80071a0 <__pow5mult+0x80>
 800719c:	4604      	mov	r4, r0
 800719e:	e7ec      	b.n	800717a <__pow5mult+0x5a>
 80071a0:	4622      	mov	r2, r4
 80071a2:	4621      	mov	r1, r4
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff ff2a 	bl	8006ffe <__multiply>
 80071aa:	6020      	str	r0, [r4, #0]
 80071ac:	f8c0 8000 	str.w	r8, [r0]
 80071b0:	e7f4      	b.n	800719c <__pow5mult+0x7c>
 80071b2:	4638      	mov	r0, r7
 80071b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b8:	08007fa0 	.word	0x08007fa0

080071bc <__lshift>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071c6:	6926      	ldr	r6, [r4, #16]
 80071c8:	6849      	ldr	r1, [r1, #4]
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	4456      	add	r6, sl
 80071ce:	4607      	mov	r7, r0
 80071d0:	4691      	mov	r9, r2
 80071d2:	1c75      	adds	r5, r6, #1
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	da02      	bge.n	80071de <__lshift+0x22>
 80071d8:	3101      	adds	r1, #1
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	e7fa      	b.n	80071d4 <__lshift+0x18>
 80071de:	4638      	mov	r0, r7
 80071e0:	f7ff fe30 	bl	8006e44 <_Balloc>
 80071e4:	2300      	movs	r3, #0
 80071e6:	4680      	mov	r8, r0
 80071e8:	f100 0114 	add.w	r1, r0, #20
 80071ec:	461a      	mov	r2, r3
 80071ee:	4553      	cmp	r3, sl
 80071f0:	da03      	bge.n	80071fa <__lshift+0x3e>
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80071f6:	3301      	adds	r3, #1
 80071f8:	e7f9      	b.n	80071ee <__lshift+0x32>
 80071fa:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80071fe:	6920      	ldr	r0, [r4, #16]
 8007200:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007204:	f019 091f 	ands.w	r9, r9, #31
 8007208:	f104 0114 	add.w	r1, r4, #20
 800720c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007210:	d014      	beq.n	800723c <__lshift+0x80>
 8007212:	f1c9 0c20 	rsb	ip, r9, #32
 8007216:	2200      	movs	r2, #0
 8007218:	6808      	ldr	r0, [r1, #0]
 800721a:	fa00 f009 	lsl.w	r0, r0, r9
 800721e:	4302      	orrs	r2, r0
 8007220:	469a      	mov	sl, r3
 8007222:	f843 2b04 	str.w	r2, [r3], #4
 8007226:	f851 2b04 	ldr.w	r2, [r1], #4
 800722a:	458e      	cmp	lr, r1
 800722c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007230:	d8f2      	bhi.n	8007218 <__lshift+0x5c>
 8007232:	f8ca 2004 	str.w	r2, [sl, #4]
 8007236:	b142      	cbz	r2, 800724a <__lshift+0x8e>
 8007238:	1cb5      	adds	r5, r6, #2
 800723a:	e006      	b.n	800724a <__lshift+0x8e>
 800723c:	3b04      	subs	r3, #4
 800723e:	f851 2b04 	ldr.w	r2, [r1], #4
 8007242:	f843 2f04 	str.w	r2, [r3, #4]!
 8007246:	458e      	cmp	lr, r1
 8007248:	d8f9      	bhi.n	800723e <__lshift+0x82>
 800724a:	3d01      	subs	r5, #1
 800724c:	4638      	mov	r0, r7
 800724e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007252:	4621      	mov	r1, r4
 8007254:	f7ff fe2b 	bl	8006eae <_Bfree>
 8007258:	4640      	mov	r0, r8
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800725e <__mcmp>:
 800725e:	6903      	ldr	r3, [r0, #16]
 8007260:	690a      	ldr	r2, [r1, #16]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	b510      	push	{r4, lr}
 8007266:	d111      	bne.n	800728c <__mcmp+0x2e>
 8007268:	0092      	lsls	r2, r2, #2
 800726a:	3014      	adds	r0, #20
 800726c:	3114      	adds	r1, #20
 800726e:	1883      	adds	r3, r0, r2
 8007270:	440a      	add	r2, r1
 8007272:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007276:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800727a:	428c      	cmp	r4, r1
 800727c:	d002      	beq.n	8007284 <__mcmp+0x26>
 800727e:	d307      	bcc.n	8007290 <__mcmp+0x32>
 8007280:	2001      	movs	r0, #1
 8007282:	bd10      	pop	{r4, pc}
 8007284:	4298      	cmp	r0, r3
 8007286:	d3f4      	bcc.n	8007272 <__mcmp+0x14>
 8007288:	2000      	movs	r0, #0
 800728a:	bd10      	pop	{r4, pc}
 800728c:	4618      	mov	r0, r3
 800728e:	bd10      	pop	{r4, pc}
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	bd10      	pop	{r4, pc}

08007296 <__mdiff>:
 8007296:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729a:	460c      	mov	r4, r1
 800729c:	4607      	mov	r7, r0
 800729e:	4611      	mov	r1, r2
 80072a0:	4620      	mov	r0, r4
 80072a2:	4615      	mov	r5, r2
 80072a4:	f7ff ffdb 	bl	800725e <__mcmp>
 80072a8:	1e06      	subs	r6, r0, #0
 80072aa:	d108      	bne.n	80072be <__mdiff+0x28>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff fdc8 	bl	8006e44 <_Balloc>
 80072b4:	2301      	movs	r3, #1
 80072b6:	6103      	str	r3, [r0, #16]
 80072b8:	6146      	str	r6, [r0, #20]
 80072ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072be:	bfbc      	itt	lt
 80072c0:	4623      	movlt	r3, r4
 80072c2:	462c      	movlt	r4, r5
 80072c4:	4638      	mov	r0, r7
 80072c6:	6861      	ldr	r1, [r4, #4]
 80072c8:	bfba      	itte	lt
 80072ca:	461d      	movlt	r5, r3
 80072cc:	2601      	movlt	r6, #1
 80072ce:	2600      	movge	r6, #0
 80072d0:	f7ff fdb8 	bl	8006e44 <_Balloc>
 80072d4:	692b      	ldr	r3, [r5, #16]
 80072d6:	60c6      	str	r6, [r0, #12]
 80072d8:	6926      	ldr	r6, [r4, #16]
 80072da:	f105 0914 	add.w	r9, r5, #20
 80072de:	3414      	adds	r4, #20
 80072e0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80072e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80072e8:	f100 0514 	add.w	r5, r0, #20
 80072ec:	f04f 0c00 	mov.w	ip, #0
 80072f0:	f854 3b04 	ldr.w	r3, [r4], #4
 80072f4:	f859 2b04 	ldr.w	r2, [r9], #4
 80072f8:	fa1c f183 	uxtah	r1, ip, r3
 80072fc:	fa1f fe82 	uxth.w	lr, r2
 8007300:	0c12      	lsrs	r2, r2, #16
 8007302:	ebce 0101 	rsb	r1, lr, r1
 8007306:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800730a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800730e:	b289      	uxth	r1, r1
 8007310:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007314:	45c8      	cmp	r8, r9
 8007316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800731a:	46a6      	mov	lr, r4
 800731c:	f845 3b04 	str.w	r3, [r5], #4
 8007320:	d8e6      	bhi.n	80072f0 <__mdiff+0x5a>
 8007322:	45be      	cmp	lr, r7
 8007324:	d20e      	bcs.n	8007344 <__mdiff+0xae>
 8007326:	f85e 1b04 	ldr.w	r1, [lr], #4
 800732a:	fa1c f281 	uxtah	r2, ip, r1
 800732e:	1413      	asrs	r3, r2, #16
 8007330:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8007334:	b292      	uxth	r2, r2
 8007336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800733a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800733e:	f845 2b04 	str.w	r2, [r5], #4
 8007342:	e7ee      	b.n	8007322 <__mdiff+0x8c>
 8007344:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007348:	b90b      	cbnz	r3, 800734e <__mdiff+0xb8>
 800734a:	3e01      	subs	r6, #1
 800734c:	e7fa      	b.n	8007344 <__mdiff+0xae>
 800734e:	6106      	str	r6, [r0, #16]
 8007350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007354 <__d2b>:
 8007354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007358:	460e      	mov	r6, r1
 800735a:	2101      	movs	r1, #1
 800735c:	ec59 8b10 	vmov	r8, r9, d0
 8007360:	4615      	mov	r5, r2
 8007362:	f7ff fd6f 	bl	8006e44 <_Balloc>
 8007366:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800736a:	4607      	mov	r7, r0
 800736c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007370:	b10c      	cbz	r4, 8007376 <__d2b+0x22>
 8007372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	f1b8 0f00 	cmp.w	r8, #0
 800737c:	d019      	beq.n	80073b2 <__d2b+0x5e>
 800737e:	a802      	add	r0, sp, #8
 8007380:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007384:	f7ff fe05 	bl	8006f92 <__lo0bits>
 8007388:	9b00      	ldr	r3, [sp, #0]
 800738a:	b148      	cbz	r0, 80073a0 <__d2b+0x4c>
 800738c:	9a01      	ldr	r2, [sp, #4]
 800738e:	f1c0 0120 	rsb	r1, r0, #32
 8007392:	fa02 f101 	lsl.w	r1, r2, r1
 8007396:	430b      	orrs	r3, r1
 8007398:	40c2      	lsrs	r2, r0
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	e000      	b.n	80073a2 <__d2b+0x4e>
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf14      	ite	ne
 80073aa:	2102      	movne	r1, #2
 80073ac:	2101      	moveq	r1, #1
 80073ae:	6139      	str	r1, [r7, #16]
 80073b0:	e007      	b.n	80073c2 <__d2b+0x6e>
 80073b2:	a801      	add	r0, sp, #4
 80073b4:	f7ff fded 	bl	8006f92 <__lo0bits>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	2101      	movs	r1, #1
 80073be:	6139      	str	r1, [r7, #16]
 80073c0:	3020      	adds	r0, #32
 80073c2:	b134      	cbz	r4, 80073d2 <__d2b+0x7e>
 80073c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80073c8:	4404      	add	r4, r0
 80073ca:	6034      	str	r4, [r6, #0]
 80073cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073d0:	e009      	b.n	80073e6 <__d2b+0x92>
 80073d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80073d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073da:	6030      	str	r0, [r6, #0]
 80073dc:	6918      	ldr	r0, [r3, #16]
 80073de:	f7ff fdb8 	bl	8006f52 <__hi0bits>
 80073e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80073e6:	6028      	str	r0, [r5, #0]
 80073e8:	4638      	mov	r0, r7
 80073ea:	b003      	add	sp, #12
 80073ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080073f0 <_realloc_r>:
 80073f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	4681      	mov	r9, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b929      	cbnz	r1, 8007406 <_realloc_r+0x16>
 80073fa:	4611      	mov	r1, r2
 80073fc:	b003      	add	sp, #12
 80073fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007402:	f7ff bad7 	b.w	80069b4 <_malloc_r>
 8007406:	9201      	str	r2, [sp, #4]
 8007408:	f7ff fd1a 	bl	8006e40 <__malloc_lock>
 800740c:	9a01      	ldr	r2, [sp, #4]
 800740e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8007412:	f102 080b 	add.w	r8, r2, #11
 8007416:	f1b8 0f16 	cmp.w	r8, #22
 800741a:	f1a4 0b08 	sub.w	fp, r4, #8
 800741e:	f02e 0503 	bic.w	r5, lr, #3
 8007422:	d903      	bls.n	800742c <_realloc_r+0x3c>
 8007424:	f038 0807 	bics.w	r8, r8, #7
 8007428:	d502      	bpl.n	8007430 <_realloc_r+0x40>
 800742a:	e003      	b.n	8007434 <_realloc_r+0x44>
 800742c:	f04f 0810 	mov.w	r8, #16
 8007430:	4590      	cmp	r8, r2
 8007432:	d204      	bcs.n	800743e <_realloc_r+0x4e>
 8007434:	230c      	movs	r3, #12
 8007436:	f8c9 3000 	str.w	r3, [r9]
 800743a:	2000      	movs	r0, #0
 800743c:	e17d      	b.n	800773a <_realloc_r+0x34a>
 800743e:	45a8      	cmp	r8, r5
 8007440:	f340 8150 	ble.w	80076e4 <_realloc_r+0x2f4>
 8007444:	4ba6      	ldr	r3, [pc, #664]	; (80076e0 <_realloc_r+0x2f0>)
 8007446:	6898      	ldr	r0, [r3, #8]
 8007448:	eb0b 0105 	add.w	r1, fp, r5
 800744c:	4281      	cmp	r1, r0
 800744e:	684f      	ldr	r7, [r1, #4]
 8007450:	d005      	beq.n	800745e <_realloc_r+0x6e>
 8007452:	f027 0601 	bic.w	r6, r7, #1
 8007456:	440e      	add	r6, r1
 8007458:	6876      	ldr	r6, [r6, #4]
 800745a:	07f6      	lsls	r6, r6, #31
 800745c:	d426      	bmi.n	80074ac <_realloc_r+0xbc>
 800745e:	f027 0a03 	bic.w	sl, r7, #3
 8007462:	4281      	cmp	r1, r0
 8007464:	eb05 070a 	add.w	r7, r5, sl
 8007468:	d118      	bne.n	800749c <_realloc_r+0xac>
 800746a:	f108 0610 	add.w	r6, r8, #16
 800746e:	42b7      	cmp	r7, r6
 8007470:	db1f      	blt.n	80074b2 <_realloc_r+0xc2>
 8007472:	eb0b 0008 	add.w	r0, fp, r8
 8007476:	ebc8 0707 	rsb	r7, r8, r7
 800747a:	f047 0701 	orr.w	r7, r7, #1
 800747e:	6098      	str	r0, [r3, #8]
 8007480:	6047      	str	r7, [r0, #4]
 8007482:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	ea43 0308 	orr.w	r3, r3, r8
 800748e:	4648      	mov	r0, r9
 8007490:	f844 3c04 	str.w	r3, [r4, #-4]
 8007494:	f7ff fcd5 	bl	8006e42 <__malloc_unlock>
 8007498:	4620      	mov	r0, r4
 800749a:	e14e      	b.n	800773a <_realloc_r+0x34a>
 800749c:	45b8      	cmp	r8, r7
 800749e:	dc08      	bgt.n	80074b2 <_realloc_r+0xc2>
 80074a0:	68cb      	ldr	r3, [r1, #12]
 80074a2:	688a      	ldr	r2, [r1, #8]
 80074a4:	463d      	mov	r5, r7
 80074a6:	60d3      	str	r3, [r2, #12]
 80074a8:	609a      	str	r2, [r3, #8]
 80074aa:	e11b      	b.n	80076e4 <_realloc_r+0x2f4>
 80074ac:	f04f 0a00 	mov.w	sl, #0
 80074b0:	4651      	mov	r1, sl
 80074b2:	f01e 0f01 	tst.w	lr, #1
 80074b6:	f040 80c3 	bne.w	8007640 <_realloc_r+0x250>
 80074ba:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80074be:	ebc7 070b 	rsb	r7, r7, fp
 80074c2:	687e      	ldr	r6, [r7, #4]
 80074c4:	f026 0603 	bic.w	r6, r6, #3
 80074c8:	442e      	add	r6, r5
 80074ca:	2900      	cmp	r1, #0
 80074cc:	f000 8083 	beq.w	80075d6 <_realloc_r+0x1e6>
 80074d0:	4281      	cmp	r1, r0
 80074d2:	44b2      	add	sl, r6
 80074d4:	d147      	bne.n	8007566 <_realloc_r+0x176>
 80074d6:	f108 0110 	add.w	r1, r8, #16
 80074da:	458a      	cmp	sl, r1
 80074dc:	db7b      	blt.n	80075d6 <_realloc_r+0x1e6>
 80074de:	463e      	mov	r6, r7
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80074e6:	60ca      	str	r2, [r1, #12]
 80074e8:	6091      	str	r1, [r2, #8]
 80074ea:	1f2a      	subs	r2, r5, #4
 80074ec:	2a24      	cmp	r2, #36	; 0x24
 80074ee:	d825      	bhi.n	800753c <_realloc_r+0x14c>
 80074f0:	2a13      	cmp	r2, #19
 80074f2:	d91b      	bls.n	800752c <_realloc_r+0x13c>
 80074f4:	6821      	ldr	r1, [r4, #0]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	6861      	ldr	r1, [r4, #4]
 80074fa:	60f9      	str	r1, [r7, #12]
 80074fc:	2a1b      	cmp	r2, #27
 80074fe:	d803      	bhi.n	8007508 <_realloc_r+0x118>
 8007500:	f107 0210 	add.w	r2, r7, #16
 8007504:	3408      	adds	r4, #8
 8007506:	e012      	b.n	800752e <_realloc_r+0x13e>
 8007508:	68a1      	ldr	r1, [r4, #8]
 800750a:	6139      	str	r1, [r7, #16]
 800750c:	68e1      	ldr	r1, [r4, #12]
 800750e:	6179      	str	r1, [r7, #20]
 8007510:	2a24      	cmp	r2, #36	; 0x24
 8007512:	bf01      	itttt	eq
 8007514:	6922      	ldreq	r2, [r4, #16]
 8007516:	61ba      	streq	r2, [r7, #24]
 8007518:	6961      	ldreq	r1, [r4, #20]
 800751a:	61f9      	streq	r1, [r7, #28]
 800751c:	bf19      	ittee	ne
 800751e:	f107 0218 	addne.w	r2, r7, #24
 8007522:	3410      	addne	r4, #16
 8007524:	f107 0220 	addeq.w	r2, r7, #32
 8007528:	3418      	addeq	r4, #24
 800752a:	e000      	b.n	800752e <_realloc_r+0x13e>
 800752c:	4632      	mov	r2, r6
 800752e:	6821      	ldr	r1, [r4, #0]
 8007530:	6011      	str	r1, [r2, #0]
 8007532:	6861      	ldr	r1, [r4, #4]
 8007534:	6051      	str	r1, [r2, #4]
 8007536:	68a1      	ldr	r1, [r4, #8]
 8007538:	6091      	str	r1, [r2, #8]
 800753a:	e005      	b.n	8007548 <_realloc_r+0x158>
 800753c:	4621      	mov	r1, r4
 800753e:	4630      	mov	r0, r6
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	f7ff fc62 	bl	8006e0a <memmove>
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	eb07 0208 	add.w	r2, r7, r8
 800754c:	ebc8 0a0a 	rsb	sl, r8, sl
 8007550:	609a      	str	r2, [r3, #8]
 8007552:	f04a 0301 	orr.w	r3, sl, #1
 8007556:	6053      	str	r3, [r2, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	ea43 0308 	orr.w	r3, r3, r8
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	e0b6      	b.n	80076d4 <_realloc_r+0x2e4>
 8007566:	45d0      	cmp	r8, sl
 8007568:	dc35      	bgt.n	80075d6 <_realloc_r+0x1e6>
 800756a:	68cb      	ldr	r3, [r1, #12]
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	4638      	mov	r0, r7
 8007570:	60d3      	str	r3, [r2, #12]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	60d3      	str	r3, [r2, #12]
 800757c:	609a      	str	r2, [r3, #8]
 800757e:	1f2a      	subs	r2, r5, #4
 8007580:	2a24      	cmp	r2, #36	; 0x24
 8007582:	d823      	bhi.n	80075cc <_realloc_r+0x1dc>
 8007584:	2a13      	cmp	r2, #19
 8007586:	d91a      	bls.n	80075be <_realloc_r+0x1ce>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	60bb      	str	r3, [r7, #8]
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	2a1b      	cmp	r2, #27
 8007592:	d803      	bhi.n	800759c <_realloc_r+0x1ac>
 8007594:	f107 0010 	add.w	r0, r7, #16
 8007598:	3408      	adds	r4, #8
 800759a:	e010      	b.n	80075be <_realloc_r+0x1ce>
 800759c:	68a3      	ldr	r3, [r4, #8]
 800759e:	613b      	str	r3, [r7, #16]
 80075a0:	68e3      	ldr	r3, [r4, #12]
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	2a24      	cmp	r2, #36	; 0x24
 80075a6:	bf01      	itttt	eq
 80075a8:	6923      	ldreq	r3, [r4, #16]
 80075aa:	61bb      	streq	r3, [r7, #24]
 80075ac:	6963      	ldreq	r3, [r4, #20]
 80075ae:	61fb      	streq	r3, [r7, #28]
 80075b0:	bf19      	ittee	ne
 80075b2:	f107 0018 	addne.w	r0, r7, #24
 80075b6:	3410      	addne	r4, #16
 80075b8:	f107 0020 	addeq.w	r0, r7, #32
 80075bc:	3418      	addeq	r4, #24
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	6043      	str	r3, [r0, #4]
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	6083      	str	r3, [r0, #8]
 80075ca:	e002      	b.n	80075d2 <_realloc_r+0x1e2>
 80075cc:	4621      	mov	r1, r4
 80075ce:	f7ff fc1c 	bl	8006e0a <memmove>
 80075d2:	4655      	mov	r5, sl
 80075d4:	e02e      	b.n	8007634 <_realloc_r+0x244>
 80075d6:	45b0      	cmp	r8, r6
 80075d8:	dc32      	bgt.n	8007640 <_realloc_r+0x250>
 80075da:	4638      	mov	r0, r7
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80075e2:	60d3      	str	r3, [r2, #12]
 80075e4:	609a      	str	r2, [r3, #8]
 80075e6:	1f2a      	subs	r2, r5, #4
 80075e8:	2a24      	cmp	r2, #36	; 0x24
 80075ea:	d825      	bhi.n	8007638 <_realloc_r+0x248>
 80075ec:	2a13      	cmp	r2, #19
 80075ee:	d91a      	bls.n	8007626 <_realloc_r+0x236>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	60bb      	str	r3, [r7, #8]
 80075f4:	6863      	ldr	r3, [r4, #4]
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	2a1b      	cmp	r2, #27
 80075fa:	d803      	bhi.n	8007604 <_realloc_r+0x214>
 80075fc:	f107 0010 	add.w	r0, r7, #16
 8007600:	3408      	adds	r4, #8
 8007602:	e010      	b.n	8007626 <_realloc_r+0x236>
 8007604:	68a3      	ldr	r3, [r4, #8]
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	68e3      	ldr	r3, [r4, #12]
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	2a24      	cmp	r2, #36	; 0x24
 800760e:	bf01      	itttt	eq
 8007610:	6923      	ldreq	r3, [r4, #16]
 8007612:	61bb      	streq	r3, [r7, #24]
 8007614:	6963      	ldreq	r3, [r4, #20]
 8007616:	61fb      	streq	r3, [r7, #28]
 8007618:	bf19      	ittee	ne
 800761a:	f107 0018 	addne.w	r0, r7, #24
 800761e:	3410      	addne	r4, #16
 8007620:	f107 0020 	addeq.w	r0, r7, #32
 8007624:	3418      	addeq	r4, #24
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	6043      	str	r3, [r0, #4]
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	6083      	str	r3, [r0, #8]
 8007632:	4635      	mov	r5, r6
 8007634:	46bb      	mov	fp, r7
 8007636:	e055      	b.n	80076e4 <_realloc_r+0x2f4>
 8007638:	4621      	mov	r1, r4
 800763a:	f7ff fbe6 	bl	8006e0a <memmove>
 800763e:	e7f8      	b.n	8007632 <_realloc_r+0x242>
 8007640:	4611      	mov	r1, r2
 8007642:	4648      	mov	r0, r9
 8007644:	f7ff f9b6 	bl	80069b4 <_malloc_r>
 8007648:	4606      	mov	r6, r0
 800764a:	2800      	cmp	r0, #0
 800764c:	d042      	beq.n	80076d4 <_realloc_r+0x2e4>
 800764e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	f1a0 0208 	sub.w	r2, r0, #8
 800765a:	445b      	add	r3, fp
 800765c:	429a      	cmp	r2, r3
 800765e:	d105      	bne.n	800766c <_realloc_r+0x27c>
 8007660:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	441d      	add	r5, r3
 800766a:	e03b      	b.n	80076e4 <_realloc_r+0x2f4>
 800766c:	1f2a      	subs	r2, r5, #4
 800766e:	2a24      	cmp	r2, #36	; 0x24
 8007670:	d829      	bhi.n	80076c6 <_realloc_r+0x2d6>
 8007672:	2a13      	cmp	r2, #19
 8007674:	d91e      	bls.n	80076b4 <_realloc_r+0x2c4>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	6043      	str	r3, [r0, #4]
 800767e:	2a1b      	cmp	r2, #27
 8007680:	d804      	bhi.n	800768c <_realloc_r+0x29c>
 8007682:	f100 0308 	add.w	r3, r0, #8
 8007686:	f104 0208 	add.w	r2, r4, #8
 800768a:	e015      	b.n	80076b8 <_realloc_r+0x2c8>
 800768c:	68a3      	ldr	r3, [r4, #8]
 800768e:	6083      	str	r3, [r0, #8]
 8007690:	68e3      	ldr	r3, [r4, #12]
 8007692:	60c3      	str	r3, [r0, #12]
 8007694:	2a24      	cmp	r2, #36	; 0x24
 8007696:	bf01      	itttt	eq
 8007698:	6923      	ldreq	r3, [r4, #16]
 800769a:	6103      	streq	r3, [r0, #16]
 800769c:	6961      	ldreq	r1, [r4, #20]
 800769e:	6141      	streq	r1, [r0, #20]
 80076a0:	bf19      	ittee	ne
 80076a2:	f100 0310 	addne.w	r3, r0, #16
 80076a6:	f104 0210 	addne.w	r2, r4, #16
 80076aa:	f100 0318 	addeq.w	r3, r0, #24
 80076ae:	f104 0218 	addeq.w	r2, r4, #24
 80076b2:	e001      	b.n	80076b8 <_realloc_r+0x2c8>
 80076b4:	4603      	mov	r3, r0
 80076b6:	4622      	mov	r2, r4
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	6019      	str	r1, [r3, #0]
 80076bc:	6851      	ldr	r1, [r2, #4]
 80076be:	6059      	str	r1, [r3, #4]
 80076c0:	6892      	ldr	r2, [r2, #8]
 80076c2:	609a      	str	r2, [r3, #8]
 80076c4:	e002      	b.n	80076cc <_realloc_r+0x2dc>
 80076c6:	4621      	mov	r1, r4
 80076c8:	f7ff fb9f 	bl	8006e0a <memmove>
 80076cc:	4621      	mov	r1, r4
 80076ce:	4648      	mov	r0, r9
 80076d0:	f7fe fecc 	bl	800646c <_free_r>
 80076d4:	4648      	mov	r0, r9
 80076d6:	f7ff fbb4 	bl	8006e42 <__malloc_unlock>
 80076da:	4630      	mov	r0, r6
 80076dc:	e02d      	b.n	800773a <_realloc_r+0x34a>
 80076de:	bf00      	nop
 80076e0:	20000154 	.word	0x20000154
 80076e4:	ebc8 0205 	rsb	r2, r8, r5
 80076e8:	2a0f      	cmp	r2, #15
 80076ea:	f8db 3004 	ldr.w	r3, [fp, #4]
 80076ee:	d914      	bls.n	800771a <_realloc_r+0x32a>
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	eb0b 0108 	add.w	r1, fp, r8
 80076f8:	ea43 0308 	orr.w	r3, r3, r8
 80076fc:	f8cb 3004 	str.w	r3, [fp, #4]
 8007700:	f042 0301 	orr.w	r3, r2, #1
 8007704:	440a      	add	r2, r1
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	6853      	ldr	r3, [r2, #4]
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6053      	str	r3, [r2, #4]
 8007710:	3108      	adds	r1, #8
 8007712:	4648      	mov	r0, r9
 8007714:	f7fe feaa 	bl	800646c <_free_r>
 8007718:	e00a      	b.n	8007730 <_realloc_r+0x340>
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	432b      	orrs	r3, r5
 8007720:	eb0b 0205 	add.w	r2, fp, r5
 8007724:	f8cb 3004 	str.w	r3, [fp, #4]
 8007728:	6853      	ldr	r3, [r2, #4]
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	6053      	str	r3, [r2, #4]
 8007730:	4648      	mov	r0, r9
 8007732:	f7ff fb86 	bl	8006e42 <__malloc_unlock>
 8007736:	f10b 0008 	add.w	r0, fp, #8
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007740 <_sbrk_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4c06      	ldr	r4, [pc, #24]	; (800775c <_sbrk_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4605      	mov	r5, r0
 8007748:	4608      	mov	r0, r1
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	f7fb fcdc 	bl	8003108 <_sbrk>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_sbrk_r+0x1a>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	b103      	cbz	r3, 800775a <_sbrk_r+0x1a>
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20000718 	.word	0x20000718

08007760 <__sread>:
 8007760:	b510      	push	{r4, lr}
 8007762:	460c      	mov	r4, r1
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	f000 fa14 	bl	8007b94 <_read_r>
 800776c:	2800      	cmp	r0, #0
 800776e:	bfab      	itete	ge
 8007770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007772:	89a3      	ldrhlt	r3, [r4, #12]
 8007774:	181b      	addge	r3, r3, r0
 8007776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800777a:	bfac      	ite	ge
 800777c:	6563      	strge	r3, [r4, #84]	; 0x54
 800777e:	81a3      	strhlt	r3, [r4, #12]
 8007780:	bd10      	pop	{r4, pc}

08007782 <__swrite>:
 8007782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007786:	461f      	mov	r7, r3
 8007788:	898b      	ldrh	r3, [r1, #12]
 800778a:	05db      	lsls	r3, r3, #23
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	4616      	mov	r6, r2
 8007792:	d505      	bpl.n	80077a0 <__swrite+0x1e>
 8007794:	2302      	movs	r3, #2
 8007796:	2200      	movs	r2, #0
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	f000 f9e8 	bl	8007b70 <_lseek_r>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	4632      	mov	r2, r6
 80077ae:	463b      	mov	r3, r7
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	f000 b8c7 	b.w	8007948 <_write_r>

080077ba <__sseek>:
 80077ba:	b510      	push	{r4, lr}
 80077bc:	460c      	mov	r4, r1
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 f9d5 	bl	8007b70 <_lseek_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	bf15      	itete	ne
 80077cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077d6:	81a3      	strheq	r3, [r4, #12]
 80077d8:	bf18      	it	ne
 80077da:	81a3      	strhne	r3, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}

080077de <__sclose>:
 80077de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e2:	f000 b8f1 	b.w	80079c8 <_close_r>

080077e6 <__ssprint_r>:
 80077e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	4693      	mov	fp, r2
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	4681      	mov	r9, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	b34a      	cbz	r2, 8007848 <__ssprint_r+0x62>
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8db a000 	ldr.w	sl, [fp]
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	461f      	mov	r7, r3
 80077fe:	e006      	b.n	800780e <__ssprint_r+0x28>
 8007800:	f8da 3000 	ldr.w	r3, [sl]
 8007804:	f8da 7004 	ldr.w	r7, [sl, #4]
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f10a 0a08 	add.w	sl, sl, #8
 800780e:	2f00      	cmp	r7, #0
 8007810:	d0f6      	beq.n	8007800 <__ssprint_r+0x1a>
 8007812:	68a6      	ldr	r6, [r4, #8]
 8007814:	42b7      	cmp	r7, r6
 8007816:	d360      	bcc.n	80078da <__ssprint_r+0xf4>
 8007818:	89a0      	ldrh	r0, [r4, #12]
 800781a:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800781e:	d117      	bne.n	8007850 <__ssprint_r+0x6a>
 8007820:	42b7      	cmp	r7, r6
 8007822:	d35a      	bcc.n	80078da <__ssprint_r+0xf4>
 8007824:	4632      	mov	r2, r6
 8007826:	9901      	ldr	r1, [sp, #4]
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	f7ff faee 	bl	8006e0a <memmove>
 800782e:	68a2      	ldr	r2, [r4, #8]
 8007830:	1b92      	subs	r2, r2, r6
 8007832:	60a2      	str	r2, [r4, #8]
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	4416      	add	r6, r2
 8007838:	f8db 2008 	ldr.w	r2, [fp, #8]
 800783c:	6026      	str	r6, [r4, #0]
 800783e:	1bd7      	subs	r7, r2, r7
 8007840:	f8cb 7008 	str.w	r7, [fp, #8]
 8007844:	2f00      	cmp	r7, #0
 8007846:	d1db      	bne.n	8007800 <__ssprint_r+0x1a>
 8007848:	2000      	movs	r0, #0
 800784a:	f8cb 0004 	str.w	r0, [fp, #4]
 800784e:	e046      	b.n	80078de <__ssprint_r+0xf8>
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	6921      	ldr	r1, [r4, #16]
 8007854:	ebc1 0805 	rsb	r8, r1, r5
 8007858:	f108 0201 	add.w	r2, r8, #1
 800785c:	6965      	ldr	r5, [r4, #20]
 800785e:	443a      	add	r2, r7
 8007860:	2302      	movs	r3, #2
 8007862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007866:	fb95 f5f3 	sdiv	r5, r5, r3
 800786a:	4295      	cmp	r5, r2
 800786c:	bf38      	it	cc
 800786e:	4615      	movcc	r5, r2
 8007870:	0543      	lsls	r3, r0, #21
 8007872:	d510      	bpl.n	8007896 <__ssprint_r+0xb0>
 8007874:	4629      	mov	r1, r5
 8007876:	4648      	mov	r0, r9
 8007878:	f7ff f89c 	bl	80069b4 <_malloc_r>
 800787c:	4606      	mov	r6, r0
 800787e:	b1a0      	cbz	r0, 80078aa <__ssprint_r+0xc4>
 8007880:	4642      	mov	r2, r8
 8007882:	6921      	ldr	r1, [r4, #16]
 8007884:	f7ff fab6 	bl	8006df4 <memcpy>
 8007888:	89a2      	ldrh	r2, [r4, #12]
 800788a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800788e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007892:	81a2      	strh	r2, [r4, #12]
 8007894:	e018      	b.n	80078c8 <__ssprint_r+0xe2>
 8007896:	462a      	mov	r2, r5
 8007898:	4648      	mov	r0, r9
 800789a:	f7ff fda9 	bl	80073f0 <_realloc_r>
 800789e:	4606      	mov	r6, r0
 80078a0:	b990      	cbnz	r0, 80078c8 <__ssprint_r+0xe2>
 80078a2:	6921      	ldr	r1, [r4, #16]
 80078a4:	4648      	mov	r0, r9
 80078a6:	f7fe fde1 	bl	800646c <_free_r>
 80078aa:	220c      	movs	r2, #12
 80078ac:	f8c9 2000 	str.w	r2, [r9]
 80078b0:	89a2      	ldrh	r2, [r4, #12]
 80078b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b6:	81a2      	strh	r2, [r4, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8cb 2008 	str.w	r2, [fp, #8]
 80078be:	f8cb 2004 	str.w	r2, [fp, #4]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295
 80078c6:	e00a      	b.n	80078de <__ssprint_r+0xf8>
 80078c8:	6126      	str	r6, [r4, #16]
 80078ca:	6165      	str	r5, [r4, #20]
 80078cc:	4446      	add	r6, r8
 80078ce:	ebc8 0505 	rsb	r5, r8, r5
 80078d2:	6026      	str	r6, [r4, #0]
 80078d4:	60a5      	str	r5, [r4, #8]
 80078d6:	463e      	mov	r6, r7
 80078d8:	e7a2      	b.n	8007820 <__ssprint_r+0x3a>
 80078da:	463e      	mov	r6, r7
 80078dc:	e7a2      	b.n	8007824 <__ssprint_r+0x3e>
 80078de:	b003      	add	sp, #12
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078e4 <__sprint_r>:
 80078e4:	6893      	ldr	r3, [r2, #8]
 80078e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ea:	4680      	mov	r8, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	4614      	mov	r4, r2
 80078f0:	b91b      	cbnz	r3, 80078fa <__sprint_r+0x16>
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	4618      	mov	r0, r3
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80078fc:	049d      	lsls	r5, r3, #18
 80078fe:	d51c      	bpl.n	800793a <__sprint_r+0x56>
 8007900:	6815      	ldr	r5, [r2, #0]
 8007902:	68a0      	ldr	r0, [r4, #8]
 8007904:	3508      	adds	r5, #8
 8007906:	b1d0      	cbz	r0, 800793e <__sprint_r+0x5a>
 8007908:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800790c:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8007910:	08b6      	lsrs	r6, r6, #2
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	454e      	cmp	r6, r9
 8007918:	dd0a      	ble.n	8007930 <__sprint_r+0x4c>
 800791a:	463a      	mov	r2, r7
 800791c:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8007920:	4640      	mov	r0, r8
 8007922:	f000 f8f2 	bl	8007b0a <_fputwc_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d009      	beq.n	800793e <__sprint_r+0x5a>
 800792a:	f109 0901 	add.w	r9, r9, #1
 800792e:	e7f2      	b.n	8007916 <__sprint_r+0x32>
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8007936:	60a6      	str	r6, [r4, #8]
 8007938:	e7e3      	b.n	8007902 <__sprint_r+0x1e>
 800793a:	f7fe fe55 	bl	80065e8 <__sfvwrite_r>
 800793e:	2300      	movs	r3, #0
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6063      	str	r3, [r4, #4]
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007948 <_write_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4c07      	ldr	r4, [pc, #28]	; (8007968 <_write_r+0x20>)
 800794c:	4605      	mov	r5, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fb fbac 	bl	80030b4 <_write>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_write_r+0x1e>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	b103      	cbz	r3, 8007966 <_write_r+0x1e>
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000718 	.word	0x20000718

0800796c <_calloc_r>:
 800796c:	b510      	push	{r4, lr}
 800796e:	4351      	muls	r1, r2
 8007970:	f7ff f820 	bl	80069b4 <_malloc_r>
 8007974:	4604      	mov	r4, r0
 8007976:	b320      	cbz	r0, 80079c2 <_calloc_r+0x56>
 8007978:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800797c:	f022 0203 	bic.w	r2, r2, #3
 8007980:	3a04      	subs	r2, #4
 8007982:	2a24      	cmp	r2, #36	; 0x24
 8007984:	d81a      	bhi.n	80079bc <_calloc_r+0x50>
 8007986:	2a13      	cmp	r2, #19
 8007988:	d912      	bls.n	80079b0 <_calloc_r+0x44>
 800798a:	2100      	movs	r1, #0
 800798c:	2a1b      	cmp	r2, #27
 800798e:	6001      	str	r1, [r0, #0]
 8007990:	6041      	str	r1, [r0, #4]
 8007992:	d802      	bhi.n	800799a <_calloc_r+0x2e>
 8007994:	f100 0308 	add.w	r3, r0, #8
 8007998:	e00b      	b.n	80079b2 <_calloc_r+0x46>
 800799a:	2a24      	cmp	r2, #36	; 0x24
 800799c:	6081      	str	r1, [r0, #8]
 800799e:	60c1      	str	r1, [r0, #12]
 80079a0:	bf11      	iteee	ne
 80079a2:	f100 0310 	addne.w	r3, r0, #16
 80079a6:	6101      	streq	r1, [r0, #16]
 80079a8:	f100 0318 	addeq.w	r3, r0, #24
 80079ac:	6141      	streq	r1, [r0, #20]
 80079ae:	e000      	b.n	80079b2 <_calloc_r+0x46>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	609a      	str	r2, [r3, #8]
 80079ba:	e002      	b.n	80079c2 <_calloc_r+0x56>
 80079bc:	2100      	movs	r1, #0
 80079be:	f7fb fc51 	bl	8003264 <memset>
 80079c2:	4620      	mov	r0, r4
 80079c4:	bd10      	pop	{r4, pc}
	...

080079c8 <_close_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4c06      	ldr	r4, [pc, #24]	; (80079e4 <_close_r+0x1c>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4605      	mov	r5, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	f7fb fba6 	bl	8003124 <_close>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_close_r+0x1a>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_close_r+0x1a>
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	20000718 	.word	0x20000718

080079e8 <_fclose_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	4605      	mov	r5, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	b909      	cbnz	r1, 80079f4 <_fclose_r+0xc>
 80079f0:	2000      	movs	r0, #0
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	b118      	cbz	r0, 80079fe <_fclose_r+0x16>
 80079f6:	6983      	ldr	r3, [r0, #24]
 80079f8:	b90b      	cbnz	r3, 80079fe <_fclose_r+0x16>
 80079fa:	f7fe fc6f 	bl	80062dc <__sinit>
 80079fe:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <_fclose_r+0x98>)
 8007a00:	429c      	cmp	r4, r3
 8007a02:	d101      	bne.n	8007a08 <_fclose_r+0x20>
 8007a04:	686c      	ldr	r4, [r5, #4]
 8007a06:	e008      	b.n	8007a1a <_fclose_r+0x32>
 8007a08:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <_fclose_r+0x9c>)
 8007a0a:	429c      	cmp	r4, r3
 8007a0c:	d101      	bne.n	8007a12 <_fclose_r+0x2a>
 8007a0e:	68ac      	ldr	r4, [r5, #8]
 8007a10:	e003      	b.n	8007a1a <_fclose_r+0x32>
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <_fclose_r+0xa0>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	bf08      	it	eq
 8007a18:	68ec      	ldreq	r4, [r5, #12]
 8007a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0e6      	beq.n	80079f0 <_fclose_r+0x8>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	f7fe fb5f 	bl	80060e8 <__sflush_r>
 8007a2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	b133      	cbz	r3, 8007a3e <_fclose_r+0x56>
 8007a30:	6a21      	ldr	r1, [r4, #32]
 8007a32:	4628      	mov	r0, r5
 8007a34:	4798      	blx	r3
 8007a36:	2800      	cmp	r0, #0
 8007a38:	bfb8      	it	lt
 8007a3a:	f04f 36ff 	movlt.w	r6, #4294967295
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	d503      	bpl.n	8007a4c <_fclose_r+0x64>
 8007a44:	6921      	ldr	r1, [r4, #16]
 8007a46:	4628      	mov	r0, r5
 8007a48:	f7fe fd10 	bl	800646c <_free_r>
 8007a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4e:	b141      	cbz	r1, 8007a62 <_fclose_r+0x7a>
 8007a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a54:	4299      	cmp	r1, r3
 8007a56:	d002      	beq.n	8007a5e <_fclose_r+0x76>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f7fe fd07 	bl	800646c <_free_r>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6363      	str	r3, [r4, #52]	; 0x34
 8007a62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a64:	b121      	cbz	r1, 8007a70 <_fclose_r+0x88>
 8007a66:	4628      	mov	r0, r5
 8007a68:	f7fe fd00 	bl	800646c <_free_r>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007a70:	f7fe fca4 	bl	80063bc <__sfp_lock_acquire>
 8007a74:	2300      	movs	r3, #0
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	f7fe fca1 	bl	80063be <__sfp_lock_release>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	08007e40 	.word	0x08007e40
 8007a84:	08007e60 	.word	0x08007e60
 8007a88:	08007e80 	.word	0x08007e80

08007a8c <__fputwc>:
 8007a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a90:	4680      	mov	r8, r0
 8007a92:	460e      	mov	r6, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	f7fe ff13 	bl	80068c0 <__locale_mb_cur_max>
 8007a9a:	2801      	cmp	r0, #1
 8007a9c:	d106      	bne.n	8007aac <__fputwc+0x20>
 8007a9e:	1e73      	subs	r3, r6, #1
 8007aa0:	2bfe      	cmp	r3, #254	; 0xfe
 8007aa2:	d803      	bhi.n	8007aac <__fputwc+0x20>
 8007aa4:	f88d 6004 	strb.w	r6, [sp, #4]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	e00e      	b.n	8007aca <__fputwc+0x3e>
 8007aac:	4632      	mov	r2, r6
 8007aae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007ab2:	a901      	add	r1, sp, #4
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	f000 f8dd 	bl	8007c74 <_wcrtomb_r>
 8007aba:	1c42      	adds	r2, r0, #1
 8007abc:	4605      	mov	r5, r0
 8007abe:	d104      	bne.n	8007aca <__fputwc+0x3e>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	e01c      	b.n	8007b04 <__fputwc+0x78>
 8007aca:	2700      	movs	r7, #0
 8007acc:	42af      	cmp	r7, r5
 8007ace:	d018      	beq.n	8007b02 <__fputwc+0x76>
 8007ad0:	ab01      	add	r3, sp, #4
 8007ad2:	5cf9      	ldrb	r1, [r7, r3]
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	60a3      	str	r3, [r4, #8]
 8007adc:	da04      	bge.n	8007ae8 <__fputwc+0x5c>
 8007ade:	69a2      	ldr	r2, [r4, #24]
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	db06      	blt.n	8007af2 <__fputwc+0x66>
 8007ae4:	290a      	cmp	r1, #10
 8007ae6:	d004      	beq.n	8007af2 <__fputwc+0x66>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	6022      	str	r2, [r4, #0]
 8007aee:	7019      	strb	r1, [r3, #0]
 8007af0:	e005      	b.n	8007afe <__fputwc+0x72>
 8007af2:	4622      	mov	r2, r4
 8007af4:	4640      	mov	r0, r8
 8007af6:	f000 f85f 	bl	8007bb8 <__swbuf_r>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	d002      	beq.n	8007b04 <__fputwc+0x78>
 8007afe:	3701      	adds	r7, #1
 8007b00:	e7e4      	b.n	8007acc <__fputwc+0x40>
 8007b02:	4630      	mov	r0, r6
 8007b04:	b002      	add	sp, #8
 8007b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b0a <_fputwc_r>:
 8007b0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8007b0e:	b410      	push	{r4}
 8007b10:	049c      	lsls	r4, r3, #18
 8007b12:	d406      	bmi.n	8007b22 <_fputwc_r+0x18>
 8007b14:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8007b16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b1a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8007b1e:	8193      	strh	r3, [r2, #12]
 8007b20:	6654      	str	r4, [r2, #100]	; 0x64
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	f7ff bfb1 	b.w	8007a8c <__fputwc>
	...

08007b2c <_fstat_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4c07      	ldr	r4, [pc, #28]	; (8007b4c <_fstat_r+0x20>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4605      	mov	r5, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	f7fb fafb 	bl	8003134 <_fstat>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d102      	bne.n	8007b48 <_fstat_r+0x1c>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	b103      	cbz	r3, 8007b48 <_fstat_r+0x1c>
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	bd38      	pop	{r3, r4, r5, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000718 	.word	0x20000718

08007b50 <_isatty_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4c06      	ldr	r4, [pc, #24]	; (8007b6c <_isatty_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4605      	mov	r5, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	f7fb faf2 	bl	8003144 <_isatty>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_isatty_r+0x1a>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_isatty_r+0x1a>
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000718 	.word	0x20000718

08007b70 <_lseek_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4c07      	ldr	r4, [pc, #28]	; (8007b90 <_lseek_r+0x20>)
 8007b74:	4605      	mov	r5, r0
 8007b76:	4608      	mov	r0, r1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6022      	str	r2, [r4, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7fb fae8 	bl	8003154 <_lseek>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_lseek_r+0x1e>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_lseek_r+0x1e>
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000718 	.word	0x20000718

08007b94 <_read_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4c07      	ldr	r4, [pc, #28]	; (8007bb4 <_read_r+0x20>)
 8007b98:	4605      	mov	r5, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7fb fade 	bl	8003164 <_read>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_read_r+0x1e>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_read_r+0x1e>
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20000718 	.word	0x20000718

08007bb8 <__swbuf_r>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	460f      	mov	r7, r1
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	b118      	cbz	r0, 8007bca <__swbuf_r+0x12>
 8007bc2:	6983      	ldr	r3, [r0, #24]
 8007bc4:	b90b      	cbnz	r3, 8007bca <__swbuf_r+0x12>
 8007bc6:	f7fe fb89 	bl	80062dc <__sinit>
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <__swbuf_r+0xb0>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d101      	bne.n	8007bd4 <__swbuf_r+0x1c>
 8007bd0:	6874      	ldr	r4, [r6, #4]
 8007bd2:	e008      	b.n	8007be6 <__swbuf_r+0x2e>
 8007bd4:	4b25      	ldr	r3, [pc, #148]	; (8007c6c <__swbuf_r+0xb4>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	d101      	bne.n	8007bde <__swbuf_r+0x26>
 8007bda:	68b4      	ldr	r4, [r6, #8]
 8007bdc:	e003      	b.n	8007be6 <__swbuf_r+0x2e>
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <__swbuf_r+0xb8>)
 8007be0:	429c      	cmp	r4, r3
 8007be2:	bf08      	it	eq
 8007be4:	68f4      	ldreq	r4, [r6, #12]
 8007be6:	69a3      	ldr	r3, [r4, #24]
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	0719      	lsls	r1, r3, #28
 8007bee:	d50e      	bpl.n	8007c0e <__swbuf_r+0x56>
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	b163      	cbz	r3, 8007c0e <__swbuf_r+0x56>
 8007bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf8:	049a      	lsls	r2, r3, #18
 8007bfa:	b2fd      	uxtb	r5, r7
 8007bfc:	d410      	bmi.n	8007c20 <__swbuf_r+0x68>
 8007bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c0a:	6663      	str	r3, [r4, #100]	; 0x64
 8007c0c:	e008      	b.n	8007c20 <__swbuf_r+0x68>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7fd fbc9 	bl	80053a8 <__swsetup_r>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d0ec      	beq.n	8007bf4 <__swbuf_r+0x3c>
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	6920      	ldr	r0, [r4, #16]
 8007c24:	1a18      	subs	r0, r3, r0
 8007c26:	6963      	ldr	r3, [r4, #20]
 8007c28:	4298      	cmp	r0, r3
 8007c2a:	db05      	blt.n	8007c38 <__swbuf_r+0x80>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7fe faea 	bl	8006208 <_fflush_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1f0      	bne.n	8007c1a <__swbuf_r+0x62>
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	6022      	str	r2, [r4, #0]
 8007c44:	701f      	strb	r7, [r3, #0]
 8007c46:	6962      	ldr	r2, [r4, #20]
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <__swbuf_r+0xa0>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	07db      	lsls	r3, r3, #31
 8007c52:	d507      	bpl.n	8007c64 <__swbuf_r+0xac>
 8007c54:	2d0a      	cmp	r5, #10
 8007c56:	d105      	bne.n	8007c64 <__swbuf_r+0xac>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7fe fad4 	bl	8006208 <_fflush_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1da      	bne.n	8007c1a <__swbuf_r+0x62>
 8007c64:	4628      	mov	r0, r5
 8007c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c68:	08007e40 	.word	0x08007e40
 8007c6c:	08007e60 	.word	0x08007e60
 8007c70:	08007e80 	.word	0x08007e80

08007c74 <_wcrtomb_r>:
 8007c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	461d      	mov	r5, r3
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <_wcrtomb_r+0x44>)
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4690      	mov	r8, r2
 8007c82:	460e      	mov	r6, r1
 8007c84:	681f      	ldr	r7, [r3, #0]
 8007c86:	b931      	cbnz	r1, 8007c96 <_wcrtomb_r+0x22>
 8007c88:	f7fe fe16 	bl	80068b8 <__locale_charset>
 8007c8c:	9500      	str	r5, [sp, #0]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4632      	mov	r2, r6
 8007c92:	a903      	add	r1, sp, #12
 8007c94:	e005      	b.n	8007ca2 <_wcrtomb_r+0x2e>
 8007c96:	f7fe fe0f 	bl	80068b8 <__locale_charset>
 8007c9a:	9500      	str	r5, [sp, #0]
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	47b8      	blx	r7
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	bf01      	itttt	eq
 8007caa:	2300      	moveq	r3, #0
 8007cac:	602b      	streq	r3, [r5, #0]
 8007cae:	238a      	moveq	r3, #138	; 0x8a
 8007cb0:	6023      	streq	r3, [r4, #0]
 8007cb2:	b006      	add	sp, #24
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	20000564 	.word	0x20000564

08007cbc <__ascii_wctomb>:
 8007cbc:	b149      	cbz	r1, 8007cd2 <__ascii_wctomb+0x16>
 8007cbe:	2aff      	cmp	r2, #255	; 0xff
 8007cc0:	bf85      	ittet	hi
 8007cc2:	238a      	movhi	r3, #138	; 0x8a
 8007cc4:	6003      	strhi	r3, [r0, #0]
 8007cc6:	700a      	strbls	r2, [r1, #0]
 8007cc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ccc:	bf98      	it	ls
 8007cce:	2001      	movls	r0, #1
 8007cd0:	4770      	bx	lr
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	4770      	bx	lr
	...

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
