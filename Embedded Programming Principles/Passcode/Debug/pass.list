
pass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e8  200001d4  080040a4  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002bc  080040a4  000202bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015f0e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002846  00000000  00000000  00036112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000079c5  00000000  00000000  00038958  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad8  00000000  00000000  00040320  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c78  00000000  00000000  00040df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005bc6  00000000  00000000  00041a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000046ce  00000000  00000000  00047636  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004bd04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002924  00000000  00000000  0004bd80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c40 	.word	0x08003c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08003c40 	.word	0x08003c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_InitTick+0x24>)
{
 8000584:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f878 	bl	8000684 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000594:	2200      	movs	r2, #0
 8000596:	4621      	mov	r1, r4
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f83e 	bl	800061c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_Init>:
{
 80005a8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 f824 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ffe5 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005b6:	f001 ff47 	bl	8002448 <HAL_MspInit>
}
 80005ba:	2000      	movs	r0, #0
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005c0:	4a02      	ldr	r2, [pc, #8]	; (80005cc <HAL_IncTick+0xc>)
 80005c2:	6813      	ldr	r3, [r2, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200001fc 	.word	0x200001fc

080005d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_GetTick+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200001fc 	.word	0x200001fc

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff6 	bl	80005d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005e6:	4605      	mov	r5, r0
  {
    wait++;
 80005e8:	bf18      	it	ne
 80005ea:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80005ec:	f7ff fff0 	bl	80005d0 <HAL_GetTick>
 80005f0:	1b40      	subs	r0, r0, r5
 80005f2:	4284      	cmp	r4, r0
 80005f4:	d8fa      	bhi.n	80005ec <HAL_Delay+0x10>
  {
  }
}
 80005f6:	bd38      	pop	{r3, r4, r5, pc}

080005f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000608:	0200      	lsls	r0, r0, #8
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000612:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	68dc      	ldr	r4, [r3, #12]
 8000622:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000626:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	2b04      	cmp	r3, #4
 800062e:	bf28      	it	cs
 8000630:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 0501 	mov.w	r5, #1
 8000638:	fa05 f303 	lsl.w	r3, r5, r3
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	4019      	ands	r1, r3
 8000648:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800064a:	fa05 f404 	lsl.w	r4, r5, r4
 800064e:	3c01      	subs	r4, #1
 8000650:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000652:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfaf      	iteee	ge
 800065e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	f000 000f 	andlt.w	r0, r0, #15
 8000666:	4b06      	ldrlt	r3, [pc, #24]	; (8000680 <HAL_NVIC_SetPriority+0x64>)
 8000668:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	bfa5      	ittet	ge
 800066c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000670:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000690:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	21f0      	movs	r1, #240	; 0xf0
 8000694:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006b4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b6:	bf0c      	ite	eq
 80006b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006bc:	f022 0204 	bicne.w	r2, r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	4770      	bx	lr
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006c8:	4770      	bx	lr

080006ca <HAL_SYSTICK_IRQHandler>:
{
 80006ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006cc:	f7ff fffc 	bl	80006c8 <HAL_SYSTICK_Callback>
 80006d0:	bd08      	pop	{r3, pc}
	...

080006d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000838 <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80006e0:	4a53      	ldr	r2, [pc, #332]	; (8000830 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006e2:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006e4:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 80006e8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ea:	9c01      	ldr	r4, [sp, #4]
 80006ec:	40dc      	lsrs	r4, r3
 80006ee:	d102      	bne.n	80006f6 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80006f0:	b005      	add	sp, #20
 80006f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006f6:	2401      	movs	r4, #1
 80006f8:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80006fc:	9c01      	ldr	r4, [sp, #4]
 80006fe:	ea14 050a 	ands.w	r5, r4, sl
 8000702:	f000 808f 	beq.w	8000824 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000706:	684c      	ldr	r4, [r1, #4]
 8000708:	f024 0b10 	bic.w	fp, r4, #16
 800070c:	f1bb 0f02 	cmp.w	fp, #2
 8000710:	d111      	bne.n	8000736 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000712:	08df      	lsrs	r7, r3, #3
 8000714:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000718:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800071c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800071e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000722:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000726:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800072a:	690e      	ldr	r6, [r1, #16]
 800072c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000730:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000734:	623e      	str	r6, [r7, #32]
 8000736:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800073a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800073c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800073e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000742:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000744:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000748:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800074a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000752:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000756:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800075a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075c:	d811      	bhi.n	8000782 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800075e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000760:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000764:	68ce      	ldr	r6, [r1, #12]
 8000766:	fa06 fe0c 	lsl.w	lr, r6, ip
 800076a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800076e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000770:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000772:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000776:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800077a:	409e      	lsls	r6, r3
 800077c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000780:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000782:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000784:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000786:	688e      	ldr	r6, [r1, #8]
 8000788:	fa06 f60c 	lsl.w	r6, r6, ip
 800078c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800078e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000790:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000792:	d547      	bpl.n	8000824 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000794:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000798:	f046 0601 	orr.w	r6, r6, #1
 800079c:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80007a0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80007a4:	f023 0703 	bic.w	r7, r3, #3
 80007a8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007ac:	f006 0601 	and.w	r6, r6, #1
 80007b0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80007b4:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007b6:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80007bc:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007c2:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007c6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ca:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007ce:	d02b      	beq.n	8000828 <HAL_GPIO_Init+0x154>
 80007d0:	4e18      	ldr	r6, [pc, #96]	; (8000834 <HAL_GPIO_Init+0x160>)
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	d02a      	beq.n	800082c <HAL_GPIO_Init+0x158>
 80007d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007da:	42b0      	cmp	r0, r6
 80007dc:	bf14      	ite	ne
 80007de:	2607      	movne	r6, #7
 80007e0:	2602      	moveq	r6, #2
 80007e2:	fa06 f60e 	lsl.w	r6, r6, lr
 80007e6:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80007ea:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80007ec:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ee:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007f4:	bf0c      	ite	eq
 80007f6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80007f8:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 80007fa:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 80007fc:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000802:	bf0c      	ite	eq
 8000804:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000806:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000808:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800080a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf0c      	ite	eq
 8000812:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000814:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000816:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000818:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800081a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800081c:	bf54      	ite	pl
 800081e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000820:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000822:	60d6      	str	r6, [r2, #12]
    position++;
 8000824:	3301      	adds	r3, #1
 8000826:	e760      	b.n	80006ea <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000828:	2600      	movs	r6, #0
 800082a:	e7da      	b.n	80007e2 <HAL_GPIO_Init+0x10e>
 800082c:	2601      	movs	r6, #1
 800082e:	e7d8      	b.n	80007e2 <HAL_GPIO_Init+0x10e>
 8000830:	40010400 	.word	0x40010400
 8000834:	48000400 	.word	0x48000400
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800083c:	b10a      	cbz	r2, 8000842 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800083e:	6181      	str	r1, [r0, #24]
 8000840:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000842:	6281      	str	r1, [r0, #40]	; 0x28
 8000844:	4770      	bx	lr
	...

08000848 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_PWREx_GetVoltageRange+0xc>)
 800084a:	6818      	ldr	r0, [r3, #0]
#endif  
}
 800084c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40007000 	.word	0x40007000

08000858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800085a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800085c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000860:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000864:	d11a      	bne.n	800089c <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000866:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800086a:	d013      	beq.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800086e:	4912      	ldr	r1, [pc, #72]	; (80008b8 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000878:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_PWREx_ControlVoltageScaling+0x64>)
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000882:	2232      	movs	r2, #50	; 0x32
 8000884:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000886:	b112      	cbz	r2, 800088e <HAL_PWREx_ControlVoltageScaling+0x36>
 8000888:	6959      	ldr	r1, [r3, #20]
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	d404      	bmi.n	8000898 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	055b      	lsls	r3, r3, #21
 8000892:	d40d      	bmi.n	80008b0 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr
        wait_loop_index--;
 8000898:	3a01      	subs	r2, #1
 800089a:	e7f4      	b.n	8000886 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800089c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a0:	bf1f      	itttt	ne
 80008a2:	681a      	ldrne	r2, [r3, #0]
 80008a4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008a8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008ac:	601a      	strne	r2, [r3, #0]
 80008ae:	e7f1      	b.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
}  
 80008b2:	4770      	bx	lr
 80008b4:	40007000 	.word	0x40007000
 80008b8:	000f4240 	.word	0x000f4240
 80008bc:	20000000 	.word	0x20000000

080008c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008c2:	4d1e      	ldr	r5, [pc, #120]	; (800093c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008c6:	00da      	lsls	r2, r3, #3
{
 80008c8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008ca:	d518      	bpl.n	80008fe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008cc:	f7ff ffbc 	bl	8000848 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80008d4:	d123      	bne.n	800091e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80008d6:	2c80      	cmp	r4, #128	; 0x80
 80008d8:	d929      	bls.n	800092e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80008da:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80008dc:	bf8c      	ite	hi
 80008de:	2002      	movhi	r0, #2
 80008e0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	f023 0307 	bic.w	r3, r3, #7
 80008ea:	4303      	orrs	r3, r0
 80008ec:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80008f4:	1a18      	subs	r0, r3, r0
 80008f6:	bf18      	it	ne
 80008f8:	2001      	movne	r0, #1
 80008fa:	b003      	add	sp, #12
 80008fc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	65ab      	str	r3, [r5, #88]	; 0x58
 8000906:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000910:	f7ff ff9a 	bl	8000848 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000914:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091a:	65ab      	str	r3, [r5, #88]	; 0x58
 800091c:	e7d8      	b.n	80008d0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800091e:	2c80      	cmp	r4, #128	; 0x80
 8000920:	d807      	bhi.n	8000932 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000922:	d008      	beq.n	8000936 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000924:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000928:	4258      	negs	r0, r3
 800092a:	4158      	adcs	r0, r3
 800092c:	e7d9      	b.n	80008e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800092e:	2000      	movs	r0, #0
 8000930:	e7d7      	b.n	80008e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000932:	2003      	movs	r0, #3
 8000934:	e7d5      	b.n	80008e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000936:	2002      	movs	r0, #2
 8000938:	e7d3      	b.n	80008e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f012 0f0c 	tst.w	r2, #12
{
 800094c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800094e:	d009      	beq.n	8000964 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000956:	2a0c      	cmp	r2, #12
 8000958:	d12d      	bne.n	80009b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	f002 0203 	and.w	r2, r2, #3
 8000960:	2a01      	cmp	r2, #1
 8000962:	d128      	bne.n	80009b6 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000964:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000966:	4928      	ldr	r1, [pc, #160]	; (8000a08 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000968:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800096a:	bf55      	itete	pl
 800096c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000970:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000972:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000976:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800097a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800097e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8000980:	f011 0f0c 	tst.w	r1, #12
 8000984:	bf0c      	ite	eq
 8000986:	4610      	moveq	r0, r2
 8000988:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	f001 010c 	and.w	r1, r1, #12
 8000990:	290c      	cmp	r1, #12
 8000992:	d130      	bne.n	80009f6 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000994:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000996:	68d8      	ldr	r0, [r3, #12]
 8000998:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800099c:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800099e:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d019      	beq.n	80009da <HAL_RCC_GetSysClockFreq+0x96>
 80009a6:	2803      	cmp	r0, #3
 80009a8:	d026      	beq.n	80009f8 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80009ae:	68d8      	ldr	r0, [r3, #12]
 80009b0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80009b4:	e017      	b.n	80009e6 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	f002 020c 	and.w	r2, r2, #12
 80009bc:	2a04      	cmp	r2, #4
 80009be:	d007      	beq.n	80009d0 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f002 020c 	and.w	r2, r2, #12
 80009c6:	2a08      	cmp	r2, #8
 80009c8:	d104      	bne.n	80009d4 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 80009ca:	4810      	ldr	r0, [pc, #64]	; (8000a0c <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009cc:	2200      	movs	r2, #0
 80009ce:	e7dc      	b.n	800098a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 80009d0:	480f      	ldr	r0, [pc, #60]	; (8000a10 <HAL_RCC_GetSysClockFreq+0xcc>)
 80009d2:	e7fb      	b.n	80009cc <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80009d4:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009d6:	4602      	mov	r2, r0
 80009d8:	e7d7      	b.n	800098a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_RCC_GetSysClockFreq+0xcc>)
 80009de:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009e2:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80009ec:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009ee:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009f0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80009f2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80009f6:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <HAL_RCC_GetSysClockFreq+0xc8>)
 80009fc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000a00:	e7ef      	b.n	80009e2 <HAL_RCC_GetSysClockFreq+0x9e>
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	08003d00 	.word	0x08003d00
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	00f42400 	.word	0x00f42400

08000a14 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a14:	6803      	ldr	r3, [r0, #0]
{
 8000a16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000a1a:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a1c:	06d8      	lsls	r0, r3, #27
 8000a1e:	d539      	bpl.n	8000a94 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000a20:	4cab      	ldr	r4, [pc, #684]	; (8000cd0 <HAL_RCC_OscConfig+0x2bc>)
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	f013 0f0c 	tst.w	r3, #12
 8000a28:	d162      	bne.n	8000af0 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	0799      	lsls	r1, r3, #30
 8000a2e:	d503      	bpl.n	8000a38 <HAL_RCC_OscConfig+0x24>
 8000a30:	69ab      	ldr	r3, [r5, #24]
 8000a32:	b90b      	cbnz	r3, 8000a38 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 8000a34:	2001      	movs	r0, #1
 8000a36:	e07f      	b.n	8000b38 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	6a28      	ldr	r0, [r5, #32]
 8000a3c:	071a      	lsls	r2, r3, #28
 8000a3e:	bf56      	itet	pl
 8000a40:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000a44:	6823      	ldrmi	r3, [r4, #0]
 8000a46:	091b      	lsrpl	r3, r3, #4
 8000a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d23a      	bcs.n	8000ac6 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a50:	f7ff ff36 	bl	80008c0 <RCC_SetFlashLatencyFromMSIRange>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d1ed      	bne.n	8000a34 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6023      	str	r3, [r4, #0]
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	6a2a      	ldr	r2, [r5, #32]
 8000a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a6c:	6863      	ldr	r3, [r4, #4]
 8000a6e:	69ea      	ldr	r2, [r5, #28]
 8000a70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a78:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000a7a:	f7ff ff63 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8000a7e:	68a3      	ldr	r3, [r4, #8]
 8000a80:	4a94      	ldr	r2, [pc, #592]	; (8000cd4 <HAL_RCC_OscConfig+0x2c0>)
 8000a82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	40d8      	lsrs	r0, r3
 8000a8a:	4b93      	ldr	r3, [pc, #588]	; (8000cd8 <HAL_RCC_OscConfig+0x2c4>)
 8000a8c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fd76 	bl	8000580 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	07d8      	lsls	r0, r3, #31
 8000a98:	d461      	bmi.n	8000b5e <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	0799      	lsls	r1, r3, #30
 8000a9e:	f100 80a9 	bmi.w	8000bf4 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	071a      	lsls	r2, r3, #28
 8000aa6:	f100 80e7 	bmi.w	8000c78 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	075b      	lsls	r3, r3, #29
 8000aae:	f100 8115 	bmi.w	8000cdc <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	069a      	lsls	r2, r3, #26
 8000ab6:	f100 817c 	bmi.w	8000db2 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000aba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	f040 81a3 	bne.w	8000e08 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	e038      	b.n	8000b38 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6023      	str	r3, [r4, #0]
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad4:	4303      	orrs	r3, r0
 8000ad6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	69ea      	ldr	r2, [r5, #28]
 8000adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ae4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ae6:	f7ff feeb 	bl	80008c0 <RCC_SetFlashLatencyFromMSIRange>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d0c5      	beq.n	8000a7a <HAL_RCC_OscConfig+0x66>
 8000aee:	e7a1      	b.n	8000a34 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000af0:	69ab      	ldr	r3, [r5, #24]
 8000af2:	b323      	cbz	r3, 8000b3e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd68 	bl	80005d0 <HAL_GetTick>
 8000b00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	079b      	lsls	r3, r3, #30
 8000b06:	d511      	bpl.n	8000b2c <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6023      	str	r3, [r4, #0]
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	6a2a      	ldr	r2, [r5, #32]
 8000b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b1c:	6863      	ldr	r3, [r4, #4]
 8000b1e:	69ea      	ldr	r2, [r5, #28]
 8000b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b28:	6063      	str	r3, [r4, #4]
 8000b2a:	e7b3      	b.n	8000a94 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b2c:	f7ff fd50 	bl	80005d0 <HAL_GetTick>
 8000b30:	1b80      	subs	r0, r0, r6
 8000b32:	2802      	cmp	r0, #2
 8000b34:	d9e5      	bls.n	8000b02 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8000b36:	2003      	movs	r0, #3
}
 8000b38:	b002      	add	sp, #8
 8000b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	f023 0301 	bic.w	r3, r3, #1
 8000b44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b46:	f7ff fd43 	bl	80005d0 <HAL_GetTick>
 8000b4a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	079f      	lsls	r7, r3, #30
 8000b50:	d5a0      	bpl.n	8000a94 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b52:	f7ff fd3d 	bl	80005d0 <HAL_GetTick>
 8000b56:	1b80      	subs	r0, r0, r6
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	d9f7      	bls.n	8000b4c <HAL_RCC_OscConfig+0x138>
 8000b5c:	e7eb      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b5e:	4c5c      	ldr	r4, [pc, #368]	; (8000cd0 <HAL_RCC_OscConfig+0x2bc>)
 8000b60:	68a3      	ldr	r3, [r4, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d009      	beq.n	8000b7e <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6a:	68a3      	ldr	r3, [r4, #8]
 8000b6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b70:	2b0c      	cmp	r3, #12
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b74:	68e3      	ldr	r3, [r4, #12]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d106      	bne.n	8000b8c <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	039a      	lsls	r2, r3, #14
 8000b82:	d58a      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x86>
 8000b84:	686b      	ldr	r3, [r5, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d187      	bne.n	8000a9a <HAL_RCC_OscConfig+0x86>
 8000b8a:	e753      	b.n	8000a34 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	686b      	ldr	r3, [r5, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d110      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x1a2>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd18 	bl	80005d0 <HAL_GetTick>
 8000ba0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	039b      	lsls	r3, r3, #14
 8000ba6:	f53f af78 	bmi.w	8000a9a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000baa:	f7ff fd11 	bl	80005d0 <HAL_GetTick>
 8000bae:	1b80      	subs	r0, r0, r6
 8000bb0:	2864      	cmp	r0, #100	; 0x64
 8000bb2:	d9f6      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x18e>
 8000bb4:	e7bf      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bba:	d104      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x1b2>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc2:	6023      	str	r3, [r4, #0]
 8000bc4:	e7e6      	b.n	8000b94 <HAL_RCC_OscConfig+0x180>
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bcc:	6022      	str	r2, [r4, #0]
 8000bce:	6822      	ldr	r2, [r4, #0]
 8000bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bd4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1e0      	bne.n	8000b9c <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8000bda:	f7ff fcf9 	bl	80005d0 <HAL_GetTick>
 8000bde:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	039f      	lsls	r7, r3, #14
 8000be4:	f57f af59 	bpl.w	8000a9a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fcf2 	bl	80005d0 <HAL_GetTick>
 8000bec:	1b80      	subs	r0, r0, r6
 8000bee:	2864      	cmp	r0, #100	; 0x64
 8000bf0:	d9f6      	bls.n	8000be0 <HAL_RCC_OscConfig+0x1cc>
 8000bf2:	e7a0      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bf4:	4c36      	ldr	r4, [pc, #216]	; (8000cd0 <HAL_RCC_OscConfig+0x2bc>)
 8000bf6:	68a3      	ldr	r3, [r4, #8]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d009      	beq.n	8000c14 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c00:	68a3      	ldr	r3, [r4, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c06:	2b0c      	cmp	r3, #12
 8000c08:	d113      	bne.n	8000c32 <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c0a:	68e3      	ldr	r3, [r4, #12]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d10e      	bne.n	8000c32 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	055e      	lsls	r6, r3, #21
 8000c18:	d503      	bpl.n	8000c22 <HAL_RCC_OscConfig+0x20e>
 8000c1a:	68eb      	ldr	r3, [r5, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f43f af09 	beq.w	8000a34 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	6863      	ldr	r3, [r4, #4]
 8000c24:	692a      	ldr	r2, [r5, #16]
 8000c26:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c2e:	6063      	str	r3, [r4, #4]
 8000c30:	e737      	b.n	8000aa2 <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c32:	68eb      	ldr	r3, [r5, #12]
 8000c34:	b17b      	cbz	r3, 8000c56 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fcc7 	bl	80005d0 <HAL_GetTick>
 8000c42:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	0558      	lsls	r0, r3, #21
 8000c48:	d4eb      	bmi.n	8000c22 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4a:	f7ff fcc1 	bl	80005d0 <HAL_GetTick>
 8000c4e:	1b80      	subs	r0, r0, r6
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d9f7      	bls.n	8000c44 <HAL_RCC_OscConfig+0x230>
 8000c54:	e76f      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fcb7 	bl	80005d0 <HAL_GetTick>
 8000c62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	0559      	lsls	r1, r3, #21
 8000c68:	f57f af1b 	bpl.w	8000aa2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fcb0 	bl	80005d0 <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2802      	cmp	r0, #2
 8000c74:	d9f6      	bls.n	8000c64 <HAL_RCC_OscConfig+0x250>
 8000c76:	e75e      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c78:	696b      	ldr	r3, [r5, #20]
 8000c7a:	4c15      	ldr	r4, [pc, #84]	; (8000cd0 <HAL_RCC_OscConfig+0x2bc>)
 8000c7c:	b19b      	cbz	r3, 8000ca6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8000c7e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c8a:	f7ff fca1 	bl	80005d0 <HAL_GetTick>
 8000c8e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000c90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c94:	079f      	lsls	r7, r3, #30
 8000c96:	f53f af08 	bmi.w	8000aaa <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fc99 	bl	80005d0 <HAL_GetTick>
 8000c9e:	1b80      	subs	r0, r0, r6
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d9f5      	bls.n	8000c90 <HAL_RCC_OscConfig+0x27c>
 8000ca4:	e747      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000ca6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000cb2:	f7ff fc8d 	bl	80005d0 <HAL_GetTick>
 8000cb6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000cb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cbc:	0798      	lsls	r0, r3, #30
 8000cbe:	f57f aef4 	bpl.w	8000aaa <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fc85 	bl	80005d0 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d9f5      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x2a4>
 8000ccc:	e733      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	08003ce7 	.word	0x08003ce7
 8000cd8:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000cdc:	4c79      	ldr	r4, [pc, #484]	; (8000ec4 <HAL_RCC_OscConfig+0x4b0>)
 8000cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ce0:	00d9      	lsls	r1, r3, #3
 8000ce2:	d427      	bmi.n	8000d34 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cea:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cf6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cf8:	4e73      	ldr	r6, [pc, #460]	; (8000ec8 <HAL_RCC_OscConfig+0x4b4>)
 8000cfa:	6833      	ldr	r3, [r6, #0]
 8000cfc:	05da      	lsls	r2, r3, #23
 8000cfe:	d51b      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d00:	68ab      	ldr	r3, [r5, #8]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d129      	bne.n	8000d5a <HAL_RCC_OscConfig+0x346>
 8000d06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000d12:	f7ff fc5d 	bl	80005d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d1a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000d1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d20:	0798      	lsls	r0, r3, #30
 8000d22:	d540      	bpl.n	8000da6 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000d24:	2f00      	cmp	r7, #0
 8000d26:	f43f aec4 	beq.w	8000ab2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d30:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d32:	e6be      	b.n	8000ab2 <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8000d34:	2700      	movs	r7, #0
 8000d36:	e7df      	b.n	8000cf8 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc46 	bl	80005d0 <HAL_GetTick>
 8000d44:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d46:	6833      	ldr	r3, [r6, #0]
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	d4d9      	bmi.n	8000d00 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d4c:	f7ff fc40 	bl	80005d0 <HAL_GetTick>
 8000d50:	eba0 0008 	sub.w	r0, r0, r8
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x332>
 8000d58:	e6ed      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	d106      	bne.n	8000d6c <HAL_RCC_OscConfig+0x358>
 8000d5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d6a:	e7cc      	b.n	8000d06 <HAL_RCC_OscConfig+0x2f2>
 8000d6c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d78:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d7c:	f022 0204 	bic.w	r2, r2, #4
 8000d80:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1c4      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8000d88:	f7ff fc22 	bl	80005d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d90:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d96:	0799      	lsls	r1, r3, #30
 8000d98:	d5c4      	bpl.n	8000d24 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fc19 	bl	80005d0 <HAL_GetTick>
 8000d9e:	1b80      	subs	r0, r0, r6
 8000da0:	4540      	cmp	r0, r8
 8000da2:	d9f6      	bls.n	8000d92 <HAL_RCC_OscConfig+0x37e>
 8000da4:	e6c7      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f7ff fc13 	bl	80005d0 <HAL_GetTick>
 8000daa:	1b80      	subs	r0, r0, r6
 8000dac:	4540      	cmp	r0, r8
 8000dae:	d9b5      	bls.n	8000d1c <HAL_RCC_OscConfig+0x308>
 8000db0:	e6c1      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000db4:	4c43      	ldr	r4, [pc, #268]	; (8000ec4 <HAL_RCC_OscConfig+0x4b0>)
 8000db6:	b19b      	cbz	r3, 8000de0 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8000db8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fc04 	bl	80005d0 <HAL_GetTick>
 8000dc8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000dca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000dce:	079b      	lsls	r3, r3, #30
 8000dd0:	f53f ae73 	bmi.w	8000aba <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dd4:	f7ff fbfc 	bl	80005d0 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9f5      	bls.n	8000dca <HAL_RCC_OscConfig+0x3b6>
 8000dde:	e6aa      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000de0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000dec:	f7ff fbf0 	bl	80005d0 <HAL_GetTick>
 8000df0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000df2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000df6:	079f      	lsls	r7, r3, #30
 8000df8:	f57f ae5f 	bpl.w	8000aba <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dfc:	f7ff fbe8 	bl	80005d0 <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCC_OscConfig+0x3de>
 8000e06:	e696      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e08:	4c2e      	ldr	r4, [pc, #184]	; (8000ec4 <HAL_RCC_OscConfig+0x4b0>)
 8000e0a:	68a3      	ldr	r3, [r4, #8]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b0c      	cmp	r3, #12
 8000e12:	f43f ae0f 	beq.w	8000a34 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000e16:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e18:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e1e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e20:	d136      	bne.n	8000e90 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8000e22:	f7ff fbd5 	bl	80005d0 <HAL_GetTick>
 8000e26:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	0198      	lsls	r0, r3, #6
 8000e2c:	d42a      	bmi.n	8000e84 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000e30:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e32:	06db      	lsls	r3, r3, #27
 8000e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e38:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000e44:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000e46:	0852      	lsrs	r2, r2, #1
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000e4e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e50:	0852      	lsrs	r2, r2, #1
 8000e52:	3a01      	subs	r2, #1
 8000e54:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e58:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e60:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e62:	68e3      	ldr	r3, [r4, #12]
 8000e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e68:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fbb1 	bl	80005d0 <HAL_GetTick>
 8000e6e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	0199      	lsls	r1, r3, #6
 8000e74:	f53f ae25 	bmi.w	8000ac2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fbaa 	bl	80005d0 <HAL_GetTick>
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9f6      	bls.n	8000e70 <HAL_RCC_OscConfig+0x45c>
 8000e82:	e658      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff fba4 	bl	80005d0 <HAL_GetTick>
 8000e88:	1b80      	subs	r0, r0, r6
 8000e8a:	2802      	cmp	r0, #2
 8000e8c:	d9cc      	bls.n	8000e28 <HAL_RCC_OscConfig+0x414>
 8000e8e:	e652      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e94:	bf5e      	ittt	pl
 8000e96:	68e3      	ldrpl	r3, [r4, #12]
 8000e98:	f023 0303 	bicpl.w	r3, r3, #3
 8000e9c:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000e9e:	68e3      	ldr	r3, [r4, #12]
 8000ea0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb91 	bl	80005d0 <HAL_GetTick>
 8000eae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	019b      	lsls	r3, r3, #6
 8000eb4:	f57f ae05 	bpl.w	8000ac2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb8:	f7ff fb8a 	bl	80005d0 <HAL_GetTick>
 8000ebc:	1b40      	subs	r0, r0, r5
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d9f6      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x49c>
 8000ec2:	e638      	b.n	8000b36 <HAL_RCC_OscConfig+0x122>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40007000 	.word	0x40007000

08000ecc <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000ecc:	4a56      	ldr	r2, [pc, #344]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	428b      	cmp	r3, r1
{
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	4605      	mov	r5, r0
 8000edc:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000ede:	d32b      	bcc.n	8000f38 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	07d9      	lsls	r1, r3, #31
 8000ee4:	d435      	bmi.n	8000f52 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee6:	6829      	ldr	r1, [r5, #0]
 8000ee8:	078a      	lsls	r2, r1, #30
 8000eea:	f100 8083 	bmi.w	8000ff4 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000eee:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	429e      	cmp	r6, r3
 8000ef8:	f0c0 8084 	bcc.w	8001004 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efc:	f011 0f04 	tst.w	r1, #4
 8000f00:	4c4a      	ldr	r4, [pc, #296]	; (800102c <HAL_RCC_ClockConfig+0x160>)
 8000f02:	f040 808a 	bne.w	800101a <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f06:	070b      	lsls	r3, r1, #28
 8000f08:	d506      	bpl.n	8000f18 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f0a:	68a3      	ldr	r3, [r4, #8]
 8000f0c:	692a      	ldr	r2, [r5, #16]
 8000f0e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f16:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f18:	f7ff fd14 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8000f1c:	68a3      	ldr	r3, [r4, #8]
 8000f1e:	4a44      	ldr	r2, [pc, #272]	; (8001030 <HAL_RCC_ClockConfig+0x164>)
 8000f20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_RCC_ClockConfig+0x168>)
 8000f2a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fb27 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000f32:	2000      	movs	r0, #0
}
 8000f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f023 0307 	bic.w	r3, r3, #7
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d0c9      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f52:	686a      	ldr	r2, [r5, #4]
 8000f54:	4c35      	ldr	r4, [pc, #212]	; (800102c <HAL_RCC_ClockConfig+0x160>)
 8000f56:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f5a:	d11c      	bne.n	8000f96 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f60:	d0f4      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f62:	68a3      	ldr	r3, [r4, #8]
 8000f64:	f023 0303 	bic.w	r3, r3, #3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000f6c:	f7ff fb30 	bl	80005d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f70:	686b      	ldr	r3, [r5, #4]
 8000f72:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000f74:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f76:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f7a:	d118      	bne.n	8000fae <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f7c:	68a3      	ldr	r3, [r4, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d0af      	beq.n	8000ee6 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f86:	f7ff fb23 	bl	80005d0 <HAL_GetTick>
 8000f8a:	1bc0      	subs	r0, r0, r7
 8000f8c:	4540      	cmp	r0, r8
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f96:	2a02      	cmp	r2, #2
 8000f98:	d102      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f9e:	e7df      	b.n	8000f60 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000fa0:	b912      	cbnz	r2, 8000fa8 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000fa2:	f013 0f02 	tst.w	r3, #2
 8000fa6:	e7db      	b.n	8000f60 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000fa8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000fac:	e7d8      	b.n	8000f60 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10a      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000fb2:	68a3      	ldr	r3, [r4, #8]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d094      	beq.n	8000ee6 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbc:	f7ff fb08 	bl	80005d0 <HAL_GetTick>
 8000fc0:	1bc0      	subs	r0, r0, r7
 8000fc2:	4540      	cmp	r0, r8
 8000fc4:	d9f5      	bls.n	8000fb2 <HAL_RCC_ClockConfig+0xe6>
 8000fc6:	e7e3      	b.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000fc8:	b973      	cbnz	r3, 8000fe8 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000fca:	68a3      	ldr	r3, [r4, #8]
 8000fcc:	f013 0f0c 	tst.w	r3, #12
 8000fd0:	d089      	beq.n	8000ee6 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd2:	f7ff fafd 	bl	80005d0 <HAL_GetTick>
 8000fd6:	1bc0      	subs	r0, r0, r7
 8000fd8:	4540      	cmp	r0, r8
 8000fda:	d9f6      	bls.n	8000fca <HAL_RCC_ClockConfig+0xfe>
 8000fdc:	e7d8      	b.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fde:	f7ff faf7 	bl	80005d0 <HAL_GetTick>
 8000fe2:	1bc0      	subs	r0, r0, r7
 8000fe4:	4540      	cmp	r0, r8
 8000fe6:	d8d3      	bhi.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000fe8:	68a3      	ldr	r3, [r4, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d1f5      	bne.n	8000fde <HAL_RCC_ClockConfig+0x112>
 8000ff2:	e778      	b.n	8000ee6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_RCC_ClockConfig+0x160>)
 8000ff6:	68a8      	ldr	r0, [r5, #8]
 8000ff8:	6893      	ldr	r3, [r2, #8]
 8000ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ffe:	4303      	orrs	r3, r0
 8001000:	6093      	str	r3, [r2, #8]
 8001002:	e774      	b.n	8000eee <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	4333      	orrs	r3, r6
 800100c:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	429e      	cmp	r6, r3
 8001016:	d199      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x80>
 8001018:	e770      	b.n	8000efc <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800101a:	68a3      	ldr	r3, [r4, #8]
 800101c:	68ea      	ldr	r2, [r5, #12]
 800101e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001022:	4313      	orrs	r3, r2
 8001024:	60a3      	str	r3, [r4, #8]
 8001026:	e76e      	b.n	8000f06 <HAL_RCC_ClockConfig+0x3a>
 8001028:	40022000 	.word	0x40022000
 800102c:	40021000 	.word	0x40021000
 8001030:	08003ce7 	.word	0x08003ce7
 8001034:	20000000 	.word	0x20000000

08001038 <HAL_RCC_GetHCLKFreq>:
}
 8001038:	4b01      	ldr	r3, [pc, #4]	; (8001040 <HAL_RCC_GetHCLKFreq+0x8>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000

08001044 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001052:	6810      	ldr	r0, [r2, #0]
}
 8001054:	40d8      	lsrs	r0, r3
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	08003cf7 	.word	0x08003cf7
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001072:	6810      	ldr	r0, [r2, #0]
}
 8001074:	40d8      	lsrs	r0, r3
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	08003cf7 	.word	0x08003cf7
 8001080:	20000000 	.word	0x20000000

08001084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <RCCEx_PLLSAI1_Config+0x114>)
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	f012 0f03 	tst.w	r2, #3
{
 800108e:	4605      	mov	r5, r0
 8001090:	460e      	mov	r6, r1
 8001092:	461c      	mov	r4, r3
 8001094:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001096:	d039      	beq.n	800110c <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	4282      	cmp	r2, r0
 80010a0:	d14b      	bne.n	800113a <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d049      	beq.n	800113a <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010a6:	68db      	ldr	r3, [r3, #12]
       ||
 80010a8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80010ae:	3301      	adds	r3, #1
       ||
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d142      	bne.n	800113a <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010bc:	f7ff fa88 	bl	80005d0 <HAL_GetTick>
 80010c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	011a      	lsls	r2, r3, #4
 80010c6:	d441      	bmi.n	800114c <RCCEx_PLLSAI1_Config+0xc8>
 80010c8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d045      	beq.n	800115a <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80010ce:	2e01      	cmp	r6, #1
 80010d0:	d14f      	bne.n	8001172 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010d2:	6922      	ldr	r2, [r4, #16]
 80010d4:	6928      	ldr	r0, [r5, #16]
 80010d6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80010da:	0840      	lsrs	r0, r0, #1
 80010dc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80010e0:	3801      	subs	r0, #1
 80010e2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80010e6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80010ea:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010f2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f4:	f7ff fa6c 	bl	80005d0 <HAL_GetTick>
 80010f8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	d545      	bpl.n	800118c <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001100:	6923      	ldr	r3, [r4, #16]
 8001102:	69aa      	ldr	r2, [r5, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	6123      	str	r3, [r4, #16]
 8001108:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800110c:	2802      	cmp	r0, #2
 800110e:	d010      	beq.n	8001132 <RCCEx_PLLSAI1_Config+0xae>
 8001110:	2803      	cmp	r0, #3
 8001112:	d014      	beq.n	800113e <RCCEx_PLLSAI1_Config+0xba>
 8001114:	2801      	cmp	r0, #1
 8001116:	d110      	bne.n	800113a <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	079f      	lsls	r7, r3, #30
 800111c:	d5f5      	bpl.n	800110a <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800111e:	68e3      	ldr	r3, [r4, #12]
 8001120:	686a      	ldr	r2, [r5, #4]
 8001122:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001126:	3a01      	subs	r2, #1
 8001128:	4318      	orrs	r0, r3
 800112a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800112e:	60e0      	str	r0, [r4, #12]
 8001130:	e7c0      	b.n	80010b4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001138:	d1f1      	bne.n	800111e <RCCEx_PLLSAI1_Config+0x9a>
 800113a:	2001      	movs	r0, #1
 800113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	0391      	lsls	r1, r2, #14
 8001142:	d4ec      	bmi.n	800111e <RCCEx_PLLSAI1_Config+0x9a>
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800114a:	e7f5      	b.n	8001138 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800114c:	f7ff fa40 	bl	80005d0 <HAL_GetTick>
 8001150:	1bc0      	subs	r0, r0, r7
 8001152:	2802      	cmp	r0, #2
 8001154:	d9b5      	bls.n	80010c2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
 8001158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800115a:	6922      	ldr	r2, [r4, #16]
 800115c:	68e9      	ldr	r1, [r5, #12]
 800115e:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001162:	06c9      	lsls	r1, r1, #27
 8001164:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001168:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800116c:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800116e:	6123      	str	r3, [r4, #16]
 8001170:	e7bc      	b.n	80010ec <RCCEx_PLLSAI1_Config+0x68>
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	6968      	ldr	r0, [r5, #20]
 8001176:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800117a:	0840      	lsrs	r0, r0, #1
 800117c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001180:	3801      	subs	r0, #1
 8001182:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001186:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800118a:	e7f0      	b.n	800116e <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800118c:	f7ff fa20 	bl	80005d0 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2802      	cmp	r0, #2
 8001194:	d9b1      	bls.n	80010fa <RCCEx_PLLSAI1_Config+0x76>
 8001196:	e7de      	b.n	8001156 <RCCEx_PLLSAI1_Config+0xd2>
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_RCCEx_PeriphCLKConfig>:
{
 800119c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011a0:	6805      	ldr	r5, [r0, #0]
 80011a2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80011a6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011a8:	d00e      	beq.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80011aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80011ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011b0:	d05b      	beq.n	800126a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80011b2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80011b6:	d05d      	beq.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d166      	bne.n	800128a <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80011bc:	3004      	adds	r0, #4
 80011be:	f7ff ff61 	bl	8001084 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80011c2:	4605      	mov	r5, r0
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d055      	beq.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	039e      	lsls	r6, r3, #14
 80011cc:	d56d      	bpl.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4e92      	ldr	r6, [pc, #584]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011d0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80011d2:	00d8      	lsls	r0, r3, #3
 80011d4:	d45b      	bmi.n	800128e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	65b3      	str	r3, [r6, #88]	; 0x58
 80011de:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011e8:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ea:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800141c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80011ee:	f8d8 3000 	ldr.w	r3, [r8]
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80011fa:	f7ff f9e9 	bl	80005d0 <HAL_GetTick>
 80011fe:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001200:	f8d8 3000 	ldr.w	r3, [r8]
 8001204:	05d9      	lsls	r1, r3, #23
 8001206:	d544      	bpl.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001208:	2d00      	cmp	r5, #0
 800120a:	d149      	bne.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800120c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001210:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001214:	d014      	beq.n	8001240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001216:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001218:	4293      	cmp	r3, r2
 800121a:	d011      	beq.n	8001240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800121c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001220:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001224:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001228:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800122c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001238:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800123c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001240:	07da      	lsls	r2, r3, #31
 8001242:	d509      	bpl.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001244:	f7ff f9c4 	bl	80005d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800124c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800124e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	f140 80c2 	bpl.w	80013dc <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001258:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800125c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800125e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001262:	4313      	orrs	r3, r2
 8001264:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001268:	e01a      	b.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800126a:	4a6b      	ldr	r2, [pc, #428]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800126c:	68d3      	ldr	r3, [r2, #12]
 800126e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001272:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001276:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001278:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800127c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001280:	430b      	orrs	r3, r1
 8001282:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001286:	2500      	movs	r5, #0
 8001288:	e79e      	b.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 800128a:	2501      	movs	r5, #1
 800128c:	e79c      	b.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2700      	movs	r7, #0
 8001290:	e7ab      	b.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff f99d 	bl	80005d0 <HAL_GetTick>
 8001296:	eba0 0009 	sub.w	r0, r0, r9
 800129a:	2802      	cmp	r0, #2
 800129c:	d9b0      	bls.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 800129e:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80012a0:	b11f      	cbz	r7, 80012aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80012a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a8:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	07df      	lsls	r7, r3, #31
 80012ae:	d508      	bpl.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012b0:	4959      	ldr	r1, [pc, #356]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012b2:	6a20      	ldr	r0, [r4, #32]
 80012b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012b8:	f022 0203 	bic.w	r2, r2, #3
 80012bc:	4302      	orrs	r2, r0
 80012be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80012c2:	079e      	lsls	r6, r3, #30
 80012c4:	d508      	bpl.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80012c6:	4954      	ldr	r1, [pc, #336]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012ce:	f022 020c 	bic.w	r2, r2, #12
 80012d2:	4302      	orrs	r2, r0
 80012d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80012d8:	0698      	lsls	r0, r3, #26
 80012da:	d508      	bpl.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80012dc:	494e      	ldr	r1, [pc, #312]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012e8:	4302      	orrs	r2, r0
 80012ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80012ee:	0599      	lsls	r1, r3, #22
 80012f0:	d508      	bpl.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80012f2:	4949      	ldr	r1, [pc, #292]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80012f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012fa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012fe:	4302      	orrs	r2, r0
 8001300:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001304:	055a      	lsls	r2, r3, #21
 8001306:	d508      	bpl.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001308:	4943      	ldr	r1, [pc, #268]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800130a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800130c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001310:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001314:	4302      	orrs	r2, r0
 8001316:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800131a:	065f      	lsls	r7, r3, #25
 800131c:	d508      	bpl.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800131e:	493e      	ldr	r1, [pc, #248]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001320:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001322:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001326:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800132a:	4302      	orrs	r2, r0
 800132c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001330:	05de      	lsls	r6, r3, #23
 8001332:	d508      	bpl.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001334:	4938      	ldr	r1, [pc, #224]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001338:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800133c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001340:	4302      	orrs	r2, r0
 8001342:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001346:	0498      	lsls	r0, r3, #18
 8001348:	d50f      	bpl.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800134a:	4a33      	ldr	r2, [pc, #204]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800134c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800134e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001352:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001356:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001358:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001360:	d144      	bne.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001362:	68d3      	ldr	r3, [r2, #12]
 8001364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001368:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	0359      	lsls	r1, r3, #13
 800136e:	d50f      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001370:	4a29      	ldr	r2, [pc, #164]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001372:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001374:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001378:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800137c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800137e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001382:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001386:	d13c      	bne.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001388:	68d3      	ldr	r3, [r2, #12]
 800138a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800138e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	045a      	lsls	r2, r3, #17
 8001394:	d512      	bpl.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001396:	4920      	ldr	r1, [pc, #128]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001398:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800139a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800139e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80013a2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80013a4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80013ac:	d106      	bne.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80013ae:	2102      	movs	r1, #2
 80013b0:	1d20      	adds	r0, r4, #4
 80013b2:	f7ff fe67 	bl	8001084 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80013b6:	2800      	cmp	r0, #0
 80013b8:	bf18      	it	ne
 80013ba:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	d508      	bpl.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80013c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80013ce:	430b      	orrs	r3, r1
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80013d4:	4628      	mov	r0, r5
 80013d6:	b003      	add	sp, #12
 80013d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff f8f8 	bl	80005d0 <HAL_GetTick>
 80013e0:	eba0 0008 	sub.w	r0, r0, r8
 80013e4:	4548      	cmp	r0, r9
 80013e6:	f67f af32 	bls.w	800124e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80013ea:	e758      	b.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80013ec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80013f0:	d1bb      	bne.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80013f2:	2101      	movs	r1, #1
 80013f4:	1d20      	adds	r0, r4, #4
 80013f6:	f7ff fe45 	bl	8001084 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80013fa:	2800      	cmp	r0, #0
 80013fc:	bf18      	it	ne
 80013fe:	4605      	movne	r5, r0
 8001400:	e7b3      	b.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001402:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001406:	d1c3      	bne.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001408:	2101      	movs	r1, #1
 800140a:	1d20      	adds	r0, r4, #4
 800140c:	f7ff fe3a 	bl	8001084 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001410:	2800      	cmp	r0, #0
 8001412:	bf18      	it	ne
 8001414:	4605      	movne	r5, r0
 8001416:	e7bb      	b.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000

08001420 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001420:	6a03      	ldr	r3, [r0, #32]
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001428:	6a03      	ldr	r3, [r0, #32]
{
 800142a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800142c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800142e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001430:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001432:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001436:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800143a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800143c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800143e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001442:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001444:	4c12      	ldr	r4, [pc, #72]	; (8001490 <TIM_OC1_SetConfig+0x70>)
 8001446:	42a0      	cmp	r0, r4
 8001448:	d006      	beq.n	8001458 <TIM_OC1_SetConfig+0x38>
 800144a:	4e12      	ldr	r6, [pc, #72]	; (8001494 <TIM_OC1_SetConfig+0x74>)
 800144c:	42b0      	cmp	r0, r6
 800144e:	d003      	beq.n	8001458 <TIM_OC1_SetConfig+0x38>
 8001450:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001454:	42b0      	cmp	r0, r6
 8001456:	d114      	bne.n	8001482 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001458:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800145a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800145e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001460:	42a0      	cmp	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8001462:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001466:	d006      	beq.n	8001476 <TIM_OC1_SetConfig+0x56>
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <TIM_OC1_SetConfig+0x74>)
 800146a:	42a0      	cmp	r0, r4
 800146c:	d003      	beq.n	8001476 <TIM_OC1_SetConfig+0x56>
 800146e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001472:	42a0      	cmp	r0, r4
 8001474:	d105      	bne.n	8001482 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001476:	694c      	ldr	r4, [r1, #20]
 8001478:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800147a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800147e:	4334      	orrs	r4, r6
 8001480:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001482:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001484:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001486:	684a      	ldr	r2, [r1, #4]
 8001488:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800148a:	6203      	str	r3, [r0, #32]
 800148c:	bd70      	pop	{r4, r5, r6, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40014000 	.word	0x40014000

08001498 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001498:	6a03      	ldr	r3, [r0, #32]
 800149a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014a2:	6842      	ldr	r2, [r0, #4]
{
 80014a4:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014a6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014aa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80014ae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014b2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80014b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80014b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 80014ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014be:	4d0f      	ldr	r5, [pc, #60]	; (80014fc <TIM_OC3_SetConfig+0x64>)
 80014c0:	42a8      	cmp	r0, r5
 80014c2:	d10e      	bne.n	80014e2 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80014c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80014c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80014ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80014ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80014d2:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80014d4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80014d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80014da:	4335      	orrs	r5, r6
 80014dc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80014e0:	e005      	b.n	80014ee <TIM_OC3_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80014e2:	4d07      	ldr	r5, [pc, #28]	; (8001500 <TIM_OC3_SetConfig+0x68>)
 80014e4:	42a8      	cmp	r0, r5
 80014e6:	d0f4      	beq.n	80014d2 <TIM_OC3_SetConfig+0x3a>
 80014e8:	4d06      	ldr	r5, [pc, #24]	; (8001504 <TIM_OC3_SetConfig+0x6c>)
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	d0f1      	beq.n	80014d2 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014ee:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80014f0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80014f2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80014f4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014f6:	6203      	str	r3, [r0, #32]
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
 80014fa:	bf00      	nop
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	40014000 	.word	0x40014000
 8001504:	40014400 	.word	0x40014400

08001508 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001508:	6a03      	ldr	r3, [r0, #32]
 800150a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800150e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001510:	6a02      	ldr	r2, [r0, #32]
{
 8001512:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001514:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001516:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001518:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800151a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001522:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001526:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 800152c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001530:	4d0a      	ldr	r5, [pc, #40]	; (800155c <TIM_OC4_SetConfig+0x54>)
 8001532:	42a8      	cmp	r0, r5
 8001534:	d007      	beq.n	8001546 <TIM_OC4_SetConfig+0x3e>
 8001536:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800153a:	42a8      	cmp	r0, r5
 800153c:	d003      	beq.n	8001546 <TIM_OC4_SetConfig+0x3e>
 800153e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001542:	42a8      	cmp	r0, r5
 8001544:	d104      	bne.n	8001550 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001546:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001548:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800154c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001550:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001552:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001554:	684b      	ldr	r3, [r1, #4]
 8001556:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001558:	6202      	str	r2, [r0, #32]
 800155a:	bd30      	pop	{r4, r5, pc}
 800155c:	40012c00 	.word	0x40012c00

08001560 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001560:	6a03      	ldr	r3, [r0, #32]
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001568:	6a02      	ldr	r2, [r0, #32]
{
 800156a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800156c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800156e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001570:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800157a:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800157c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800157e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001582:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001586:	4d0b      	ldr	r5, [pc, #44]	; (80015b4 <TIM_OC5_SetConfig+0x54>)
 8001588:	42a8      	cmp	r0, r5
 800158a:	d007      	beq.n	800159c <TIM_OC5_SetConfig+0x3c>
 800158c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001590:	42a8      	cmp	r0, r5
 8001592:	d003      	beq.n	800159c <TIM_OC5_SetConfig+0x3c>
 8001594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001598:	42a8      	cmp	r0, r5
 800159a:	d104      	bne.n	80015a6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800159c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800159e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80015a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015a6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80015a8:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80015aa:	684b      	ldr	r3, [r1, #4]
 80015ac:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015ae:	6202      	str	r2, [r0, #32]
 80015b0:	bd30      	pop	{r4, r5, pc}
 80015b2:	bf00      	nop
 80015b4:	40012c00 	.word	0x40012c00

080015b8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80015b8:	6a03      	ldr	r3, [r0, #32]
 80015ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015c0:	6a02      	ldr	r2, [r0, #32]
{
 80015c2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015c4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80015c6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80015c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80015ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80015d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80015d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80015d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20);
 80015dc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015e0:	4d0a      	ldr	r5, [pc, #40]	; (800160c <TIM_OC6_SetConfig+0x54>)
 80015e2:	42a8      	cmp	r0, r5
 80015e4:	d007      	beq.n	80015f6 <TIM_OC6_SetConfig+0x3e>
 80015e6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80015ea:	42a8      	cmp	r0, r5
 80015ec:	d003      	beq.n	80015f6 <TIM_OC6_SetConfig+0x3e>
 80015ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f2:	42a8      	cmp	r0, r5
 80015f4:	d104      	bne.n	8001600 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80015f6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80015f8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80015fc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001600:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001602:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001604:	684b      	ldr	r3, [r1, #4]
 8001606:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001608:	6202      	str	r2, [r0, #32]
 800160a:	bd30      	pop	{r4, r5, pc}
 800160c:	40012c00 	.word	0x40012c00

08001610 <HAL_TIM_PWM_MspInit>:
 8001610:	4770      	bx	lr
	...

08001614 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001616:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001618:	4290      	cmp	r0, r2
{
 800161a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800161c:	d002      	beq.n	8001624 <TIM_Base_SetConfig+0x10>
 800161e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001622:	d109      	bne.n	8001638 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8001624:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800162a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800162c:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001630:	d009      	beq.n	8001646 <TIM_Base_SetConfig+0x32>
 8001632:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001636:	d006      	beq.n	8001646 <TIM_Base_SetConfig+0x32>
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <TIM_Base_SetConfig+0x70>)
 800163a:	4290      	cmp	r0, r2
 800163c:	d003      	beq.n	8001646 <TIM_Base_SetConfig+0x32>
 800163e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001642:	4290      	cmp	r0, r2
 8001644:	d103      	bne.n	800164e <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001646:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800164c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800164e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001654:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001656:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001658:	688b      	ldr	r3, [r1, #8]
 800165a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800165c:	680b      	ldr	r3, [r1, #0]
 800165e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <TIM_Base_SetConfig+0x6c>)
 8001662:	4298      	cmp	r0, r3
 8001664:	d007      	beq.n	8001676 <TIM_Base_SetConfig+0x62>
 8001666:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800166a:	4298      	cmp	r0, r3
 800166c:	d003      	beq.n	8001676 <TIM_Base_SetConfig+0x62>
 800166e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001672:	4298      	cmp	r0, r3
 8001674:	d101      	bne.n	800167a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8001676:	690b      	ldr	r3, [r1, #16]
 8001678:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800167a:	2301      	movs	r3, #1
 800167c:	6143      	str	r3, [r0, #20]
 800167e:	bd10      	pop	{r4, pc}
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40014000 	.word	0x40014000

08001688 <HAL_TIM_Base_Init>:
{
 8001688:	b510      	push	{r4, lr}
  if(htim == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b1a0      	cbz	r0, 80016b8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800168e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001696:	b91b      	cbnz	r3, 80016a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001698:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800169c:	f000 ff1a 	bl	80024d4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	1d21      	adds	r1, r4, #4
 80016aa:	f7ff ffb3 	bl	8001614 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
}
 80016ba:	bd10      	pop	{r4, pc}

080016bc <HAL_TIM_PWM_Init>:
{
 80016bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016be:	4604      	mov	r4, r0
 80016c0:	b1a0      	cbz	r0, 80016ec <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ca:	b91b      	cbnz	r3, 80016d4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80016d0:	f7ff ff9e 	bl	8001610 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	1d21      	adds	r1, r4, #4
 80016de:	f7ff ff99 	bl	8001614 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f023 0310 	bic.w	r3, r3, #16
 80016f6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80016f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80016fa:	6842      	ldr	r2, [r0, #4]
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80016fe:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001702:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001706:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800170a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800170e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001710:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001714:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001718:	4d0e      	ldr	r5, [pc, #56]	; (8001754 <TIM_OC2_SetConfig+0x64>)
 800171a:	42a8      	cmp	r0, r5
 800171c:	d10e      	bne.n	800173c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800171e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001724:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800172c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800172e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001734:	4335      	orrs	r5, r6
 8001736:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800173a:	e005      	b.n	8001748 <TIM_OC2_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800173c:	4d06      	ldr	r5, [pc, #24]	; (8001758 <TIM_OC2_SetConfig+0x68>)
 800173e:	42a8      	cmp	r0, r5
 8001740:	d0f4      	beq.n	800172c <TIM_OC2_SetConfig+0x3c>
 8001742:	4d06      	ldr	r5, [pc, #24]	; (800175c <TIM_OC2_SetConfig+0x6c>)
 8001744:	42a8      	cmp	r0, r5
 8001746:	d0f1      	beq.n	800172c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8001748:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800174a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800174c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800174e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001750:	6203      	str	r3, [r0, #32]
}
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	40012c00 	.word	0x40012c00
 8001758:	40014000 	.word	0x40014000
 800175c:	40014400 	.word	0x40014400

08001760 <HAL_TIM_PWM_ConfigChannel>:
{
 8001760:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001762:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001766:	2b01      	cmp	r3, #1
{
 8001768:	4604      	mov	r4, r0
 800176a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800176e:	d010      	beq.n	8001792 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001770:	2301      	movs	r3, #1
  switch (Channel)
 8001772:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001774:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800177c:	d043      	beq.n	8001806 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800177e:	d809      	bhi.n	8001794 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001780:	b1fa      	cbz	r2, 80017c2 <HAL_TIM_PWM_ConfigChannel+0x62>
 8001782:	2a04      	cmp	r2, #4
 8001784:	d02e      	beq.n	80017e4 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8001786:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001788:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800178a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800178e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001792:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001794:	2a10      	cmp	r2, #16
 8001796:	d047      	beq.n	8001828 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8001798:	2a14      	cmp	r2, #20
 800179a:	d056      	beq.n	800184a <HAL_TIM_PWM_ConfigChannel+0xea>
 800179c:	2a0c      	cmp	r2, #12
 800179e:	d1f2      	bne.n	8001786 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	f7ff feb1 	bl	8001508 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80017a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017c0:	e030      	b.n	8001824 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	f7ff fe2c 	bl	8001420 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	f042 0208 	orr.w	r2, r2, #8
 80017d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017e0:	619a      	str	r2, [r3, #24]
    break;
 80017e2:	e7d0      	b.n	8001786 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017e4:	6820      	ldr	r0, [r4, #0]
 80017e6:	f7ff ff83 	bl	80016f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001804:	e7ec      	b.n	80017e0 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001806:	6820      	ldr	r0, [r4, #0]
 8001808:	f7ff fe46 	bl	8001498 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800180c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800180e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	f042 0208 	orr.w	r2, r2, #8
 8001816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001824:	61da      	str	r2, [r3, #28]
    break;
 8001826:	e7ae      	b.n	8001786 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	f7ff fe99 	bl	8001560 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800182e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001830:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001834:	f042 0208 	orr.w	r2, r2, #8
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800183a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800183c:	f022 0204 	bic.w	r2, r2, #4
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001844:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001848:	e79d      	b.n	8001786 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f7ff feb4 	bl	80015b8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001850:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001852:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800185c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001866:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800186a:	e7ec      	b.n	8001846 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800186c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800186c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800186e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001870:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001872:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001876:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800187a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800187c:	6083      	str	r3, [r0, #8]
 800187e:	bd10      	pop	{r4, pc}

08001880 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001880:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
{
 8001886:	b570      	push	{r4, r5, r6, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800188e:	d01a      	beq.n	80018c6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001894:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001896:	2301      	movs	r3, #1
 8001898:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800189c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_TIM_ConfigClockSource+0x168>)
 80018a0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80018a2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80018a4:	680b      	ldr	r3, [r1, #0]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d075      	beq.n	8001996 <HAL_TIM_ConfigClockSource+0x116>
 80018aa:	d818      	bhi.n	80018de <HAL_TIM_ConfigClockSource+0x5e>
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	f000 808f 	beq.w	80019d0 <HAL_TIM_ConfigClockSource+0x150>
 80018b2:	d809      	bhi.n	80018c8 <HAL_TIM_ConfigClockSource+0x48>
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8085 	beq.w	80019c4 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80018ba:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80018c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	f000 8087 	beq.w	80019dc <HAL_TIM_ConfigClockSource+0x15c>
 80018ce:	2b30      	cmp	r3, #48	; 0x30
 80018d0:	d1f3      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80018d2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80018d8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80018dc:	e033      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80018de:	2b70      	cmp	r3, #112	; 0x70
 80018e0:	d033      	beq.n	800194a <HAL_TIM_ConfigClockSource+0xca>
 80018e2:	d81b      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x9c>
 80018e4:	2b50      	cmp	r3, #80	; 0x50
 80018e6:	d03f      	beq.n	8001968 <HAL_TIM_ConfigClockSource+0xe8>
 80018e8:	2b60      	cmp	r3, #96	; 0x60
 80018ea:	d1e6      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ec:	684d      	ldr	r5, [r1, #4]
 80018ee:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f0:	6a01      	ldr	r1, [r0, #32]
 80018f2:	f021 0110 	bic.w	r1, r1, #16
 80018f6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80018fa:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018fc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001904:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001908:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800190c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800190e:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001910:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001916:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800191a:	e014      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800191c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001920:	d00c      	beq.n	800193c <HAL_TIM_ConfigClockSource+0xbc>
 8001922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001926:	d1c8      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 8001928:	68cb      	ldr	r3, [r1, #12]
 800192a:	684a      	ldr	r2, [r1, #4]
 800192c:	6889      	ldr	r1, [r1, #8]
 800192e:	f7ff ff9d 	bl	800186c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6893      	ldr	r3, [r2, #8]
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	e013      	b.n	8001964 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800193c:	6883      	ldr	r3, [r0, #8]
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001946:	6083      	str	r3, [r0, #8]
 8001948:	e7b7      	b.n	80018ba <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 800194a:	68cb      	ldr	r3, [r1, #12]
 800194c:	684a      	ldr	r2, [r1, #4]
 800194e:	6889      	ldr	r1, [r1, #8]
 8001950:	f7ff ff8c 	bl	800186c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001964:	6093      	str	r3, [r2, #8]
    break;
 8001966:	e7a8      	b.n	80018ba <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001968:	684a      	ldr	r2, [r1, #4]
 800196a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800196c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800196e:	6a05      	ldr	r5, [r0, #32]
 8001970:	f025 0501 	bic.w	r5, r5, #1
 8001974:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001976:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001978:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001980:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001984:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001986:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001988:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800198a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800198c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001990:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001994:	e7d7      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001996:	684a      	ldr	r2, [r1, #4]
 8001998:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800199a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800199c:	6a05      	ldr	r5, [r0, #32]
 800199e:	f025 0501 	bic.w	r5, r5, #1
 80019a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019a4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80019ae:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80019b2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019b6:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80019b8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019be:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80019c2:	e7c0      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80019c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019ca:	f043 0307 	orr.w	r3, r3, #7
 80019ce:	e7ba      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80019d0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019d6:	f043 0317 	orr.w	r3, r3, #23
 80019da:	e7b4      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80019dc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019e2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80019e6:	e7ae      	b.n	8001946 <HAL_TIM_ConfigClockSource+0xc6>
 80019e8:	fffe0088 	.word	0xfffe0088

080019ec <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019ec:	6a03      	ldr	r3, [r0, #32]
{
 80019ee:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80019f0:	2401      	movs	r4, #1
 80019f2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80019f4:	ea23 0304 	bic.w	r3, r3, r4
 80019f8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80019fa:	6a03      	ldr	r3, [r0, #32]
 80019fc:	408a      	lsls	r2, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	6202      	str	r2, [r0, #32]
 8001a02:	bd10      	pop	{r4, pc}

08001a04 <HAL_TIM_PWM_Stop>:
{
 8001a04:	b510      	push	{r4, lr}
 8001a06:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6800      	ldr	r0, [r0, #0]
 8001a0c:	f7ff ffee 	bl	80019ec <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_TIM_PWM_Stop+0x68>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_TIM_PWM_Stop+0x24>
 8001a18:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_TIM_PWM_Stop+0x24>
 8001a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d10d      	bne.n	8001a44 <HAL_TIM_PWM_Stop+0x40>
    __HAL_TIM_MOE_DISABLE(htim);
 8001a28:	6a19      	ldr	r1, [r3, #32]
 8001a2a:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a2e:	4211      	tst	r1, r2
 8001a30:	d108      	bne.n	8001a44 <HAL_TIM_PWM_Stop+0x40>
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	f240 4244 	movw	r2, #1092	; 0x444
 8001a38:	4211      	tst	r1, r2
 8001a3a:	bf02      	ittt	eq
 8001a3c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001a3e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001a42:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001a44:	6a19      	ldr	r1, [r3, #32]
 8001a46:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a4a:	4211      	tst	r1, r2
 8001a4c:	d108      	bne.n	8001a60 <HAL_TIM_PWM_Stop+0x5c>
 8001a4e:	6a19      	ldr	r1, [r3, #32]
 8001a50:	f240 4244 	movw	r2, #1092	; 0x444
 8001a54:	4211      	tst	r1, r2
 8001a56:	d103      	bne.n	8001a60 <HAL_TIM_PWM_Stop+0x5c>
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001a66:	2000      	movs	r0, #0
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <TIM_CCxNChannelCmd>:
  uint32_t tmp = 0;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001a70:	6a03      	ldr	r3, [r0, #32]
{
 8001a72:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << Channel;
 8001a74:	2404      	movs	r4, #4
 8001a76:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8001a78:	ea23 0304 	bic.w	r3, r3, r4
 8001a7c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8001a7e:	6a03      	ldr	r3, [r0, #32]
 8001a80:	408a      	lsls	r2, r1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	6202      	str	r2, [r0, #32]
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <HAL_TIMEx_PWMN_Start>:
{
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	6800      	ldr	r0, [r0, #0]
 8001a90:	f7ff ffee 	bl	8001a70 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	bd10      	pop	{r4, pc}
	...

08001aac <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001aac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ab0:	2b01      	cmp	r3, #1
{
 8001ab2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001ab4:	d018      	beq.n	8001ae8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001ab6:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ab8:	4d0c      	ldr	r5, [pc, #48]	; (8001aec <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001aba:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001abc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001abe:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ac0:	bf02      	ittt	eq
 8001ac2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ac4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ac8:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001aca:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001acc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ad2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ad4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001ad8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ada:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001adc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001ade:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001ae0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001ae8:	2002      	movs	r0, #2
}
 8001aea:	bd30      	pop	{r4, r5, pc}
 8001aec:	40012c00 	.word	0x40012c00

08001af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8001af0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
{
 8001af6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001af8:	d034      	beq.n	8001b64 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001afa:	68cb      	ldr	r3, [r1, #12]
 8001afc:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001afe:	4c1a      	ldr	r4, [pc, #104]	; (8001b68 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001b06:	684a      	ldr	r2, [r1, #4]
 8001b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001b0e:	680a      	ldr	r2, [r1, #0]
 8001b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001b16:	690a      	ldr	r2, [r1, #16]
 8001b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001b1e:	694a      	ldr	r2, [r1, #20]
 8001b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b26:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001b2e:	698a      	ldr	r2, [r1, #24]
 8001b30:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001b38:	6802      	ldr	r2, [r0, #0]
 8001b3a:	42a2      	cmp	r2, r4
 8001b3c:	d10c      	bne.n	8001b58 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001b3e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001b40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b44:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b48:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b4a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001b56:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8001b64:	2002      	movs	r0, #2
}
 8001b66:	bd10      	pop	{r4, pc}
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001b6c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b6e:	69c1      	ldr	r1, [r0, #28]
{
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b74:	6883      	ldr	r3, [r0, #8]
 8001b76:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b78:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b7a:	4303      	orrs	r3, r0
 8001b7c:	6960      	ldr	r0, [r4, #20]
 8001b7e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b80:	4882      	ldr	r0, [pc, #520]	; (8001d8c <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b82:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b84:	4028      	ands	r0, r5
 8001b86:	4303      	orrs	r3, r0
 8001b88:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8a:	6853      	ldr	r3, [r2, #4]
 8001b8c:	68e0      	ldr	r0, [r4, #12]
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b92:	4303      	orrs	r3, r0
 8001b94:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b96:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b98:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b9a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b9c:	bf1c      	itt	ne
 8001b9e:	6a23      	ldrne	r3, [r4, #32]
 8001ba0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ba2:	6893      	ldr	r3, [r2, #8]
 8001ba4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001ba8:	4303      	orrs	r3, r0
 8001baa:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bac:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <UART_SetConfig+0x228>)
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d114      	bne.n	8001bdc <UART_SetConfig+0x70>
 8001bb2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001bb6:	4a78      	ldr	r2, [pc, #480]	; (8001d98 <UART_SetConfig+0x22c>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	f040 80aa 	bne.w	8001d1e <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d820      	bhi.n	8001c10 <UART_SetConfig+0xa4>
 8001bce:	e8df f003 	tbb	[pc, r3]
 8001bd2:	8f77      	.short	0x8f77
 8001bd4:	1f9b1f92 	.word	0x1f9b1f92
 8001bd8:	1f1f      	.short	0x1f1f
 8001bda:	9e          	.byte	0x9e
 8001bdb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <UART_SetConfig+0x230>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d107      	bne.n	8001bf2 <UART_SetConfig+0x86>
 8001be2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <UART_SetConfig+0x234>)
 8001be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	e7e6      	b.n	8001bc0 <UART_SetConfig+0x54>
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <UART_SetConfig+0x224>)
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 80c2 	bne.w	8001d7e <UART_SetConfig+0x212>
 8001bfa:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001bfe:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c02:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001c06:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001c0a:	d02a      	beq.n	8001c62 <UART_SetConfig+0xf6>
 8001c0c:	d806      	bhi.n	8001c1c <UART_SetConfig+0xb0>
 8001c0e:	b315      	cbz	r5, 8001c56 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001c10:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c16:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8001c18:	4610      	mov	r0, r2
 8001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001c20:	d006      	beq.n	8001c30 <UART_SetConfig+0xc4>
 8001c22:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001c26:	d1f3      	bne.n	8001c10 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c2c:	2508      	movs	r5, #8
 8001c2e:	e001      	b.n	8001c34 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001c30:	485c      	ldr	r0, [pc, #368]	; (8001da4 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c32:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001c34:	6862      	ldr	r2, [r4, #4]
 8001c36:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c3a:	4283      	cmp	r3, r0
 8001c3c:	d8e8      	bhi.n	8001c10 <UART_SetConfig+0xa4>
 8001c3e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c42:	d8e5      	bhi.n	8001c10 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001c44:	2d08      	cmp	r5, #8
 8001c46:	d838      	bhi.n	8001cba <UART_SetConfig+0x14e>
 8001c48:	e8df f005 	tbb	[pc, r5]
 8001c4c:	3726370f 	.word	0x3726370f
 8001c50:	3737372e 	.word	0x3737372e
 8001c54:	31          	.byte	0x31
 8001c55:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001c56:	f7ff f9f5 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d1ea      	bne.n	8001c34 <UART_SetConfig+0xc8>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	e7d7      	b.n	8001c12 <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001c62:	f7fe fe6f 	bl	8000944 <HAL_RCC_GetSysClockFreq>
      break;
 8001c66:	2504      	movs	r5, #4
 8001c68:	e7f7      	b.n	8001c5a <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c6a:	f7ff f9eb 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c74:	0856      	lsrs	r6, r2, #1
 8001c76:	2700      	movs	r7, #0
 8001c78:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	4630      	mov	r0, r6
 8001c80:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c82:	f7fe faf5 	bl	8000270 <__aeabi_uldivmod>
          break;
 8001c86:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <UART_SetConfig+0x23c>)
 8001c8a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	d8be      	bhi.n	8001c10 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	60d8      	str	r0, [r3, #12]
 8001c96:	e7bc      	b.n	8001c12 <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c98:	4844      	ldr	r0, [pc, #272]	; (8001dac <UART_SetConfig+0x240>)
 8001c9a:	0855      	lsrs	r5, r2, #1
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ca2:	f141 0100 	adc.w	r1, r1, #0
 8001ca6:	e7ec      	b.n	8001c82 <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ca8:	f7fe fe4c 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8001cac:	e7df      	b.n	8001c6e <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cae:	0850      	lsrs	r0, r2, #1
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001cb8:	e7f3      	b.n	8001ca2 <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 8001cba:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e7e3      	b.n	8001c88 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cc0:	f7ff f9c0 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cc4:	6861      	ldr	r1, [r4, #4]
 8001cc6:	084a      	lsrs	r2, r1, #1
 8001cc8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cd2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cd4:	f1a3 0010 	sub.w	r0, r3, #16
 8001cd8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001cdc:	4288      	cmp	r0, r1
 8001cde:	d897      	bhi.n	8001c10 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001ce0:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001ce4:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ce6:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60c3      	str	r3, [r0, #12]
 8001cee:	e790      	b.n	8001c12 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cf0:	f7ff f9b8 	bl	8001064 <HAL_RCC_GetPCLK2Freq>
 8001cf4:	e7e6      	b.n	8001cc4 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001cf6:	6860      	ldr	r0, [r4, #4]
 8001cf8:	0843      	lsrs	r3, r0, #1
 8001cfa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001cfe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d02:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d06:	e7e3      	b.n	8001cd0 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d08:	f7fe fe1c 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8001d0c:	e7da      	b.n	8001cc4 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d0e:	6860      	ldr	r0, [r4, #4]
 8001d10:	0843      	lsrs	r3, r0, #1
 8001d12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d16:	e7f4      	b.n	8001d02 <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8001d18:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e7da      	b.n	8001cd4 <UART_SetConfig+0x168>
    switch (clocksource)
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d830      	bhi.n	8001d84 <UART_SetConfig+0x218>
 8001d22:	e8df f003 	tbb	[pc, r3]
 8001d26:	1805      	.short	0x1805
 8001d28:	2f242f1b 	.word	0x2f242f1b
 8001d2c:	2f2f      	.short	0x2f2f
 8001d2e:	27          	.byte	0x27
 8001d2f:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d30:	f7ff f988 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d34:	6862      	ldr	r2, [r4, #4]
 8001d36:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d3e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d40:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d42:	f1a3 0010 	sub.w	r0, r3, #16
 8001d46:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d4a:	4288      	cmp	r0, r1
 8001d4c:	f63f af60 	bhi.w	8001c10 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001d50:	6821      	ldr	r1, [r4, #0]
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e75d      	b.n	8001c12 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d56:	f7ff f985 	bl	8001064 <HAL_RCC_GetPCLK2Freq>
 8001d5a:	e7eb      	b.n	8001d34 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d5c:	6860      	ldr	r0, [r4, #4]
 8001d5e:	0843      	lsrs	r3, r0, #1
 8001d60:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001d64:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d68:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d6c:	e7e7      	b.n	8001d3e <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d6e:	f7fe fde9 	bl	8000944 <HAL_RCC_GetSysClockFreq>
 8001d72:	e7df      	b.n	8001d34 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d74:	6860      	ldr	r0, [r4, #4]
 8001d76:	0843      	lsrs	r3, r0, #1
 8001d78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d7c:	e7f4      	b.n	8001d68 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d82:	d0c9      	beq.n	8001d18 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 8001d84:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e7db      	b.n	8001d42 <UART_SetConfig+0x1d6>
 8001d8a:	bf00      	nop
 8001d8c:	efff69f3 	.word	0xefff69f3
 8001d90:	40008000 	.word	0x40008000
 8001d94:	40013800 	.word	0x40013800
 8001d98:	08003c8c 	.word	0x08003c8c
 8001d9c:	40004400 	.word	0x40004400
 8001da0:	08003c90 	.word	0x08003c90
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	000ffcff 	.word	0x000ffcff
 8001dac:	f4240000 	.word	0xf4240000

08001db0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001db0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001db2:	07da      	lsls	r2, r3, #31
{
 8001db4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001db6:	d506      	bpl.n	8001dc6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001db8:	6801      	ldr	r1, [r0, #0]
 8001dba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001dbc:	684a      	ldr	r2, [r1, #4]
 8001dbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001dc2:	4322      	orrs	r2, r4
 8001dc4:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dc6:	079c      	lsls	r4, r3, #30
 8001dc8:	d506      	bpl.n	8001dd8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dca:	6801      	ldr	r1, [r0, #0]
 8001dcc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001dce:	684a      	ldr	r2, [r1, #4]
 8001dd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dd4:	4322      	orrs	r2, r4
 8001dd6:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dd8:	0759      	lsls	r1, r3, #29
 8001dda:	d506      	bpl.n	8001dea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ddc:	6801      	ldr	r1, [r0, #0]
 8001dde:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001de0:	684a      	ldr	r2, [r1, #4]
 8001de2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de6:	4322      	orrs	r2, r4
 8001de8:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dea:	071a      	lsls	r2, r3, #28
 8001dec:	d506      	bpl.n	8001dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dee:	6801      	ldr	r1, [r0, #0]
 8001df0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001df2:	684a      	ldr	r2, [r1, #4]
 8001df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df8:	4322      	orrs	r2, r4
 8001dfa:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001dfc:	06dc      	lsls	r4, r3, #27
 8001dfe:	d506      	bpl.n	8001e0e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e00:	6801      	ldr	r1, [r0, #0]
 8001e02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e04:	688a      	ldr	r2, [r1, #8]
 8001e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e0a:	4322      	orrs	r2, r4
 8001e0c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e0e:	0699      	lsls	r1, r3, #26
 8001e10:	d506      	bpl.n	8001e20 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e12:	6801      	ldr	r1, [r0, #0]
 8001e14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e16:	688a      	ldr	r2, [r1, #8]
 8001e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1c:	4322      	orrs	r2, r4
 8001e1e:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e20:	065a      	lsls	r2, r3, #25
 8001e22:	d50f      	bpl.n	8001e44 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e24:	6801      	ldr	r1, [r0, #0]
 8001e26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e28:	684a      	ldr	r2, [r1, #4]
 8001e2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e2e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e34:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e36:	d105      	bne.n	8001e44 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e38:	684a      	ldr	r2, [r1, #4]
 8001e3a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e3c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e40:	4322      	orrs	r2, r4
 8001e42:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	d506      	bpl.n	8001e56 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e48:	6802      	ldr	r2, [r0, #0]
 8001e4a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e4c:	6853      	ldr	r3, [r2, #4]
 8001e4e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e52:	430b      	orrs	r3, r1
 8001e54:	6053      	str	r3, [r2, #4]
 8001e56:	bd10      	pop	{r4, pc}

08001e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5c:	9d06      	ldr	r5, [sp, #24]
 8001e5e:	4604      	mov	r4, r0
 8001e60:	460f      	mov	r7, r1
 8001e62:	4616      	mov	r6, r2
 8001e64:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e66:	6821      	ldr	r1, [r4, #0]
 8001e68:	69ca      	ldr	r2, [r1, #28]
 8001e6a:	ea37 0302 	bics.w	r3, r7, r2
 8001e6e:	bf0c      	ite	eq
 8001e70:	2201      	moveq	r2, #1
 8001e72:	2200      	movne	r2, #0
 8001e74:	42b2      	cmp	r2, r6
 8001e76:	d002      	beq.n	8001e7e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e78:	2000      	movs	r0, #0
}
 8001e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e7e:	1c6b      	adds	r3, r5, #1
 8001e80:	d0f2      	beq.n	8001e68 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e82:	b99d      	cbnz	r5, 8001eac <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e96:	2320      	movs	r3, #32
 8001e98:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001eac:	f7fe fb90 	bl	80005d0 <HAL_GetTick>
 8001eb0:	eba0 0008 	sub.w	r0, r0, r8
 8001eb4:	4285      	cmp	r5, r0
 8001eb6:	d2d6      	bcs.n	8001e66 <UART_WaitOnFlagUntilTimeout+0xe>
 8001eb8:	e7e4      	b.n	8001e84 <UART_WaitOnFlagUntilTimeout+0x2c>

08001eba <HAL_UART_Transmit>:
{
 8001eba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ebe:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001ec0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001ec4:	2b20      	cmp	r3, #32
{
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001ecc:	d14a      	bne.n	8001f64 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	d046      	beq.n	8001f60 <HAL_UART_Transmit+0xa6>
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d044      	beq.n	8001f60 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001ed6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d042      	beq.n	8001f64 <HAL_UART_Transmit+0xaa>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ee8:	2321      	movs	r3, #33	; 0x21
 8001eea:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001eee:	f7fe fb6f 	bl	80005d0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001ef2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001ef6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001ef8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001efc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f00:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8001f02:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f04:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8001f06:	b952      	cbnz	r2, 8001f1e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ffa4 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8001f10:	b958      	cbnz	r0, 8001f2a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001f12:	2320      	movs	r3, #32
 8001f14:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001f18:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001f1c:	e006      	b.n	8001f2c <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff98 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8001f28:	b118      	cbz	r0, 8001f32 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001f2a:	2003      	movs	r0, #3
}
 8001f2c:	b002      	add	sp, #8
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f32:	68a3      	ldr	r3, [r4, #8]
 8001f34:	6822      	ldr	r2, [r4, #0]
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3a:	d10d      	bne.n	8001f58 <HAL_UART_Transmit+0x9e>
 8001f3c:	6923      	ldr	r3, [r4, #16]
 8001f3e:	b95b      	cbnz	r3, 8001f58 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001f40:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f48:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001f4a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001f56:	e7d1      	b.n	8001efc <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001f58:	782b      	ldrb	r3, [r5, #0]
 8001f5a:	8513      	strh	r3, [r2, #40]	; 0x28
 8001f5c:	3501      	adds	r5, #1
 8001f5e:	e7f4      	b.n	8001f4a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
 8001f62:	e7e3      	b.n	8001f2c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001f64:	2002      	movs	r0, #2
 8001f66:	e7e1      	b.n	8001f2c <HAL_UART_Transmit+0x72>

08001f68 <HAL_UART_Receive>:
{
 8001f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f6c:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f6e:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001f72:	2b20      	cmp	r3, #32
{
 8001f74:	4604      	mov	r4, r0
 8001f76:	460d      	mov	r5, r1
 8001f78:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f7a:	d160      	bne.n	800203e <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_UART_Receive+0xd2>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d05a      	beq.n	800203a <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8001f84:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d058      	beq.n	800203e <HAL_UART_Receive+0xd6>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f96:	2322      	movs	r3, #34	; 0x22
 8001f98:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fb18 	bl	80005d0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001fa0:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8001fa2:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001faa:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001fac:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001fb0:	d115      	bne.n	8001fde <HAL_UART_Receive+0x76>
 8001fb2:	6923      	ldr	r3, [r4, #16]
 8001fb4:	b98b      	cbnz	r3, 8001fda <HAL_UART_Receive+0x72>
 8001fb6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001fba:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001fbe:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8001fc2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001fc6:	b280      	uxth	r0, r0
 8001fc8:	b9b8      	cbnz	r0, 8001ffa <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8001fd0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001fd4:	b002      	add	sp, #8
 8001fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	e7ed      	b.n	8001fba <HAL_UART_Receive+0x52>
 8001fde:	b923      	cbnz	r3, 8001fea <HAL_UART_Receive+0x82>
 8001fe0:	6923      	ldr	r3, [r4, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f9      	beq.n	8001fda <HAL_UART_Receive+0x72>
 8001fe6:	237f      	movs	r3, #127	; 0x7f
 8001fe8:	e7e7      	b.n	8001fba <HAL_UART_Receive+0x52>
 8001fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fee:	d1e6      	bne.n	8001fbe <HAL_UART_Receive+0x56>
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f7      	beq.n	8001fe6 <HAL_UART_Receive+0x7e>
 8001ff6:	233f      	movs	r3, #63	; 0x3f
 8001ff8:	e7df      	b.n	8001fba <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	f8cd 8000 	str.w	r8, [sp]
 8001ffe:	463b      	mov	r3, r7
 8002000:	2200      	movs	r2, #0
 8002002:	2120      	movs	r1, #32
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff ff27 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 800200a:	b9d0      	cbnz	r0, 8002042 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800200c:	68a3      	ldr	r3, [r4, #8]
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	d10c      	bne.n	8002030 <HAL_UART_Receive+0xc8>
 8002016:	6922      	ldr	r2, [r4, #16]
 8002018:	b952      	cbnz	r2, 8002030 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800201a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800201c:	4033      	ands	r3, r6
 800201e:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8002022:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002026:	3b01      	subs	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800202e:	e7c8      	b.n	8001fc2 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002030:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002032:	4033      	ands	r3, r6
 8002034:	702b      	strb	r3, [r5, #0]
 8002036:	3501      	adds	r5, #1
 8002038:	e7f3      	b.n	8002022 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 800203a:	2001      	movs	r0, #1
 800203c:	e7ca      	b.n	8001fd4 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800203e:	2002      	movs	r0, #2
 8002040:	e7c8      	b.n	8001fd4 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e7c6      	b.n	8001fd4 <HAL_UART_Receive+0x6c>

08002046 <UART_CheckIdleState>:
{
 8002046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002048:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204a:	2600      	movs	r6, #0
 800204c:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800204e:	f7fe fabf 	bl	80005d0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002058:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800205a:	d417      	bmi.n	800208c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	075b      	lsls	r3, r3, #29
 8002062:	d50a      	bpl.n	800207a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	462b      	mov	r3, r5
 800206e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002072:	4620      	mov	r0, r4
 8002074:	f7ff fef0 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 8002078:	b9a0      	cbnz	r0, 80020a4 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800207a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800207c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800207e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002082:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8002086:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800208a:	e00c      	b.n	80020a6 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800208c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4632      	mov	r2, r6
 8002094:	4603      	mov	r3, r0
 8002096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fedc 	bl	8001e58 <UART_WaitOnFlagUntilTimeout>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d0db      	beq.n	800205c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80020a4:	2003      	movs	r0, #3
}
 80020a6:	b002      	add	sp, #8
 80020a8:	bd70      	pop	{r4, r5, r6, pc}

080020aa <HAL_UART_Init>:
{
 80020aa:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020ac:	4604      	mov	r4, r0
 80020ae:	b360      	cbz	r0, 800210a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020b0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80020b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b8:	b91b      	cbnz	r3, 80020c2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020ba:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020be:	f000 fa35 	bl	800252c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	2324      	movs	r3, #36	; 0x24
 80020c6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fd4a 	bl	8001b6c <UART_SetConfig>
 80020d8:	2801      	cmp	r0, #1
 80020da:	d016      	beq.n	800210a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020de:	b113      	cbz	r3, 80020e6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff fe65 	bl	8001db0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80020fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002106:	f7ff bf9e 	b.w	8002046 <UART_CheckIdleState>
}
 800210a:	2001      	movs	r0, #1
 800210c:	bd10      	pop	{r4, pc}
	...

08002110 <setupPWMandTurnOn>:
//
// RETURNS       :
//   This function has no returns

void setupPWMandTurnOn(TIM_HandleTypeDef* htim1, int32_t pwmPeriod)
{
 8002110:	b570      	push	{r4, r5, r6, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1->Instance = TIM1;
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <setupPWMandTurnOn+0xb8>)
 8002114:	6003      	str	r3, [r0, #0]
{
 8002116:	4604      	mov	r4, r0
	htim1->Init.Prescaler = 0;
 8002118:	2300      	movs	r3, #0
{
 800211a:	b09a      	sub	sp, #104	; 0x68
	htim1->Init.Prescaler = 0;
 800211c:	6043      	str	r3, [r0, #4]
	htim1->Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	6083      	str	r3, [r0, #8]
	htim1->Init.Period = pwmPeriod;
 8002120:	60e1      	str	r1, [r4, #12]
	htim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	6103      	str	r3, [r0, #16]
	htim1->Init.RepetitionCounter = 0;
 8002124:	6143      	str	r3, [r0, #20]
	htim1->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	6183      	str	r3, [r0, #24]
{
 8002128:	460e      	mov	r6, r1

	if (HAL_TIM_Base_Init(&*htim1) != HAL_OK)
 800212a:	f7ff faad 	bl	8001688 <HAL_TIM_Base_Init>
 800212e:	b100      	cbz	r0, 8002132 <setupPWMandTurnOn+0x22>
 8002130:	e7fe      	b.n	8002130 <setupPWMandTurnOn+0x20>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002132:	a91a      	add	r1, sp, #104	; 0x68
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	f841 3d58 	str.w	r3, [r1, #-88]!

	if (HAL_TIM_ConfigClockSource(&*htim1, &sClockSourceConfig) != HAL_OK)
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff fb9f 	bl	8001880 <HAL_TIM_ConfigClockSource>
 8002142:	b100      	cbz	r0, 8002146 <setupPWMandTurnOn+0x36>
 8002144:	e7fe      	b.n	8002144 <setupPWMandTurnOn+0x34>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	if (HAL_TIM_PWM_Init(&*htim1) != HAL_OK)
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff fab8 	bl	80016bc <HAL_TIM_PWM_Init>
 800214c:	b100      	cbz	r0, 8002150 <setupPWMandTurnOn+0x40>
 800214e:	e7fe      	b.n	800214e <setupPWMandTurnOn+0x3e>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	9001      	str	r0, [sp, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002152:	9002      	str	r0, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	9003      	str	r0, [sp, #12]

	if (HAL_TIMEx_MasterConfigSynchronization(&*htim1, &sMasterConfig)
 8002156:	a901      	add	r1, sp, #4
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff fca7 	bl	8001aac <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4605      	mov	r5, r0
 8002160:	b100      	cbz	r0, 8002164 <setupPWMandTurnOn+0x54>
 8002162:	e7fe      	b.n	8002162 <setupPWMandTurnOn+0x52>

	/* As suggested by Rudy as he experienced some issues at start-up.
	 *
	 * ST Tech support suggested adding this line to remove the issue
	 ***************************************/
	HAL_TIM_PWM_Stop(&*htim1, TIM_CHANNEL_1);
 8002164:	4601      	mov	r1, r0
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff fc4c 	bl	8001a04 <HAL_TIM_PWM_Stop>
	/***************************************/

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216c:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;

	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
 800216e:	462a      	mov	r2, r5
 8002170:	a908      	add	r1, sp, #32
 8002172:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002174:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	950a      	str	r5, [sp, #40]	; 0x28
	sConfigOC.Pulse = pwmPeriod / 2;
 8002178:	2302      	movs	r3, #2
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800217a:	950b      	str	r5, [sp, #44]	; 0x2c
	sConfigOC.Pulse = pwmPeriod / 2;
 800217c:	fb96 f6f3 	sdiv	r6, r6, r3
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002180:	950c      	str	r5, [sp, #48]	; 0x30
	sConfigOC.Pulse = pwmPeriod / 2;
 8002182:	9609      	str	r6, [sp, #36]	; 0x24
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002184:	950d      	str	r5, [sp, #52]	; 0x34
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002186:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&*htim1, &sConfigOC, TIM_CHANNEL_1)
 8002188:	f7ff faea 	bl	8001760 <HAL_TIM_PWM_ConfigChannel>
 800218c:	b100      	cbz	r0, 8002190 <setupPWMandTurnOn+0x80>
 800218e:	e7fe      	b.n	800218e <setupPWMandTurnOn+0x7e>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002194:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002196:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002198:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.DeadTime = 0;
 800219a:	9012      	str	r0, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800219c:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219e:	9314      	str	r3, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.BreakFilter = 0;
 80021a0:	9015      	str	r0, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021a2:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 80021a8:	9018      	str	r0, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021aa:	9019      	str	r0, [sp, #100]	; 0x64

	if (HAL_TIMEx_ConfigBreakDeadTime(&*htim1, &sBreakDeadTimeConfig)
 80021ac:	a90f      	add	r1, sp, #60	; 0x3c
 80021ae:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021b0:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&*htim1, &sBreakDeadTimeConfig)
 80021b2:	f7ff fc9d 	bl	8001af0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021b6:	4601      	mov	r1, r0
 80021b8:	b100      	cbz	r0, 80021bc <setupPWMandTurnOn+0xac>
 80021ba:	e7fe      	b.n	80021ba <setupPWMandTurnOn+0xaa>
			!= HAL_OK)
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	HAL_TIMEx_PWMN_Start(&*htim1, TIM_CHANNEL_1); //Starts the pwm on TIM1
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff fc63 	bl	8001a88 <HAL_TIMEx_PWMN_Start>
}
 80021c2:	b01a      	add	sp, #104	; 0x68
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	bf00      	nop
 80021c8:	40012c00 	.word	0x40012c00

080021cc <buzzer>:
// RETURNS       :
//   This function has no returns

void buzzer(int32_t freq)
{
	int32_t pwmPeriod = 1000000000 / (freq * 250);
 80021cc:	21fa      	movs	r1, #250	; 0xfa
 80021ce:	4341      	muls	r1, r0
	setupPWMandTurnOn(&htim1, pwmPeriod); //sets up the PWM and turns it ON
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <buzzer+0x10>)
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <buzzer+0x14>)
 80021d4:	fb93 f1f1 	sdiv	r1, r3, r1
 80021d8:	f7ff bf9a 	b.w	8002110 <setupPWMandTurnOn>
 80021dc:	3b9aca00 	.word	0x3b9aca00
 80021e0:	20000200 	.word	0x20000200

080021e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e4:	b530      	push	{r4, r5, lr}
 80021e6:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021e8:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ea:	2200      	movs	r2, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021ec:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021f0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021f2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 80021f4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021f6:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021f8:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021fc:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021fe:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002202:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002204:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002206:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002208:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800220a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220c:	f7fe fc02 	bl	8000a14 <HAL_RCC_OscConfig>
 8002210:	b100      	cbz	r0, 8002214 <SystemClock_Config+0x30>
 8002212:	e7fe      	b.n	8002212 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002214:	230f      	movs	r3, #15
 8002216:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002218:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800221c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002220:	4629      	mov	r1, r5
 8002222:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002226:	f7fe fe51 	bl	8000ecc <HAL_RCC_ClockConfig>
 800222a:	b100      	cbz	r0, 800222e <SystemClock_Config+0x4a>
 800222c:	e7fe      	b.n	800222c <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800222e:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002232:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002234:	f7fe ffb2 	bl	800119c <HAL_RCCEx_PeriphCLKConfig>
 8002238:	b100      	cbz	r0, 800223c <SystemClock_Config+0x58>
 800223a:	e7fe      	b.n	800223a <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800223c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002240:	f7fe fb0a 	bl	8000858 <HAL_PWREx_ControlVoltageScaling>
 8002244:	4604      	mov	r4, r0
 8002246:	b100      	cbz	r0, 800224a <SystemClock_Config+0x66>
 8002248:	e7fe      	b.n	8002248 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800224a:	f7fe fef5 	bl	8001038 <HAL_RCC_GetHCLKFreq>
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	fbb0 f0f3 	udiv	r0, r0, r3
 8002256:	f7fe fa15 	bl	8000684 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800225a:	2004      	movs	r0, #4
 800225c:	f7fe fa28 	bl	80006b0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002260:	4622      	mov	r2, r4
 8002262:	4621      	mov	r1, r4
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f7fe f9d8 	bl	800061c <HAL_NVIC_SetPriority>
}
 800226c:	b02d      	add	sp, #180	; 0xb4
 800226e:	bd30      	pop	{r4, r5, pc}

08002270 <main>:
{
 8002270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002274:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8002276:	f7fe f997 	bl	80005a8 <HAL_Init>
  SystemClock_Config();
 800227a:	f7ff ffb3 	bl	80021e4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <main+0x1ac>)
 8002280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	64da      	str	r2, [r3, #76]	; 0x4c
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0301 	and.w	r3, r3, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002292:	2130      	movs	r1, #48	; 0x30
 8002294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	9b00      	ldr	r3, [sp, #0]
  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	ae0f      	add	r6, sp, #60	; 0x3c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800229c:	f7fe face 	bl	800083c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022a0:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022a4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	4631      	mov	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f7fe fa0e 	bl	80006d4 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80022b8:	4859      	ldr	r0, [pc, #356]	; (8002420 <main+0x1b0>)
  huart2.Init.BaudRate = 9600;
 80022ba:	4a5a      	ldr	r2, [pc, #360]	; (8002424 <main+0x1b4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022bc:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 80022be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80022c2:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ca:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022cc:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022d2:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	f7ff fee8 	bl	80020aa <HAL_UART_Init>
 80022da:	b100      	cbz	r0, 80022de <main+0x6e>
 80022dc:	e7fe      	b.n	80022dc <main+0x6c>
  htim1.Instance = TIM1;
 80022de:	4c52      	ldr	r4, [pc, #328]	; (8002428 <main+0x1b8>)
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <main+0x1bc>)
  htim1.Init.Prescaler = 0;
 80022e2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 80022e6:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ea:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ec:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022ee:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 80022f0:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022f2:	f7ff f9c9 	bl	8001688 <HAL_TIM_Base_Init>
 80022f6:	b100      	cbz	r0, 80022fa <main+0x8a>
 80022f8:	e7fe      	b.n	80022f8 <main+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fa:	a91a      	add	r1, sp, #104	; 0x68
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fabb 	bl	8001880 <HAL_TIM_ConfigClockSource>
 800230a:	b100      	cbz	r0, 800230e <main+0x9e>
 800230c:	e7fe      	b.n	800230c <main+0x9c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff f9d4 	bl	80016bc <HAL_TIM_PWM_Init>
 8002314:	b100      	cbz	r0, 8002318 <main+0xa8>
 8002316:	e7fe      	b.n	8002316 <main+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800231a:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231e:	a901      	add	r1, sp, #4
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff fbc3 	bl	8001aac <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4602      	mov	r2, r0
 8002328:	b100      	cbz	r0, 800232c <main+0xbc>
 800232a:	e7fe      	b.n	800232a <main+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800232e:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002330:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002332:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002336:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002338:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	a908      	add	r1, sp, #32
 800233c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002340:	f7ff fa0e 	bl	8001760 <HAL_TIM_PWM_ConfigChannel>
 8002344:	b100      	cbz	r0, 8002348 <main+0xd8>
 8002346:	e7fe      	b.n	8002346 <main+0xd6>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800234c:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234e:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002350:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002352:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002354:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002356:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002358:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800235a:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800235c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002360:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002362:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002364:	4631      	mov	r1, r6
 8002366:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002368:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800236a:	f7ff fbc1 	bl	8001af0 <HAL_TIMEx_ConfigBreakDeadTime>
 800236e:	4607      	mov	r7, r0
 8002370:	b100      	cbz	r0, 8002374 <main+0x104>
 8002372:	e7fe      	b.n	8002372 <main+0x102>
  int passcodes[10] = {1111, 2222, 3333, 4444, 5555, 6666,
 8002374:	4d2e      	ldr	r5, [pc, #184]	; (8002430 <main+0x1c0>)
	  scanf("%i", &userPasscode);
 8002376:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002440 <main+0x1d0>
  HAL_TIM_MspPostInit(&htim1);
 800237a:	4620      	mov	r0, r4
 800237c:	f000 f8be 	bl	80024fc <HAL_TIM_MspPostInit>
  int passcodes[10] = {1111, 2222, 3333, 4444, 5555, 6666,
 8002380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002382:	4634      	mov	r4, r6
 8002384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800238e:	e884 0003 	stmia.w	r4, {r0, r1}
  int userPasscode = 0;
 8002392:	9708      	str	r7, [sp, #32]
		  printf("Access Denied!!!!\r\n");
 8002394:	4d27      	ldr	r5, [pc, #156]	; (8002434 <main+0x1c4>)
	  printf("Enter passcode: \r\n");
 8002396:	4f28      	ldr	r7, [pc, #160]	; (8002438 <main+0x1c8>)
 8002398:	4638      	mov	r0, r7
 800239a:	f000 fa1d 	bl	80027d8 <puts>
	  scanf("%i", &userPasscode);
 800239e:	a908      	add	r1, sp, #32
 80023a0:	4640      	mov	r0, r8
 80023a2:	f000 fa21 	bl	80027e8 <iscanf>
	  for(int i = 0; i<10; i++)
 80023a6:	2300      	movs	r3, #0
		  if(userPasscode == passcodes[i])
 80023a8:	9a08      	ldr	r2, [sp, #32]
	  int flag = 0; // This flag says if the passcode entered matches the correct.
 80023aa:	461c      	mov	r4, r3
		  if(userPasscode == passcodes[i])
 80023ac:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
	  for(int i = 0; i<10; i++)
 80023b0:	3301      	adds	r3, #1
			  flag = 1;
 80023b2:	4291      	cmp	r1, r2
 80023b4:	bf08      	it	eq
 80023b6:	2401      	moveq	r4, #1
	  for(int i = 0; i<10; i++)
 80023b8:	2b0a      	cmp	r3, #10
 80023ba:	d1f7      	bne.n	80023ac <main+0x13c>
	  if(flag == 1)
 80023bc:	2c01      	cmp	r4, #1
 80023be:	d11a      	bne.n	80023f6 <main+0x186>
		  printf("Access Granted\r\n");
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <main+0x1cc>)
 80023c2:	f000 fa09 	bl	80027d8 <puts>
		  buzzer(1500);
 80023c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80023ca:	f7ff feff 	bl	80021cc <buzzer>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80023ce:	4622      	mov	r2, r4
 80023d0:	2120      	movs	r1, #32
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f7fe fa31 	bl	800083c <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 80023da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023de:	f7fe f8fd 	bl	80005dc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2120      	movs	r1, #32
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ea:	f7fe fa27 	bl	800083c <HAL_GPIO_WritePin>
		  buzzer(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff feec 	bl	80021cc <buzzer>
 80023f4:	e7d0      	b.n	8002398 <main+0x128>
		  printf("Access Denied!!!!\r\n");
 80023f6:	4628      	mov	r0, r5
 80023f8:	f000 f9ee 	bl	80027d8 <puts>
		  buzzer(100); // Speaker puts out a 100Hz sound indicating access denial
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	f7ff fee5 	bl	80021cc <buzzer>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	2110      	movs	r1, #16
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f7fe fa17 	bl	800083c <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 800240e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002412:	f7fe f8e3 	bl	80005dc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2110      	movs	r1, #16
 800241a:	e7e4      	b.n	80023e6 <main+0x176>
 800241c:	40021000 	.word	0x40021000
 8002420:	20000240 	.word	0x20000240
 8002424:	40004400 	.word	0x40004400
 8002428:	20000200 	.word	0x20000200
 800242c:	40012c00 	.word	0x40012c00
 8002430:	08003c58 	.word	0x08003c58
 8002434:	08003cc2 	.word	0x08003cc2
 8002438:	08003c9d 	.word	0x08003c9d
 800243c:	08003cb2 	.word	0x08003cb2
 8002440:	08003caf 	.word	0x08003caf

08002444 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002444:	e7fe      	b.n	8002444 <_Error_Handler>
	...

08002448 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_MspInit+0x88>)
{
 800244a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
 8002454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002456:	f002 0201 	and.w	r2, r2, #1
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002464:	659a      	str	r2, [r3, #88]	; 0x58
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	f7fe f8c1 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	4611      	mov	r1, r2
 800247a:	f06f 000b 	mvn.w	r0, #11
 800247e:	f7fe f8cd 	bl	800061c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	4611      	mov	r1, r2
 8002486:	f06f 000a 	mvn.w	r0, #10
 800248a:	f7fe f8c7 	bl	800061c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	4611      	mov	r1, r2
 8002492:	f06f 0009 	mvn.w	r0, #9
 8002496:	f7fe f8c1 	bl	800061c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	4611      	mov	r1, r2
 800249e:	f06f 0004 	mvn.w	r0, #4
 80024a2:	f7fe f8bb 	bl	800061c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	4611      	mov	r1, r2
 80024aa:	f06f 0003 	mvn.w	r0, #3
 80024ae:	f7fe f8b5 	bl	800061c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	4611      	mov	r1, r2
 80024b6:	f06f 0001 	mvn.w	r0, #1
 80024ba:	f7fe f8af 	bl	800061c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	4611      	mov	r1, r2
 80024c2:	f04f 30ff 	mov.w	r0, #4294967295
 80024c6:	f7fe f8a9 	bl	800061c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	b003      	add	sp, #12
 80024cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80024d4:	6802      	ldr	r2, [r0, #0]
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_TIM_Base_MspInit+0x24>)
 80024d8:	429a      	cmp	r2, r3
{
 80024da:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80024dc:	d10a      	bne.n	80024f4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024de:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80024e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	661a      	str	r2, [r3, #96]	; 0x60
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024f4:	b002      	add	sp, #8
 80024f6:	4770      	bx	lr
 80024f8:	40012c00 	.word	0x40012c00

080024fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_TIM_MspPostInit+0x2c>)
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002516:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800251c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f7fe f8d9 	bl	80006d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002522:	b007      	add	sp, #28
 8002524:	f85d fb04 	ldr.w	pc, [sp], #4
 8002528:	40012c00 	.word	0x40012c00

0800252c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800252c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800252e:	6802      	ldr	r2, [r0, #0]
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_UART_MspInit+0x5c>)
 8002532:	429a      	cmp	r2, r3
{
 8002534:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8002536:	d125      	bne.n	8002584 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002538:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800253e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002540:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002552:	2304      	movs	r3, #4
 8002554:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002558:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800255c:	a901      	add	r1, sp, #4
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002562:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002568:	f7fe f8b4 	bl	80006d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800256c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002570:	a901      	add	r1, sp, #4
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002576:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800257e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002580:	f7fe f8a8 	bl	80006d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002584:	b006      	add	sp, #24
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	40004400 	.word	0x40004400

0800258c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800258c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258e:	f7fe f817 	bl	80005c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002596:	f7fe b898 	b.w	80006ca <HAL_SYSTICK_IRQHandler>
	...

0800259c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800259c:	b510      	push	{r4, lr}
	/* the write code implemented here is used by puts and printf */
		 HAL_StatusTypeDef result = HAL_OK;
		 result = HAL_UART_Transmit(&huart2,ptr,len,500);
 800259e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80025a2:	4614      	mov	r4, r2
		 result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80025a4:	4806      	ldr	r0, [pc, #24]	; (80025c0 <_write+0x24>)
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f7ff fc87 	bl	8001eba <HAL_UART_Transmit>
		 if((result == HAL_ERROR) | (result == HAL_BUSY))
 80025ac:	3801      	subs	r0, #1
 80025ae:	b2c0      	uxtb	r0, r0
 80025b0:	2801      	cmp	r0, #1
 80025b2:	d803      	bhi.n	80025bc <_write+0x20>
		 {
			 Error_Handler();
 80025b4:	2158      	movs	r1, #88	; 0x58
 80025b6:	4803      	ldr	r0, [pc, #12]	; (80025c4 <_write+0x28>)
 80025b8:	f7ff ff44 	bl	8002444 <_Error_Handler>
		 }
		 return len;
}
 80025bc:	4620      	mov	r0, r4
 80025be:	bd10      	pop	{r4, pc}
 80025c0:	20000240 	.word	0x20000240
 80025c4:	08003cd5 	.word	0x08003cd5

080025c8 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <_sbrk+0x14>)
 80025ca:	6819      	ldr	r1, [r3, #0]
{
 80025cc:	4602      	mov	r2, r0
	if (heap_end == 0) {
 80025ce:	b909      	cbnz	r1, 80025d4 <_sbrk+0xc>
		heap_end = & end;
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <_sbrk+0x18>)
 80025d2:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 80025d4:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 80025d6:	4402      	add	r2, r0
 80025d8:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 80025da:	4770      	bx	lr
 80025dc:	200001f0 	.word	0x200001f0
 80025e0:	200002bc 	.word	0x200002bc

080025e4 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 80025e4:	4b02      	ldr	r3, [pc, #8]	; (80025f0 <_close+0xc>)
 80025e6:	2258      	movs	r2, #88	; 0x58
 80025e8:	601a      	str	r2, [r3, #0]
	return -1;
}
 80025ea:	f04f 30ff 	mov.w	r0, #4294967295
 80025ee:	4770      	bx	lr
 80025f0:	200002b8 	.word	0x200002b8

080025f4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <_fstat+0xc>)
 80025f6:	2258      	movs	r2, #88	; 0x58
 80025f8:	601a      	str	r2, [r3, #0]
	return -1;
}
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	4770      	bx	lr
 8002600:	200002b8 	.word	0x200002b8

08002604 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <_isatty+0xc>)
 8002606:	2258      	movs	r2, #88	; 0x58
 8002608:	601a      	str	r2, [r3, #0]
	return 0;
}
 800260a:	2000      	movs	r0, #0
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200002b8 	.word	0x200002b8

08002614 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <_lseek+0xc>)
 8002616:	2258      	movs	r2, #88	; 0x58
 8002618:	601a      	str	r2, [r3, #0]
	return -1;
}
 800261a:	f04f 30ff 	mov.w	r0, #4294967295
 800261e:	4770      	bx	lr
 8002620:	200002b8 	.word	0x200002b8

08002624 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002624:	b508      	push	{r3, lr}
	/*HAL_UART_Receive will not exit until 1 char is not received
		 * because HAL_MAX_DELAY is being used
		 */
		HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8002626:	2201      	movs	r2, #1
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <_read+0x14>)
 800262e:	f7ff fc9b 	bl	8001f68 <HAL_UART_Receive>
		return 1; //because we're only going to get and return one char at a time.
}
 8002632:	2001      	movs	r0, #1
 8002634:	bd08      	pop	{r3, pc}
 8002636:	bf00      	nop
 8002638:	20000240 	.word	0x20000240

0800263c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	490f      	ldr	r1, [pc, #60]	; (800267c <SystemInit+0x40>)
 800263e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002642:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <SystemInit+0x44>)
 800264c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800264e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002656:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800265e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002662:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002668:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002670:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002672:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002678:	608b      	str	r3, [r1, #8]
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00
 8002680:	40021000 	.word	0x40021000

08002684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800268a:	e003      	b.n	8002694 <LoopCopyDataInit>

0800268c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800268e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002692:	3104      	adds	r1, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002694:	480b      	ldr	r0, [pc, #44]	; (80026c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800269a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800269c:	d3f6      	bcc.n	800268c <CopyDataInit>
	ldr	r2, =_sbss
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80026a0:	e002      	b.n	80026a8 <LoopFillZerobss>

080026a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026a4:	f842 3b04 	str.w	r3, [r2], #4

080026a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <LoopForever+0x16>)
	cmp	r2, r3
 80026aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026ac:	d3f9      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ae:	f7ff ffc5 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b2:	f000 f811 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026b6:	f7ff fddb 	bl	8002270 <main>

080026ba <LoopForever>:

LoopForever:
    b LoopForever
 80026ba:	e7fe      	b.n	80026ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026bc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80026c0:	08003ed0 	.word	0x08003ed0
	ldr	r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026c8:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80026cc:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80026d0:	200002bc 	.word	0x200002bc

080026d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_IRQHandler>
	...

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4e0d      	ldr	r6, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1ba4      	subs	r4, r4, r6
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2500      	movs	r5, #0
 80026e4:	42a5      	cmp	r5, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4e0b      	ldr	r6, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f001 faa8 	bl	8003c40 <_init>
 80026f0:	1ba4      	subs	r4, r4, r6
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2500      	movs	r5, #0
 80026f6:	42a5      	cmp	r5, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002700:	4798      	blx	r3
 8002702:	3501      	adds	r5, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270a:	4798      	blx	r3
 800270c:	3501      	adds	r5, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08003ec8 	.word	0x08003ec8
 8002714:	08003ec8 	.word	0x08003ec8
 8002718:	08003ec8 	.word	0x08003ec8
 800271c:	08003ecc 	.word	0x08003ecc

08002720 <_puts_r>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	460e      	mov	r6, r1
 8002724:	4605      	mov	r5, r0
 8002726:	b118      	cbz	r0, 8002730 <_puts_r+0x10>
 8002728:	6983      	ldr	r3, [r0, #24]
 800272a:	b90b      	cbnz	r3, 8002730 <_puts_r+0x10>
 800272c:	f000 fa38 	bl	8002ba0 <__sinit>
 8002730:	69ab      	ldr	r3, [r5, #24]
 8002732:	68ac      	ldr	r4, [r5, #8]
 8002734:	b913      	cbnz	r3, 800273c <_puts_r+0x1c>
 8002736:	4628      	mov	r0, r5
 8002738:	f000 fa32 	bl	8002ba0 <__sinit>
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <_puts_r+0xac>)
 800273e:	429c      	cmp	r4, r3
 8002740:	d117      	bne.n	8002772 <_puts_r+0x52>
 8002742:	686c      	ldr	r4, [r5, #4]
 8002744:	89a3      	ldrh	r3, [r4, #12]
 8002746:	071b      	lsls	r3, r3, #28
 8002748:	d51d      	bpl.n	8002786 <_puts_r+0x66>
 800274a:	6923      	ldr	r3, [r4, #16]
 800274c:	b1db      	cbz	r3, 8002786 <_puts_r+0x66>
 800274e:	3e01      	subs	r6, #1
 8002750:	68a3      	ldr	r3, [r4, #8]
 8002752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002756:	3b01      	subs	r3, #1
 8002758:	60a3      	str	r3, [r4, #8]
 800275a:	b9e9      	cbnz	r1, 8002798 <_puts_r+0x78>
 800275c:	2b00      	cmp	r3, #0
 800275e:	da2e      	bge.n	80027be <_puts_r+0x9e>
 8002760:	4622      	mov	r2, r4
 8002762:	210a      	movs	r1, #10
 8002764:	4628      	mov	r0, r5
 8002766:	f000 f857 	bl	8002818 <__swbuf_r>
 800276a:	3001      	adds	r0, #1
 800276c:	d011      	beq.n	8002792 <_puts_r+0x72>
 800276e:	200a      	movs	r0, #10
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <_puts_r+0xb0>)
 8002774:	429c      	cmp	r4, r3
 8002776:	d101      	bne.n	800277c <_puts_r+0x5c>
 8002778:	68ac      	ldr	r4, [r5, #8]
 800277a:	e7e3      	b.n	8002744 <_puts_r+0x24>
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_puts_r+0xb4>)
 800277e:	429c      	cmp	r4, r3
 8002780:	bf08      	it	eq
 8002782:	68ec      	ldreq	r4, [r5, #12]
 8002784:	e7de      	b.n	8002744 <_puts_r+0x24>
 8002786:	4621      	mov	r1, r4
 8002788:	4628      	mov	r0, r5
 800278a:	f000 f897 	bl	80028bc <__swsetup_r>
 800278e:	2800      	cmp	r0, #0
 8002790:	d0dd      	beq.n	800274e <_puts_r+0x2e>
 8002792:	f04f 30ff 	mov.w	r0, #4294967295
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	2b00      	cmp	r3, #0
 800279a:	da04      	bge.n	80027a6 <_puts_r+0x86>
 800279c:	69a2      	ldr	r2, [r4, #24]
 800279e:	4293      	cmp	r3, r2
 80027a0:	db06      	blt.n	80027b0 <_puts_r+0x90>
 80027a2:	290a      	cmp	r1, #10
 80027a4:	d004      	beq.n	80027b0 <_puts_r+0x90>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	6022      	str	r2, [r4, #0]
 80027ac:	7019      	strb	r1, [r3, #0]
 80027ae:	e7cf      	b.n	8002750 <_puts_r+0x30>
 80027b0:	4622      	mov	r2, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 f830 	bl	8002818 <__swbuf_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1c9      	bne.n	8002750 <_puts_r+0x30>
 80027bc:	e7e9      	b.n	8002792 <_puts_r+0x72>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	200a      	movs	r0, #10
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	6022      	str	r2, [r4, #0]
 80027c6:	7018      	strb	r0, [r3, #0]
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	bf00      	nop
 80027cc:	08003d50 	.word	0x08003d50
 80027d0:	08003d70 	.word	0x08003d70
 80027d4:	08003d30 	.word	0x08003d30

080027d8 <puts>:
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <puts+0xc>)
 80027da:	4601      	mov	r1, r0
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	f7ff bf9f 	b.w	8002720 <_puts_r>
 80027e2:	bf00      	nop
 80027e4:	20000004 	.word	0x20000004

080027e8 <iscanf>:
 80027e8:	b40f      	push	{r0, r1, r2, r3}
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <iscanf+0x2c>)
 80027ec:	b513      	push	{r0, r1, r4, lr}
 80027ee:	681c      	ldr	r4, [r3, #0]
 80027f0:	b124      	cbz	r4, 80027fc <iscanf+0x14>
 80027f2:	69a3      	ldr	r3, [r4, #24]
 80027f4:	b913      	cbnz	r3, 80027fc <iscanf+0x14>
 80027f6:	4620      	mov	r0, r4
 80027f8:	f000 f9d2 	bl	8002ba0 <__sinit>
 80027fc:	ab05      	add	r3, sp, #20
 80027fe:	9a04      	ldr	r2, [sp, #16]
 8002800:	6861      	ldr	r1, [r4, #4]
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	4620      	mov	r0, r4
 8002806:	f000 fcdd 	bl	80031c4 <_vfiscanf_r>
 800280a:	b002      	add	sp, #8
 800280c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002810:	b004      	add	sp, #16
 8002812:	4770      	bx	lr
 8002814:	20000004 	.word	0x20000004

08002818 <__swbuf_r>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	460e      	mov	r6, r1
 800281c:	4614      	mov	r4, r2
 800281e:	4605      	mov	r5, r0
 8002820:	b118      	cbz	r0, 800282a <__swbuf_r+0x12>
 8002822:	6983      	ldr	r3, [r0, #24]
 8002824:	b90b      	cbnz	r3, 800282a <__swbuf_r+0x12>
 8002826:	f000 f9bb 	bl	8002ba0 <__sinit>
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <__swbuf_r+0x98>)
 800282c:	429c      	cmp	r4, r3
 800282e:	d12a      	bne.n	8002886 <__swbuf_r+0x6e>
 8002830:	686c      	ldr	r4, [r5, #4]
 8002832:	69a3      	ldr	r3, [r4, #24]
 8002834:	60a3      	str	r3, [r4, #8]
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	071a      	lsls	r2, r3, #28
 800283a:	d52e      	bpl.n	800289a <__swbuf_r+0x82>
 800283c:	6923      	ldr	r3, [r4, #16]
 800283e:	b363      	cbz	r3, 800289a <__swbuf_r+0x82>
 8002840:	6923      	ldr	r3, [r4, #16]
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	1ac0      	subs	r0, r0, r3
 8002846:	6963      	ldr	r3, [r4, #20]
 8002848:	b2f6      	uxtb	r6, r6
 800284a:	4298      	cmp	r0, r3
 800284c:	4637      	mov	r7, r6
 800284e:	db04      	blt.n	800285a <__swbuf_r+0x42>
 8002850:	4621      	mov	r1, r4
 8002852:	4628      	mov	r0, r5
 8002854:	f000 f928 	bl	8002aa8 <_fflush_r>
 8002858:	bb28      	cbnz	r0, 80028a6 <__swbuf_r+0x8e>
 800285a:	68a3      	ldr	r3, [r4, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	60a3      	str	r3, [r4, #8]
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	6022      	str	r2, [r4, #0]
 8002866:	701e      	strb	r6, [r3, #0]
 8002868:	6963      	ldr	r3, [r4, #20]
 800286a:	3001      	adds	r0, #1
 800286c:	4298      	cmp	r0, r3
 800286e:	d004      	beq.n	800287a <__swbuf_r+0x62>
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	07db      	lsls	r3, r3, #31
 8002874:	d519      	bpl.n	80028aa <__swbuf_r+0x92>
 8002876:	2e0a      	cmp	r6, #10
 8002878:	d117      	bne.n	80028aa <__swbuf_r+0x92>
 800287a:	4621      	mov	r1, r4
 800287c:	4628      	mov	r0, r5
 800287e:	f000 f913 	bl	8002aa8 <_fflush_r>
 8002882:	b190      	cbz	r0, 80028aa <__swbuf_r+0x92>
 8002884:	e00f      	b.n	80028a6 <__swbuf_r+0x8e>
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <__swbuf_r+0x9c>)
 8002888:	429c      	cmp	r4, r3
 800288a:	d101      	bne.n	8002890 <__swbuf_r+0x78>
 800288c:	68ac      	ldr	r4, [r5, #8]
 800288e:	e7d0      	b.n	8002832 <__swbuf_r+0x1a>
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <__swbuf_r+0xa0>)
 8002892:	429c      	cmp	r4, r3
 8002894:	bf08      	it	eq
 8002896:	68ec      	ldreq	r4, [r5, #12]
 8002898:	e7cb      	b.n	8002832 <__swbuf_r+0x1a>
 800289a:	4621      	mov	r1, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f000 f80d 	bl	80028bc <__swsetup_r>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d0cc      	beq.n	8002840 <__swbuf_r+0x28>
 80028a6:	f04f 37ff 	mov.w	r7, #4294967295
 80028aa:	4638      	mov	r0, r7
 80028ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08003d50 	.word	0x08003d50
 80028b4:	08003d70 	.word	0x08003d70
 80028b8:	08003d30 	.word	0x08003d30

080028bc <__swsetup_r>:
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <__swsetup_r+0xcc>)
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	681d      	ldr	r5, [r3, #0]
 80028c2:	4606      	mov	r6, r0
 80028c4:	460c      	mov	r4, r1
 80028c6:	b125      	cbz	r5, 80028d2 <__swsetup_r+0x16>
 80028c8:	69ab      	ldr	r3, [r5, #24]
 80028ca:	b913      	cbnz	r3, 80028d2 <__swsetup_r+0x16>
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 f967 	bl	8002ba0 <__sinit>
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <__swsetup_r+0xd0>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d10f      	bne.n	80028f8 <__swsetup_r+0x3c>
 80028d8:	686c      	ldr	r4, [r5, #4]
 80028da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	0715      	lsls	r5, r2, #28
 80028e2:	d42c      	bmi.n	800293e <__swsetup_r+0x82>
 80028e4:	06d0      	lsls	r0, r2, #27
 80028e6:	d411      	bmi.n	800290c <__swsetup_r+0x50>
 80028e8:	2209      	movs	r2, #9
 80028ea:	6032      	str	r2, [r6, #0]
 80028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <__swsetup_r+0xd4>)
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d101      	bne.n	8002902 <__swsetup_r+0x46>
 80028fe:	68ac      	ldr	r4, [r5, #8]
 8002900:	e7eb      	b.n	80028da <__swsetup_r+0x1e>
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <__swsetup_r+0xd8>)
 8002904:	429c      	cmp	r4, r3
 8002906:	bf08      	it	eq
 8002908:	68ec      	ldreq	r4, [r5, #12]
 800290a:	e7e6      	b.n	80028da <__swsetup_r+0x1e>
 800290c:	0751      	lsls	r1, r2, #29
 800290e:	d512      	bpl.n	8002936 <__swsetup_r+0x7a>
 8002910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002912:	b141      	cbz	r1, 8002926 <__swsetup_r+0x6a>
 8002914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002918:	4299      	cmp	r1, r3
 800291a:	d002      	beq.n	8002922 <__swsetup_r+0x66>
 800291c:	4630      	mov	r0, r6
 800291e:	f000 fa51 	bl	8002dc4 <_free_r>
 8002922:	2300      	movs	r3, #0
 8002924:	6363      	str	r3, [r4, #52]	; 0x34
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800292c:	81a3      	strh	r3, [r4, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	6063      	str	r3, [r4, #4]
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	b94b      	cbnz	r3, 8002956 <__swsetup_r+0x9a>
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d003      	beq.n	8002956 <__swsetup_r+0x9a>
 800294e:	4621      	mov	r1, r4
 8002950:	4630      	mov	r0, r6
 8002952:	f000 f9ef 	bl	8002d34 <__smakebuf_r>
 8002956:	89a2      	ldrh	r2, [r4, #12]
 8002958:	f012 0301 	ands.w	r3, r2, #1
 800295c:	d00c      	beq.n	8002978 <__swsetup_r+0xbc>
 800295e:	2300      	movs	r3, #0
 8002960:	60a3      	str	r3, [r4, #8]
 8002962:	6963      	ldr	r3, [r4, #20]
 8002964:	425b      	negs	r3, r3
 8002966:	61a3      	str	r3, [r4, #24]
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	b953      	cbnz	r3, 8002982 <__swsetup_r+0xc6>
 800296c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002970:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002974:	d1ba      	bne.n	80028ec <__swsetup_r+0x30>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	0792      	lsls	r2, r2, #30
 800297a:	bf58      	it	pl
 800297c:	6963      	ldrpl	r3, [r4, #20]
 800297e:	60a3      	str	r3, [r4, #8]
 8002980:	e7f2      	b.n	8002968 <__swsetup_r+0xac>
 8002982:	2000      	movs	r0, #0
 8002984:	e7f7      	b.n	8002976 <__swsetup_r+0xba>
 8002986:	bf00      	nop
 8002988:	20000004 	.word	0x20000004
 800298c:	08003d50 	.word	0x08003d50
 8002990:	08003d70 	.word	0x08003d70
 8002994:	08003d30 	.word	0x08003d30

08002998 <__sflush_r>:
 8002998:	898a      	ldrh	r2, [r1, #12]
 800299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	4605      	mov	r5, r0
 80029a0:	0710      	lsls	r0, r2, #28
 80029a2:	460c      	mov	r4, r1
 80029a4:	d45a      	bmi.n	8002a5c <__sflush_r+0xc4>
 80029a6:	684b      	ldr	r3, [r1, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dc05      	bgt.n	80029b8 <__sflush_r+0x20>
 80029ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dc02      	bgt.n	80029b8 <__sflush_r+0x20>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ba:	2e00      	cmp	r6, #0
 80029bc:	d0f9      	beq.n	80029b2 <__sflush_r+0x1a>
 80029be:	2300      	movs	r3, #0
 80029c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029c4:	682f      	ldr	r7, [r5, #0]
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	d033      	beq.n	8002a32 <__sflush_r+0x9a>
 80029ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	075a      	lsls	r2, r3, #29
 80029d0:	d505      	bpl.n	80029de <__sflush_r+0x46>
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	1ac0      	subs	r0, r0, r3
 80029d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029d8:	b10b      	cbz	r3, 80029de <__sflush_r+0x46>
 80029da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029dc:	1ac0      	subs	r0, r0, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	4602      	mov	r2, r0
 80029e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029e4:	6a21      	ldr	r1, [r4, #32]
 80029e6:	4628      	mov	r0, r5
 80029e8:	47b0      	blx	r6
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	d106      	bne.n	80029fe <__sflush_r+0x66>
 80029f0:	6829      	ldr	r1, [r5, #0]
 80029f2:	291d      	cmp	r1, #29
 80029f4:	d84b      	bhi.n	8002a8e <__sflush_r+0xf6>
 80029f6:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <__sflush_r+0x10c>)
 80029f8:	40ca      	lsrs	r2, r1
 80029fa:	07d6      	lsls	r6, r2, #31
 80029fc:	d547      	bpl.n	8002a8e <__sflush_r+0xf6>
 80029fe:	2200      	movs	r2, #0
 8002a00:	6062      	str	r2, [r4, #4]
 8002a02:	04d9      	lsls	r1, r3, #19
 8002a04:	6922      	ldr	r2, [r4, #16]
 8002a06:	6022      	str	r2, [r4, #0]
 8002a08:	d504      	bpl.n	8002a14 <__sflush_r+0x7c>
 8002a0a:	1c42      	adds	r2, r0, #1
 8002a0c:	d101      	bne.n	8002a12 <__sflush_r+0x7a>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b903      	cbnz	r3, 8002a14 <__sflush_r+0x7c>
 8002a12:	6560      	str	r0, [r4, #84]	; 0x54
 8002a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a16:	602f      	str	r7, [r5, #0]
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d0ca      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a20:	4299      	cmp	r1, r3
 8002a22:	d002      	beq.n	8002a2a <__sflush_r+0x92>
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 f9cd 	bl	8002dc4 <_free_r>
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8002a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a32:	6a21      	ldr	r1, [r4, #32]
 8002a34:	2301      	movs	r3, #1
 8002a36:	4628      	mov	r0, r5
 8002a38:	47b0      	blx	r6
 8002a3a:	1c41      	adds	r1, r0, #1
 8002a3c:	d1c6      	bne.n	80029cc <__sflush_r+0x34>
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0c3      	beq.n	80029cc <__sflush_r+0x34>
 8002a44:	2b1d      	cmp	r3, #29
 8002a46:	d001      	beq.n	8002a4c <__sflush_r+0xb4>
 8002a48:	2b16      	cmp	r3, #22
 8002a4a:	d101      	bne.n	8002a50 <__sflush_r+0xb8>
 8002a4c:	602f      	str	r7, [r5, #0]
 8002a4e:	e7b0      	b.n	80029b2 <__sflush_r+0x1a>
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a5c:	690f      	ldr	r7, [r1, #16]
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	d0a7      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a62:	0793      	lsls	r3, r2, #30
 8002a64:	680e      	ldr	r6, [r1, #0]
 8002a66:	bf08      	it	eq
 8002a68:	694b      	ldreq	r3, [r1, #20]
 8002a6a:	600f      	str	r7, [r1, #0]
 8002a6c:	bf18      	it	ne
 8002a6e:	2300      	movne	r3, #0
 8002a70:	eba6 0807 	sub.w	r8, r6, r7
 8002a74:	608b      	str	r3, [r1, #8]
 8002a76:	f1b8 0f00 	cmp.w	r8, #0
 8002a7a:	dd9a      	ble.n	80029b2 <__sflush_r+0x1a>
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	463a      	mov	r2, r7
 8002a80:	6a21      	ldr	r1, [r4, #32]
 8002a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b0      	blx	r6
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	dc07      	bgt.n	8002a9c <__sflush_r+0x104>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a9c:	4407      	add	r7, r0
 8002a9e:	eba8 0800 	sub.w	r8, r8, r0
 8002aa2:	e7e8      	b.n	8002a76 <__sflush_r+0xde>
 8002aa4:	20400001 	.word	0x20400001

08002aa8 <_fflush_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	690b      	ldr	r3, [r1, #16]
 8002aac:	4605      	mov	r5, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	b1db      	cbz	r3, 8002aea <_fflush_r+0x42>
 8002ab2:	b118      	cbz	r0, 8002abc <_fflush_r+0x14>
 8002ab4:	6983      	ldr	r3, [r0, #24]
 8002ab6:	b90b      	cbnz	r3, 8002abc <_fflush_r+0x14>
 8002ab8:	f000 f872 	bl	8002ba0 <__sinit>
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <_fflush_r+0x48>)
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d109      	bne.n	8002ad6 <_fflush_r+0x2e>
 8002ac2:	686c      	ldr	r4, [r5, #4]
 8002ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ac8:	b17b      	cbz	r3, 8002aea <_fflush_r+0x42>
 8002aca:	4621      	mov	r1, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ad2:	f7ff bf61 	b.w	8002998 <__sflush_r>
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <_fflush_r+0x4c>)
 8002ad8:	429c      	cmp	r4, r3
 8002ada:	d101      	bne.n	8002ae0 <_fflush_r+0x38>
 8002adc:	68ac      	ldr	r4, [r5, #8]
 8002ade:	e7f1      	b.n	8002ac4 <_fflush_r+0x1c>
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <_fflush_r+0x50>)
 8002ae2:	429c      	cmp	r4, r3
 8002ae4:	bf08      	it	eq
 8002ae6:	68ec      	ldreq	r4, [r5, #12]
 8002ae8:	e7ec      	b.n	8002ac4 <_fflush_r+0x1c>
 8002aea:	2000      	movs	r0, #0
 8002aec:	bd38      	pop	{r3, r4, r5, pc}
 8002aee:	bf00      	nop
 8002af0:	08003d50 	.word	0x08003d50
 8002af4:	08003d70 	.word	0x08003d70
 8002af8:	08003d30 	.word	0x08003d30

08002afc <fflush>:
 8002afc:	4601      	mov	r1, r0
 8002afe:	b920      	cbnz	r0, 8002b0a <fflush+0xe>
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <fflush+0x18>)
 8002b02:	4905      	ldr	r1, [pc, #20]	; (8002b18 <fflush+0x1c>)
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	f000 b8d3 	b.w	8002cb0 <_fwalk_reent>
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <fflush+0x20>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f7ff bfcb 	b.w	8002aa8 <_fflush_r>
 8002b12:	bf00      	nop
 8002b14:	08003d90 	.word	0x08003d90
 8002b18:	08002aa9 	.word	0x08002aa9
 8002b1c:	20000004 	.word	0x20000004

08002b20 <_cleanup_r>:
 8002b20:	4901      	ldr	r1, [pc, #4]	; (8002b28 <_cleanup_r+0x8>)
 8002b22:	f000 b8c5 	b.w	8002cb0 <_fwalk_reent>
 8002b26:	bf00      	nop
 8002b28:	08002aa9 	.word	0x08002aa9

08002b2c <std.isra.0>:
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	4604      	mov	r4, r0
 8002b32:	6003      	str	r3, [r0, #0]
 8002b34:	6043      	str	r3, [r0, #4]
 8002b36:	6083      	str	r3, [r0, #8]
 8002b38:	8181      	strh	r1, [r0, #12]
 8002b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002b3c:	81c2      	strh	r2, [r0, #14]
 8002b3e:	6103      	str	r3, [r0, #16]
 8002b40:	6143      	str	r3, [r0, #20]
 8002b42:	6183      	str	r3, [r0, #24]
 8002b44:	4619      	mov	r1, r3
 8002b46:	2208      	movs	r2, #8
 8002b48:	305c      	adds	r0, #92	; 0x5c
 8002b4a:	f000 f933 	bl	8002db4 <memset>
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <std.isra.0+0x38>)
 8002b50:	6263      	str	r3, [r4, #36]	; 0x24
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <std.isra.0+0x3c>)
 8002b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <std.isra.0+0x40>)
 8002b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <std.isra.0+0x44>)
 8002b5c:	6224      	str	r4, [r4, #32]
 8002b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	bf00      	nop
 8002b64:	0800366d 	.word	0x0800366d
 8002b68:	0800368f 	.word	0x0800368f
 8002b6c:	080036c7 	.word	0x080036c7
 8002b70:	080036eb 	.word	0x080036eb

08002b74 <__sfmoreglue>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	1e4a      	subs	r2, r1, #1
 8002b78:	2568      	movs	r5, #104	; 0x68
 8002b7a:	4355      	muls	r5, r2
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b82:	f000 f96d 	bl	8002e60 <_malloc_r>
 8002b86:	4604      	mov	r4, r0
 8002b88:	b140      	cbz	r0, 8002b9c <__sfmoreglue+0x28>
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002b90:	300c      	adds	r0, #12
 8002b92:	60a0      	str	r0, [r4, #8]
 8002b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b98:	f000 f90c 	bl	8002db4 <memset>
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}

08002ba0 <__sinit>:
 8002ba0:	6983      	ldr	r3, [r0, #24]
 8002ba2:	b510      	push	{r4, lr}
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	bb33      	cbnz	r3, 8002bf6 <__sinit+0x56>
 8002ba8:	6483      	str	r3, [r0, #72]	; 0x48
 8002baa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002bac:	6503      	str	r3, [r0, #80]	; 0x50
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <__sinit+0x58>)
 8002bb0:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <__sinit+0x5c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6282      	str	r2, [r0, #40]	; 0x28
 8002bb6:	4298      	cmp	r0, r3
 8002bb8:	bf04      	itt	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	6183      	streq	r3, [r0, #24]
 8002bbe:	f000 f81f 	bl	8002c00 <__sfp>
 8002bc2:	6060      	str	r0, [r4, #4]
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 f81b 	bl	8002c00 <__sfp>
 8002bca:	60a0      	str	r0, [r4, #8]
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f000 f817 	bl	8002c00 <__sfp>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60e0      	str	r0, [r4, #12]
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	6860      	ldr	r0, [r4, #4]
 8002bda:	f7ff ffa7 	bl	8002b2c <std.isra.0>
 8002bde:	2201      	movs	r2, #1
 8002be0:	2109      	movs	r1, #9
 8002be2:	68a0      	ldr	r0, [r4, #8]
 8002be4:	f7ff ffa2 	bl	8002b2c <std.isra.0>
 8002be8:	2202      	movs	r2, #2
 8002bea:	2112      	movs	r1, #18
 8002bec:	68e0      	ldr	r0, [r4, #12]
 8002bee:	f7ff ff9d 	bl	8002b2c <std.isra.0>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61a3      	str	r3, [r4, #24]
 8002bf6:	bd10      	pop	{r4, pc}
 8002bf8:	08003d90 	.word	0x08003d90
 8002bfc:	08002b21 	.word	0x08002b21

08002c00 <__sfp>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <__sfp+0x74>)
 8002c04:	681e      	ldr	r6, [r3, #0]
 8002c06:	69b3      	ldr	r3, [r6, #24]
 8002c08:	4607      	mov	r7, r0
 8002c0a:	b913      	cbnz	r3, 8002c12 <__sfp+0x12>
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f7ff ffc7 	bl	8002ba0 <__sinit>
 8002c12:	3648      	adds	r6, #72	; 0x48
 8002c14:	68b4      	ldr	r4, [r6, #8]
 8002c16:	6873      	ldr	r3, [r6, #4]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	d503      	bpl.n	8002c24 <__sfp+0x24>
 8002c1c:	6833      	ldr	r3, [r6, #0]
 8002c1e:	b133      	cbz	r3, 8002c2e <__sfp+0x2e>
 8002c20:	6836      	ldr	r6, [r6, #0]
 8002c22:	e7f7      	b.n	8002c14 <__sfp+0x14>
 8002c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c28:	b16d      	cbz	r5, 8002c46 <__sfp+0x46>
 8002c2a:	3468      	adds	r4, #104	; 0x68
 8002c2c:	e7f4      	b.n	8002c18 <__sfp+0x18>
 8002c2e:	2104      	movs	r1, #4
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ff9f 	bl	8002b74 <__sfmoreglue>
 8002c36:	6030      	str	r0, [r6, #0]
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d1f1      	bne.n	8002c20 <__sfp+0x20>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4604      	mov	r4, r0
 8002c42:	4620      	mov	r0, r4
 8002c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4a:	81e3      	strh	r3, [r4, #14]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	81a3      	strh	r3, [r4, #12]
 8002c50:	6665      	str	r5, [r4, #100]	; 0x64
 8002c52:	6025      	str	r5, [r4, #0]
 8002c54:	60a5      	str	r5, [r4, #8]
 8002c56:	6065      	str	r5, [r4, #4]
 8002c58:	6125      	str	r5, [r4, #16]
 8002c5a:	6165      	str	r5, [r4, #20]
 8002c5c:	61a5      	str	r5, [r4, #24]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4629      	mov	r1, r5
 8002c62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c66:	f000 f8a5 	bl	8002db4 <memset>
 8002c6a:	6365      	str	r5, [r4, #52]	; 0x34
 8002c6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8002c6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002c70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002c72:	e7e6      	b.n	8002c42 <__sfp+0x42>
 8002c74:	08003d90 	.word	0x08003d90

08002c78 <_fwalk>:
 8002c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7c:	4688      	mov	r8, r1
 8002c7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c82:	2600      	movs	r6, #0
 8002c84:	b914      	cbnz	r4, 8002c8c <_fwalk+0x14>
 8002c86:	4630      	mov	r0, r6
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c8c:	68a5      	ldr	r5, [r4, #8]
 8002c8e:	6867      	ldr	r7, [r4, #4]
 8002c90:	3f01      	subs	r7, #1
 8002c92:	d501      	bpl.n	8002c98 <_fwalk+0x20>
 8002c94:	6824      	ldr	r4, [r4, #0]
 8002c96:	e7f5      	b.n	8002c84 <_fwalk+0xc>
 8002c98:	89ab      	ldrh	r3, [r5, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d906      	bls.n	8002cac <_fwalk+0x34>
 8002c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	d002      	beq.n	8002cac <_fwalk+0x34>
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	47c0      	blx	r8
 8002caa:	4306      	orrs	r6, r0
 8002cac:	3568      	adds	r5, #104	; 0x68
 8002cae:	e7ef      	b.n	8002c90 <_fwalk+0x18>

08002cb0 <_fwalk_reent>:
 8002cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	b914      	cbnz	r4, 8002cc6 <_fwalk_reent+0x16>
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cc6:	68a5      	ldr	r5, [r4, #8]
 8002cc8:	6867      	ldr	r7, [r4, #4]
 8002cca:	3f01      	subs	r7, #1
 8002ccc:	d501      	bpl.n	8002cd2 <_fwalk_reent+0x22>
 8002cce:	6824      	ldr	r4, [r4, #0]
 8002cd0:	e7f5      	b.n	8002cbe <_fwalk_reent+0xe>
 8002cd2:	89ab      	ldrh	r3, [r5, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d907      	bls.n	8002ce8 <_fwalk_reent+0x38>
 8002cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	d003      	beq.n	8002ce8 <_fwalk_reent+0x38>
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	47c8      	blx	r9
 8002ce6:	4306      	orrs	r6, r0
 8002ce8:	3568      	adds	r5, #104	; 0x68
 8002cea:	e7ee      	b.n	8002cca <_fwalk_reent+0x1a>

08002cec <__swhatbuf_r>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	460e      	mov	r6, r1
 8002cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	da07      	bge.n	8002d0e <__swhatbuf_r+0x22>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	89b3      	ldrh	r3, [r6, #12]
 8002d04:	061a      	lsls	r2, r3, #24
 8002d06:	d410      	bmi.n	8002d2a <__swhatbuf_r+0x3e>
 8002d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d0c:	e00e      	b.n	8002d2c <__swhatbuf_r+0x40>
 8002d0e:	aa01      	add	r2, sp, #4
 8002d10:	f000 fee2 	bl	8003ad8 <_fstat_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	dbf2      	blt.n	8002cfe <__swhatbuf_r+0x12>
 8002d18:	9a02      	ldr	r2, [sp, #8]
 8002d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d22:	425a      	negs	r2, r3
 8002d24:	415a      	adcs	r2, r3
 8002d26:	602a      	str	r2, [r5, #0]
 8002d28:	e7ee      	b.n	8002d08 <__swhatbuf_r+0x1c>
 8002d2a:	2340      	movs	r3, #64	; 0x40
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	b010      	add	sp, #64	; 0x40
 8002d32:	bd70      	pop	{r4, r5, r6, pc}

08002d34 <__smakebuf_r>:
 8002d34:	898b      	ldrh	r3, [r1, #12]
 8002d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d38:	079d      	lsls	r5, r3, #30
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	460c      	mov	r4, r1
 8002d3e:	d507      	bpl.n	8002d50 <__smakebuf_r+0x1c>
 8002d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	6123      	str	r3, [r4, #16]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6163      	str	r3, [r4, #20]
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	ab01      	add	r3, sp, #4
 8002d52:	466a      	mov	r2, sp
 8002d54:	f7ff ffca 	bl	8002cec <__swhatbuf_r>
 8002d58:	9900      	ldr	r1, [sp, #0]
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f000 f87f 	bl	8002e60 <_malloc_r>
 8002d62:	b948      	cbnz	r0, 8002d78 <__smakebuf_r+0x44>
 8002d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d68:	059a      	lsls	r2, r3, #22
 8002d6a:	d4ef      	bmi.n	8002d4c <__smakebuf_r+0x18>
 8002d6c:	f023 0303 	bic.w	r3, r3, #3
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	81a3      	strh	r3, [r4, #12]
 8002d76:	e7e3      	b.n	8002d40 <__smakebuf_r+0xc>
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <__smakebuf_r+0x7c>)
 8002d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	6020      	str	r0, [r4, #0]
 8002d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	9b00      	ldr	r3, [sp, #0]
 8002d88:	6163      	str	r3, [r4, #20]
 8002d8a:	9b01      	ldr	r3, [sp, #4]
 8002d8c:	6120      	str	r0, [r4, #16]
 8002d8e:	b15b      	cbz	r3, 8002da8 <__smakebuf_r+0x74>
 8002d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 feb1 	bl	8003afc <_isatty_r>
 8002d9a:	b128      	cbz	r0, 8002da8 <__smakebuf_r+0x74>
 8002d9c:	89a3      	ldrh	r3, [r4, #12]
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	431d      	orrs	r5, r3
 8002dac:	81a5      	strh	r5, [r4, #12]
 8002dae:	e7cd      	b.n	8002d4c <__smakebuf_r+0x18>
 8002db0:	08002b21 	.word	0x08002b21

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <_free_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d045      	beq.n	8002e58 <_free_r+0x94>
 8002dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd0:	1f0c      	subs	r4, r1, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bfb8      	it	lt
 8002dd6:	18e4      	addlt	r4, r4, r3
 8002dd8:	f000 fee1 	bl	8003b9e <__malloc_lock>
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <_free_r+0x98>)
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	4610      	mov	r0, r2
 8002de2:	b933      	cbnz	r3, 8002df2 <_free_r+0x2e>
 8002de4:	6063      	str	r3, [r4, #4]
 8002de6:	6014      	str	r4, [r2, #0]
 8002de8:	4628      	mov	r0, r5
 8002dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dee:	f000 bed7 	b.w	8003ba0 <__malloc_unlock>
 8002df2:	42a3      	cmp	r3, r4
 8002df4:	d90c      	bls.n	8002e10 <_free_r+0x4c>
 8002df6:	6821      	ldr	r1, [r4, #0]
 8002df8:	1862      	adds	r2, r4, r1
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	bf04      	itt	eq
 8002dfe:	681a      	ldreq	r2, [r3, #0]
 8002e00:	685b      	ldreq	r3, [r3, #4]
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	bf04      	itt	eq
 8002e06:	1852      	addeq	r2, r2, r1
 8002e08:	6022      	streq	r2, [r4, #0]
 8002e0a:	6004      	str	r4, [r0, #0]
 8002e0c:	e7ec      	b.n	8002de8 <_free_r+0x24>
 8002e0e:	4613      	mov	r3, r2
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	b10a      	cbz	r2, 8002e18 <_free_r+0x54>
 8002e14:	42a2      	cmp	r2, r4
 8002e16:	d9fa      	bls.n	8002e0e <_free_r+0x4a>
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	1858      	adds	r0, r3, r1
 8002e1c:	42a0      	cmp	r0, r4
 8002e1e:	d10b      	bne.n	8002e38 <_free_r+0x74>
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	4401      	add	r1, r0
 8002e24:	1858      	adds	r0, r3, r1
 8002e26:	4282      	cmp	r2, r0
 8002e28:	6019      	str	r1, [r3, #0]
 8002e2a:	d1dd      	bne.n	8002de8 <_free_r+0x24>
 8002e2c:	6810      	ldr	r0, [r2, #0]
 8002e2e:	6852      	ldr	r2, [r2, #4]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	4401      	add	r1, r0
 8002e34:	6019      	str	r1, [r3, #0]
 8002e36:	e7d7      	b.n	8002de8 <_free_r+0x24>
 8002e38:	d902      	bls.n	8002e40 <_free_r+0x7c>
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	602b      	str	r3, [r5, #0]
 8002e3e:	e7d3      	b.n	8002de8 <_free_r+0x24>
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	1821      	adds	r1, r4, r0
 8002e44:	428a      	cmp	r2, r1
 8002e46:	bf04      	itt	eq
 8002e48:	6811      	ldreq	r1, [r2, #0]
 8002e4a:	6852      	ldreq	r2, [r2, #4]
 8002e4c:	6062      	str	r2, [r4, #4]
 8002e4e:	bf04      	itt	eq
 8002e50:	1809      	addeq	r1, r1, r0
 8002e52:	6021      	streq	r1, [r4, #0]
 8002e54:	605c      	str	r4, [r3, #4]
 8002e56:	e7c7      	b.n	8002de8 <_free_r+0x24>
 8002e58:	bd38      	pop	{r3, r4, r5, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200001f4 	.word	0x200001f4

08002e60 <_malloc_r>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	1ccd      	adds	r5, r1, #3
 8002e64:	f025 0503 	bic.w	r5, r5, #3
 8002e68:	3508      	adds	r5, #8
 8002e6a:	2d0c      	cmp	r5, #12
 8002e6c:	bf38      	it	cc
 8002e6e:	250c      	movcc	r5, #12
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	4606      	mov	r6, r0
 8002e74:	db01      	blt.n	8002e7a <_malloc_r+0x1a>
 8002e76:	42a9      	cmp	r1, r5
 8002e78:	d903      	bls.n	8002e82 <_malloc_r+0x22>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	2000      	movs	r0, #0
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
 8002e82:	f000 fe8c 	bl	8003b9e <__malloc_lock>
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <_malloc_r+0xb4>)
 8002e88:	6814      	ldr	r4, [r2, #0]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	b991      	cbnz	r1, 8002eb4 <_malloc_r+0x54>
 8002e8e:	4c22      	ldr	r4, [pc, #136]	; (8002f18 <_malloc_r+0xb8>)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	b91b      	cbnz	r3, 8002e9c <_malloc_r+0x3c>
 8002e94:	4630      	mov	r0, r6
 8002e96:	f000 fba9 	bl	80035ec <_sbrk_r>
 8002e9a:	6020      	str	r0, [r4, #0]
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	f000 fba4 	bl	80035ec <_sbrk_r>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d126      	bne.n	8002ef6 <_malloc_r+0x96>
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	6033      	str	r3, [r6, #0]
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 fe77 	bl	8003ba0 <__malloc_unlock>
 8002eb2:	e7e4      	b.n	8002e7e <_malloc_r+0x1e>
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	1b5b      	subs	r3, r3, r5
 8002eb8:	d41a      	bmi.n	8002ef0 <_malloc_r+0x90>
 8002eba:	2b0b      	cmp	r3, #11
 8002ebc:	d90f      	bls.n	8002ede <_malloc_r+0x7e>
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	50cd      	str	r5, [r1, r3]
 8002ec2:	18cc      	adds	r4, r1, r3
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 fe6b 	bl	8003ba0 <__malloc_unlock>
 8002eca:	f104 000b 	add.w	r0, r4, #11
 8002ece:	1d23      	adds	r3, r4, #4
 8002ed0:	f020 0007 	bic.w	r0, r0, #7
 8002ed4:	1ac3      	subs	r3, r0, r3
 8002ed6:	d01b      	beq.n	8002f10 <_malloc_r+0xb0>
 8002ed8:	425a      	negs	r2, r3
 8002eda:	50e2      	str	r2, [r4, r3]
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	428c      	cmp	r4, r1
 8002ee0:	bf0d      	iteet	eq
 8002ee2:	6863      	ldreq	r3, [r4, #4]
 8002ee4:	684b      	ldrne	r3, [r1, #4]
 8002ee6:	6063      	strne	r3, [r4, #4]
 8002ee8:	6013      	streq	r3, [r2, #0]
 8002eea:	bf18      	it	ne
 8002eec:	460c      	movne	r4, r1
 8002eee:	e7e9      	b.n	8002ec4 <_malloc_r+0x64>
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	6849      	ldr	r1, [r1, #4]
 8002ef4:	e7ca      	b.n	8002e8c <_malloc_r+0x2c>
 8002ef6:	1cc4      	adds	r4, r0, #3
 8002ef8:	f024 0403 	bic.w	r4, r4, #3
 8002efc:	42a0      	cmp	r0, r4
 8002efe:	d005      	beq.n	8002f0c <_malloc_r+0xac>
 8002f00:	1a21      	subs	r1, r4, r0
 8002f02:	4630      	mov	r0, r6
 8002f04:	f000 fb72 	bl	80035ec <_sbrk_r>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d0cd      	beq.n	8002ea8 <_malloc_r+0x48>
 8002f0c:	6025      	str	r5, [r4, #0]
 8002f0e:	e7d9      	b.n	8002ec4 <_malloc_r+0x64>
 8002f10:	bd70      	pop	{r4, r5, r6, pc}
 8002f12:	bf00      	nop
 8002f14:	200001f4 	.word	0x200001f4
 8002f18:	200001f8 	.word	0x200001f8

08002f1c <__svfiscanf_r>:
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8002f24:	f10d 080c 	add.w	r8, sp, #12
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9346      	str	r3, [sp, #280]	; 0x118
 8002f2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002f30:	4ba0      	ldr	r3, [pc, #640]	; (80031b4 <__svfiscanf_r+0x298>)
 8002f32:	93a2      	str	r3, [sp, #648]	; 0x288
 8002f34:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80031bc <__svfiscanf_r+0x2a0>
 8002f38:	4b9f      	ldr	r3, [pc, #636]	; (80031b8 <__svfiscanf_r+0x29c>)
 8002f3a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8002f3e:	4606      	mov	r6, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	93a3      	str	r3, [sp, #652]	; 0x28c
 8002f44:	4692      	mov	sl, r2
 8002f46:	270a      	movs	r7, #10
 8002f48:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 812f 	beq.w	80031b0 <__svfiscanf_r+0x294>
 8002f52:	f000 fde7 	bl	8003b24 <__locale_ctype_ptr>
 8002f56:	f89a b000 	ldrb.w	fp, [sl]
 8002f5a:	4458      	add	r0, fp
 8002f5c:	7843      	ldrb	r3, [r0, #1]
 8002f5e:	f013 0308 	ands.w	r3, r3, #8
 8002f62:	d143      	bne.n	8002fec <__svfiscanf_r+0xd0>
 8002f64:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002f68:	f10a 0501 	add.w	r5, sl, #1
 8002f6c:	f040 8099 	bne.w	80030a2 <__svfiscanf_r+0x186>
 8002f70:	9345      	str	r3, [sp, #276]	; 0x114
 8002f72:	9343      	str	r3, [sp, #268]	; 0x10c
 8002f74:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002f78:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7a:	d103      	bne.n	8002f84 <__svfiscanf_r+0x68>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	9343      	str	r3, [sp, #268]	; 0x10c
 8002f80:	f10a 0502 	add.w	r5, sl, #2
 8002f84:	7829      	ldrb	r1, [r5, #0]
 8002f86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002f8a:	2a09      	cmp	r2, #9
 8002f8c:	46aa      	mov	sl, r5
 8002f8e:	f105 0501 	add.w	r5, r5, #1
 8002f92:	d941      	bls.n	8003018 <__svfiscanf_r+0xfc>
 8002f94:	2203      	movs	r2, #3
 8002f96:	4889      	ldr	r0, [pc, #548]	; (80031bc <__svfiscanf_r+0x2a0>)
 8002f98:	f7fd f91a 	bl	80001d0 <memchr>
 8002f9c:	b138      	cbz	r0, 8002fae <__svfiscanf_r+0x92>
 8002f9e:	eba0 0309 	sub.w	r3, r0, r9
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	4098      	lsls	r0, r3
 8002fa6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002fa8:	4318      	orrs	r0, r3
 8002faa:	9043      	str	r0, [sp, #268]	; 0x10c
 8002fac:	46aa      	mov	sl, r5
 8002fae:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb2:	2b67      	cmp	r3, #103	; 0x67
 8002fb4:	f10a 0501 	add.w	r5, sl, #1
 8002fb8:	d84a      	bhi.n	8003050 <__svfiscanf_r+0x134>
 8002fba:	2b65      	cmp	r3, #101	; 0x65
 8002fbc:	f080 80b7 	bcs.w	800312e <__svfiscanf_r+0x212>
 8002fc0:	2b47      	cmp	r3, #71	; 0x47
 8002fc2:	d82f      	bhi.n	8003024 <__svfiscanf_r+0x108>
 8002fc4:	2b45      	cmp	r3, #69	; 0x45
 8002fc6:	f080 80b2 	bcs.w	800312e <__svfiscanf_r+0x212>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8082 	beq.w	80030d4 <__svfiscanf_r+0x1b8>
 8002fd0:	2b25      	cmp	r3, #37	; 0x25
 8002fd2:	d066      	beq.n	80030a2 <__svfiscanf_r+0x186>
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	9349      	str	r3, [sp, #292]	; 0x124
 8002fd8:	9744      	str	r7, [sp, #272]	; 0x110
 8002fda:	e045      	b.n	8003068 <__svfiscanf_r+0x14c>
 8002fdc:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002fde:	3101      	adds	r1, #1
 8002fe0:	9147      	str	r1, [sp, #284]	; 0x11c
 8002fe2:	6861      	ldr	r1, [r4, #4]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	3901      	subs	r1, #1
 8002fe8:	6061      	str	r1, [r4, #4]
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	dd0b      	ble.n	800300a <__svfiscanf_r+0xee>
 8002ff2:	f000 fd97 	bl	8003b24 <__locale_ctype_ptr>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	7819      	ldrb	r1, [r3, #0]
 8002ffa:	4408      	add	r0, r1
 8002ffc:	7841      	ldrb	r1, [r0, #1]
 8002ffe:	070d      	lsls	r5, r1, #28
 8003000:	d4ec      	bmi.n	8002fdc <__svfiscanf_r+0xc0>
 8003002:	f10a 0501 	add.w	r5, sl, #1
 8003006:	46aa      	mov	sl, r5
 8003008:	e79e      	b.n	8002f48 <__svfiscanf_r+0x2c>
 800300a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800300c:	4621      	mov	r1, r4
 800300e:	4630      	mov	r0, r6
 8003010:	4798      	blx	r3
 8003012:	2800      	cmp	r0, #0
 8003014:	d0ed      	beq.n	8002ff2 <__svfiscanf_r+0xd6>
 8003016:	e7f4      	b.n	8003002 <__svfiscanf_r+0xe6>
 8003018:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800301a:	fb07 1303 	mla	r3, r7, r3, r1
 800301e:	3b30      	subs	r3, #48	; 0x30
 8003020:	9345      	str	r3, [sp, #276]	; 0x114
 8003022:	e7af      	b.n	8002f84 <__svfiscanf_r+0x68>
 8003024:	2b5b      	cmp	r3, #91	; 0x5b
 8003026:	d061      	beq.n	80030ec <__svfiscanf_r+0x1d0>
 8003028:	d80c      	bhi.n	8003044 <__svfiscanf_r+0x128>
 800302a:	2b58      	cmp	r3, #88	; 0x58
 800302c:	d1d2      	bne.n	8002fd4 <__svfiscanf_r+0xb8>
 800302e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	9243      	str	r2, [sp, #268]	; 0x10c
 8003036:	2210      	movs	r2, #16
 8003038:	9244      	str	r2, [sp, #272]	; 0x110
 800303a:	2b6f      	cmp	r3, #111	; 0x6f
 800303c:	bfb4      	ite	lt
 800303e:	2303      	movlt	r3, #3
 8003040:	2304      	movge	r3, #4
 8003042:	e010      	b.n	8003066 <__svfiscanf_r+0x14a>
 8003044:	2b63      	cmp	r3, #99	; 0x63
 8003046:	d05c      	beq.n	8003102 <__svfiscanf_r+0x1e6>
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d1c3      	bne.n	8002fd4 <__svfiscanf_r+0xb8>
 800304c:	9744      	str	r7, [sp, #272]	; 0x110
 800304e:	e7f4      	b.n	800303a <__svfiscanf_r+0x11e>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d042      	beq.n	80030da <__svfiscanf_r+0x1be>
 8003054:	d81d      	bhi.n	8003092 <__svfiscanf_r+0x176>
 8003056:	2b6e      	cmp	r3, #110	; 0x6e
 8003058:	d059      	beq.n	800310e <__svfiscanf_r+0x1f2>
 800305a:	d843      	bhi.n	80030e4 <__svfiscanf_r+0x1c8>
 800305c:	2b69      	cmp	r3, #105	; 0x69
 800305e:	d1b9      	bne.n	8002fd4 <__svfiscanf_r+0xb8>
 8003060:	2300      	movs	r3, #0
 8003062:	9344      	str	r3, [sp, #272]	; 0x110
 8003064:	2303      	movs	r3, #3
 8003066:	9349      	str	r3, [sp, #292]	; 0x124
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	dd61      	ble.n	8003132 <__svfiscanf_r+0x216>
 800306e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003070:	0659      	lsls	r1, r3, #25
 8003072:	d56f      	bpl.n	8003154 <__svfiscanf_r+0x238>
 8003074:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003076:	2b02      	cmp	r3, #2
 8003078:	dc7c      	bgt.n	8003174 <__svfiscanf_r+0x258>
 800307a:	ab01      	add	r3, sp, #4
 800307c:	4622      	mov	r2, r4
 800307e:	a943      	add	r1, sp, #268	; 0x10c
 8003080:	4630      	mov	r0, r6
 8003082:	f000 f8c7 	bl	8003214 <_scanf_chars>
 8003086:	2801      	cmp	r0, #1
 8003088:	f000 8092 	beq.w	80031b0 <__svfiscanf_r+0x294>
 800308c:	2802      	cmp	r0, #2
 800308e:	d1ba      	bne.n	8003006 <__svfiscanf_r+0xea>
 8003090:	e01d      	b.n	80030ce <__svfiscanf_r+0x1b2>
 8003092:	2b75      	cmp	r3, #117	; 0x75
 8003094:	d0da      	beq.n	800304c <__svfiscanf_r+0x130>
 8003096:	2b78      	cmp	r3, #120	; 0x78
 8003098:	d0c9      	beq.n	800302e <__svfiscanf_r+0x112>
 800309a:	2b73      	cmp	r3, #115	; 0x73
 800309c:	d19a      	bne.n	8002fd4 <__svfiscanf_r+0xb8>
 800309e:	2302      	movs	r3, #2
 80030a0:	e7e1      	b.n	8003066 <__svfiscanf_r+0x14a>
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	dd0c      	ble.n	80030c2 <__svfiscanf_r+0x1a6>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4593      	cmp	fp, r2
 80030ae:	d17f      	bne.n	80031b0 <__svfiscanf_r+0x294>
 80030b0:	3301      	adds	r3, #1
 80030b2:	6862      	ldr	r2, [r4, #4]
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80030b8:	3a01      	subs	r2, #1
 80030ba:	3301      	adds	r3, #1
 80030bc:	6062      	str	r2, [r4, #4]
 80030be:	9347      	str	r3, [sp, #284]	; 0x11c
 80030c0:	e7a1      	b.n	8003006 <__svfiscanf_r+0xea>
 80030c2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80030c4:	4621      	mov	r1, r4
 80030c6:	4630      	mov	r0, r6
 80030c8:	4798      	blx	r3
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d0ec      	beq.n	80030a8 <__svfiscanf_r+0x18c>
 80030ce:	9846      	ldr	r0, [sp, #280]	; 0x118
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d163      	bne.n	800319c <__svfiscanf_r+0x280>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	e066      	b.n	80031a8 <__svfiscanf_r+0x28c>
 80030da:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80030dc:	f042 0220 	orr.w	r2, r2, #32
 80030e0:	9243      	str	r2, [sp, #268]	; 0x10c
 80030e2:	e7a4      	b.n	800302e <__svfiscanf_r+0x112>
 80030e4:	2308      	movs	r3, #8
 80030e6:	9344      	str	r3, [sp, #272]	; 0x110
 80030e8:	2304      	movs	r3, #4
 80030ea:	e7bc      	b.n	8003066 <__svfiscanf_r+0x14a>
 80030ec:	4629      	mov	r1, r5
 80030ee:	4640      	mov	r0, r8
 80030f0:	f000 fa8c 	bl	800360c <__sccl>
 80030f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80030f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fa:	9343      	str	r3, [sp, #268]	; 0x10c
 80030fc:	4605      	mov	r5, r0
 80030fe:	2301      	movs	r3, #1
 8003100:	e7b1      	b.n	8003066 <__svfiscanf_r+0x14a>
 8003102:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003108:	9343      	str	r3, [sp, #268]	; 0x10c
 800310a:	2300      	movs	r3, #0
 800310c:	e7ab      	b.n	8003066 <__svfiscanf_r+0x14a>
 800310e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003110:	06d0      	lsls	r0, r2, #27
 8003112:	f53f af78 	bmi.w	8003006 <__svfiscanf_r+0xea>
 8003116:	f012 0f01 	tst.w	r2, #1
 800311a:	9a01      	ldr	r2, [sp, #4]
 800311c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800311e:	f102 0104 	add.w	r1, r2, #4
 8003122:	9101      	str	r1, [sp, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	bf14      	ite	ne
 8003128:	8013      	strhne	r3, [r2, #0]
 800312a:	6013      	streq	r3, [r2, #0]
 800312c:	e76b      	b.n	8003006 <__svfiscanf_r+0xea>
 800312e:	2305      	movs	r3, #5
 8003130:	e799      	b.n	8003066 <__svfiscanf_r+0x14a>
 8003132:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003134:	4621      	mov	r1, r4
 8003136:	4630      	mov	r0, r6
 8003138:	4798      	blx	r3
 800313a:	2800      	cmp	r0, #0
 800313c:	d097      	beq.n	800306e <__svfiscanf_r+0x152>
 800313e:	e7c6      	b.n	80030ce <__svfiscanf_r+0x1b2>
 8003140:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003142:	3201      	adds	r2, #1
 8003144:	9247      	str	r2, [sp, #284]	; 0x11c
 8003146:	6862      	ldr	r2, [r4, #4]
 8003148:	3a01      	subs	r2, #1
 800314a:	2a00      	cmp	r2, #0
 800314c:	6062      	str	r2, [r4, #4]
 800314e:	dd0a      	ble.n	8003166 <__svfiscanf_r+0x24a>
 8003150:	3301      	adds	r3, #1
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	f000 fce6 	bl	8003b24 <__locale_ctype_ptr>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	4410      	add	r0, r2
 800315e:	7842      	ldrb	r2, [r0, #1]
 8003160:	0712      	lsls	r2, r2, #28
 8003162:	d4ed      	bmi.n	8003140 <__svfiscanf_r+0x224>
 8003164:	e786      	b.n	8003074 <__svfiscanf_r+0x158>
 8003166:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003168:	4621      	mov	r1, r4
 800316a:	4630      	mov	r0, r6
 800316c:	4798      	blx	r3
 800316e:	2800      	cmp	r0, #0
 8003170:	d0f0      	beq.n	8003154 <__svfiscanf_r+0x238>
 8003172:	e7ac      	b.n	80030ce <__svfiscanf_r+0x1b2>
 8003174:	2b04      	cmp	r3, #4
 8003176:	dc06      	bgt.n	8003186 <__svfiscanf_r+0x26a>
 8003178:	ab01      	add	r3, sp, #4
 800317a:	4622      	mov	r2, r4
 800317c:	a943      	add	r1, sp, #268	; 0x10c
 800317e:	4630      	mov	r0, r6
 8003180:	f000 f8ac 	bl	80032dc <_scanf_i>
 8003184:	e77f      	b.n	8003086 <__svfiscanf_r+0x16a>
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <__svfiscanf_r+0x2a4>)
 8003188:	2b00      	cmp	r3, #0
 800318a:	f43f af3c 	beq.w	8003006 <__svfiscanf_r+0xea>
 800318e:	ab01      	add	r3, sp, #4
 8003190:	4622      	mov	r2, r4
 8003192:	a943      	add	r1, sp, #268	; 0x10c
 8003194:	4630      	mov	r0, r6
 8003196:	f3af 8000 	nop.w
 800319a:	e774      	b.n	8003086 <__svfiscanf_r+0x16a>
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031a2:	bf18      	it	ne
 80031a4:	f04f 30ff 	movne.w	r0, #4294967295
 80031a8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80031ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b0:	9846      	ldr	r0, [sp, #280]	; 0x118
 80031b2:	e7f9      	b.n	80031a8 <__svfiscanf_r+0x28c>
 80031b4:	080039b1 	.word	0x080039b1
 80031b8:	080034d9 	.word	0x080034d9
 80031bc:	08003d94 	.word	0x08003d94
 80031c0:	00000000 	.word	0x00000000

080031c4 <_vfiscanf_r>:
 80031c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c8:	460c      	mov	r4, r1
 80031ca:	4616      	mov	r6, r2
 80031cc:	461f      	mov	r7, r3
 80031ce:	4605      	mov	r5, r0
 80031d0:	b118      	cbz	r0, 80031da <_vfiscanf_r+0x16>
 80031d2:	6983      	ldr	r3, [r0, #24]
 80031d4:	b90b      	cbnz	r3, 80031da <_vfiscanf_r+0x16>
 80031d6:	f7ff fce3 	bl	8002ba0 <__sinit>
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <_vfiscanf_r+0x44>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d108      	bne.n	80031f2 <_vfiscanf_r+0x2e>
 80031e0:	686c      	ldr	r4, [r5, #4]
 80031e2:	463b      	mov	r3, r7
 80031e4:	4632      	mov	r2, r6
 80031e6:	4621      	mov	r1, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ee:	f7ff be95 	b.w	8002f1c <__svfiscanf_r>
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <_vfiscanf_r+0x48>)
 80031f4:	429c      	cmp	r4, r3
 80031f6:	d101      	bne.n	80031fc <_vfiscanf_r+0x38>
 80031f8:	68ac      	ldr	r4, [r5, #8]
 80031fa:	e7f2      	b.n	80031e2 <_vfiscanf_r+0x1e>
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <_vfiscanf_r+0x4c>)
 80031fe:	429c      	cmp	r4, r3
 8003200:	bf08      	it	eq
 8003202:	68ec      	ldreq	r4, [r5, #12]
 8003204:	e7ed      	b.n	80031e2 <_vfiscanf_r+0x1e>
 8003206:	bf00      	nop
 8003208:	08003d50 	.word	0x08003d50
 800320c:	08003d70 	.word	0x08003d70
 8003210:	08003d30 	.word	0x08003d30

08003214 <_scanf_chars>:
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	4615      	mov	r5, r2
 800321a:	688a      	ldr	r2, [r1, #8]
 800321c:	4680      	mov	r8, r0
 800321e:	460c      	mov	r4, r1
 8003220:	b932      	cbnz	r2, 8003230 <_scanf_chars+0x1c>
 8003222:	698a      	ldr	r2, [r1, #24]
 8003224:	2a00      	cmp	r2, #0
 8003226:	bf0c      	ite	eq
 8003228:	2201      	moveq	r2, #1
 800322a:	f04f 32ff 	movne.w	r2, #4294967295
 800322e:	608a      	str	r2, [r1, #8]
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	06d1      	lsls	r1, r2, #27
 8003234:	bf5f      	itttt	pl
 8003236:	681a      	ldrpl	r2, [r3, #0]
 8003238:	1d11      	addpl	r1, r2, #4
 800323a:	6019      	strpl	r1, [r3, #0]
 800323c:	6817      	ldrpl	r7, [r2, #0]
 800323e:	2600      	movs	r6, #0
 8003240:	69a3      	ldr	r3, [r4, #24]
 8003242:	b1db      	cbz	r3, 800327c <_scanf_chars+0x68>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <_scanf_chars+0x44>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	6962      	ldr	r2, [r4, #20]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	b9a3      	cbnz	r3, 800327c <_scanf_chars+0x68>
 8003252:	2e00      	cmp	r6, #0
 8003254:	d132      	bne.n	80032bc <_scanf_chars+0xa8>
 8003256:	e006      	b.n	8003266 <_scanf_chars+0x52>
 8003258:	2b02      	cmp	r3, #2
 800325a:	d007      	beq.n	800326c <_scanf_chars+0x58>
 800325c:	2e00      	cmp	r6, #0
 800325e:	d12d      	bne.n	80032bc <_scanf_chars+0xa8>
 8003260:	69a3      	ldr	r3, [r4, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d12a      	bne.n	80032bc <_scanf_chars+0xa8>
 8003266:	2001      	movs	r0, #1
 8003268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800326c:	f000 fc5a 	bl	8003b24 <__locale_ctype_ptr>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4418      	add	r0, r3
 8003276:	7843      	ldrb	r3, [r0, #1]
 8003278:	071b      	lsls	r3, r3, #28
 800327a:	d4ef      	bmi.n	800325c <_scanf_chars+0x48>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	06da      	lsls	r2, r3, #27
 8003280:	bf5e      	ittt	pl
 8003282:	682b      	ldrpl	r3, [r5, #0]
 8003284:	781b      	ldrbpl	r3, [r3, #0]
 8003286:	703b      	strbpl	r3, [r7, #0]
 8003288:	682a      	ldr	r2, [r5, #0]
 800328a:	686b      	ldr	r3, [r5, #4]
 800328c:	f102 0201 	add.w	r2, r2, #1
 8003290:	602a      	str	r2, [r5, #0]
 8003292:	68a2      	ldr	r2, [r4, #8]
 8003294:	f103 33ff 	add.w	r3, r3, #4294967295
 8003298:	f102 32ff 	add.w	r2, r2, #4294967295
 800329c:	606b      	str	r3, [r5, #4]
 800329e:	f106 0601 	add.w	r6, r6, #1
 80032a2:	bf58      	it	pl
 80032a4:	3701      	addpl	r7, #1
 80032a6:	60a2      	str	r2, [r4, #8]
 80032a8:	b142      	cbz	r2, 80032bc <_scanf_chars+0xa8>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	dcc8      	bgt.n	8003240 <_scanf_chars+0x2c>
 80032ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80032b2:	4629      	mov	r1, r5
 80032b4:	4640      	mov	r0, r8
 80032b6:	4798      	blx	r3
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d0c1      	beq.n	8003240 <_scanf_chars+0x2c>
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f013 0310 	ands.w	r3, r3, #16
 80032c2:	d105      	bne.n	80032d0 <_scanf_chars+0xbc>
 80032c4:	68e2      	ldr	r2, [r4, #12]
 80032c6:	3201      	adds	r2, #1
 80032c8:	60e2      	str	r2, [r4, #12]
 80032ca:	69a2      	ldr	r2, [r4, #24]
 80032cc:	b102      	cbz	r2, 80032d0 <_scanf_chars+0xbc>
 80032ce:	703b      	strb	r3, [r7, #0]
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	441e      	add	r6, r3
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	2000      	movs	r0, #0
 80032d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032dc <_scanf_i>:
 80032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e0:	469a      	mov	sl, r3
 80032e2:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <_scanf_i+0x1d8>)
 80032e4:	460c      	mov	r4, r1
 80032e6:	4683      	mov	fp, r0
 80032e8:	4616      	mov	r6, r2
 80032ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032ee:	b087      	sub	sp, #28
 80032f0:	ab03      	add	r3, sp, #12
 80032f2:	68a7      	ldr	r7, [r4, #8]
 80032f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <_scanf_i+0x1dc>)
 80032fa:	69a1      	ldr	r1, [r4, #24]
 80032fc:	4a6f      	ldr	r2, [pc, #444]	; (80034bc <_scanf_i+0x1e0>)
 80032fe:	2903      	cmp	r1, #3
 8003300:	bf18      	it	ne
 8003302:	461a      	movne	r2, r3
 8003304:	1e7b      	subs	r3, r7, #1
 8003306:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800330a:	bf84      	itt	hi
 800330c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003310:	60a3      	strhi	r3, [r4, #8]
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	9200      	str	r2, [sp, #0]
 8003316:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800331a:	bf88      	it	hi
 800331c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003320:	f104 091c 	add.w	r9, r4, #28
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bf8c      	ite	hi
 8003328:	197f      	addhi	r7, r7, r5
 800332a:	2700      	movls	r7, #0
 800332c:	464b      	mov	r3, r9
 800332e:	f04f 0800 	mov.w	r8, #0
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	6831      	ldr	r1, [r6, #0]
 8003336:	ab03      	add	r3, sp, #12
 8003338:	2202      	movs	r2, #2
 800333a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800333e:	7809      	ldrb	r1, [r1, #0]
 8003340:	f7fc ff46 	bl	80001d0 <memchr>
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	b328      	cbz	r0, 8003394 <_scanf_i+0xb8>
 8003348:	f1b8 0f01 	cmp.w	r8, #1
 800334c:	d156      	bne.n	80033fc <_scanf_i+0x120>
 800334e:	6862      	ldr	r2, [r4, #4]
 8003350:	b92a      	cbnz	r2, 800335e <_scanf_i+0x82>
 8003352:	2208      	movs	r2, #8
 8003354:	6062      	str	r2, [r4, #4]
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003364:	6022      	str	r2, [r4, #0]
 8003366:	68a2      	ldr	r2, [r4, #8]
 8003368:	1e51      	subs	r1, r2, #1
 800336a:	60a1      	str	r1, [r4, #8]
 800336c:	b192      	cbz	r2, 8003394 <_scanf_i+0xb8>
 800336e:	6832      	ldr	r2, [r6, #0]
 8003370:	1c51      	adds	r1, r2, #1
 8003372:	6031      	str	r1, [r6, #0]
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	1c5d      	adds	r5, r3, #1
 800337a:	6873      	ldr	r3, [r6, #4]
 800337c:	3b01      	subs	r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	6073      	str	r3, [r6, #4]
 8003382:	dc06      	bgt.n	8003392 <_scanf_i+0xb6>
 8003384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003388:	4631      	mov	r1, r6
 800338a:	4658      	mov	r0, fp
 800338c:	4798      	blx	r3
 800338e:	2800      	cmp	r0, #0
 8003390:	d176      	bne.n	8003480 <_scanf_i+0x1a4>
 8003392:	462b      	mov	r3, r5
 8003394:	f108 0801 	add.w	r8, r8, #1
 8003398:	f1b8 0f03 	cmp.w	r8, #3
 800339c:	d1c9      	bne.n	8003332 <_scanf_i+0x56>
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	b90a      	cbnz	r2, 80033a6 <_scanf_i+0xca>
 80033a2:	220a      	movs	r2, #10
 80033a4:	6062      	str	r2, [r4, #4]
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	4945      	ldr	r1, [pc, #276]	; (80034c0 <_scanf_i+0x1e4>)
 80033aa:	6960      	ldr	r0, [r4, #20]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	1a89      	subs	r1, r1, r2
 80033b0:	f000 f92c 	bl	800360c <__sccl>
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	f04f 0800 	mov.w	r8, #0
 80033ba:	461d      	mov	r5, r3
 80033bc:	68a3      	ldr	r3, [r4, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d038      	beq.n	8003434 <_scanf_i+0x158>
 80033c2:	6831      	ldr	r1, [r6, #0]
 80033c4:	6960      	ldr	r0, [r4, #20]
 80033c6:	780a      	ldrb	r2, [r1, #0]
 80033c8:	5c80      	ldrb	r0, [r0, r2]
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d032      	beq.n	8003434 <_scanf_i+0x158>
 80033ce:	2a30      	cmp	r2, #48	; 0x30
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	d121      	bne.n	8003418 <_scanf_i+0x13c>
 80033d4:	0510      	lsls	r0, r2, #20
 80033d6:	d51f      	bpl.n	8003418 <_scanf_i+0x13c>
 80033d8:	f108 0801 	add.w	r8, r8, #1
 80033dc:	b117      	cbz	r7, 80033e4 <_scanf_i+0x108>
 80033de:	3301      	adds	r3, #1
 80033e0:	3f01      	subs	r7, #1
 80033e2:	60a3      	str	r3, [r4, #8]
 80033e4:	6873      	ldr	r3, [r6, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	6073      	str	r3, [r6, #4]
 80033ec:	dd1b      	ble.n	8003426 <_scanf_i+0x14a>
 80033ee:	6833      	ldr	r3, [r6, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	6033      	str	r3, [r6, #0]
 80033f4:	68a3      	ldr	r3, [r4, #8]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60a3      	str	r3, [r4, #8]
 80033fa:	e7df      	b.n	80033bc <_scanf_i+0xe0>
 80033fc:	f1b8 0f02 	cmp.w	r8, #2
 8003400:	d1b1      	bne.n	8003366 <_scanf_i+0x8a>
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003408:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800340c:	d1c2      	bne.n	8003394 <_scanf_i+0xb8>
 800340e:	2110      	movs	r1, #16
 8003410:	6061      	str	r1, [r4, #4]
 8003412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003416:	e7a5      	b.n	8003364 <_scanf_i+0x88>
 8003418:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800341c:	6022      	str	r2, [r4, #0]
 800341e:	780b      	ldrb	r3, [r1, #0]
 8003420:	702b      	strb	r3, [r5, #0]
 8003422:	3501      	adds	r5, #1
 8003424:	e7de      	b.n	80033e4 <_scanf_i+0x108>
 8003426:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800342a:	4631      	mov	r1, r6
 800342c:	4658      	mov	r0, fp
 800342e:	4798      	blx	r3
 8003430:	2800      	cmp	r0, #0
 8003432:	d0df      	beq.n	80033f4 <_scanf_i+0x118>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	05d9      	lsls	r1, r3, #23
 8003438:	d50c      	bpl.n	8003454 <_scanf_i+0x178>
 800343a:	454d      	cmp	r5, r9
 800343c:	d908      	bls.n	8003450 <_scanf_i+0x174>
 800343e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003446:	4632      	mov	r2, r6
 8003448:	4658      	mov	r0, fp
 800344a:	4798      	blx	r3
 800344c:	1e6f      	subs	r7, r5, #1
 800344e:	463d      	mov	r5, r7
 8003450:	454d      	cmp	r5, r9
 8003452:	d02c      	beq.n	80034ae <_scanf_i+0x1d2>
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	f012 0210 	ands.w	r2, r2, #16
 800345a:	d11e      	bne.n	800349a <_scanf_i+0x1be>
 800345c:	702a      	strb	r2, [r5, #0]
 800345e:	6863      	ldr	r3, [r4, #4]
 8003460:	9e00      	ldr	r6, [sp, #0]
 8003462:	4649      	mov	r1, r9
 8003464:	4658      	mov	r0, fp
 8003466:	47b0      	blx	r6
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	f8da 3000 	ldr.w	r3, [sl]
 800346e:	f012 0f20 	tst.w	r2, #32
 8003472:	d008      	beq.n	8003486 <_scanf_i+0x1aa>
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	f8ca 2000 	str.w	r2, [sl]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6018      	str	r0, [r3, #0]
 800347e:	e009      	b.n	8003494 <_scanf_i+0x1b8>
 8003480:	f04f 0800 	mov.w	r8, #0
 8003484:	e7d6      	b.n	8003434 <_scanf_i+0x158>
 8003486:	07d2      	lsls	r2, r2, #31
 8003488:	d5f4      	bpl.n	8003474 <_scanf_i+0x198>
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	f8ca 2000 	str.w	r2, [sl]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	8018      	strh	r0, [r3, #0]
 8003494:	68e3      	ldr	r3, [r4, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	60e3      	str	r3, [r4, #12]
 800349a:	eba5 0509 	sub.w	r5, r5, r9
 800349e:	44a8      	add	r8, r5
 80034a0:	6925      	ldr	r5, [r4, #16]
 80034a2:	4445      	add	r5, r8
 80034a4:	6125      	str	r5, [r4, #16]
 80034a6:	2000      	movs	r0, #0
 80034a8:	b007      	add	sp, #28
 80034aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ae:	2001      	movs	r0, #1
 80034b0:	e7fa      	b.n	80034a8 <_scanf_i+0x1cc>
 80034b2:	bf00      	nop
 80034b4:	08003c80 	.word	0x08003c80
 80034b8:	08003915 	.word	0x08003915
 80034bc:	080037f5 	.word	0x080037f5
 80034c0:	08003da8 	.word	0x08003da8

080034c4 <lflush>:
 80034c4:	8983      	ldrh	r3, [r0, #12]
 80034c6:	f003 0309 	and.w	r3, r3, #9
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d101      	bne.n	80034d2 <lflush+0xe>
 80034ce:	f7ff bb15 	b.w	8002afc <fflush>
 80034d2:	2000      	movs	r0, #0
 80034d4:	4770      	bx	lr
	...

080034d8 <__srefill_r>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	4605      	mov	r5, r0
 80034de:	b118      	cbz	r0, 80034e8 <__srefill_r+0x10>
 80034e0:	6983      	ldr	r3, [r0, #24]
 80034e2:	b90b      	cbnz	r3, 80034e8 <__srefill_r+0x10>
 80034e4:	f7ff fb5c 	bl	8002ba0 <__sinit>
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <__srefill_r+0x100>)
 80034ea:	429c      	cmp	r4, r3
 80034ec:	d10a      	bne.n	8003504 <__srefill_r+0x2c>
 80034ee:	686c      	ldr	r4, [r5, #4]
 80034f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034f4:	2300      	movs	r3, #0
 80034f6:	6063      	str	r3, [r4, #4]
 80034f8:	b293      	uxth	r3, r2
 80034fa:	069e      	lsls	r6, r3, #26
 80034fc:	d50c      	bpl.n	8003518 <__srefill_r+0x40>
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003504:	4b35      	ldr	r3, [pc, #212]	; (80035dc <__srefill_r+0x104>)
 8003506:	429c      	cmp	r4, r3
 8003508:	d101      	bne.n	800350e <__srefill_r+0x36>
 800350a:	68ac      	ldr	r4, [r5, #8]
 800350c:	e7f0      	b.n	80034f0 <__srefill_r+0x18>
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <__srefill_r+0x108>)
 8003510:	429c      	cmp	r4, r3
 8003512:	bf08      	it	eq
 8003514:	68ec      	ldreq	r4, [r5, #12]
 8003516:	e7eb      	b.n	80034f0 <__srefill_r+0x18>
 8003518:	0758      	lsls	r0, r3, #29
 800351a:	d448      	bmi.n	80035ae <__srefill_r+0xd6>
 800351c:	06d9      	lsls	r1, r3, #27
 800351e:	d405      	bmi.n	800352c <__srefill_r+0x54>
 8003520:	2309      	movs	r3, #9
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	602b      	str	r3, [r5, #0]
 8003528:	81a2      	strh	r2, [r4, #12]
 800352a:	e7e8      	b.n	80034fe <__srefill_r+0x26>
 800352c:	071a      	lsls	r2, r3, #28
 800352e:	d50b      	bpl.n	8003548 <__srefill_r+0x70>
 8003530:	4621      	mov	r1, r4
 8003532:	4628      	mov	r0, r5
 8003534:	f7ff fab8 	bl	8002aa8 <_fflush_r>
 8003538:	2800      	cmp	r0, #0
 800353a:	d1e0      	bne.n	80034fe <__srefill_r+0x26>
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	f023 0308 	bic.w	r3, r3, #8
 8003544:	81a3      	strh	r3, [r4, #12]
 8003546:	61a0      	str	r0, [r4, #24]
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	b91b      	cbnz	r3, 800355c <__srefill_r+0x84>
 8003554:	4621      	mov	r1, r4
 8003556:	4628      	mov	r0, r5
 8003558:	f7ff fbec 	bl	8002d34 <__smakebuf_r>
 800355c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003560:	b2be      	uxth	r6, r7
 8003562:	07b3      	lsls	r3, r6, #30
 8003564:	d00f      	beq.n	8003586 <__srefill_r+0xae>
 8003566:	2301      	movs	r3, #1
 8003568:	81a3      	strh	r3, [r4, #12]
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <__srefill_r+0x10c>)
 800356c:	491e      	ldr	r1, [pc, #120]	; (80035e8 <__srefill_r+0x110>)
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	f006 0609 	and.w	r6, r6, #9
 8003574:	f7ff fb80 	bl	8002c78 <_fwalk>
 8003578:	2e09      	cmp	r6, #9
 800357a:	81a7      	strh	r7, [r4, #12]
 800357c:	d103      	bne.n	8003586 <__srefill_r+0xae>
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	f7ff fa09 	bl	8002998 <__sflush_r>
 8003586:	6922      	ldr	r2, [r4, #16]
 8003588:	6022      	str	r2, [r4, #0]
 800358a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	6a21      	ldr	r1, [r4, #32]
 8003590:	4628      	mov	r0, r5
 8003592:	47b0      	blx	r6
 8003594:	2800      	cmp	r0, #0
 8003596:	6060      	str	r0, [r4, #4]
 8003598:	dc1c      	bgt.n	80035d4 <__srefill_r+0xfc>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	bf17      	itett	ne
 800359e:	2200      	movne	r2, #0
 80035a0:	f043 0320 	orreq.w	r3, r3, #32
 80035a4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80035a8:	6062      	strne	r2, [r4, #4]
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	e7a7      	b.n	80034fe <__srefill_r+0x26>
 80035ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035b0:	2900      	cmp	r1, #0
 80035b2:	d0cd      	beq.n	8003550 <__srefill_r+0x78>
 80035b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035b8:	4299      	cmp	r1, r3
 80035ba:	d002      	beq.n	80035c2 <__srefill_r+0xea>
 80035bc:	4628      	mov	r0, r5
 80035be:	f7ff fc01 	bl	8002dc4 <_free_r>
 80035c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c4:	6063      	str	r3, [r4, #4]
 80035c6:	2000      	movs	r0, #0
 80035c8:	6360      	str	r0, [r4, #52]	; 0x34
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0c0      	beq.n	8003550 <__srefill_r+0x78>
 80035ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d4:	2000      	movs	r0, #0
 80035d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d8:	08003d50 	.word	0x08003d50
 80035dc:	08003d70 	.word	0x08003d70
 80035e0:	08003d30 	.word	0x08003d30
 80035e4:	08003d90 	.word	0x08003d90
 80035e8:	080034c5 	.word	0x080034c5

080035ec <_sbrk_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4c06      	ldr	r4, [pc, #24]	; (8003608 <_sbrk_r+0x1c>)
 80035f0:	2300      	movs	r3, #0
 80035f2:	4605      	mov	r5, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	f7fe ffe6 	bl	80025c8 <_sbrk>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_sbrk_r+0x1a>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	b103      	cbz	r3, 8003606 <_sbrk_r+0x1a>
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	200002b8 	.word	0x200002b8

0800360c <__sccl>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	780b      	ldrb	r3, [r1, #0]
 8003610:	2b5e      	cmp	r3, #94	; 0x5e
 8003612:	bf13      	iteet	ne
 8003614:	1c4a      	addne	r2, r1, #1
 8003616:	1c8a      	addeq	r2, r1, #2
 8003618:	784b      	ldrbeq	r3, [r1, #1]
 800361a:	2100      	movne	r1, #0
 800361c:	bf08      	it	eq
 800361e:	2101      	moveq	r1, #1
 8003620:	1e44      	subs	r4, r0, #1
 8003622:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003626:	f804 1f01 	strb.w	r1, [r4, #1]!
 800362a:	42a5      	cmp	r5, r4
 800362c:	d1fb      	bne.n	8003626 <__sccl+0x1a>
 800362e:	b913      	cbnz	r3, 8003636 <__sccl+0x2a>
 8003630:	3a01      	subs	r2, #1
 8003632:	4610      	mov	r0, r2
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	f081 0401 	eor.w	r4, r1, #1
 800363a:	54c4      	strb	r4, [r0, r3]
 800363c:	4611      	mov	r1, r2
 800363e:	780d      	ldrb	r5, [r1, #0]
 8003640:	2d2d      	cmp	r5, #45	; 0x2d
 8003642:	f101 0201 	add.w	r2, r1, #1
 8003646:	d006      	beq.n	8003656 <__sccl+0x4a>
 8003648:	2d5d      	cmp	r5, #93	; 0x5d
 800364a:	d0f2      	beq.n	8003632 <__sccl+0x26>
 800364c:	b90d      	cbnz	r5, 8003652 <__sccl+0x46>
 800364e:	460a      	mov	r2, r1
 8003650:	e7ef      	b.n	8003632 <__sccl+0x26>
 8003652:	462b      	mov	r3, r5
 8003654:	e7f1      	b.n	800363a <__sccl+0x2e>
 8003656:	784e      	ldrb	r6, [r1, #1]
 8003658:	2e5d      	cmp	r6, #93	; 0x5d
 800365a:	d0fa      	beq.n	8003652 <__sccl+0x46>
 800365c:	42b3      	cmp	r3, r6
 800365e:	dcf8      	bgt.n	8003652 <__sccl+0x46>
 8003660:	3102      	adds	r1, #2
 8003662:	3301      	adds	r3, #1
 8003664:	429e      	cmp	r6, r3
 8003666:	54c4      	strb	r4, [r0, r3]
 8003668:	dcfb      	bgt.n	8003662 <__sccl+0x56>
 800366a:	e7e8      	b.n	800363e <__sccl+0x32>

0800366c <__sread>:
 800366c:	b510      	push	{r4, lr}
 800366e:	460c      	mov	r4, r1
 8003670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003674:	f000 fabc 	bl	8003bf0 <_read_r>
 8003678:	2800      	cmp	r0, #0
 800367a:	bfab      	itete	ge
 800367c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800367e:	89a3      	ldrhlt	r3, [r4, #12]
 8003680:	181b      	addge	r3, r3, r0
 8003682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003686:	bfac      	ite	ge
 8003688:	6563      	strge	r3, [r4, #84]	; 0x54
 800368a:	81a3      	strhlt	r3, [r4, #12]
 800368c:	bd10      	pop	{r4, pc}

0800368e <__swrite>:
 800368e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003692:	461f      	mov	r7, r3
 8003694:	898b      	ldrh	r3, [r1, #12]
 8003696:	05db      	lsls	r3, r3, #23
 8003698:	4605      	mov	r5, r0
 800369a:	460c      	mov	r4, r1
 800369c:	4616      	mov	r6, r2
 800369e:	d505      	bpl.n	80036ac <__swrite+0x1e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	2200      	movs	r2, #0
 80036a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a8:	f000 fa4a 	bl	8003b40 <_lseek_r>
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	4632      	mov	r2, r6
 80036ba:	463b      	mov	r3, r7
 80036bc:	4628      	mov	r0, r5
 80036be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c2:	f000 b9e7 	b.w	8003a94 <_write_r>

080036c6 <__sseek>:
 80036c6:	b510      	push	{r4, lr}
 80036c8:	460c      	mov	r4, r1
 80036ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ce:	f000 fa37 	bl	8003b40 <_lseek_r>
 80036d2:	1c43      	adds	r3, r0, #1
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	bf15      	itete	ne
 80036d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80036da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036e2:	81a3      	strheq	r3, [r4, #12]
 80036e4:	bf18      	it	ne
 80036e6:	81a3      	strhne	r3, [r4, #12]
 80036e8:	bd10      	pop	{r4, pc}

080036ea <__sclose>:
 80036ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ee:	f000 b9e3 	b.w	8003ab8 <_close_r>

080036f2 <_strtol_l.isra.0>:
 80036f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f6:	4680      	mov	r8, r0
 80036f8:	4689      	mov	r9, r1
 80036fa:	4692      	mov	sl, r2
 80036fc:	461f      	mov	r7, r3
 80036fe:	468b      	mov	fp, r1
 8003700:	465d      	mov	r5, fp
 8003702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003708:	f000 fa08 	bl	8003b1c <__locale_ctype_ptr_l>
 800370c:	4420      	add	r0, r4
 800370e:	7846      	ldrb	r6, [r0, #1]
 8003710:	f016 0608 	ands.w	r6, r6, #8
 8003714:	d10b      	bne.n	800372e <_strtol_l.isra.0+0x3c>
 8003716:	2c2d      	cmp	r4, #45	; 0x2d
 8003718:	d10b      	bne.n	8003732 <_strtol_l.isra.0+0x40>
 800371a:	782c      	ldrb	r4, [r5, #0]
 800371c:	2601      	movs	r6, #1
 800371e:	f10b 0502 	add.w	r5, fp, #2
 8003722:	b167      	cbz	r7, 800373e <_strtol_l.isra.0+0x4c>
 8003724:	2f10      	cmp	r7, #16
 8003726:	d114      	bne.n	8003752 <_strtol_l.isra.0+0x60>
 8003728:	2c30      	cmp	r4, #48	; 0x30
 800372a:	d00a      	beq.n	8003742 <_strtol_l.isra.0+0x50>
 800372c:	e011      	b.n	8003752 <_strtol_l.isra.0+0x60>
 800372e:	46ab      	mov	fp, r5
 8003730:	e7e6      	b.n	8003700 <_strtol_l.isra.0+0xe>
 8003732:	2c2b      	cmp	r4, #43	; 0x2b
 8003734:	bf04      	itt	eq
 8003736:	782c      	ldrbeq	r4, [r5, #0]
 8003738:	f10b 0502 	addeq.w	r5, fp, #2
 800373c:	e7f1      	b.n	8003722 <_strtol_l.isra.0+0x30>
 800373e:	2c30      	cmp	r4, #48	; 0x30
 8003740:	d127      	bne.n	8003792 <_strtol_l.isra.0+0xa0>
 8003742:	782b      	ldrb	r3, [r5, #0]
 8003744:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003748:	2b58      	cmp	r3, #88	; 0x58
 800374a:	d14b      	bne.n	80037e4 <_strtol_l.isra.0+0xf2>
 800374c:	786c      	ldrb	r4, [r5, #1]
 800374e:	2710      	movs	r7, #16
 8003750:	3502      	adds	r5, #2
 8003752:	2e00      	cmp	r6, #0
 8003754:	bf0c      	ite	eq
 8003756:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800375a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800375e:	2200      	movs	r2, #0
 8003760:	fbb1 fef7 	udiv	lr, r1, r7
 8003764:	4610      	mov	r0, r2
 8003766:	fb07 1c1e 	mls	ip, r7, lr, r1
 800376a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800376e:	2b09      	cmp	r3, #9
 8003770:	d811      	bhi.n	8003796 <_strtol_l.isra.0+0xa4>
 8003772:	461c      	mov	r4, r3
 8003774:	42a7      	cmp	r7, r4
 8003776:	dd1d      	ble.n	80037b4 <_strtol_l.isra.0+0xc2>
 8003778:	1c53      	adds	r3, r2, #1
 800377a:	d007      	beq.n	800378c <_strtol_l.isra.0+0x9a>
 800377c:	4586      	cmp	lr, r0
 800377e:	d316      	bcc.n	80037ae <_strtol_l.isra.0+0xbc>
 8003780:	d101      	bne.n	8003786 <_strtol_l.isra.0+0x94>
 8003782:	45a4      	cmp	ip, r4
 8003784:	db13      	blt.n	80037ae <_strtol_l.isra.0+0xbc>
 8003786:	fb00 4007 	mla	r0, r0, r7, r4
 800378a:	2201      	movs	r2, #1
 800378c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003790:	e7eb      	b.n	800376a <_strtol_l.isra.0+0x78>
 8003792:	270a      	movs	r7, #10
 8003794:	e7dd      	b.n	8003752 <_strtol_l.isra.0+0x60>
 8003796:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800379a:	2b19      	cmp	r3, #25
 800379c:	d801      	bhi.n	80037a2 <_strtol_l.isra.0+0xb0>
 800379e:	3c37      	subs	r4, #55	; 0x37
 80037a0:	e7e8      	b.n	8003774 <_strtol_l.isra.0+0x82>
 80037a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80037a6:	2b19      	cmp	r3, #25
 80037a8:	d804      	bhi.n	80037b4 <_strtol_l.isra.0+0xc2>
 80037aa:	3c57      	subs	r4, #87	; 0x57
 80037ac:	e7e2      	b.n	8003774 <_strtol_l.isra.0+0x82>
 80037ae:	f04f 32ff 	mov.w	r2, #4294967295
 80037b2:	e7eb      	b.n	800378c <_strtol_l.isra.0+0x9a>
 80037b4:	1c53      	adds	r3, r2, #1
 80037b6:	d108      	bne.n	80037ca <_strtol_l.isra.0+0xd8>
 80037b8:	2322      	movs	r3, #34	; 0x22
 80037ba:	f8c8 3000 	str.w	r3, [r8]
 80037be:	4608      	mov	r0, r1
 80037c0:	f1ba 0f00 	cmp.w	sl, #0
 80037c4:	d107      	bne.n	80037d6 <_strtol_l.isra.0+0xe4>
 80037c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ca:	b106      	cbz	r6, 80037ce <_strtol_l.isra.0+0xdc>
 80037cc:	4240      	negs	r0, r0
 80037ce:	f1ba 0f00 	cmp.w	sl, #0
 80037d2:	d00c      	beq.n	80037ee <_strtol_l.isra.0+0xfc>
 80037d4:	b122      	cbz	r2, 80037e0 <_strtol_l.isra.0+0xee>
 80037d6:	3d01      	subs	r5, #1
 80037d8:	f8ca 5000 	str.w	r5, [sl]
 80037dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e0:	464d      	mov	r5, r9
 80037e2:	e7f9      	b.n	80037d8 <_strtol_l.isra.0+0xe6>
 80037e4:	2430      	movs	r4, #48	; 0x30
 80037e6:	2f00      	cmp	r7, #0
 80037e8:	d1b3      	bne.n	8003752 <_strtol_l.isra.0+0x60>
 80037ea:	2708      	movs	r7, #8
 80037ec:	e7b1      	b.n	8003752 <_strtol_l.isra.0+0x60>
 80037ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080037f4 <_strtol_r>:
 80037f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037f6:	4c06      	ldr	r4, [pc, #24]	; (8003810 <_strtol_r+0x1c>)
 80037f8:	4d06      	ldr	r5, [pc, #24]	; (8003814 <_strtol_r+0x20>)
 80037fa:	6824      	ldr	r4, [r4, #0]
 80037fc:	6a24      	ldr	r4, [r4, #32]
 80037fe:	2c00      	cmp	r4, #0
 8003800:	bf08      	it	eq
 8003802:	462c      	moveq	r4, r5
 8003804:	9400      	str	r4, [sp, #0]
 8003806:	f7ff ff74 	bl	80036f2 <_strtol_l.isra.0>
 800380a:	b003      	add	sp, #12
 800380c:	bd30      	pop	{r4, r5, pc}
 800380e:	bf00      	nop
 8003810:	20000004 	.word	0x20000004
 8003814:	20000068 	.word	0x20000068

08003818 <_strtoul_l.isra.0>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	4680      	mov	r8, r0
 800381e:	4689      	mov	r9, r1
 8003820:	4692      	mov	sl, r2
 8003822:	461e      	mov	r6, r3
 8003824:	460f      	mov	r7, r1
 8003826:	463d      	mov	r5, r7
 8003828:	9808      	ldr	r0, [sp, #32]
 800382a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800382e:	f000 f975 	bl	8003b1c <__locale_ctype_ptr_l>
 8003832:	4420      	add	r0, r4
 8003834:	7843      	ldrb	r3, [r0, #1]
 8003836:	f013 0308 	ands.w	r3, r3, #8
 800383a:	d10a      	bne.n	8003852 <_strtoul_l.isra.0+0x3a>
 800383c:	2c2d      	cmp	r4, #45	; 0x2d
 800383e:	d10a      	bne.n	8003856 <_strtoul_l.isra.0+0x3e>
 8003840:	782c      	ldrb	r4, [r5, #0]
 8003842:	2301      	movs	r3, #1
 8003844:	1cbd      	adds	r5, r7, #2
 8003846:	b15e      	cbz	r6, 8003860 <_strtoul_l.isra.0+0x48>
 8003848:	2e10      	cmp	r6, #16
 800384a:	d113      	bne.n	8003874 <_strtoul_l.isra.0+0x5c>
 800384c:	2c30      	cmp	r4, #48	; 0x30
 800384e:	d009      	beq.n	8003864 <_strtoul_l.isra.0+0x4c>
 8003850:	e010      	b.n	8003874 <_strtoul_l.isra.0+0x5c>
 8003852:	462f      	mov	r7, r5
 8003854:	e7e7      	b.n	8003826 <_strtoul_l.isra.0+0xe>
 8003856:	2c2b      	cmp	r4, #43	; 0x2b
 8003858:	bf04      	itt	eq
 800385a:	782c      	ldrbeq	r4, [r5, #0]
 800385c:	1cbd      	addeq	r5, r7, #2
 800385e:	e7f2      	b.n	8003846 <_strtoul_l.isra.0+0x2e>
 8003860:	2c30      	cmp	r4, #48	; 0x30
 8003862:	d125      	bne.n	80038b0 <_strtoul_l.isra.0+0x98>
 8003864:	782a      	ldrb	r2, [r5, #0]
 8003866:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800386a:	2a58      	cmp	r2, #88	; 0x58
 800386c:	d14a      	bne.n	8003904 <_strtoul_l.isra.0+0xec>
 800386e:	786c      	ldrb	r4, [r5, #1]
 8003870:	2610      	movs	r6, #16
 8003872:	3502      	adds	r5, #2
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	2700      	movs	r7, #0
 800387a:	fbb1 f1f6 	udiv	r1, r1, r6
 800387e:	fb06 fe01 	mul.w	lr, r6, r1
 8003882:	ea6f 0e0e 	mvn.w	lr, lr
 8003886:	4638      	mov	r0, r7
 8003888:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800388c:	2a09      	cmp	r2, #9
 800388e:	d811      	bhi.n	80038b4 <_strtoul_l.isra.0+0x9c>
 8003890:	4614      	mov	r4, r2
 8003892:	42a6      	cmp	r6, r4
 8003894:	dd1d      	ble.n	80038d2 <_strtoul_l.isra.0+0xba>
 8003896:	2f00      	cmp	r7, #0
 8003898:	db18      	blt.n	80038cc <_strtoul_l.isra.0+0xb4>
 800389a:	4281      	cmp	r1, r0
 800389c:	d316      	bcc.n	80038cc <_strtoul_l.isra.0+0xb4>
 800389e:	d101      	bne.n	80038a4 <_strtoul_l.isra.0+0x8c>
 80038a0:	45a6      	cmp	lr, r4
 80038a2:	db13      	blt.n	80038cc <_strtoul_l.isra.0+0xb4>
 80038a4:	fb00 4006 	mla	r0, r0, r6, r4
 80038a8:	2701      	movs	r7, #1
 80038aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038ae:	e7eb      	b.n	8003888 <_strtoul_l.isra.0+0x70>
 80038b0:	260a      	movs	r6, #10
 80038b2:	e7df      	b.n	8003874 <_strtoul_l.isra.0+0x5c>
 80038b4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80038b8:	2a19      	cmp	r2, #25
 80038ba:	d801      	bhi.n	80038c0 <_strtoul_l.isra.0+0xa8>
 80038bc:	3c37      	subs	r4, #55	; 0x37
 80038be:	e7e8      	b.n	8003892 <_strtoul_l.isra.0+0x7a>
 80038c0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80038c4:	2a19      	cmp	r2, #25
 80038c6:	d804      	bhi.n	80038d2 <_strtoul_l.isra.0+0xba>
 80038c8:	3c57      	subs	r4, #87	; 0x57
 80038ca:	e7e2      	b.n	8003892 <_strtoul_l.isra.0+0x7a>
 80038cc:	f04f 37ff 	mov.w	r7, #4294967295
 80038d0:	e7eb      	b.n	80038aa <_strtoul_l.isra.0+0x92>
 80038d2:	2f00      	cmp	r7, #0
 80038d4:	da09      	bge.n	80038ea <_strtoul_l.isra.0+0xd2>
 80038d6:	2322      	movs	r3, #34	; 0x22
 80038d8:	f8c8 3000 	str.w	r3, [r8]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f1ba 0f00 	cmp.w	sl, #0
 80038e4:	d107      	bne.n	80038f6 <_strtoul_l.isra.0+0xde>
 80038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ea:	b103      	cbz	r3, 80038ee <_strtoul_l.isra.0+0xd6>
 80038ec:	4240      	negs	r0, r0
 80038ee:	f1ba 0f00 	cmp.w	sl, #0
 80038f2:	d00c      	beq.n	800390e <_strtoul_l.isra.0+0xf6>
 80038f4:	b127      	cbz	r7, 8003900 <_strtoul_l.isra.0+0xe8>
 80038f6:	3d01      	subs	r5, #1
 80038f8:	f8ca 5000 	str.w	r5, [sl]
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	464d      	mov	r5, r9
 8003902:	e7f9      	b.n	80038f8 <_strtoul_l.isra.0+0xe0>
 8003904:	2430      	movs	r4, #48	; 0x30
 8003906:	2e00      	cmp	r6, #0
 8003908:	d1b4      	bne.n	8003874 <_strtoul_l.isra.0+0x5c>
 800390a:	2608      	movs	r6, #8
 800390c:	e7b2      	b.n	8003874 <_strtoul_l.isra.0+0x5c>
 800390e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003914 <_strtoul_r>:
 8003914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003916:	4c06      	ldr	r4, [pc, #24]	; (8003930 <_strtoul_r+0x1c>)
 8003918:	4d06      	ldr	r5, [pc, #24]	; (8003934 <_strtoul_r+0x20>)
 800391a:	6824      	ldr	r4, [r4, #0]
 800391c:	6a24      	ldr	r4, [r4, #32]
 800391e:	2c00      	cmp	r4, #0
 8003920:	bf08      	it	eq
 8003922:	462c      	moveq	r4, r5
 8003924:	9400      	str	r4, [sp, #0]
 8003926:	f7ff ff77 	bl	8003818 <_strtoul_l.isra.0>
 800392a:	b003      	add	sp, #12
 800392c:	bd30      	pop	{r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	20000004 	.word	0x20000004
 8003934:	20000068 	.word	0x20000068

08003938 <__submore>:
 8003938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800393c:	460c      	mov	r4, r1
 800393e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003944:	4299      	cmp	r1, r3
 8003946:	d11e      	bne.n	8003986 <__submore+0x4e>
 8003948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800394c:	f7ff fa88 	bl	8002e60 <_malloc_r>
 8003950:	b918      	cbnz	r0, 800395a <__submore+0x22>
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800395a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003960:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003964:	6360      	str	r0, [r4, #52]	; 0x34
 8003966:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800396a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800396e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003972:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003976:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800397a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800397e:	6020      	str	r0, [r4, #0]
 8003980:	2000      	movs	r0, #0
 8003982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003986:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003988:	0077      	lsls	r7, r6, #1
 800398a:	463a      	mov	r2, r7
 800398c:	f000 f909 	bl	8003ba2 <_realloc_r>
 8003990:	4605      	mov	r5, r0
 8003992:	2800      	cmp	r0, #0
 8003994:	d0dd      	beq.n	8003952 <__submore+0x1a>
 8003996:	eb00 0806 	add.w	r8, r0, r6
 800399a:	4601      	mov	r1, r0
 800399c:	4632      	mov	r2, r6
 800399e:	4640      	mov	r0, r8
 80039a0:	f000 f8f2 	bl	8003b88 <memcpy>
 80039a4:	f8c4 8000 	str.w	r8, [r4]
 80039a8:	6365      	str	r5, [r4, #52]	; 0x34
 80039aa:	63a7      	str	r7, [r4, #56]	; 0x38
 80039ac:	e7e8      	b.n	8003980 <__submore+0x48>
	...

080039b0 <_ungetc_r>:
 80039b0:	1c4b      	adds	r3, r1, #1
 80039b2:	b570      	push	{r4, r5, r6, lr}
 80039b4:	4606      	mov	r6, r0
 80039b6:	460d      	mov	r5, r1
 80039b8:	4614      	mov	r4, r2
 80039ba:	d103      	bne.n	80039c4 <_ungetc_r+0x14>
 80039bc:	f04f 35ff 	mov.w	r5, #4294967295
 80039c0:	4628      	mov	r0, r5
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	b118      	cbz	r0, 80039ce <_ungetc_r+0x1e>
 80039c6:	6983      	ldr	r3, [r0, #24]
 80039c8:	b90b      	cbnz	r3, 80039ce <_ungetc_r+0x1e>
 80039ca:	f7ff f8e9 	bl	8002ba0 <__sinit>
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <_ungetc_r+0xd8>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	d12c      	bne.n	8003a2e <_ungetc_r+0x7e>
 80039d4:	6874      	ldr	r4, [r6, #4]
 80039d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039da:	f023 0320 	bic.w	r3, r3, #32
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	0759      	lsls	r1, r3, #29
 80039e4:	d413      	bmi.n	8003a0e <_ungetc_r+0x5e>
 80039e6:	06da      	lsls	r2, r3, #27
 80039e8:	d5e8      	bpl.n	80039bc <_ungetc_r+0xc>
 80039ea:	071b      	lsls	r3, r3, #28
 80039ec:	d50b      	bpl.n	8003a06 <_ungetc_r+0x56>
 80039ee:	4621      	mov	r1, r4
 80039f0:	4630      	mov	r0, r6
 80039f2:	f7ff f859 	bl	8002aa8 <_fflush_r>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d1e0      	bne.n	80039bc <_ungetc_r+0xc>
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	60a0      	str	r0, [r4, #8]
 80039fe:	f023 0308 	bic.w	r3, r3, #8
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	61a0      	str	r0, [r4, #24]
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a10:	6862      	ldr	r2, [r4, #4]
 8003a12:	b2ed      	uxtb	r5, r5
 8003a14:	b1e3      	cbz	r3, 8003a50 <_ungetc_r+0xa0>
 8003a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	da12      	bge.n	8003a42 <_ungetc_r+0x92>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	1e5a      	subs	r2, r3, #1
 8003a20:	6022      	str	r2, [r4, #0]
 8003a22:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	6063      	str	r3, [r4, #4]
 8003a2c:	e7c8      	b.n	80039c0 <_ungetc_r+0x10>
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <_ungetc_r+0xdc>)
 8003a30:	429c      	cmp	r4, r3
 8003a32:	d101      	bne.n	8003a38 <_ungetc_r+0x88>
 8003a34:	68b4      	ldr	r4, [r6, #8]
 8003a36:	e7ce      	b.n	80039d6 <_ungetc_r+0x26>
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <_ungetc_r+0xe0>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	bf08      	it	eq
 8003a3e:	68f4      	ldreq	r4, [r6, #12]
 8003a40:	e7c9      	b.n	80039d6 <_ungetc_r+0x26>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff ff77 	bl	8003938 <__submore>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d0e6      	beq.n	8003a1c <_ungetc_r+0x6c>
 8003a4e:	e7b5      	b.n	80039bc <_ungetc_r+0xc>
 8003a50:	6921      	ldr	r1, [r4, #16]
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	b151      	cbz	r1, 8003a6c <_ungetc_r+0xbc>
 8003a56:	4299      	cmp	r1, r3
 8003a58:	d208      	bcs.n	8003a6c <_ungetc_r+0xbc>
 8003a5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003a5e:	428d      	cmp	r5, r1
 8003a60:	d104      	bne.n	8003a6c <_ungetc_r+0xbc>
 8003a62:	3b01      	subs	r3, #1
 8003a64:	3201      	adds	r2, #1
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	6062      	str	r2, [r4, #4]
 8003a6a:	e7a9      	b.n	80039c0 <_ungetc_r+0x10>
 8003a6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a72:	6363      	str	r3, [r4, #52]	; 0x34
 8003a74:	2303      	movs	r3, #3
 8003a76:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a78:	4623      	mov	r3, r4
 8003a7a:	6422      	str	r2, [r4, #64]	; 0x40
 8003a7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	2301      	movs	r3, #1
 8003a84:	e7d1      	b.n	8003a2a <_ungetc_r+0x7a>
 8003a86:	bf00      	nop
 8003a88:	08003d50 	.word	0x08003d50
 8003a8c:	08003d70 	.word	0x08003d70
 8003a90:	08003d30 	.word	0x08003d30

08003a94 <_write_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4c07      	ldr	r4, [pc, #28]	; (8003ab4 <_write_r+0x20>)
 8003a98:	4605      	mov	r5, r0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	6022      	str	r2, [r4, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7fe fd7a 	bl	800259c <_write>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_write_r+0x1e>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_write_r+0x1e>
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	200002b8 	.word	0x200002b8

08003ab8 <_close_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4c06      	ldr	r4, [pc, #24]	; (8003ad4 <_close_r+0x1c>)
 8003abc:	2300      	movs	r3, #0
 8003abe:	4605      	mov	r5, r0
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	f7fe fd8e 	bl	80025e4 <_close>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d102      	bne.n	8003ad2 <_close_r+0x1a>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	b103      	cbz	r3, 8003ad2 <_close_r+0x1a>
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	200002b8 	.word	0x200002b8

08003ad8 <_fstat_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4c07      	ldr	r4, [pc, #28]	; (8003af8 <_fstat_r+0x20>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4605      	mov	r5, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	f7fe fd85 	bl	80025f4 <_fstat>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d102      	bne.n	8003af4 <_fstat_r+0x1c>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	b103      	cbz	r3, 8003af4 <_fstat_r+0x1c>
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
 8003af6:	bf00      	nop
 8003af8:	200002b8 	.word	0x200002b8

08003afc <_isatty_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4c06      	ldr	r4, [pc, #24]	; (8003b18 <_isatty_r+0x1c>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	4605      	mov	r5, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	f7fe fd7c 	bl	8002604 <_isatty>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_isatty_r+0x1a>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_isatty_r+0x1a>
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	200002b8 	.word	0x200002b8

08003b1c <__locale_ctype_ptr_l>:
 8003b1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003b20:	4770      	bx	lr
	...

08003b24 <__locale_ctype_ptr>:
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <__locale_ctype_ptr+0x14>)
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <__locale_ctype_ptr+0x18>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf08      	it	eq
 8003b30:	4613      	moveq	r3, r2
 8003b32:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003b36:	4770      	bx	lr
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	20000068 	.word	0x20000068

08003b40 <_lseek_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4c07      	ldr	r4, [pc, #28]	; (8003b60 <_lseek_r+0x20>)
 8003b44:	4605      	mov	r5, r0
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	6022      	str	r2, [r4, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fe fd60 	bl	8002614 <_lseek>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_lseek_r+0x1e>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_lseek_r+0x1e>
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	200002b8 	.word	0x200002b8

08003b64 <__ascii_mbtowc>:
 8003b64:	b082      	sub	sp, #8
 8003b66:	b901      	cbnz	r1, 8003b6a <__ascii_mbtowc+0x6>
 8003b68:	a901      	add	r1, sp, #4
 8003b6a:	b142      	cbz	r2, 8003b7e <__ascii_mbtowc+0x1a>
 8003b6c:	b14b      	cbz	r3, 8003b82 <__ascii_mbtowc+0x1e>
 8003b6e:	7813      	ldrb	r3, [r2, #0]
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	1c10      	adds	r0, r2, #0
 8003b76:	bf18      	it	ne
 8003b78:	2001      	movne	r0, #1
 8003b7a:	b002      	add	sp, #8
 8003b7c:	4770      	bx	lr
 8003b7e:	4610      	mov	r0, r2
 8003b80:	e7fb      	b.n	8003b7a <__ascii_mbtowc+0x16>
 8003b82:	f06f 0001 	mvn.w	r0, #1
 8003b86:	e7f8      	b.n	8003b7a <__ascii_mbtowc+0x16>

08003b88 <memcpy>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	1e43      	subs	r3, r0, #1
 8003b8c:	440a      	add	r2, r1
 8003b8e:	4291      	cmp	r1, r2
 8003b90:	d100      	bne.n	8003b94 <memcpy+0xc>
 8003b92:	bd10      	pop	{r4, pc}
 8003b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b9c:	e7f7      	b.n	8003b8e <memcpy+0x6>

08003b9e <__malloc_lock>:
 8003b9e:	4770      	bx	lr

08003ba0 <__malloc_unlock>:
 8003ba0:	4770      	bx	lr

08003ba2 <_realloc_r>:
 8003ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	460e      	mov	r6, r1
 8003baa:	b921      	cbnz	r1, 8003bb6 <_realloc_r+0x14>
 8003bac:	4611      	mov	r1, r2
 8003bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bb2:	f7ff b955 	b.w	8002e60 <_malloc_r>
 8003bb6:	b922      	cbnz	r2, 8003bc2 <_realloc_r+0x20>
 8003bb8:	f7ff f904 	bl	8002dc4 <_free_r>
 8003bbc:	4625      	mov	r5, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc2:	f000 f834 	bl	8003c2e <_malloc_usable_size_r>
 8003bc6:	4284      	cmp	r4, r0
 8003bc8:	d90f      	bls.n	8003bea <_realloc_r+0x48>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f7ff f947 	bl	8002e60 <_malloc_r>
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d0f2      	beq.n	8003bbe <_realloc_r+0x1c>
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4622      	mov	r2, r4
 8003bdc:	f7ff ffd4 	bl	8003b88 <memcpy>
 8003be0:	4631      	mov	r1, r6
 8003be2:	4638      	mov	r0, r7
 8003be4:	f7ff f8ee 	bl	8002dc4 <_free_r>
 8003be8:	e7e9      	b.n	8003bbe <_realloc_r+0x1c>
 8003bea:	4635      	mov	r5, r6
 8003bec:	e7e7      	b.n	8003bbe <_realloc_r+0x1c>
	...

08003bf0 <_read_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4c07      	ldr	r4, [pc, #28]	; (8003c10 <_read_r+0x20>)
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	6022      	str	r2, [r4, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fe fd10 	bl	8002624 <_read>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_read_r+0x1e>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_read_r+0x1e>
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	200002b8 	.word	0x200002b8

08003c14 <__ascii_wctomb>:
 8003c14:	b149      	cbz	r1, 8003c2a <__ascii_wctomb+0x16>
 8003c16:	2aff      	cmp	r2, #255	; 0xff
 8003c18:	bf85      	ittet	hi
 8003c1a:	238a      	movhi	r3, #138	; 0x8a
 8003c1c:	6003      	strhi	r3, [r0, #0]
 8003c1e:	700a      	strbls	r2, [r1, #0]
 8003c20:	f04f 30ff 	movhi.w	r0, #4294967295
 8003c24:	bf98      	it	ls
 8003c26:	2001      	movls	r0, #1
 8003c28:	4770      	bx	lr
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	4770      	bx	lr

08003c2e <_malloc_usable_size_r>:
 8003c2e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f1a0 0004 	sub.w	r0, r0, #4
 8003c38:	bfbc      	itt	lt
 8003c3a:	580b      	ldrlt	r3, [r1, r0]
 8003c3c:	18c0      	addlt	r0, r0, r3
 8003c3e:	4770      	bx	lr

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
