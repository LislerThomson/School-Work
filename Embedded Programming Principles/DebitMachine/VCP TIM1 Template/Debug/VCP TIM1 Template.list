
C:\CubeMx Project 1\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000958c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08009720  08009720  00019720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000570  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  20000570  0800a0f0  00020570  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006e0  0800a0f0  000206e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001078c  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000258d  00000000  00000000  00030d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000081c4  00000000  00000000  000332b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b90  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e58  00000000  00000000  0003c010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005a00  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000045a5  00000000  00000000  00042868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00046e0d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032d8  00000000  00000000  00046e8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000570 	.word	0x20000570
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009704 	.word	0x08009704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000574 	.word	0x20000574
 80001cc:	08009704 	.word	0x08009704

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97e 	b.w	8000f94 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460e      	mov	r6, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9d08      	ldr	r5, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d150      	bne.n	8000d62 <__udivmoddi4+0xb2>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96c      	bls.n	8000da0 <__udivmoddi4+0xf0>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0420 	rsb	r4, lr, #32
 8000cd4:	fa20 f404 	lsr.w	r4, r0, r4
 8000cd8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000cdc:	ea44 0c06 	orr.w	ip, r4, r6
 8000ce0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	fbbc f0f9 	udiv	r0, ip, r9
 8000cf2:	fa1f f887 	uxth.w	r8, r7
 8000cf6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cfa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfe:	fb00 f308 	mul.w	r3, r0, r8
 8000d02:	42b3      	cmp	r3, r6
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x6a>
 8000d06:	19f6      	adds	r6, r6, r7
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 8122 	bcs.w	8000f54 <__udivmoddi4+0x2a4>
 8000d10:	42b3      	cmp	r3, r6
 8000d12:	f240 811f 	bls.w	8000f54 <__udivmoddi4+0x2a4>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443e      	add	r6, r7
 8000d1a:	1af6      	subs	r6, r6, r3
 8000d1c:	b2a2      	uxth	r2, r4
 8000d1e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d22:	fb09 6613 	mls	r6, r9, r3, r6
 8000d26:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d2a:	fb03 f808 	mul.w	r8, r3, r8
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x96>
 8000d32:	19e4      	adds	r4, r4, r7
 8000d34:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x2a0>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x2a0>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ebc8 0404 	rsb	r4, r8, r4
 8000d4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d062      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d54:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d58:	2300      	movs	r3, #0
 8000d5a:	602c      	str	r4, [r5, #0]
 8000d5c:	606b      	str	r3, [r5, #4]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0xc6>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d055      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d70:	4608      	mov	r0, r1
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	f040 8090 	bne.w	8000ea0 <__udivmoddi4+0x1f0>
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xda>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	46b4      	mov	ip, r6
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d040      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	b912      	cbnz	r2, 8000da8 <__udivmoddi4+0xf8>
 8000da2:	2701      	movs	r7, #1
 8000da4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000da8:	fab7 fe87 	clz	lr, r7
 8000dac:	f1be 0f00 	cmp.w	lr, #0
 8000db0:	d135      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db2:	1bf3      	subs	r3, r6, r7
 8000db4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc2:	0c22      	lsrs	r2, r4, #16
 8000dc4:	fb08 3610 	mls	r6, r8, r0, r3
 8000dc8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dcc:	fb0c f300 	mul.w	r3, ip, r0
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19f6      	adds	r6, r6, r7
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42b3      	cmp	r3, r6
 8000dde:	f200 80ce 	bhi.w	8000f7e <__udivmoddi4+0x2ce>
 8000de2:	4610      	mov	r0, r2
 8000de4:	1af6      	subs	r6, r6, r3
 8000de6:	b2a2      	uxth	r2, r4
 8000de8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dec:	fb08 6613 	mls	r6, r8, r3, r6
 8000df0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000df4:	fb0c fc03 	mul.w	ip, ip, r3
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b5 	bhi.w	8000f74 <__udivmoddi4+0x2c4>
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	ebcc 0404 	rsb	r4, ip, r4
 8000e10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e14:	e79c      	b.n	8000d50 <__udivmoddi4+0xa0>
 8000e16:	4629      	mov	r1, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0120 	rsb	r1, lr, #32
 8000e22:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e32:	40ce      	lsrs	r6, r1
 8000e34:	ea49 0903 	orr.w	r9, r9, r3
 8000e38:	fbb6 faf8 	udiv	sl, r6, r8
 8000e3c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e40:	fb08 661a 	mls	r6, r8, sl, r6
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e4c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e50:	429a      	cmp	r2, r3
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1be>
 8000e58:	19db      	adds	r3, r3, r7
 8000e5a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e5e:	f080 8087 	bcs.w	8000f70 <__udivmoddi4+0x2c0>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f240 8084 	bls.w	8000f70 <__udivmoddi4+0x2c0>
 8000e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	fa1f f989 	uxth.w	r9, r9
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e80:	fb01 f60c 	mul.w	r6, r1, ip
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1e8>
 8000e88:	19db      	adds	r3, r3, r7
 8000e8a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e8e:	d26b      	bcs.n	8000f68 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d969      	bls.n	8000f68 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	443b      	add	r3, r7
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e9e:	e78e      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000ea0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ea4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	fa20 f70e 	lsr.w	r7, r0, lr
 8000eb0:	fa06 f401 	lsl.w	r4, r6, r1
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ebc:	433c      	orrs	r4, r7
 8000ebe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ec2:	0c27      	lsrs	r7, r4, #16
 8000ec4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ec8:	fa1f f883 	uxth.w	r8, r3
 8000ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ed0:	fb09 f708 	mul.w	r7, r9, r8
 8000ed4:	42b7      	cmp	r7, r6
 8000ed6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eda:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x242>
 8000ee0:	18f6      	adds	r6, r6, r3
 8000ee2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee6:	d241      	bcs.n	8000f6c <__udivmoddi4+0x2bc>
 8000ee8:	42b7      	cmp	r7, r6
 8000eea:	d93f      	bls.n	8000f6c <__udivmoddi4+0x2bc>
 8000eec:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef0:	441e      	add	r6, r3
 8000ef2:	1bf6      	subs	r6, r6, r7
 8000ef4:	b2a0      	uxth	r0, r4
 8000ef6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000efa:	fb0c 6614 	mls	r6, ip, r4, r6
 8000efe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f02:	fb04 f808 	mul.w	r8, r4, r8
 8000f06:	45b8      	cmp	r8, r7
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x26a>
 8000f0a:	18ff      	adds	r7, r7, r3
 8000f0c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f10:	d228      	bcs.n	8000f64 <__udivmoddi4+0x2b4>
 8000f12:	45b8      	cmp	r8, r7
 8000f14:	d926      	bls.n	8000f64 <__udivmoddi4+0x2b4>
 8000f16:	3c02      	subs	r4, #2
 8000f18:	441f      	add	r7, r3
 8000f1a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f1e:	ebc8 0707 	rsb	r7, r8, r7
 8000f22:	fba0 8902 	umull	r8, r9, r0, r2
 8000f26:	454f      	cmp	r7, r9
 8000f28:	4644      	mov	r4, r8
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	d314      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	d029      	beq.n	8000f84 <__udivmoddi4+0x2d4>
 8000f30:	b365      	cbz	r5, 8000f8c <__udivmoddi4+0x2dc>
 8000f32:	ebba 0304 	subs.w	r3, sl, r4
 8000f36:	eb67 0706 	sbc.w	r7, r7, r6
 8000f3a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	40cf      	lsrs	r7, r1
 8000f42:	ea4e 0303 	orr.w	r3, lr, r3
 8000f46:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	4613      	mov	r3, r2
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x96>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e6e0      	b.n	8000d1a <__udivmoddi4+0x6a>
 8000f58:	ebb8 0402 	subs.w	r4, r8, r2
 8000f5c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7e5      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f64:	4604      	mov	r4, r0
 8000f66:	e7d8      	b.n	8000f1a <__udivmoddi4+0x26a>
 8000f68:	4611      	mov	r1, r2
 8000f6a:	e795      	b.n	8000e98 <__udivmoddi4+0x1e8>
 8000f6c:	4681      	mov	r9, r0
 8000f6e:	e7c0      	b.n	8000ef2 <__udivmoddi4+0x242>
 8000f70:	468a      	mov	sl, r1
 8000f72:	e77c      	b.n	8000e6e <__udivmoddi4+0x1be>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e748      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xe4>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	443e      	add	r6, r7
 8000f82:	e72f      	b.n	8000de4 <__udivmoddi4+0x134>
 8000f84:	45c2      	cmp	sl, r8
 8000f86:	d3e7      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f88:	463e      	mov	r6, r7
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 f876 	bl	8001098 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	4621      	mov	r1, r4
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f83c 	bl	8001030 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bd10      	pop	{r4, pc}
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f822 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ffe5 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f002 f8f7 	bl	80031c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	bd08      	pop	{r3, pc}
	...

08000fd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fd8:	4a02      	ldr	r2, [pc, #8]	; (8000fe4 <HAL_IncTick+0xc>)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200005c4 	.word	0x200005c4

08000fe8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe8:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <HAL_GetTick+0x8>)
 8000fea:	6818      	ldr	r0, [r3, #0]
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200005c4 	.word	0x200005c4

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000ff8:	f7ff fff6 	bl	8000fe8 <HAL_GetTick>
 8000ffc:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ffe:	f7ff fff3 	bl	8000fe8 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	42a0      	cmp	r0, r4
 8001006:	d3fa      	bcc.n	8000ffe <HAL_Delay+0xa>
  {
  }
}
 8001008:	bd38      	pop	{r3, r4, r5, pc}
	...

0800100c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800100e:	68d3      	ldr	r3, [r2, #12]
 8001010:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800101c:	0200      	lsls	r0, r0, #8
 800101e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001022:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001026:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001028:	60d3      	str	r3, [r2, #12]
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_NVIC_SetPriority+0x60>)
 8001032:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	2c04      	cmp	r4, #4
 8001042:	bf28      	it	cs
 8001044:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	2d06      	cmp	r5, #6

  return (
 8001048:	f04f 0501 	mov.w	r5, #1
 800104c:	fa05 f404 	lsl.w	r4, r5, r4
 8001050:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001054:	bf8c      	ite	hi
 8001056:	3b03      	subhi	r3, #3
 8001058:	2300      	movls	r3, #0

  return (
 800105a:	400c      	ands	r4, r1
 800105c:	409c      	lsls	r4, r3
 800105e:	fa05 f303 	lsl.w	r3, r5, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001066:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001068:	ea42 0204 	orr.w	r2, r2, r4
 800106c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	bfaf      	iteee	ge
 8001072:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	f000 000f 	andlt.w	r0, r0, #15
 800107a:	4b06      	ldrlt	r3, [pc, #24]	; (8001094 <HAL_NVIC_SetPriority+0x64>)
 800107c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	bfa5      	ittet	ge
 8001080:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001084:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800108c:	bd30      	pop	{r4, r5, pc}
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	e000ed14 	.word	0xe000ed14

08001098 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	3801      	subs	r0, #1
 800109a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800109e:	d20a      	bcs.n	80010b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a4:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	21f0      	movs	r1, #240	; 0xf0
 80010a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c6:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010c8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010ca:	bf0c      	ite	eq
 80010cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010d0:	f022 0204 	bicne.w	r2, r2, #4
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4770      	bx	lr
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010dc:	4770      	bx	lr

080010de <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010e0:	f7ff fffc 	bl	80010dc <HAL_SYSTICK_Callback>
 80010e4:	bd08      	pop	{r3, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	f8df c168 	ldr.w	ip, [pc, #360]	; 800125c <HAL_GPIO_Init+0x174>
 80010f4:	4c57      	ldr	r4, [pc, #348]	; (8001254 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010f6:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f8:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80010fc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	40da      	lsrs	r2, r3
 8001102:	f000 80a4 	beq.w	800124e <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001106:	2201      	movs	r2, #1
 8001108:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 800110c:	9a01      	ldr	r2, [sp, #4]
 800110e:	ea12 0509 	ands.w	r5, r2, r9
 8001112:	f000 809a 	beq.w	800124a <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	684a      	ldr	r2, [r1, #4]
 8001118:	f022 0a10 	bic.w	sl, r2, #16
 800111c:	f1ba 0f02 	cmp.w	sl, #2
 8001120:	d113      	bne.n	800114a <HAL_GPIO_Init+0x62>
 8001122:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001126:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800112a:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800112e:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001132:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001136:	fa08 f60b 	lsl.w	r6, r8, fp
 800113a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800113e:	690e      	ldr	r6, [r1, #16]
 8001140:	fa06 f60b 	lsl.w	r6, r6, fp
 8001144:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001146:	f8ce 6020 	str.w	r6, [lr, #32]
 800114a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800114e:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001152:	fa06 f60e 	lsl.w	r6, r6, lr
 8001156:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001158:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800115c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800115e:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001162:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001166:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116a:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800116e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001170:	d811      	bhi.n	8001196 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001172:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001174:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001178:	68cf      	ldr	r7, [r1, #12]
 800117a:	fa07 f70e 	lsl.w	r7, r7, lr
 800117e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001182:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800118a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800118e:	409f      	lsls	r7, r3
 8001190:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001194:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001196:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001198:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800119a:	688f      	ldr	r7, [r1, #8]
 800119c:	fa07 f70e 	lsl.w	r7, r7, lr
 80011a0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80011a2:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a4:	00d6      	lsls	r6, r2, #3
 80011a6:	d550      	bpl.n	800124a <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80011ac:	f046 0601 	orr.w	r6, r6, #1
 80011b0:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80011b4:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80011b8:	f006 0601 	and.w	r6, r6, #1
 80011bc:	9603      	str	r6, [sp, #12]
 80011be:	9e03      	ldr	r6, [sp, #12]
 80011c0:	f023 0603 	bic.w	r6, r3, #3
 80011c4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80011c8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011cc:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80011d0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80011d6:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011da:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011de:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011e2:	d00b      	beq.n	80011fc <HAL_GPIO_Init+0x114>
 80011e4:	4f1c      	ldr	r7, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x170>)
 80011e6:	42b8      	cmp	r0, r7
 80011e8:	d00b      	beq.n	8001202 <HAL_GPIO_Init+0x11a>
 80011ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011ee:	42b8      	cmp	r0, r7
 80011f0:	bf14      	ite	ne
 80011f2:	f04f 0e07 	movne.w	lr, #7
 80011f6:	f04f 0e02 	moveq.w	lr, #2
 80011fa:	e004      	b.n	8001206 <HAL_GPIO_Init+0x11e>
 80011fc:	f04f 0e00 	mov.w	lr, #0
 8001200:	e001      	b.n	8001206 <HAL_GPIO_Init+0x11e>
 8001202:	f04f 0e01 	mov.w	lr, #1
 8001206:	fa0e f909 	lsl.w	r9, lr, r9
 800120a:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800120e:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001210:	4e10      	ldr	r6, [pc, #64]	; (8001254 <HAL_GPIO_Init+0x16c>)
 8001212:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001214:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001216:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800121a:	bf0c      	ite	eq
 800121c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800121e:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8001220:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8001222:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001224:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8001228:	bf0c      	ite	eq
 800122a:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800122c:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 800122e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001230:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001232:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001236:	bf0c      	ite	eq
 8001238:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800123a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 800123c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 800123e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001242:	bf54      	ite	pl
 8001244:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001246:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8001248:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800124a:	3301      	adds	r3, #1
 800124c:	e757      	b.n	80010fe <HAL_GPIO_Init+0x16>
  }
}
 800124e:	b005      	add	sp, #20
 8001250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001254:	40010400 	.word	0x40010400
 8001258:	48000400 	.word	0x48000400
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001260:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001262:	4219      	tst	r1, r3
}
 8001264:	bf14      	ite	ne
 8001266:	2001      	movne	r0, #1
 8001268:	2000      	moveq	r0, #0
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	b10a      	cbz	r2, 8001272 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	6181      	str	r1, [r0, #24]
 8001270:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	6281      	str	r1, [r0, #40]	; 0x28
 8001274:	4770      	bx	lr
	...

08001278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_PWREx_GetVoltageRange+0xc>)
 800127a:	6818      	ldr	r0, [r3, #0]
}
 800127c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40007000 	.word	0x40007000

08001288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800128a:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001290:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	d11a      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001296:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800129a:	d020      	beq.n	80012de <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800129e:	4913      	ldr	r1, [pc, #76]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80012a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a8:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	fbb2 f1f1 	udiv	r1, r2, r1
 80012b2:	2232      	movs	r2, #50	; 0x32
 80012b4:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80012b6:	b122      	cbz	r2, 80012c2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80012b8:	6959      	ldr	r1, [r3, #20]
 80012ba:	0549      	lsls	r1, r1, #21
 80012bc:	d501      	bpl.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80012be:	3a01      	subs	r2, #1
 80012c0:	e7f9      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0x60>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	d40b      	bmi.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80012ca:	e008      	b.n	80012de <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012cc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d0:	bf1f      	itttt	ne
 80012d2:	681a      	ldrne	r2, [r3, #0]
 80012d4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80012d8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80012dc:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80012de:	2000      	movs	r0, #0
 80012e0:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000
 80012ec:	000f4240 	.word	0x000f4240
 80012f0:	20000004 	.word	0x20000004

080012f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012f6:	4d1e      	ldr	r5, [pc, #120]	; (8001370 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80012f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80012fa:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012fc:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012fe:	d502      	bpl.n	8001306 <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001300:	f7ff ffba 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 8001304:	e00e      	b.n	8001324 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	65ab      	str	r3, [r5, #88]	; 0x58
 800130e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001318:	f7ff ffae 	bl	8001278 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001322:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001324:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001328:	d106      	bne.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 800132a:	2c80      	cmp	r4, #128	; 0x80
 800132c:	d90c      	bls.n	8001348 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800132e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001330:	bf8c      	ite	hi
 8001332:	2302      	movhi	r3, #2
 8001334:	2301      	movls	r3, #1
 8001336:	e00c      	b.n	8001352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001338:	2c80      	cmp	r4, #128	; 0x80
 800133a:	d807      	bhi.n	800134c <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800133c:	d008      	beq.n	8001350 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800133e:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8001342:	4253      	negs	r3, r2
 8001344:	4153      	adcs	r3, r2
 8001346:	e004      	b.n	8001352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001348:	2300      	movs	r3, #0
 800134a:	e002      	b.n	8001352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800134c:	2303      	movs	r3, #3
 800134e:	e000      	b.n	8001352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001350:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001354:	680a      	ldr	r2, [r1, #0]
 8001356:	f022 0207 	bic.w	r2, r2, #7
 800135a:	431a      	orrs	r2, r3
 800135c:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800135e:	6808      	ldr	r0, [r1, #0]
 8001360:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001364:	1ac0      	subs	r0, r0, r3
 8001366:	bf18      	it	ne
 8001368:	2001      	movne	r0, #1
 800136a:	b003      	add	sp, #12
 800136c:	bd30      	pop	{r4, r5, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800137a:	4c4a      	ldr	r4, [pc, #296]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800137c:	68a3      	ldr	r3, [r4, #8]
 800137e:	f013 0f0c 	tst.w	r3, #12
 8001382:	d009      	beq.n	8001398 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001384:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d126      	bne.n	80013dc <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800138e:	68e3      	ldr	r3, [r4, #12]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d121      	bne.n	80013dc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800139c:	0712      	lsls	r2, r2, #28
 800139e:	d40a      	bmi.n	80013b6 <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80013a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80013a8:	fa92 f2a2 	rbit	r2, r2
 80013ac:	fab2 f282 	clz	r2, r2
 80013b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80013b4:	e007      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	22f0      	movs	r2, #240	; 0xf0
 80013ba:	fa92 f2a2 	rbit	r2, r2
 80013be:	fab2 f282 	clz	r2, r2
 80013c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c6:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80013c8:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x130>)
 80013ca:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80013ce:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80013d0:	f013 0f0c 	tst.w	r3, #12
 80013d4:	bf0c      	ite	eq
 80013d6:	4630      	moveq	r0, r6
 80013d8:	2000      	movne	r0, #0
 80013da:	e011      	b.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80013dc:	68a3      	ldr	r3, [r4, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d007      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d104      	bne.n	80013fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013f2:	482e      	ldr	r0, [pc, #184]	; (80014ac <HAL_RCC_GetSysClockFreq+0x134>)
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80013f6:	482e      	ldr	r0, [pc, #184]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80013f8:	2600      	movs	r6, #0
 80013fa:	e001      	b.n	8001400 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80013fc:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80013fe:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d149      	bne.n	80014a0 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800140c:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800140e:	68d3      	ldr	r3, [r2, #12]
 8001410:	2070      	movs	r0, #112	; 0x70
 8001412:	fa90 f0a0 	rbit	r0, r0
 8001416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800141a:	fab0 f080 	clz	r0, r0
 800141e:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8001422:	f001 0303 	and.w	r3, r1, #3
 8001426:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001428:	f100 0501 	add.w	r5, r0, #1
 800142c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8001430:	d00c      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0xd4>
 8001432:	2b03      	cmp	r3, #3
 8001434:	d119      	bne.n	800146a <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001436:	68d3      	ldr	r3, [r2, #12]
 8001438:	fa91 f1a1 	rbit	r1, r1
 800143c:	fab1 f181 	clz	r1, r1
 8001440:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001444:	fa23 f101 	lsr.w	r1, r3, r1
 8001448:	4a18      	ldr	r2, [pc, #96]	; (80014ac <HAL_RCC_GetSysClockFreq+0x134>)
 800144a:	e009      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800144c:	68d3      	ldr	r3, [r2, #12]
 800144e:	fa91 f1a1 	rbit	r1, r1
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001454:	fab1 f181 	clz	r1, r1
 8001458:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800145c:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001460:	fbb2 f0f5 	udiv	r0, r2, r5
 8001464:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8001468:	e00b      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800146a:	68d2      	ldr	r2, [r2, #12]
 800146c:	fa91 f1a1 	rbit	r1, r1
 8001470:	fab1 f181 	clz	r1, r1
 8001474:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001478:	40ca      	lsrs	r2, r1
 800147a:	fbb6 f0f5 	udiv	r0, r6, r5
 800147e:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8001482:	68e2      	ldr	r2, [r4, #12]
 8001484:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8001488:	fa90 f0a0 	rbit	r0, r0
 800148c:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 8001490:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8001494:	fa22 f000 	lsr.w	r0, r2, r0
 8001498:	3001      	adds	r0, #1
 800149a:	0040      	lsls	r0, r0, #1
 800149c:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	080097f4 	.word	0x080097f4
 80014ac:	007a1200 	.word	0x007a1200
 80014b0:	00f42400 	.word	0x00f42400

080014b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b4:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ba:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014be:	f140 808f 	bpl.w	80015e0 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80014c2:	4d9e      	ldr	r5, [pc, #632]	; (800173c <HAL_RCC_OscConfig+0x288>)
 80014c4:	68ab      	ldr	r3, [r5, #8]
 80014c6:	f013 0f0c 	tst.w	r3, #12
 80014ca:	d153      	bne.n	8001574 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	0798      	lsls	r0, r3, #30
 80014d0:	d503      	bpl.n	80014da <HAL_RCC_OscConfig+0x26>
 80014d2:	69a3      	ldr	r3, [r4, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8256 	beq.w	8001986 <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014da:	682a      	ldr	r2, [r5, #0]
 80014dc:	4b97      	ldr	r3, [pc, #604]	; (800173c <HAL_RCC_OscConfig+0x288>)
 80014de:	6a20      	ldr	r0, [r4, #32]
 80014e0:	0711      	lsls	r1, r2, #28
 80014e2:	bf56      	itet	pl
 80014e4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80014e8:	681b      	ldrmi	r3, [r3, #0]
 80014ea:	091b      	lsrpl	r3, r3, #4
 80014ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f0:	4283      	cmp	r3, r0
 80014f2:	d216      	bcs.n	8001522 <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f4:	f7ff fefe 	bl	80012f4 <RCC_SetFlashLatencyFromMSIRange>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f040 8244 	bne.w	8001986 <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	6a23      	ldr	r3, [r4, #32]
 800150e:	4313      	orrs	r3, r2
 8001510:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	686b      	ldr	r3, [r5, #4]
 8001514:	69e2      	ldr	r2, [r4, #28]
 8001516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800151a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800151e:	606b      	str	r3, [r5, #4]
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001530:	4303      	orrs	r3, r0
 8001532:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001534:	686b      	ldr	r3, [r5, #4]
 8001536:	69e2      	ldr	r2, [r4, #28]
 8001538:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800153c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001540:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	f7ff fed7 	bl	80012f4 <RCC_SetFlashLatencyFromMSIRange>
 8001546:	2800      	cmp	r0, #0
 8001548:	f040 821d 	bne.w	8001986 <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800154c:	f7ff ff14 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001550:	68ab      	ldr	r3, [r5, #8]
 8001552:	22f0      	movs	r2, #240	; 0xf0
 8001554:	fa92 f2a2 	rbit	r2, r2
 8001558:	fab2 f282 	clz	r2, r2
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	40d3      	lsrs	r3, r2
 8001562:	4a77      	ldr	r2, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x28c>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	40d8      	lsrs	r0, r3
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x290>)
 800156a:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fd13 	bl	8000f98 <HAL_InitTick>
 8001572:	e035      	b.n	80015e0 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001574:	6983      	ldr	r3, [r0, #24]
 8001576:	b31b      	cbz	r3, 80015c0 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001580:	f7ff fd32 	bl	8000fe8 <HAL_GetTick>
 8001584:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001586:	682a      	ldr	r2, [r5, #0]
 8001588:	4b6c      	ldr	r3, [pc, #432]	; (800173c <HAL_RCC_OscConfig+0x288>)
 800158a:	0792      	lsls	r2, r2, #30
 800158c:	d406      	bmi.n	800159c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158e:	f7ff fd2b 	bl	8000fe8 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	2802      	cmp	r0, #2
 8001596:	d9f6      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001598:	2003      	movs	r0, #3
 800159a:	e1f5      	b.n	8001988 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f042 0208 	orr.w	r2, r2, #8
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80015aa:	6a22      	ldr	r2, [r4, #32]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69e1      	ldr	r1, [r4, #28]
 80015b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80015b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fd0e 	bl	8000fe8 <HAL_GetTick>
 80015cc:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80015ce:	682b      	ldr	r3, [r5, #0]
 80015d0:	079f      	lsls	r7, r3, #30
 80015d2:	d505      	bpl.n	80015e0 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff fd08 	bl	8000fe8 <HAL_GetTick>
 80015d8:	1b80      	subs	r0, r0, r6
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9f7      	bls.n	80015ce <HAL_RCC_OscConfig+0x11a>
 80015de:	e7db      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	07de      	lsls	r6, r3, #31
 80015e4:	d403      	bmi.n	80015ee <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	079d      	lsls	r5, r3, #30
 80015ea:	d448      	bmi.n	800167e <HAL_RCC_OscConfig+0x1ca>
 80015ec:	e09f      	b.n	800172e <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80015ee:	4d53      	ldr	r5, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x288>)
 80015f0:	68ab      	ldr	r3, [r5, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d009      	beq.n	800160e <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fa:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001604:	68eb      	ldr	r3, [r5, #12]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	0398      	lsls	r0, r3, #14
 8001612:	d5e8      	bpl.n	80015e6 <HAL_RCC_OscConfig+0x132>
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e5      	bne.n	80015e6 <HAL_RCC_OscConfig+0x132>
 800161a:	e1b4      	b.n	8001986 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d006      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x188>
 800162a:	682b      	ldr	r3, [r5, #0]
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	602b      	str	r3, [r5, #0]
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x19a>
 800163c:	682a      	ldr	r2, [r5, #0]
 800163e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001642:	602a      	str	r2, [r5, #0]
 8001644:	682a      	ldr	r2, [r5, #0]
 8001646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800164a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	b15b      	cbz	r3, 8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fccb 	bl	8000fe8 <HAL_GetTick>
 8001652:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	0399      	lsls	r1, r3, #14
 8001658:	d4c5      	bmi.n	80015e6 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fcc5 	bl	8000fe8 <HAL_GetTick>
 800165e:	1b80      	subs	r0, r0, r6
 8001660:	2864      	cmp	r0, #100	; 0x64
 8001662:	d9f7      	bls.n	8001654 <HAL_RCC_OscConfig+0x1a0>
 8001664:	e798      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff fcbf 	bl	8000fe8 <HAL_GetTick>
 800166a:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	039a      	lsls	r2, r3, #14
 8001670:	d5b9      	bpl.n	80015e6 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001672:	f7ff fcb9 	bl	8000fe8 <HAL_GetTick>
 8001676:	1b80      	subs	r0, r0, r6
 8001678:	2864      	cmp	r0, #100	; 0x64
 800167a:	d9f7      	bls.n	800166c <HAL_RCC_OscConfig+0x1b8>
 800167c:	e78c      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800167e:	4d2f      	ldr	r5, [pc, #188]	; (800173c <HAL_RCC_OscConfig+0x288>)
 8001680:	68ab      	ldr	r3, [r5, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d009      	beq.n	800169e <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800168a:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d11a      	bne.n	80016ca <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001694:	68eb      	ldr	r3, [r5, #12]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d115      	bne.n	80016ca <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	055b      	lsls	r3, r3, #21
 80016a2:	d503      	bpl.n	80016ac <HAL_RCC_OscConfig+0x1f8>
 80016a4:	68e3      	ldr	r3, [r4, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 816d 	beq.w	8001986 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	686b      	ldr	r3, [r5, #4]
 80016ae:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 80016b2:	fa92 f2a2 	rbit	r2, r2
 80016b6:	6921      	ldr	r1, [r4, #16]
 80016b8:	fab2 f282 	clz	r2, r2
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80016c4:	4313      	orrs	r3, r2
 80016c6:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	e031      	b.n	800172e <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ca:	68e3      	ldr	r3, [r4, #12]
 80016cc:	b1fb      	cbz	r3, 800170e <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fc87 	bl	8000fe8 <HAL_GetTick>
 80016da:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	4817      	ldr	r0, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x288>)
 80016e0:	055f      	lsls	r7, r3, #21
 80016e2:	d405      	bmi.n	80016f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc80 	bl	8000fe8 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d9f6      	bls.n	80016dc <HAL_RCC_OscConfig+0x228>
 80016ee:	e753      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	6843      	ldr	r3, [r0, #4]
 80016f2:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 80016f6:	fa92 f2a2 	rbit	r2, r2
 80016fa:	6921      	ldr	r1, [r4, #16]
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001708:	4313      	orrs	r3, r2
 800170a:	6043      	str	r3, [r0, #4]
 800170c:	e00f      	b.n	800172e <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	682b      	ldr	r3, [r5, #0]
 8001710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001714:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fc67 	bl	8000fe8 <HAL_GetTick>
 800171a:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	0558      	lsls	r0, r3, #21
 8001720:	d505      	bpl.n	800172e <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fc61 	bl	8000fe8 <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f7      	bls.n	800171c <HAL_RCC_OscConfig+0x268>
 800172c:	e734      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	0719      	lsls	r1, r3, #28
 8001732:	d409      	bmi.n	8001748 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	075a      	lsls	r2, r3, #29
 8001738:	d42f      	bmi.n	800179a <HAL_RCC_OscConfig+0x2e6>
 800173a:	e097      	b.n	800186c <HAL_RCC_OscConfig+0x3b8>
 800173c:	40021000 	.word	0x40021000
 8001740:	080097da 	.word	0x080097da
 8001744:	20000004 	.word	0x20000004
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	6963      	ldr	r3, [r4, #20]
 800174a:	4d91      	ldr	r5, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 800174c:	b193      	cbz	r3, 8001774 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fc45 	bl	8000fe8 <HAL_GetTick>
 800175e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001760:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d4e5      	bmi.n	8001734 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fc3e 	bl	8000fe8 <HAL_GetTick>
 800176c:	1b80      	subs	r0, r0, r6
 800176e:	2802      	cmp	r0, #2
 8001770:	d9f6      	bls.n	8001760 <HAL_RCC_OscConfig+0x2ac>
 8001772:	e711      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001774:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fc32 	bl	8000fe8 <HAL_GetTick>
 8001784:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001786:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800178a:	079f      	lsls	r7, r3, #30
 800178c:	d5d2      	bpl.n	8001734 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fc2b 	bl	8000fe8 <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	2802      	cmp	r0, #2
 8001796:	d9f6      	bls.n	8001786 <HAL_RCC_OscConfig+0x2d2>
 8001798:	e6fe      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800179a:	4d7d      	ldr	r5, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 800179c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800179e:	00d8      	lsls	r0, r3, #3
 80017a0:	d40a      	bmi.n	80017b8 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	65ab      	str	r3, [r5, #88]	; 0x58
 80017aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017b4:	2701      	movs	r7, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4e76      	ldr	r6, [pc, #472]	; (8001994 <HAL_RCC_OscConfig+0x4e0>)
 80017bc:	6833      	ldr	r3, [r6, #0]
 80017be:	05d9      	lsls	r1, r3, #23
 80017c0:	d503      	bpl.n	80017ca <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c2:	68a3      	ldr	r3, [r4, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d111      	bne.n	80017ec <HAL_RCC_OscConfig+0x338>
 80017c8:	e018      	b.n	80017fc <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ca:	6833      	ldr	r3, [r6, #0]
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fc09 	bl	8000fe8 <HAL_GetTick>
 80017d6:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	05da      	lsls	r2, r3, #23
 80017dc:	d4f1      	bmi.n	80017c2 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fc03 	bl	8000fe8 <HAL_GetTick>
 80017e2:	ebc8 0000 	rsb	r0, r8, r0
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9f6      	bls.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017ea:	e6d5      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x356>
 80017f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80017fc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001808:	e00c      	b.n	8001824 <HAL_RCC_OscConfig+0x370>
 800180a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8001816:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001822:	b173      	cbz	r3, 8001842 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fbe0 	bl	8000fe8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800182e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001832:	079b      	lsls	r3, r3, #30
 8001834:	d40e      	bmi.n	8001854 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff fbd7 	bl	8000fe8 <HAL_GetTick>
 800183a:	1b80      	subs	r0, r0, r6
 800183c:	4540      	cmp	r0, r8
 800183e:	d9f6      	bls.n	800182e <HAL_RCC_OscConfig+0x37a>
 8001840:	e6aa      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fbd1 	bl	8000fe8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800184c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001850:	0798      	lsls	r0, r3, #30
 8001852:	d405      	bmi.n	8001860 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001854:	b157      	cbz	r7, 800186c <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	65ab      	str	r3, [r5, #88]	; 0x58
 800185e:	e005      	b.n	800186c <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fbc2 	bl	8000fe8 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	4540      	cmp	r0, r8
 8001868:	d9f0      	bls.n	800184c <HAL_RCC_OscConfig+0x398>
 800186a:	e695      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	0699      	lsls	r1, r3, #26
 8001870:	d402      	bmi.n	8001878 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001872:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001874:	bb4a      	cbnz	r2, 80018ca <HAL_RCC_OscConfig+0x416>
 8001876:	e05f      	b.n	8001938 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800187a:	4d45      	ldr	r5, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 800187c:	b193      	cbz	r3, 80018a4 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800187e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fbad 	bl	8000fe8 <HAL_GetTick>
 800188e:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001890:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001894:	079a      	lsls	r2, r3, #30
 8001896:	d4ec      	bmi.n	8001872 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001898:	f7ff fba6 	bl	8000fe8 <HAL_GetTick>
 800189c:	1b80      	subs	r0, r0, r6
 800189e:	2802      	cmp	r0, #2
 80018a0:	d9f6      	bls.n	8001890 <HAL_RCC_OscConfig+0x3dc>
 80018a2:	e679      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fb9a 	bl	8000fe8 <HAL_GetTick>
 80018b4:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80018b6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018ba:	079b      	lsls	r3, r3, #30
 80018bc:	d5d9      	bpl.n	8001872 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018be:	f7ff fb93 	bl	8000fe8 <HAL_GetTick>
 80018c2:	1b80      	subs	r0, r0, r6
 80018c4:	2802      	cmp	r0, #2
 80018c6:	d9f6      	bls.n	80018b6 <HAL_RCC_OscConfig+0x402>
 80018c8:	e666      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ca:	4d31      	ldr	r5, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 80018cc:	68ab      	ldr	r3, [r5, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d057      	beq.n	8001986 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d8:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018de:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e0:	d138      	bne.n	8001954 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb81 	bl	8000fe8 <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	4829      	ldr	r0, [pc, #164]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 80018ec:	019f      	lsls	r7, r3, #6
 80018ee:	d425      	bmi.n	800193c <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80018f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018f6:	06f6      	lsls	r6, r6, #27
 80018f8:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 80018fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018fe:	3a01      	subs	r2, #1
 8001900:	430b      	orrs	r3, r1
 8001902:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8001906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8001910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 800191a:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	68c3      	ldr	r3, [r0, #12]
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb5c 	bl	8000fe8 <HAL_GetTick>
 8001930:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	0199      	lsls	r1, r3, #6
 8001936:	d507      	bpl.n	8001948 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001938:	2000      	movs	r0, #0
 800193a:	e025      	b.n	8001988 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fb54 	bl	8000fe8 <HAL_GetTick>
 8001940:	1b80      	subs	r0, r0, r6
 8001942:	2802      	cmp	r0, #2
 8001944:	d9d0      	bls.n	80018e8 <HAL_RCC_OscConfig+0x434>
 8001946:	e627      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fb4e 	bl	8000fe8 <HAL_GetTick>
 800194c:	1b00      	subs	r0, r0, r4
 800194e:	2802      	cmp	r0, #2
 8001950:	d9ef      	bls.n	8001932 <HAL_RCC_OscConfig+0x47e>
 8001952:	e621      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001958:	bf5e      	ittt	pl
 800195a:	68eb      	ldrpl	r3, [r5, #12]
 800195c:	f023 0303 	bicpl.w	r3, r3, #3
 8001960:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001962:	68eb      	ldr	r3, [r5, #12]
 8001964:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fb3b 	bl	8000fe8 <HAL_GetTick>
 8001972:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	019b      	lsls	r3, r3, #6
 8001978:	d5de      	bpl.n	8001938 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fb35 	bl	8000fe8 <HAL_GetTick>
 800197e:	1b00      	subs	r0, r0, r4
 8001980:	2802      	cmp	r0, #2
 8001982:	d9f7      	bls.n	8001974 <HAL_RCC_OscConfig+0x4c0>
 8001984:	e608      	b.n	8001598 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001986:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001988:	b002      	add	sp, #8
 800198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_RCC_ClockConfig+0x160>)
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a6:	4605      	mov	r5, r0
 80019a8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019aa:	d30a      	bcc.n	80019c2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	6829      	ldr	r1, [r5, #0]
 80019ae:	0788      	lsls	r0, r1, #30
 80019b0:	d514      	bpl.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	4852      	ldr	r0, [pc, #328]	; (8001afc <HAL_RCC_ClockConfig+0x164>)
 80019b4:	6883      	ldr	r3, [r0, #8]
 80019b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ba:	68ab      	ldr	r3, [r5, #8]
 80019bc:	4313      	orrs	r3, r2
 80019be:	6083      	str	r3, [r0, #8]
 80019c0:	e00c      	b.n	80019dc <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	f023 0307 	bic.w	r3, r3, #7
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	4299      	cmp	r1, r3
 80019d4:	d0ea      	beq.n	80019ac <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019dc:	07ca      	lsls	r2, r1, #31
 80019de:	d406      	bmi.n	80019ee <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <HAL_RCC_ClockConfig+0x160>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	429e      	cmp	r6, r3
 80019ea:	d351      	bcc.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
 80019ec:	e05a      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	686b      	ldr	r3, [r5, #4]
 80019f0:	4c42      	ldr	r4, [pc, #264]	; (8001afc <HAL_RCC_ClockConfig+0x164>)
 80019f2:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80019f4:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80019f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001a02:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a06:	e005      	b.n	8001a14 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a08:	b913      	cbnz	r3, 8001a10 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001a0a:	f012 0f02 	tst.w	r2, #2
 8001a0e:	e001      	b.n	8001a14 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001a10:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001a14:	d0df      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	68a2      	ldr	r2, [r4, #8]
 8001a18:	f022 0203 	bic.w	r2, r2, #3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff fae2 	bl	8000fe8 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a24:	686b      	ldr	r3, [r5, #4]
 8001a26:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a28:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001a30:	68a3      	ldr	r3, [r4, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d0d2      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7ff fad5 	bl	8000fe8 <HAL_GetTick>
 8001a3e:	1bc0      	subs	r0, r0, r7
 8001a40:	4540      	cmp	r0, r8
 8001a42:	d9f5      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8001a44:	2003      	movs	r0, #3
 8001a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d10a      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4e:	68a3      	ldr	r3, [r4, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d0c3      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff fac6 	bl	8000fe8 <HAL_GetTick>
 8001a5c:	1bc0      	subs	r0, r0, r7
 8001a5e:	4540      	cmp	r0, r8
 8001a60:	d9f5      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xb6>
 8001a62:	e7ef      	b.n	8001a44 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a64:	b973      	cbnz	r3, 8001a84 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001a66:	68a3      	ldr	r3, [r4, #8]
 8001a68:	f013 0f0c 	tst.w	r3, #12
 8001a6c:	d0b8      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7ff fabb 	bl	8000fe8 <HAL_GetTick>
 8001a72:	1bc0      	subs	r0, r0, r7
 8001a74:	4540      	cmp	r0, r8
 8001a76:	d9f6      	bls.n	8001a66 <HAL_RCC_ClockConfig+0xce>
 8001a78:	e7e4      	b.n	8001a44 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff fab5 	bl	8000fe8 <HAL_GetTick>
 8001a7e:	1bc0      	subs	r0, r0, r7
 8001a80:	4540      	cmp	r0, r8
 8001a82:	d8df      	bhi.n	8001a44 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001a84:	68a3      	ldr	r3, [r4, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d1f5      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
 8001a8e:	e7a7      	b.n	80019e0 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	4333      	orrs	r3, r6
 8001a98:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	429e      	cmp	r6, r3
 8001aa2:	d198      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	6829      	ldr	r1, [r5, #0]
 8001aa6:	4c15      	ldr	r4, [pc, #84]	; (8001afc <HAL_RCC_ClockConfig+0x164>)
 8001aa8:	f011 0f04 	tst.w	r1, #4
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	68a3      	ldr	r3, [r4, #8]
 8001ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab4:	68eb      	ldr	r3, [r5, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	070b      	lsls	r3, r1, #28
 8001abc:	d506      	bpl.n	8001acc <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	692a      	ldr	r2, [r5, #16]
 8001ac2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ac6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aca:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001acc:	f7ff fc54 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001ad0:	68a3      	ldr	r3, [r4, #8]
 8001ad2:	22f0      	movs	r2, #240	; 0xf0
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae0:	40d3      	lsrs	r3, r2
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_RCC_ClockConfig+0x168>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	40d8      	lsrs	r0, r3
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_RCC_ClockConfig+0x16c>)
 8001aea:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fa53 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8001af2:	2000      	movs	r0, #0
}
 8001af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af8:	40022000 	.word	0x40022000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080097da 	.word	0x080097da
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b08:	4b01      	ldr	r3, [pc, #4]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b28:	40d3      	lsrs	r3, r2
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b30:	6810      	ldr	r0, [r2, #0]
}
 8001b32:	40d8      	lsrs	r0, r3
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	080097ea 	.word	0x080097ea
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	fa92 f2a2 	rbit	r2, r2
 8001b50:	fab2 f282 	clz	r2, r2
 8001b54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b58:	40d3      	lsrs	r3, r2
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001b60:	6810      	ldr	r0, [r2, #0]
}
 8001b62:	40d8      	lsrs	r0, r3
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080097ea 	.word	0x080097ea
 8001b70:	20000004 	.word	0x20000004

08001b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <RCCEx_PLLSAI1_Config+0x16c>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b7e:	4604      	mov	r4, r0
 8001b80:	460e      	mov	r6, r1
 8001b82:	461d      	mov	r5, r3
 8001b84:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b86:	d013      	beq.n	8001bb0 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	4282      	cmp	r2, r0
 8001b90:	d124      	bne.n	8001bdc <RCCEx_PLLSAI1_Config+0x68>
       || 
 8001b92:	b31a      	cbz	r2, 8001bdc <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	2370      	movs	r3, #112	; 0x70
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001ba0:	f002 0370 	and.w	r3, r2, #112	; 0x70
 8001ba4:	40cb      	lsrs	r3, r1
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d116      	bne.n	8001bdc <RCCEx_PLLSAI1_Config+0x68>
 8001bae:	e025      	b.n	8001bfc <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d008      	beq.n	8001bc6 <RCCEx_PLLSAI1_Config+0x52>
 8001bb4:	2803      	cmp	r0, #3
 8001bb6:	d00a      	beq.n	8001bce <RCCEx_PLLSAI1_Config+0x5a>
 8001bb8:	2801      	cmp	r0, #1
 8001bba:	d10f      	bne.n	8001bdc <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	079f      	lsls	r7, r3, #30
 8001bc0:	f140 808d 	bpl.w	8001cde <RCCEx_PLLSAI1_Config+0x16a>
 8001bc4:	e00c      	b.n	8001be0 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001bcc:	e005      	b.n	8001bda <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	0391      	lsls	r1, r2, #14
 8001bd2:	d405      	bmi.n	8001be0 <RCCEx_PLLSAI1_Config+0x6c>
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001bda:	d101      	bne.n	8001be0 <RCCEx_PLLSAI1_Config+0x6c>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001be0:	68e9      	ldr	r1, [r5, #12]
 8001be2:	2370      	movs	r3, #112	; 0x70
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	fab3 f283 	clz	r2, r3
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 8001bf6:	4310      	orrs	r0, r2
 8001bf8:	4318      	orrs	r0, r3
 8001bfa:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c02:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c04:	f7ff f9f0 	bl	8000fe8 <HAL_GetTick>
 8001c08:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001c0a:	682b      	ldr	r3, [r5, #0]
 8001c0c:	4934      	ldr	r1, [pc, #208]	; (8001ce0 <RCCEx_PLLSAI1_Config+0x16c>)
 8001c0e:	011a      	lsls	r2, r3, #4
 8001c10:	d506      	bpl.n	8001c20 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c12:	f7ff f9e9 	bl	8000fe8 <HAL_GetTick>
 8001c16:	1bc0      	subs	r0, r0, r7
 8001c18:	2802      	cmp	r0, #2
 8001c1a:	d9f6      	bls.n	8001c0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c20:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001c24:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001c26:	b9b6      	cbnz	r6, 8001c56 <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001c28:	6908      	ldr	r0, [r1, #16]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	fa96 f6a6 	rbit	r6, r6
 8001c3a:	fa07 f302 	lsl.w	r3, r7, r2
 8001c3e:	68e2      	ldr	r2, [r4, #12]
 8001c40:	fab6 f686 	clz	r6, r6
 8001c44:	40b2      	lsls	r2, r6
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8001c4c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c50:	431a      	orrs	r2, r3
 8001c52:	610a      	str	r2, [r1, #16]
 8001c54:	e02d      	b.n	8001cb2 <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c56:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001c58:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c5a:	d113      	bne.n	8001c84 <RCCEx_PLLSAI1_Config+0x110>
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	6926      	ldr	r6, [r4, #16]
 8001c6e:	0876      	lsrs	r6, r6, #1
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	3e01      	subs	r6, #1
 8001c76:	409e      	lsls	r6, r3
 8001c78:	fa07 f302 	lsl.w	r3, r7, r2
 8001c7c:	4333      	orrs	r3, r6
 8001c7e:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 8001c82:	e012      	b.n	8001caa <RCCEx_PLLSAI1_Config+0x136>
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	6966      	ldr	r6, [r4, #20]
 8001c96:	0876      	lsrs	r6, r6, #1
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	3e01      	subs	r6, #1
 8001c9e:	409e      	lsls	r6, r3
 8001ca0:	fa07 f302 	lsl.w	r3, r7, r2
 8001ca4:	4333      	orrs	r3, r6
 8001ca6:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 8001caa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cb8:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff f995 	bl	8000fe8 <HAL_GetTick>
 8001cbe:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <RCCEx_PLLSAI1_Config+0x16c>)
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	d405      	bmi.n	8001cd4 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cc8:	f7ff f98e 	bl	8000fe8 <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f6      	bls.n	8001cc0 <RCCEx_PLLSAI1_Config+0x14c>
 8001cd2:	e7a3      	b.n	8001c1c <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001cd4:	6911      	ldr	r1, [r2, #16]
 8001cd6:	69a3      	ldr	r3, [r4, #24]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6113      	str	r3, [r2, #16]
 8001cdc:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ce8:	6805      	ldr	r5, [r0, #0]
 8001cea:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cf0:	d01f      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cf2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001cf8:	d004      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001cfa:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8001d00:	b9b1      	cbnz	r1, 8001d30 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001d02:	e005      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d04:	4a96      	ldr	r2, [pc, #600]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d06:	68d3      	ldr	r3, [r2, #12]
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d0e:	e004      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d10:	3004      	adds	r0, #4
 8001d12:	f7ff ff2f 	bl	8001b74 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8001d16:	4605      	mov	r5, r0
 8001d18:	b958      	cbnz	r0, 8001d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d1a:	4991      	ldr	r1, [pc, #580]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d2c:	2500      	movs	r5, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d30:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	039e      	lsls	r6, r3, #14
 8001d36:	d55a      	bpl.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d38:	4e89      	ldr	r6, [pc, #548]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d3a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d3c:	00d8      	lsls	r0, r3, #3
 8001d3e:	d40a      	bmi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d46:	65b3      	str	r3, [r6, #88]	; 0x58
 8001d48:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d52:	2701      	movs	r7, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d58:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001f64 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f93e 	bl	8000fe8 <HAL_GetTick>
 8001d6c:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d72:	05d9      	lsls	r1, r3, #23
 8001d74:	d406      	bmi.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff f937 	bl	8000fe8 <HAL_GetTick>
 8001d7a:	ebc9 0000 	rsb	r0, r9, r0
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	d9f5      	bls.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001d82:	e02e      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 8001d84:	bb75      	cbnz	r5, 8001de4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d86:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d8c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d90:	d014      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001d92:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d94:	428b      	cmp	r3, r1
 8001d96:	d011      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d9c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001da0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001da4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001da8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001db0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001db4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dbc:	07da      	lsls	r2, r3, #31
 8001dbe:	f140 80c2 	bpl.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f911 	bl	8000fe8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001dcc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001dd0:	079b      	lsls	r3, r3, #30
 8001dd2:	f100 80b8 	bmi.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f907 	bl	8000fe8 <HAL_GetTick>
 8001dda:	ebc8 0000 	rsb	r0, r8, r0
 8001dde:	4548      	cmp	r0, r9
 8001de0:	d9f4      	bls.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8001de2:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de4:	b11f      	cbz	r7, 8001dee <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	07df      	lsls	r7, r3, #31
 8001df2:	d508      	bpl.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df4:	485a      	ldr	r0, [pc, #360]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001df6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001dfa:	f022 0103 	bic.w	r1, r2, #3
 8001dfe:	6a22      	ldr	r2, [r4, #32]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e06:	079e      	lsls	r6, r3, #30
 8001e08:	d508      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e0a:	4855      	ldr	r0, [pc, #340]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e0c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e10:	f022 010c 	bic.w	r1, r2, #12
 8001e14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e16:	430a      	orrs	r2, r1
 8001e18:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e1c:	0698      	lsls	r0, r3, #26
 8001e1e:	d508      	bpl.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e20:	484f      	ldr	r0, [pc, #316]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e22:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e26:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8001e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e32:	0599      	lsls	r1, r3, #22
 8001e34:	d508      	bpl.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e36:	484a      	ldr	r0, [pc, #296]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e38:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e3c:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001e40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e42:	430a      	orrs	r2, r1
 8001e44:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e48:	055a      	lsls	r2, r3, #21
 8001e4a:	d508      	bpl.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e4c:	4844      	ldr	r0, [pc, #272]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e4e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e52:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001e56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5e:	065f      	lsls	r7, r3, #25
 8001e60:	d508      	bpl.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e62:	483f      	ldr	r0, [pc, #252]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e64:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e68:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001e6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e74:	05de      	lsls	r6, r3, #23
 8001e76:	d508      	bpl.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e78:	4839      	ldr	r0, [pc, #228]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e7a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e7e:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001e82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e84:	430a      	orrs	r2, r1
 8001e86:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e8a:	0498      	lsls	r0, r3, #18
 8001e8c:	d51a      	bpl.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8e:	4a34      	ldr	r2, [pc, #208]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e96:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e9a:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ea4:	d104      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea6:	68d3      	ldr	r3, [r2, #12]
 8001ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eac:	60d3      	str	r3, [r2, #12]
 8001eae:	e009      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001eb0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	1d20      	adds	r0, r4, #4
 8001eba:	f7ff fe5b 	bl	8001b74 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	bf18      	it	ne
 8001ec2:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	0359      	lsls	r1, r3, #13
 8001ec8:	d51a      	bpl.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001eca:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ecc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ed2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ed6:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ed8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ee0:	d104      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ee2:	68d3      	ldr	r3, [r2, #12]
 8001ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee8:	60d3      	str	r3, [r2, #12]
 8001eea:	e009      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001eec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	1d20      	adds	r0, r4, #4
 8001ef6:	f7ff fe3d 	bl	8001b74 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 8001efa:	2800      	cmp	r0, #0
 8001efc:	bf18      	it	ne
 8001efe:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	045a      	lsls	r2, r3, #17
 8001f04:	d512      	bpl.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f06:	4916      	ldr	r1, [pc, #88]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001f08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f0e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f12:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f14:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f1e:	2102      	movs	r1, #2
 8001f20:	1d20      	adds	r0, r4, #4
 8001f22:	f7ff fe27 	bl	8001b74 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001f26:	2800      	cmp	r0, #0
 8001f28:	bf18      	it	ne
 8001f2a:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	d512      	bpl.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f32:	490b      	ldr	r1, [pc, #44]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001f34:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001f44:	e008      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f46:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001f56:	e745      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001f58:	4628      	mov	r0, r5
 8001f5a:	b003      	add	sp, #12
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000

08001f68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f68:	6a03      	ldr	r3, [r0, #32]
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f70:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f72:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f74:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f76:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f78:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f7a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001f7e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f82:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f84:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f86:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f8a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f8c:	4d12      	ldr	r5, [pc, #72]	; (8001fd8 <TIM_OC1_SetConfig+0x70>)
 8001f8e:	42a8      	cmp	r0, r5
 8001f90:	d006      	beq.n	8001fa0 <TIM_OC1_SetConfig+0x38>
 8001f92:	4e12      	ldr	r6, [pc, #72]	; (8001fdc <TIM_OC1_SetConfig+0x74>)
 8001f94:	42b0      	cmp	r0, r6
 8001f96:	d003      	beq.n	8001fa0 <TIM_OC1_SetConfig+0x38>
 8001f98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f9c:	42b0      	cmp	r0, r6
 8001f9e:	d114      	bne.n	8001fca <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fa0:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fa6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa8:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001faa:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fae:	d006      	beq.n	8001fbe <TIM_OC1_SetConfig+0x56>
 8001fb0:	4d0a      	ldr	r5, [pc, #40]	; (8001fdc <TIM_OC1_SetConfig+0x74>)
 8001fb2:	42a8      	cmp	r0, r5
 8001fb4:	d003      	beq.n	8001fbe <TIM_OC1_SetConfig+0x56>
 8001fb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fba:	42a8      	cmp	r0, r5
 8001fbc:	d105      	bne.n	8001fca <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fbe:	694e      	ldr	r6, [r1, #20]
 8001fc0:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fc6:	4335      	orrs	r5, r6
 8001fc8:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fca:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fcc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fce:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fd0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd2:	6203      	str	r3, [r0, #32]
 8001fd4:	bd70      	pop	{r4, r5, r6, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40014000 	.word	0x40014000

08001fe0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fe0:	6a03      	ldr	r3, [r0, #32]
 8001fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fea:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fec:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fee:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ff2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001ff6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ffa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001ffc:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002002:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002006:	4d0f      	ldr	r5, [pc, #60]	; (8002044 <TIM_OC3_SetConfig+0x64>)
 8002008:	42a8      	cmp	r0, r5
 800200a:	d107      	bne.n	800201c <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800200c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800200e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002012:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800201a:	e005      	b.n	8002028 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800201c:	4d0a      	ldr	r5, [pc, #40]	; (8002048 <TIM_OC3_SetConfig+0x68>)
 800201e:	42a8      	cmp	r0, r5
 8002020:	d002      	beq.n	8002028 <TIM_OC3_SetConfig+0x48>
 8002022:	4d0a      	ldr	r5, [pc, #40]	; (800204c <TIM_OC3_SetConfig+0x6c>)
 8002024:	42a8      	cmp	r0, r5
 8002026:	d107      	bne.n	8002038 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002028:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800202a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800202e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002032:	698d      	ldr	r5, [r1, #24]
 8002034:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002038:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800203a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800203c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800203e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002040:	6203      	str	r3, [r0, #32]
}
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	40012c00 	.word	0x40012c00
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400

08002050 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002050:	6a03      	ldr	r3, [r0, #32]
 8002052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002056:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002058:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800205a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800205c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205e:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002060:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002066:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800206a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800206e:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002074:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002078:	4d0a      	ldr	r5, [pc, #40]	; (80020a4 <TIM_OC4_SetConfig+0x54>)
 800207a:	42a8      	cmp	r0, r5
 800207c:	d007      	beq.n	800208e <TIM_OC4_SetConfig+0x3e>
 800207e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002082:	42a8      	cmp	r0, r5
 8002084:	d003      	beq.n	800208e <TIM_OC4_SetConfig+0x3e>
 8002086:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800208a:	42a8      	cmp	r0, r5
 800208c:	d104      	bne.n	8002098 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800208e:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002090:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002094:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002098:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800209a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800209c:	684b      	ldr	r3, [r1, #4]
 800209e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a0:	6202      	str	r2, [r0, #32]
 80020a2:	bd30      	pop	{r4, r5, pc}
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020a8:	6a03      	ldr	r3, [r0, #32]
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b2:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80020b4:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020b6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020b8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80020ba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80020be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80020c4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80020c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80020ca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020ce:	4d0b      	ldr	r5, [pc, #44]	; (80020fc <TIM_OC5_SetConfig+0x54>)
 80020d0:	42a8      	cmp	r0, r5
 80020d2:	d007      	beq.n	80020e4 <TIM_OC5_SetConfig+0x3c>
 80020d4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80020d8:	42a8      	cmp	r0, r5
 80020da:	d003      	beq.n	80020e4 <TIM_OC5_SetConfig+0x3c>
 80020dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e0:	42a8      	cmp	r0, r5
 80020e2:	d104      	bne.n	80020ee <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80020e4:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80020e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80020ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ee:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020f0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020f2:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020f4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f6:	6203      	str	r3, [r0, #32]
 80020f8:	bd30      	pop	{r4, r5, pc}
 80020fa:	bf00      	nop
 80020fc:	40012c00 	.word	0x40012c00

08002100 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002100:	6a03      	ldr	r3, [r0, #32]
 8002102:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002106:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002108:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800210a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800210e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002110:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800211a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800211e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002120:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002124:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002128:	4d0a      	ldr	r5, [pc, #40]	; (8002154 <TIM_OC6_SetConfig+0x54>)
 800212a:	42a8      	cmp	r0, r5
 800212c:	d007      	beq.n	800213e <TIM_OC6_SetConfig+0x3e>
 800212e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002132:	42a8      	cmp	r0, r5
 8002134:	d003      	beq.n	800213e <TIM_OC6_SetConfig+0x3e>
 8002136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800213a:	42a8      	cmp	r0, r5
 800213c:	d104      	bne.n	8002148 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800213e:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002140:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002144:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002148:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800214a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800214c:	684b      	ldr	r3, [r1, #4]
 800214e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002150:	6202      	str	r2, [r0, #32]
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	40012c00 	.word	0x40012c00

08002158 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800215a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800215e:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	d002      	beq.n	8002168 <TIM_Base_SetConfig+0x10>
 8002162:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002166:	d109      	bne.n	800217c <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002168:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002170:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002174:	d009      	beq.n	800218a <TIM_Base_SetConfig+0x32>
 8002176:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800217a:	d006      	beq.n	800218a <TIM_Base_SetConfig+0x32>
 800217c:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <TIM_Base_SetConfig+0x68>)
 800217e:	4290      	cmp	r0, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0x32>
 8002182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002186:	4290      	cmp	r0, r2
 8002188:	d103      	bne.n	8002192 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218a:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002190:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002192:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	688b      	ldr	r3, [r1, #8]
 8002196:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002198:	680b      	ldr	r3, [r1, #0]
 800219a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <TIM_Base_SetConfig+0x64>)
 800219e:	4298      	cmp	r0, r3
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0x5a>
 80021a2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80021a6:	4298      	cmp	r0, r3
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0x5a>
 80021aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d101      	bne.n	80021b6 <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b2:	690b      	ldr	r3, [r1, #16]
 80021b4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b6:	2301      	movs	r3, #1
 80021b8:	6143      	str	r3, [r0, #20]
 80021ba:	bd10      	pop	{r4, pc}
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40014000 	.word	0x40014000

080021c4 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021c4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80021c6:	4604      	mov	r4, r0
 80021c8:	b1a0      	cbz	r0, 80021f4 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80021ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021d2:	b91b      	cbnz	r3, 80021dc <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021d8:	f001 f838 	bl	800324c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	1d21      	adds	r1, r4, #4
 80021e6:	f7ff ffb7 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80021f0:	2000      	movs	r0, #0
 80021f2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f8:	6a03      	ldr	r3, [r0, #32]
 80021fa:	f023 0310 	bic.w	r3, r3, #16
 80021fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002200:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002202:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002204:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002206:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002208:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800220a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800220e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002212:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002216:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002218:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800221c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002220:	4d0f      	ldr	r5, [pc, #60]	; (8002260 <TIM_OC2_SetConfig+0x68>)
 8002222:	42a8      	cmp	r0, r5
 8002224:	d107      	bne.n	8002236 <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002226:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800222c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002234:	e005      	b.n	8002242 <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002236:	4d0b      	ldr	r5, [pc, #44]	; (8002264 <TIM_OC2_SetConfig+0x6c>)
 8002238:	42a8      	cmp	r0, r5
 800223a:	d002      	beq.n	8002242 <TIM_OC2_SetConfig+0x4a>
 800223c:	4d0a      	ldr	r5, [pc, #40]	; (8002268 <TIM_OC2_SetConfig+0x70>)
 800223e:	42a8      	cmp	r0, r5
 8002240:	d107      	bne.n	8002252 <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002242:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002244:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002248:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800224c:	698d      	ldr	r5, [r1, #24]
 800224e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002252:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002254:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002256:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002258:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225a:	6203      	str	r3, [r0, #32]
}
 800225c:	bd30      	pop	{r4, r5, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40014000 	.word	0x40014000
 8002268:	40014400 	.word	0x40014400

0800226c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800226c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800226e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002272:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800227c:	d07b      	beq.n	8002376 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800227e:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8002280:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002282:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 800228a:	d03c      	beq.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800228c:	d813      	bhi.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800228e:	b34a      	cbz	r2, 80022e4 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002290:	2a04      	cmp	r2, #4
 8002292:	d16a      	bne.n	800236a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002294:	6820      	ldr	r0, [r4, #0]
 8002296:	f7ff ffaf 	bl	80021f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800229a:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800229c:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022b4:	e025      	b.n	8002302 <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 80022b6:	2a10      	cmp	r2, #16
 80022b8:	d036      	beq.n	8002328 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80022ba:	2a14      	cmp	r2, #20
 80022bc:	d044      	beq.n	8002348 <HAL_TIM_PWM_ConfigChannel+0xdc>
 80022be:	2a0c      	cmp	r2, #12
 80022c0:	d153      	bne.n	800236a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c2:	6820      	ldr	r0, [r4, #0]
 80022c4:	f7ff fec4 	bl	8002050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022c8:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80022ca:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d2:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022e2:	e01f      	b.n	8002324 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	f7ff fe3f 	bl	8001f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022fc:	6999      	ldr	r1, [r3, #24]
 80022fe:	692a      	ldr	r2, [r5, #16]
 8002300:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002302:	619a      	str	r2, [r3, #24]
    }
    break;
 8002304:	e031      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	f7ff fe6a 	bl	8001fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	f042 0208 	orr.w	r2, r2, #8
 8002314:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	f022 0204 	bic.w	r2, r2, #4
 800231c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800231e:	69d9      	ldr	r1, [r3, #28]
 8002320:	692a      	ldr	r2, [r5, #16]
 8002322:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002324:	61da      	str	r2, [r3, #28]
    }
    break;
 8002326:	e020      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	f7ff febd 	bl	80020a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002342:	692a      	ldr	r2, [r5, #16]
 8002344:	430a      	orrs	r2, r1
 8002346:	e00f      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	f7ff fed9 	bl	8002100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800234e:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002350:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800235a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002364:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002368:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800236a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800236c:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800236e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002372:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002376:	bd38      	pop	{r3, r4, r5, pc}

08002378 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002378:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800237a:	2301      	movs	r3, #1
 800237c:	6a04      	ldr	r4, [r0, #32]
 800237e:	408b      	lsls	r3, r1
 8002380:	ea24 0303 	bic.w	r3, r4, r3
 8002384:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002386:	6a03      	ldr	r3, [r0, #32]
 8002388:	408a      	lsls	r2, r1
 800238a:	ea42 0103 	orr.w	r1, r2, r3
 800238e:	6201      	str	r1, [r0, #32]
 8002390:	bd10      	pop	{r4, pc}
	...

08002394 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002394:	b510      	push	{r4, lr}
 8002396:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002398:	2200      	movs	r2, #0
 800239a:	6800      	ldr	r0, [r0, #0]
 800239c:	f7ff ffec 	bl	8002378 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_TIM_PWM_Stop+0x68>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_PWM_Stop+0x24>
 80023a8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <HAL_TIM_PWM_Stop+0x24>
 80023b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10d      	bne.n	80023d4 <HAL_TIM_PWM_Stop+0x40>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80023b8:	6a19      	ldr	r1, [r3, #32]
 80023ba:	f241 1211 	movw	r2, #4369	; 0x1111
 80023be:	400a      	ands	r2, r1
 80023c0:	b942      	cbnz	r2, 80023d4 <HAL_TIM_PWM_Stop+0x40>
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	f240 4244 	movw	r2, #1092	; 0x444
 80023c8:	400a      	ands	r2, r1
 80023ca:	b91a      	cbnz	r2, 80023d4 <HAL_TIM_PWM_Stop+0x40>
 80023cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023d4:	6a19      	ldr	r1, [r3, #32]
 80023d6:	f241 1211 	movw	r2, #4369	; 0x1111
 80023da:	400a      	ands	r2, r1
 80023dc:	b942      	cbnz	r2, 80023f0 <HAL_TIM_PWM_Stop+0x5c>
 80023de:	6a19      	ldr	r1, [r3, #32]
 80023e0:	f240 4244 	movw	r2, #1092	; 0x444
 80023e4:	400a      	ands	r2, r1
 80023e6:	b91a      	cbnz	r2, 80023f0 <HAL_TIM_PWM_Stop+0x5c>
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 80023f6:	2000      	movs	r0, #0
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	bf00      	nop
 80023fc:	40012c00 	.word	0x40012c00

08002400 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002400:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002404:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002406:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002408:	d018      	beq.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800240c:	4c0c      	ldr	r4, [pc, #48]	; (8002440 <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240e:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002412:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002414:	bf02      	ittt	eq
 8002416:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002418:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800241c:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800241e:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002420:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002426:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002428:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800242c:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800242e:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002430:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002432:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002434:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002438:	4618      	mov	r0, r3
 800243a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243c:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 800243e:	bd30      	pop	{r4, r5, pc}
 8002440:	40012c00 	.word	0x40012c00

08002444 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002444:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002448:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800244a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800244c:	d034      	beq.n	80024b8 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800244e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002450:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002456:	688b      	ldr	r3, [r1, #8]
 8002458:	4313      	orrs	r3, r2
 800245a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	4313      	orrs	r3, r2
 8002462:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002466:	680b      	ldr	r3, [r1, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800246e:	690b      	ldr	r3, [r1, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002476:	694b      	ldr	r3, [r1, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800247c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002480:	431a      	orrs	r2, r3
 8002482:	698b      	ldr	r3, [r1, #24]
 8002484:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002488:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 800248e:	4294      	cmp	r4, r2
 8002490:	d10c      	bne.n	80024ac <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002492:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002498:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800249c:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024a8:	6a0b      	ldr	r3, [r1, #32]
 80024aa:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024ac:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80024ae:	2300      	movs	r3, #0
 80024b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024b8:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80024ba:	bd10      	pop	{r4, pc}
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024c4:	6805      	ldr	r5, [r0, #0]
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ca:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024cc:	6828      	ldr	r0, [r5, #0]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	6963      	ldr	r3, [r4, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	ea43 0201 	orr.w	r2, r3, r1
 80024d8:	4b7d      	ldr	r3, [pc, #500]	; (80026d0 <UART_SetConfig+0x210>)
 80024da:	4003      	ands	r3, r0
 80024dc:	4313      	orrs	r3, r2
 80024de:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	686b      	ldr	r3, [r5, #4]
 80024e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e6:	68e3      	ldr	r3, [r4, #12]
 80024e8:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024ea:	4a7a      	ldr	r2, [pc, #488]	; (80026d4 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024ee:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024f0:	bf18      	it	ne
 80024f2:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024f4:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024f6:	bf18      	it	ne
 80024f8:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80024fa:	68aa      	ldr	r2, [r5, #8]
 80024fc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002500:	4313      	orrs	r3, r2
 8002502:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002504:	4b74      	ldr	r3, [pc, #464]	; (80026d8 <UART_SetConfig+0x218>)
 8002506:	429d      	cmp	r5, r3
 8002508:	d107      	bne.n	800251a <UART_SetConfig+0x5a>
 800250a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800250e:	4a73      	ldr	r2, [pc, #460]	; (80026dc <UART_SetConfig+0x21c>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	e009      	b.n	800252e <UART_SetConfig+0x6e>
 800251a:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <UART_SetConfig+0x220>)
 800251c:	429d      	cmp	r5, r3
 800251e:	d10b      	bne.n	8002538 <UART_SetConfig+0x78>
 8002520:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002524:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <UART_SetConfig+0x224>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800252e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	d065      	beq.n	8002602 <UART_SetConfig+0x142>
 8002536:	e099      	b.n	800266c <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <UART_SetConfig+0x214>)
 800253a:	429d      	cmp	r5, r3
 800253c:	f040 8089 	bne.w	8002652 <UART_SetConfig+0x192>
 8002540:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002544:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002548:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800254c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002550:	d014      	beq.n	800257c <UART_SetConfig+0xbc>
 8002552:	d805      	bhi.n	8002560 <UART_SetConfig+0xa0>
 8002554:	2d00      	cmp	r5, #0
 8002556:	f040 80b7 	bne.w	80026c8 <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800255a:	f7ff fadb 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
      break;
 800255e:	e010      	b.n	8002582 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002560:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002564:	d007      	beq.n	8002576 <UART_SetConfig+0xb6>
 8002566:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800256a:	f040 80ad 	bne.w	80026c8 <UART_SetConfig+0x208>
 800256e:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8002570:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002574:	e008      	b.n	8002588 <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002576:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8002578:	485b      	ldr	r0, [pc, #364]	; (80026e8 <UART_SetConfig+0x228>)
 800257a:	e005      	b.n	8002588 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800257c:	f7fe fefc 	bl	8001378 <HAL_RCC_GetSysClockFreq>
      break;
 8002580:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8002582:	2800      	cmp	r0, #0
 8002584:	f000 809e 	beq.w	80026c4 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002588:	6862      	ldr	r2, [r4, #4]
 800258a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800258e:	4283      	cmp	r3, r0
 8002590:	f200 809a 	bhi.w	80026c8 <UART_SetConfig+0x208>
 8002594:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002598:	f200 8096 	bhi.w	80026c8 <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 800259c:	2d08      	cmp	r5, #8
 800259e:	d827      	bhi.n	80025f0 <UART_SetConfig+0x130>
 80025a0:	e8df f005 	tbb	[pc, r5]
 80025a4:	26082605 	.word	0x26082605
 80025a8:	2626260e 	.word	0x2626260e
 80025ac:	1b          	.byte	0x1b
 80025ad:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025ae:	f7ff fab1 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80025b2:	e007      	b.n	80025c4 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80025b4:	484d      	ldr	r0, [pc, #308]	; (80026ec <UART_SetConfig+0x22c>)
 80025b6:	0855      	lsrs	r5, r2, #1
 80025b8:	2300      	movs	r3, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	1940      	adds	r0, r0, r5
 80025be:	e011      	b.n	80025e4 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025c0:	f7fe feda 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ca:	0856      	lsrs	r6, r2, #1
 80025cc:	2700      	movs	r7, #0
 80025ce:	fbe1 6700 	umlal	r6, r7, r1, r0
 80025d2:	2300      	movs	r3, #0
 80025d4:	4630      	mov	r0, r6
 80025d6:	4639      	mov	r1, r7
 80025d8:	e006      	b.n	80025e8 <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80025da:	0850      	lsrs	r0, r2, #1
 80025dc:	2100      	movs	r1, #0
 80025de:	2300      	movs	r3, #0
 80025e0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80025e4:	f141 0100 	adc.w	r1, r1, #0
 80025e8:	f7fe fb4a 	bl	8000c80 <__aeabi_uldivmod>
          break;
 80025ec:	2200      	movs	r2, #0
 80025ee:	e000      	b.n	80025f2 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 80025f0:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80025f2:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <UART_SetConfig+0x230>)
 80025f4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80025f8:	4299      	cmp	r1, r3
 80025fa:	d865      	bhi.n	80026c8 <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	60d8      	str	r0, [r3, #12]
 8002600:	e063      	b.n	80026ca <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002602:	2b08      	cmp	r3, #8
 8002604:	d828      	bhi.n	8002658 <UART_SetConfig+0x198>
 8002606:	e8df f003 	tbb	[pc, r3]
 800260a:	0805      	.short	0x0805
 800260c:	2712270b 	.word	0x2712270b
 8002610:	2727      	.short	0x2727
 8002612:	1b          	.byte	0x1b
 8002613:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002614:	f7ff fa7e 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002618:	e00b      	b.n	8002632 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800261a:	f7ff fa93 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 800261e:	e008      	b.n	8002632 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002620:	6860      	ldr	r0, [r4, #4]
 8002622:	0842      	lsrs	r2, r0, #1
 8002624:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002628:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800262c:	e00c      	b.n	8002648 <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800262e:	f7fe fea3 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8002632:	6863      	ldr	r3, [r4, #4]
 8002634:	085a      	lsrs	r2, r3, #1
 8002636:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	e005      	b.n	800264c <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002640:	6860      	ldr	r0, [r4, #4]
 8002642:	0843      	lsrs	r3, r0, #1
 8002644:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002648:	fbb3 f3f0 	udiv	r3, r3, r0
 800264c:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800264e:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002650:	e004      	b.n	800265c <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002652:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002656:	d137      	bne.n	80026c8 <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002658:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800265a:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800265c:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002660:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002662:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002666:	4303      	orrs	r3, r0
 8002668:	60cb      	str	r3, [r1, #12]
 800266a:	e02e      	b.n	80026ca <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 800266c:	2b08      	cmp	r3, #8
 800266e:	d82b      	bhi.n	80026c8 <UART_SetConfig+0x208>
 8002670:	e8df f003 	tbb	[pc, r3]
 8002674:	2a0b0805 	.word	0x2a0b0805
 8002678:	2a2a2a14 	.word	0x2a2a2a14
 800267c:	1e          	.byte	0x1e
 800267d:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800267e:	f7ff fa49 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002682:	e00d      	b.n	80026a0 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002684:	f7ff fa5e 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002688:	e00a      	b.n	80026a0 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800268a:	6861      	ldr	r1, [r4, #4]
 800268c:	084a      	lsrs	r2, r1, #1
 800268e:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002692:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	e00f      	b.n	80026bc <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800269c:	f7fe fe6c 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 80026a0:	6863      	ldr	r3, [r4, #4]
 80026a2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80026a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80026aa:	b280      	uxth	r0, r0
 80026ac:	60e8      	str	r0, [r5, #12]
 80026ae:	e007      	b.n	80026c0 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026b0:	6862      	ldr	r2, [r4, #4]
 80026b2:	0853      	lsrs	r3, r2, #1
 80026b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80026b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c0:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 80026c2:	e002      	b.n	80026ca <UART_SetConfig+0x20a>
 80026c4:	4602      	mov	r2, r0
 80026c6:	e000      	b.n	80026ca <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80026c8:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 80026ca:	4610      	mov	r0, r2
 80026cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	efff69f3 	.word	0xefff69f3
 80026d4:	40008000 	.word	0x40008000
 80026d8:	40013800 	.word	0x40013800
 80026dc:	08009720 	.word	0x08009720
 80026e0:	40004400 	.word	0x40004400
 80026e4:	08009724 	.word	0x08009724
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	f4240000 	.word	0xf4240000
 80026f0:	000ffcff 	.word	0x000ffcff

080026f4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026f6:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026f8:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026fa:	d506      	bpl.n	800270a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026fc:	6804      	ldr	r4, [r0, #0]
 80026fe:	6862      	ldr	r2, [r4, #4]
 8002700:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002704:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002706:	430a      	orrs	r2, r1
 8002708:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800270a:	079c      	lsls	r4, r3, #30
 800270c:	d506      	bpl.n	800271c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800270e:	6804      	ldr	r4, [r0, #0]
 8002710:	6862      	ldr	r2, [r4, #4]
 8002712:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002718:	430a      	orrs	r2, r1
 800271a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800271c:	0759      	lsls	r1, r3, #29
 800271e:	d506      	bpl.n	800272e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002720:	6804      	ldr	r4, [r0, #0]
 8002722:	6862      	ldr	r2, [r4, #4]
 8002724:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002728:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800272a:	430a      	orrs	r2, r1
 800272c:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800272e:	071a      	lsls	r2, r3, #28
 8002730:	d506      	bpl.n	8002740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002732:	6804      	ldr	r4, [r0, #0]
 8002734:	6862      	ldr	r2, [r4, #4]
 8002736:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800273a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800273c:	430a      	orrs	r2, r1
 800273e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002740:	06dc      	lsls	r4, r3, #27
 8002742:	d506      	bpl.n	8002752 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002744:	6804      	ldr	r4, [r0, #0]
 8002746:	68a2      	ldr	r2, [r4, #8]
 8002748:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800274c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800274e:	430a      	orrs	r2, r1
 8002750:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002752:	0699      	lsls	r1, r3, #26
 8002754:	d506      	bpl.n	8002764 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002756:	6804      	ldr	r4, [r0, #0]
 8002758:	68a2      	ldr	r2, [r4, #8]
 800275a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800275e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002760:	430a      	orrs	r2, r1
 8002762:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002764:	065a      	lsls	r2, r3, #25
 8002766:	d50f      	bpl.n	8002788 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002768:	6801      	ldr	r1, [r0, #0]
 800276a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800276c:	684a      	ldr	r2, [r1, #4]
 800276e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002772:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002774:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002778:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800277a:	d105      	bne.n	8002788 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800277c:	684a      	ldr	r2, [r1, #4]
 800277e:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002782:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002784:	4322      	orrs	r2, r4
 8002786:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	d506      	bpl.n	800279a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800278c:	6801      	ldr	r1, [r0, #0]
 800278e:	684b      	ldr	r3, [r1, #4]
 8002790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002794:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	bd10      	pop	{r4, pc}

0800279c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a0:	9d06      	ldr	r5, [sp, #24]
 80027a2:	4604      	mov	r4, r0
 80027a4:	460f      	mov	r7, r1
 80027a6:	4616      	mov	r6, r2
 80027a8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027aa:	6821      	ldr	r1, [r4, #0]
 80027ac:	69ca      	ldr	r2, [r1, #28]
 80027ae:	ea37 0302 	bics.w	r3, r7, r2
 80027b2:	bf0c      	ite	eq
 80027b4:	2201      	moveq	r2, #1
 80027b6:	2200      	movne	r2, #0
 80027b8:	42b2      	cmp	r2, r6
 80027ba:	d11d      	bne.n	80027f8 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027bc:	1c6b      	adds	r3, r5, #1
 80027be:	d0f5      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027c0:	b99d      	cbnz	r5, 80027ea <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80027d4:	2320      	movs	r3, #32
 80027d6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80027da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027de:	2300      	movs	r3, #0
 80027e0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80027e4:	2003      	movs	r0, #3
 80027e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027ea:	f7fe fbfd 	bl	8000fe8 <HAL_GetTick>
 80027ee:	ebc8 0000 	rsb	r0, r8, r0
 80027f2:	4285      	cmp	r5, r0
 80027f4:	d2d9      	bcs.n	80027aa <UART_WaitOnFlagUntilTimeout+0xe>
 80027f6:	e7e4      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
}
 80027fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027fe <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002802:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002804:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002808:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280a:	4604      	mov	r4, r0
 800280c:	460d      	mov	r5, r1
 800280e:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002810:	d14b      	bne.n	80028aa <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8002812:	2900      	cmp	r1, #0
 8002814:	d047      	beq.n	80028a6 <HAL_UART_Transmit+0xa8>
 8002816:	2a00      	cmp	r2, #0
 8002818:	d045      	beq.n	80028a6 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800281a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800281e:	2b01      	cmp	r3, #1
 8002820:	d043      	beq.n	80028aa <HAL_UART_Transmit+0xac>
 8002822:	2301      	movs	r3, #1
 8002824:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	2300      	movs	r3, #0
 800282a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282c:	2321      	movs	r3, #33	; 0x21
 800282e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002832:	f7fe fbd9 	bl	8000fe8 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002836:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800283a:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 800283c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8002840:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002844:	b292      	uxth	r2, r2
 8002846:	b302      	cbz	r2, 800288a <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002848:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284c:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 800284e:	3b01      	subs	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	2200      	movs	r2, #0
 8002858:	4633      	mov	r3, r6
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff ff9d 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 8002862:	b108      	cbz	r0, 8002868 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002864:	2003      	movs	r0, #3
 8002866:	e021      	b.n	80028ac <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002868:	68a3      	ldr	r3, [r4, #8]
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d107      	bne.n	8002882 <HAL_UART_Transmit+0x84>
 8002872:	6923      	ldr	r3, [r4, #16]
 8002874:	b92b      	cbnz	r3, 8002882 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8002876:	f835 3b02 	ldrh.w	r3, [r5], #2
 800287a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287e:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8002880:	e7de      	b.n	8002840 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8002882:	782b      	ldrb	r3, [r5, #0]
 8002884:	8513      	strh	r3, [r2, #40]	; 0x28
 8002886:	3501      	adds	r5, #1
 8002888:	e7da      	b.n	8002840 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	9700      	str	r7, [sp, #0]
 800288c:	4633      	mov	r3, r6
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff ff83 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 8002896:	2800      	cmp	r0, #0
 8002898:	d1e4      	bne.n	8002864 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289a:	2320      	movs	r3, #32
 800289c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80028a4:	e002      	b.n	80028ac <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80028a6:	2001      	movs	r0, #1
 80028a8:	e000      	b.n	80028ac <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80028aa:	2002      	movs	r0, #2
  }
}
 80028ac:	b002      	add	sp, #8
 80028ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028b2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028b6:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80028b8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80028bc:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028be:	4604      	mov	r4, r0
 80028c0:	460d      	mov	r5, r1
 80028c2:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80028c4:	d15d      	bne.n	8002982 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d059      	beq.n	800297e <HAL_UART_Receive+0xcc>
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d057      	beq.n	800297e <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ce:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d055      	beq.n	8002982 <HAL_UART_Receive+0xd0>
 80028d6:	2301      	movs	r3, #1
 80028d8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	2300      	movs	r3, #0
 80028de:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e0:	2322      	movs	r3, #34	; 0x22
 80028e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028e6:	f7fe fb7f 	bl	8000fe8 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028ea:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 80028ec:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028f4:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 80028f6:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028fa:	d104      	bne.n	8002906 <HAL_UART_Receive+0x54>
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	b92b      	cbnz	r3, 800290c <HAL_UART_Receive+0x5a>
 8002900:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002904:	e00d      	b.n	8002922 <HAL_UART_Receive+0x70>
 8002906:	b92b      	cbnz	r3, 8002914 <HAL_UART_Receive+0x62>
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	b90b      	cbnz	r3, 8002910 <HAL_UART_Receive+0x5e>
 800290c:	23ff      	movs	r3, #255	; 0xff
 800290e:	e008      	b.n	8002922 <HAL_UART_Receive+0x70>
 8002910:	237f      	movs	r3, #127	; 0x7f
 8002912:	e006      	b.n	8002922 <HAL_UART_Receive+0x70>
 8002914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002918:	d105      	bne.n	8002926 <HAL_UART_Receive+0x74>
 800291a:	6923      	ldr	r3, [r4, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f7      	beq.n	8002910 <HAL_UART_Receive+0x5e>
 8002920:	233f      	movs	r3, #63	; 0x3f
 8002922:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002926:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 800292a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800292e:	b280      	uxth	r0, r0
 8002930:	b1f8      	cbz	r0, 8002972 <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8002932:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 800293a:	3b01      	subs	r3, #1
 800293c:	b29b      	uxth	r3, r3
 800293e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	2200      	movs	r2, #0
 8002944:	463b      	mov	r3, r7
 8002946:	2120      	movs	r1, #32
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff ff27 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 800294e:	b9d0      	cbnz	r0, 8002986 <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68a3      	ldr	r3, [r4, #8]
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	d106      	bne.n	8002968 <HAL_UART_Receive+0xb6>
 800295a:	6922      	ldr	r2, [r4, #16]
 800295c:	b922      	cbnz	r2, 8002968 <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800295e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002960:	4033      	ands	r3, r6
 8002962:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8002966:	e7e0      	b.n	800292a <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002968:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800296a:	4033      	ands	r3, r6
 800296c:	702b      	strb	r3, [r5, #0]
 800296e:	3501      	adds	r5, #1
 8002970:	e7db      	b.n	800292a <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002972:	2320      	movs	r3, #32
 8002974:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002978:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800297c:	e004      	b.n	8002988 <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 800297e:	2001      	movs	r0, #1
 8002980:	e002      	b.n	8002988 <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002982:	2002      	movs	r0, #2
 8002984:	e000      	b.n	8002988 <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002988:	b002      	add	sp, #8
 800298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800298e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800298e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002990:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	2600      	movs	r6, #0
 8002994:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002996:	f7fe fb27 	bl	8000fe8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029a0:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a2:	d404      	bmi.n	80029ae <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	075b      	lsls	r3, r3, #29
 80029aa:	d51a      	bpl.n	80029e2 <UART_CheckIdleState+0x54>
 80029ac:	e00d      	b.n	80029ca <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4632      	mov	r2, r6
 80029b6:	4603      	mov	r3, r0
 80029b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff feed 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d0ee      	beq.n	80029a4 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c6:	2003      	movs	r0, #3
 80029c8:	e013      	b.n	80029f2 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	462b      	mov	r3, r5
 80029d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fedf 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d1f1      	bne.n	80029c6 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80029e2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029e4:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80029e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029ea:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 80029ee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 80029f2:	b002      	add	sp, #8
 80029f4:	bd70      	pop	{r4, r5, r6, pc}

080029f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f6:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80029f8:	4604      	mov	r4, r0
 80029fa:	b360      	cbz	r0, 8002a56 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80029fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002a00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a04:	b91b      	cbnz	r3, 8002a0e <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	f000 fc4b 	bl	80032a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0e:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	2324      	movs	r3, #36	; 0x24
 8002a12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fd4e 	bl	80024c0 <UART_SetConfig>
 8002a24:	2801      	cmp	r0, #1
 8002a26:	d016      	beq.n	8002a56 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a2a:	b113      	cbz	r3, 8002a32 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff fe61 	bl	80026f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a42:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a4a:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a52:	f7ff bf9c 	b.w	800298e <UART_CheckIdleState>
}
 8002a56:	2001      	movs	r0, #1
 8002a58:	bd10      	pop	{r4, pc}

08002a5a <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f7fe bc06 	b.w	800126c <HAL_GPIO_WritePin>

08002a60 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	f7fe bc03 	b.w	800126c <HAL_GPIO_WritePin>
	...

08002a68 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
	if (data & 0x10) {
 8002a6c:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002a6e:	f04f 0110 	mov.w	r1, #16
 8002a72:	481a      	ldr	r0, [pc, #104]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8002a74:	d502      	bpl.n	8002a7c <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002a76:	f7ff fff0 	bl	8002a5a <GPIO_SetBits>
 8002a7a:	e001      	b.n	8002a80 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002a7c:	f7ff fff0 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8002a80:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a82:	f04f 0120 	mov.w	r1, #32
 8002a86:	4815      	ldr	r0, [pc, #84]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8002a88:	d502      	bpl.n	8002a90 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a8a:	f7ff ffe6 	bl	8002a5a <GPIO_SetBits>
 8002a8e:	e001      	b.n	8002a94 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002a90:	f7ff ffe6 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8002a94:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002a96:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002a9a:	4810      	ldr	r0, [pc, #64]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8002a9c:	d502      	bpl.n	8002aa4 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002a9e:	f7ff ffdc 	bl	8002a5a <GPIO_SetBits>
 8002aa2:	e001      	b.n	8002aa8 <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002aa4:	f7ff ffdc 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8002aa8:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002aaa:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002aae:	480b      	ldr	r0, [pc, #44]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8002ab0:	d502      	bpl.n	8002ab8 <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002ab2:	f7ff ffd2 	bl	8002a5a <GPIO_SetBits>
 8002ab6:	e001      	b.n	8002abc <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002ab8:	f7ff ffd2 	bl	8002a60 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002abc:	2201      	movs	r2, #1
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4806      	ldr	r0, [pc, #24]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
 8002ac2:	f7fe fbd3 	bl	800126c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fe fa94 	bl	8000ff4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002acc:	2200      	movs	r2, #0
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <hd44780_wr_hi_nibble+0x74>)
}
 8002ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002ad6:	f7fe bbc9 	b.w	800126c <HAL_GPIO_WritePin>
 8002ada:	bf00      	nop
 8002adc:	48000400 	.word	0x48000400

08002ae0 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
	if (data & 0x01) {
 8002ae4:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002ae6:	f04f 0110 	mov.w	r1, #16
 8002aea:	481a      	ldr	r0, [pc, #104]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 8002aec:	d502      	bpl.n	8002af4 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002aee:	f7ff ffb4 	bl	8002a5a <GPIO_SetBits>
 8002af2:	e001      	b.n	8002af8 <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002af4:	f7ff ffb4 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8002af8:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002afa:	f04f 0120 	mov.w	r1, #32
 8002afe:	4815      	ldr	r0, [pc, #84]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 8002b00:	d502      	bpl.n	8002b08 <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002b02:	f7ff ffaa 	bl	8002a5a <GPIO_SetBits>
 8002b06:	e001      	b.n	8002b0c <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002b08:	f7ff ffaa 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8002b0c:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002b0e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 8002b14:	d502      	bpl.n	8002b1c <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002b16:	f7ff ffa0 	bl	8002a5a <GPIO_SetBits>
 8002b1a:	e001      	b.n	8002b20 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002b1c:	f7ff ffa0 	bl	8002a60 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8002b20:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002b22:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002b26:	480b      	ldr	r0, [pc, #44]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 8002b28:	d502      	bpl.n	8002b30 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002b2a:	f7ff ff96 	bl	8002a5a <GPIO_SetBits>
 8002b2e:	e001      	b.n	8002b34 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002b30:	f7ff ff96 	bl	8002a60 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002b34:	2201      	movs	r2, #1
 8002b36:	2102      	movs	r1, #2
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
 8002b3a:	f7fe fb97 	bl	800126c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7fe fa58 	bl	8000ff4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002b44:	2200      	movs	r2, #0
 8002b46:	2102      	movs	r1, #2
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <hd44780_wr_lo_nibble+0x74>)
}
 8002b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002b4e:	f7fe bb8d 	b.w	800126c <HAL_GPIO_WritePin>
 8002b52:	bf00      	nop
 8002b54:	48000400 	.word	0x48000400

08002b58 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8002b5c:	f7ff ff84 	bl	8002a68 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8002b60:	4620      	mov	r0, r4
}
 8002b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 8002b66:	f7ff bfbb 	b.w	8002ae0 <hd44780_wr_lo_nibble>
	...

08002b6c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8002b6c:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8002b6e:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8002b70:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8002b72:	2101      	movs	r1, #1
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <hd44780_wr_cmd+0x18>)
 8002b76:	f7fe fb79 	bl	800126c <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8002b7a:	4620      	mov	r0, r4
}
 8002b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 8002b80:	f7ff bfea 	b.w	8002b58 <hd44780_write>
 8002b84:	48000400 	.word	0x48000400

08002b88 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8002b88:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8002b8a:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 8002b8c:	4604      	mov	r4, r0
	hd44780_RS_On();
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <hd44780_wr_data+0x18>)
 8002b92:	f7fe fb6b 	bl	800126c <HAL_GPIO_WritePin>
	hd44780_write(data);
 8002b96:	4620      	mov	r0, r4
}
 8002b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 8002b9c:	f7ff bfdc 	b.w	8002b58 <hd44780_write>
 8002ba0:	48000400 	.word	0x48000400

08002ba4 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8002ba6:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002baa:	4d29      	ldr	r5, [pc, #164]	; (8002c50 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002bac:	f042 0202 	orr.w	r2, r2, #2
 8002bb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8002bb4:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002bbe:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002bc2:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002bc4:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002bc6:	a901      	add	r1, sp, #4
 8002bc8:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002bca:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002bcc:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002bce:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002bd0:	f7fe fa8a 	bl	80010e8 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002bd4:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002bd6:	a901      	add	r1, sp, #4
 8002bd8:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002bda:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002bde:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002be0:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002be2:	f7fe fa81 	bl	80010e8 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8002be6:	4628      	mov	r0, r5
 8002be8:	2200      	movs	r2, #0
 8002bea:	2102      	movs	r1, #2
 8002bec:	f7fe fb3e 	bl	800126c <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f7fe fb39 	bl	800126c <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2108      	movs	r1, #8
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7fe fb34 	bl	800126c <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8002c04:	2010      	movs	r0, #16
 8002c06:	f7fe f9f5 	bl	8000ff4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002c0a:	2030      	movs	r0, #48	; 0x30
 8002c0c:	f7ff ff2c 	bl	8002a68 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8002c10:	2005      	movs	r0, #5
 8002c12:	f7fe f9ef 	bl	8000ff4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002c16:	2030      	movs	r0, #48	; 0x30
 8002c18:	f7ff ff26 	bl	8002a68 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7fe f9e9 	bl	8000ff4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002c22:	2030      	movs	r0, #48	; 0x30
 8002c24:	f7ff ff20 	bl	8002a68 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8002c28:	2020      	movs	r0, #32
 8002c2a:	f7ff ff1d 	bl	8002a68 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8002c2e:	2028      	movs	r0, #40	; 0x28
 8002c30:	f7ff ff9c 	bl	8002b6c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8002c34:	200c      	movs	r0, #12
 8002c36:	f7ff ff99 	bl	8002b6c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff ff96 	bl	8002b6c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8002c40:	2006      	movs	r0, #6
 8002c42:	f7ff ff93 	bl	8002b6c <hd44780_wr_cmd>

}
 8002c46:	b006      	add	sp, #24
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	48000400 	.word	0x48000400

08002c54 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 8002c54:	2901      	cmp	r1, #1
 8002c56:	bf88      	it	hi
 8002c58:	2100      	movhi	r1, #0
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HD44780_GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8002c5c:	5c5b      	ldrb	r3, [r3, r1]
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;
 8002c5e:	280f      	cmp	r0, #15
 8002c60:	bf88      	it	hi
 8002c62:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8002c64:	4418      	add	r0, r3
 8002c66:	b2c0      	uxtb	r0, r0
 8002c68:	f7ff bf80 	b.w	8002b6c <hd44780_wr_cmd>
 8002c6c:	08009731 	.word	0x08009731

08002c70 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002c70:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8002c72:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002c74:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8002c76:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8002c78:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 8002c7a:	5ce0      	ldrb	r0, [r4, r3]
 8002c7c:	f7ff ff84 	bl	8002b88 <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8002c80:	9b01      	ldr	r3, [sp, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8002c86:	9b01      	ldr	r3, [sp, #4]
 8002c88:	5ce3      	ldrb	r3, [r4, r3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f4      	bne.n	8002c78 <HD44780_PutStr+0x8>
}
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7ff bf6a 	b.w	8002b6c <hd44780_wr_cmd>

08002c98 <deBounceInit>:
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8002c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 8002c9a:	280f      	cmp	r0, #15
 8002c9c:	d831      	bhi.n	8002d02 <deBounceInit+0x6a>
 8002c9e:	e8df f000 	tbb	[pc, r0]
 8002ca2:	0a08      	.short	0x0a08
 8002ca4:	12100e0c 	.word	0x12100e0c
 8002ca8:	1b181614 	.word	0x1b181614
 8002cac:	2724211e 	.word	0x2724211e
 8002cb0:	2d2a      	.short	0x2d2a
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e024      	b.n	8002d00 <deBounceInit+0x68>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e022      	b.n	8002d00 <deBounceInit+0x68>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e020      	b.n	8002d00 <deBounceInit+0x68>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	e01e      	b.n	8002d00 <deBounceInit+0x68>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	e01c      	b.n	8002d00 <deBounceInit+0x68>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e01a      	b.n	8002d00 <deBounceInit+0x68>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002cca:	2340      	movs	r3, #64	; 0x40
 8002ccc:	e018      	b.n	8002d00 <deBounceInit+0x68>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	e016      	b.n	8002d00 <deBounceInit+0x68>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd6:	e013      	b.n	8002d00 <deBounceInit+0x68>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cdc:	e010      	b.n	8002d00 <deBounceInit+0x68>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce2:	e00d      	b.n	8002d00 <deBounceInit+0x68>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce8:	e00a      	b.n	8002d00 <deBounceInit+0x68>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cee:	e007      	b.n	8002d00 <deBounceInit+0x68>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf4:	e004      	b.n	8002d00 <deBounceInit+0x68>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002cf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cfa:	e001      	b.n	8002d00 <deBounceInit+0x68>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d00:	9301      	str	r3, [sp, #4]
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d02:	2300      	movs	r3, #0
 8002d04:	9302      	str	r3, [sp, #8]
	switch (mode)
 8002d06:	b11a      	cbz	r2, 8002d10 <deBounceInit+0x78>
 8002d08:	2a01      	cmp	r2, #1
 8002d0a:	d103      	bne.n	8002d14 <deBounceInit+0x7c>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8002d0c:	9203      	str	r2, [sp, #12]
 8002d0e:	e001      	b.n	8002d14 <deBounceInit+0x7c>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	switch (mode)
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 8002d10:	2302      	movs	r3, #2
 8002d12:	9303      	str	r3, [sp, #12]
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
	}
	switch (port)
 8002d14:	2942      	cmp	r1, #66	; 0x42
 8002d16:	d007      	beq.n	8002d28 <deBounceInit+0x90>
 8002d18:	2943      	cmp	r1, #67	; 0x43
 8002d1a:	d008      	beq.n	8002d2e <deBounceInit+0x96>
 8002d1c:	2941      	cmp	r1, #65	; 0x41
 8002d1e:	d10a      	bne.n	8002d36 <deBounceInit+0x9e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8002d20:	a901      	add	r1, sp, #4
 8002d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d26:	e004      	b.n	8002d32 <deBounceInit+0x9a>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8002d28:	a901      	add	r1, sp, #4
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <deBounceInit+0xb0>)
 8002d2c:	e001      	b.n	8002d32 <deBounceInit+0x9a>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8002d2e:	4807      	ldr	r0, [pc, #28]	; (8002d4c <deBounceInit+0xb4>)
 8002d30:	a901      	add	r1, sp, #4
 8002d32:	f7fe f9d9 	bl	80010e8 <HAL_GPIO_Init>
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d36:	a901      	add	r1, sp, #4
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3c:	f7fe f9d4 	bl	80010e8 <HAL_GPIO_Init>
}
 8002d40:	b007      	add	sp, #28
 8002d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d46:	bf00      	nop
 8002d48:	48000400 	.word	0x48000400
 8002d4c:	48000800 	.word	0x48000800

08002d50 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8002d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d54:	4605      	mov	r5, r0
 8002d56:	460f      	mov	r7, r1
 8002d58:	4691      	mov	r9, r2
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
	int8_t pinStateWeAreLookingFor = 0;
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8002d5a:	f7fe f945 	bl	8000fe8 <HAL_GetTick>
 8002d5e:	4680      	mov	r8, r0

	GPIO_InitTypeDef GPIO_InitStruct;
		/*Configure GPIO pin : */
		switch(pin)
 8002d60:	2d0f      	cmp	r5, #15
 8002d62:	d830      	bhi.n	8002dc6 <deBounceReadPin+0x76>
 8002d64:	e8df f005 	tbb	[pc, r5]
 8002d68:	0e0c0a08 	.word	0x0e0c0a08
 8002d6c:	16141210 	.word	0x16141210
 8002d70:	211e1b18 	.word	0x211e1b18
 8002d74:	2d2a2724 	.word	0x2d2a2724
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002d78:	2401      	movs	r4, #1
 8002d7a:	e024      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002d7c:	2402      	movs	r4, #2
 8002d7e:	e022      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002d80:	2404      	movs	r4, #4
 8002d82:	e020      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002d84:	2408      	movs	r4, #8
 8002d86:	e01e      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002d88:	2410      	movs	r4, #16
 8002d8a:	e01c      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002d8c:	2420      	movs	r4, #32
 8002d8e:	e01a      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002d90:	2440      	movs	r4, #64	; 0x40
 8002d92:	e018      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002d94:	2480      	movs	r4, #128	; 0x80
 8002d96:	e016      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002d98:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002d9c:	e013      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002d9e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002da2:	e010      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002da4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002da8:	e00d      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002daa:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002dae:	e00a      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002db0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002db4:	e007      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002db6:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8002dba:	e004      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002dbc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 8002dc0:	e001      	b.n	8002dc6 <deBounceReadPin+0x76>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002dc2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	switch (port)
 8002dc6:	2f42      	cmp	r7, #66	; 0x42
 8002dc8:	d007      	beq.n	8002dda <deBounceReadPin+0x8a>
 8002dca:	2f43      	cmp	r7, #67	; 0x43
 8002dcc:	d008      	beq.n	8002de0 <deBounceReadPin+0x90>
 8002dce:	2f41      	cmp	r7, #65	; 0x41
 8002dd0:	d10c      	bne.n	8002dec <deBounceReadPin+0x9c>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8002dd2:	b2a1      	uxth	r1, r4
 8002dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd8:	e004      	b.n	8002de4 <deBounceReadPin+0x94>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002dda:	b2a1      	uxth	r1, r4
 8002ddc:	4817      	ldr	r0, [pc, #92]	; (8002e3c <deBounceReadPin+0xec>)
 8002dde:	e001      	b.n	8002de4 <deBounceReadPin+0x94>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8002de0:	4817      	ldr	r0, [pc, #92]	; (8002e40 <deBounceReadPin+0xf0>)
 8002de2:	b2a1      	uxth	r1, r4
 8002de4:	f7fe fa3c 	bl	8001260 <HAL_GPIO_ReadPin>
 8002de8:	4605      	mov	r5, r0
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 8002dea:	b910      	cbnz	r0, 8002df2 <deBounceReadPin+0xa2>
	{
		pinStateWeAreLookingFor = 0;
 8002dec:	2600      	movs	r6, #0
 8002dee:	4635      	mov	r5, r6
 8002df0:	e000      	b.n	8002df4 <deBounceReadPin+0xa4>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 8002df2:	2601      	movs	r6, #1
	{

		switch (port)
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002df4:	b2a4      	uxth	r4, r4
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8002df6:	f7fe f8f7 	bl	8000fe8 <HAL_GetTick>
 8002dfa:	eb09 0308 	add.w	r3, r9, r8
 8002dfe:	4298      	cmp	r0, r3
 8002e00:	d219      	bcs.n	8002e36 <deBounceReadPin+0xe6>
	{

		switch (port)
 8002e02:	2f42      	cmp	r7, #66	; 0x42
 8002e04:	d007      	beq.n	8002e16 <deBounceReadPin+0xc6>
 8002e06:	2f43      	cmp	r7, #67	; 0x43
 8002e08:	d008      	beq.n	8002e1c <deBounceReadPin+0xcc>
 8002e0a:	2f41      	cmp	r7, #65	; 0x41
 8002e0c:	d10b      	bne.n	8002e26 <deBounceReadPin+0xd6>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8002e0e:	4621      	mov	r1, r4
 8002e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e14:	e004      	b.n	8002e20 <deBounceReadPin+0xd0>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002e16:	4621      	mov	r1, r4
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <deBounceReadPin+0xec>)
 8002e1a:	e001      	b.n	8002e20 <deBounceReadPin+0xd0>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <deBounceReadPin+0xf0>)
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f7fe fa1e 	bl	8001260 <HAL_GPIO_ReadPin>
 8002e24:	4605      	mov	r5, r0
		}
		if(pinState != pinStateWeAreLookingFor)
 8002e26:	42b5      	cmp	r5, r6
 8002e28:	d0e5      	beq.n	8002df6 <deBounceReadPin+0xa6>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8002e2a:	f7fe f8dd 	bl	8000fe8 <HAL_GetTick>
 8002e2e:	f086 0601 	eor.w	r6, r6, #1
 8002e32:	4680      	mov	r8, r0
 8002e34:	e7df      	b.n	8002df6 <deBounceReadPin+0xa6>
		}
	}
	return (pinStateWeAreLookingFor);
}
 8002e36:	4630      	mov	r0, r6
 8002e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	48000800 	.word	0x48000800

08002e44 <pushButtonInit>:
//                   Note: Don't use PA2 as it is connected to VCP TX and you'll
//                   lose printf output ability.
//   PARAMETERS    : None
//   RETURNS       : nothing
void pushButtonInit()
{
 8002e44:	b508      	push	{r3, lr}
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002e46:	2201      	movs	r2, #1
 8002e48:	2141      	movs	r1, #65	; 0x41
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff ff24 	bl	8002c98 <deBounceInit>
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002e50:	2201      	movs	r2, #1
 8002e52:	4610      	mov	r0, r2
 8002e54:	2141      	movs	r1, #65	; 0x41
 8002e56:	f7ff ff1f 	bl	8002c98 <deBounceInit>
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2141      	movs	r1, #65	; 0x41
 8002e5e:	2004      	movs	r0, #4
 8002e60:	f7ff ff1a 	bl	8002c98 <deBounceInit>
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002e64:	2201      	movs	r2, #1
 8002e66:	2141      	movs	r1, #65	; 0x41
 8002e68:	2003      	movs	r0, #3
}
 8002e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void pushButtonInit()
{
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002e6e:	f7ff bf13 	b.w	8002c98 <deBounceInit>
	...

08002e74 <displayWelcome>:
// DESCRIPTION   : clears the LCD display and displays
//                 Welcome on line 1 of the display
// PARAMETERS    : None
// RETURNS       : nothing
void displayWelcome()
{
 8002e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char stringBuffer[16] =
 8002e76:	2210      	movs	r2, #16
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4668      	mov	r0, sp
 8002e7c:	f000 fe9c 	bl	8003bb8 <memset>
	{ 0 };
	HD44780_ClrScr();
 8002e80:	f7ff ff07 	bl	8002c92 <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "Welcome ");
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <displayWelcome+0x24>)
 8002e86:	4668      	mov	r0, sp
 8002e88:	f000 ff4e 	bl	8003d28 <strcpy>
	HD44780_PutStr(stringBuffer);
 8002e8c:	4668      	mov	r0, sp
 8002e8e:	f7ff feef 	bl	8002c70 <HD44780_PutStr>

}
 8002e92:	b005      	add	sp, #20
 8002e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e98:	08009743 	.word	0x08009743

08002e9c <displayAmount>:
// DESCRIPTION   : clears the LCD display and displays
//                 the $amount received on line 1 of the display
// PARAMETERS    : float - amount to display
// RETURNS       : nothing
void displayAmount(float amount)
{
 8002e9c:	b510      	push	{r4, lr}
	char stringBuffer[16] =	{ 0 };
 8002e9e:	2410      	movs	r4, #16
// DESCRIPTION   : clears the LCD display and displays
//                 the $amount received on line 1 of the display
// PARAMETERS    : float - amount to display
// RETURNS       : nothing
void displayAmount(float amount)
{
 8002ea0:	b088      	sub	sp, #32
	char stringBuffer[16] =	{ 0 };
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	eb0d 0004 	add.w	r0, sp, r4
// DESCRIPTION   : clears the LCD display and displays
//                 the $amount received on line 1 of the display
// PARAMETERS    : float - amount to display
// RETURNS       : nothing
void displayAmount(float amount)
{
 8002eaa:	ed8d 0a03 	vstr	s0, [sp, #12]
	char stringBuffer[16] =	{ 0 };
 8002eae:	f000 fe83 	bl	8003bb8 <memset>
	HD44780_ClrScr();
 8002eb2:	f7ff feee 	bl	8002c92 <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "$%.2f", amount);
 8002eb6:	ed9d 0a03 	vldr	s0, [sp, #12]
 8002eba:	ee10 0a10 	vmov	r0, s0
 8002ebe:	f7fd fb43 	bl	8000548 <__aeabi_f2d>
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <displayAmount+0x44>)
 8002ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8002ec8:	4621      	mov	r1, r4
 8002eca:	eb0d 0004 	add.w	r0, sp, r4
 8002ece:	f000 fef9 	bl	8003cc4 <snprintf>
	HD44780_PutStr(stringBuffer);
 8002ed2:	eb0d 0004 	add.w	r0, sp, r4
 8002ed6:	f7ff fecb 	bl	8002c70 <HD44780_PutStr>
}
 8002eda:	b008      	add	sp, #32
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	0800974c 	.word	0x0800974c

08002ee4 <checkIfAmountRecd>:
// FUNCTION      : checkIfAmountRecd()
// DESCRIPTION   :
// PARAMETERS    : none
// RETURNS       : float, the amount in $ to be debited
float checkIfAmountRecd()
{
 8002ee4:	b513      	push	{r0, r1, r4, lr}
	char stringBuffer[16] =	{ 0 };
	float debitAmount = 0;
 8002ee6:	ac02      	add	r4, sp, #8
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f844 3d04 	str.w	r3, [r4, #-4]!
	printf("waiting for debitAmount to be received on serial port\r\n");
 8002eee:	4809      	ldr	r0, [pc, #36]	; (8002f14 <checkIfAmountRecd+0x30>)
 8002ef0:	f000 feb8 	bl	8003c64 <puts>
	int16_t result = 0;
	result = scanf("%f", &debitAmount);
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <checkIfAmountRecd+0x34>)
 8002ef8:	f000 fecc 	bl	8003c94 <scanf>
	if (result == 0)		//then somehow non-float chars were entered
 8002efc:	b200      	sxth	r0, r0
 8002efe:	b920      	cbnz	r0, 8002f0a <checkIfAmountRecd+0x26>
	{						//and nothing was assigned to %f
		fpurge(stdin); 	//clear the last erroneous char(s) from the input stream
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <checkIfAmountRecd+0x38>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6858      	ldr	r0, [r3, #4]
 8002f06:	f000 faf5 	bl	80034f4 <fpurge>
	}
	return debitAmount;
}
 8002f0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	08009752 	.word	0x08009752
 8002f18:	08009789 	.word	0x08009789
 8002f1c:	200000f8 	.word	0x200000f8

08002f20 <checkOkOrCancel>:
// PARAMETERS    : none
// RETURNS       : int8_t, 3 if cancel pressed, 4 if ok
//                 ok pressed. 0 returned if neither
//                 has pressed.
int8_t checkOkOrCancel()
{
 8002f20:	b508      	push	{r3, lr}
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0)
 8002f22:	220a      	movs	r2, #10
 8002f24:	2141      	movs	r1, #65	; 0x41
 8002f26:	2003      	movs	r0, #3
 8002f28:	f7ff ff12 	bl	8002d50 <deBounceReadPin>
 8002f2c:	b148      	cbz	r0, 8002f42 <checkOkOrCancel+0x22>
	{
		//then the cancel pushbutton has been pressed
		return cancel;
	}
	else if (deBounceReadPin(okPbPin, 'A', 10) == 0)
 8002f2e:	220a      	movs	r2, #10
 8002f30:	2141      	movs	r1, #65	; 0x41
 8002f32:	2004      	movs	r0, #4
 8002f34:	f7ff ff0c 	bl	8002d50 <deBounceReadPin>
 8002f38:	2800      	cmp	r0, #0
		//then ok pressed
		return ok;
	}
	else
	{
		return 0; //as ok or cancel was not pressed.
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2002      	moveq	r0, #2
 8002f3e:	2000      	movne	r0, #0
 8002f40:	bd08      	pop	{r3, pc}
int8_t checkOkOrCancel()
{
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0)
	{
		//then the cancel pushbutton has been pressed
		return cancel;
 8002f42:	2003      	movs	r0, #3
	}
	else
	{
		return 0; //as ok or cancel was not pressed.
	}
}
 8002f44:	bd08      	pop	{r3, pc}
	...

08002f48 <displayOkCancel>:
// FUNCTION      : displayOkOrCancel()
// DESCRIPTION   : displays "OK or Cancel?" on line 2 of LCD
// PARAMETERS    : none
// RETURNS       : nothing.
void displayOkCancel()
{
 8002f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char stringBuffer[16] =
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4668      	mov	r0, sp
 8002f50:	f000 fe32 	bl	8003bb8 <memset>
	{ 0 };
	HD44780_GotoXY(0, 1); //move to second line first position
 8002f54:	2101      	movs	r1, #1
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7ff fe7c 	bl	8002c54 <HD44780_GotoXY>
	snprintf(stringBuffer, 16, "OK or Cancel?");
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <displayOkCancel+0x28>)
 8002f5e:	4668      	mov	r0, sp
 8002f60:	f000 fee2 	bl	8003d28 <strcpy>
	HD44780_PutStr(stringBuffer);
 8002f64:	4668      	mov	r0, sp
 8002f66:	f7ff fe83 	bl	8002c70 <HD44780_PutStr>
}
 8002f6a:	b005      	add	sp, #20
 8002f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f70:	0800978c 	.word	0x0800978c

08002f74 <SystemClock_Config>:
	/* USER CODE END 3 */
}//closing brace for main

/** System Clock Configuration **/
void SystemClock_Config(void)
{
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f76:	b0ad      	sub	sp, #180	; 0xb4

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f78:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f7a:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7c:	2502      	movs	r5, #2
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f7e:	2610      	movs	r6, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f80:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f82:	2707      	movs	r7, #7
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f84:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f86:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f88:	9606      	str	r6, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f8a:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f8c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f8e:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f90:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002f92:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 8002f94:	9613      	str	r6, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f96:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f98:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f9a:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f9c:	f7fe fa8a 	bl	80014b4 <HAL_RCC_OscConfig>
 8002fa0:	b100      	cbz	r0, 8002fa4 <SystemClock_Config+0x30>
 8002fa2:	e7fe      	b.n	8002fa2 <SystemClock_Config+0x2e>
		Error_Handler();
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fac:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fae:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002fb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002fb8:	9305      	str	r3, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fba:	f7fe fced 	bl	8001998 <HAL_RCC_ClockConfig>
 8002fbe:	b100      	cbz	r0, 8002fc2 <SystemClock_Config+0x4e>
 8002fc0:	e7fe      	b.n	8002fc0 <SystemClock_Config+0x4c>
	{
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8002fc2:	f244 0302 	movw	r3, #16386	; 0x4002
 8002fc6:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fcc:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fce:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd0:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fd6:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fd8:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002fda:	961a      	str	r6, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fdc:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fde:	951c      	str	r5, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fe0:	951d      	str	r5, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fe2:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe4:	f7fe fe7e 	bl	8001ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002fe8:	b100      	cbz	r0, 8002fec <SystemClock_Config+0x78>
 8002fea:	e7fe      	b.n	8002fea <SystemClock_Config+0x76>
		Error_Handler();
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ff0:	f7fe f94a 	bl	8001288 <HAL_PWREx_ControlVoltageScaling>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	b100      	cbz	r0, 8002ffa <SystemClock_Config+0x86>
 8002ff8:	e7fe      	b.n	8002ff8 <SystemClock_Config+0x84>
		Error_Handler();
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002ffa:	f7fe fd85 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8002ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003002:	fbb0 f0f3 	udiv	r0, r0, r3
 8003006:	f7fe f847 	bl	8001098 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800300a:	2004      	movs	r0, #4
 800300c:	f7fe f85a 	bl	80010c4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003010:	4622      	mov	r2, r4
 8003012:	4621      	mov	r1, r4
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f7fe f80a 	bl	8001030 <HAL_NVIC_SetPriority>
}
 800301c:	b02d      	add	sp, #180	; 0xb4
 800301e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003020 <main>:
	HD44780_PutStr(stringBuffer);
}

/* USER CODE END 0 */
int main(void)
{
 8003020:	b530      	push	{r4, r5, lr}
 8003022:	b099      	sub	sp, #100	; 0x64
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003024:	f7fd ffcc 	bl	8000fc0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003028:	f7ff ffa4 	bl	8002f74 <SystemClock_Config>
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <main+0x174>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800302e:	485a      	ldr	r0, [pc, #360]	; (8003198 <main+0x178>)
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003032:	f042 0204 	orr.w	r2, r2, #4
 8003036:	64da      	str	r2, [r3, #76]	; 0x4c
 8003038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800303a:	f002 0204 	and.w	r2, r2, #4
 800303e:	9200      	str	r2, [sp, #0]
 8003040:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	64da      	str	r2, [r3, #76]	; 0x4c
 800304a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800304c:	f002 0201 	and.w	r2, r2, #1
 8003050:	9201      	str	r2, [sp, #4]
 8003052:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003056:	f042 0202 	orr.w	r2, r2, #2
 800305a:	64da      	str	r2, [r3, #76]	; 0x4c
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	f003 0302 	and.w	r3, r3, #2
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003064:	9302      	str	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003066:	2108      	movs	r1, #8
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003068:	9b02      	ldr	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800306a:	f7fe f8ff 	bl	800126c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800306e:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2400      	movs	r4, #0

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003072:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	4848      	ldr	r0, [pc, #288]	; (8003198 <main+0x178>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	940f      	str	r4, [sp, #60]	; 0x3c
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003080:	f7fe f832 	bl	80010e8 <HAL_GPIO_Init>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
 8003084:	4845      	ldr	r0, [pc, #276]	; (800319c <main+0x17c>)
	huart2.Init.BaudRate = 9600;
 8003086:	4a46      	ldr	r2, [pc, #280]	; (80031a0 <main+0x180>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003088:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 800308a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800308e:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003092:	230c      	movs	r3, #12
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003094:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003096:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003098:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800309e:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a0:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80030a2:	f7ff fca8 	bl	80029f6 <HAL_UART_Init>
 80030a6:	b100      	cbz	r0, 80030aa <main+0x8a>
 80030a8:	e7fe      	b.n	80030a8 <main+0x88>

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 80030aa:	4c3e      	ldr	r4, [pc, #248]	; (80031a4 <main+0x184>)
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <main+0x188>)
 80030ae:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 0;
 80030b0:	6060      	str	r0, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b2:	60a0      	str	r0, [r4, #8]
	htim1.Init.Period = 9090;
 80030b4:	f242 3382 	movw	r3, #9090	; 0x2382
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b8:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80030ba:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030bc:	4620      	mov	r0, r4
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
 80030be:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030c0:	f7ff f880 	bl	80021c4 <HAL_TIM_PWM_Init>
 80030c4:	b100      	cbz	r0, 80030c8 <main+0xa8>
 80030c6:	e7fe      	b.n	80030c6 <main+0xa6>
	{
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c8:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030ca:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030cc:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030ce:	a903      	add	r1, sp, #12
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff f995 	bl	8002400 <HAL_TIMEx_MasterConfigSynchronization>
 80030d6:	4605      	mov	r5, r0
 80030d8:	b100      	cbz	r0, 80030dc <main+0xbc>
 80030da:	e7fe      	b.n	80030da <main+0xba>
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030dc:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80030de:	4601      	mov	r1, r0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e0:	9306      	str	r3, [sp, #24]
	sConfigOC.Pulse = 4045;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e2:	9008      	str	r0, [sp, #32]
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 80030e4:	f640 73cd 	movw	r3, #4045	; 0xfcd
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030e8:	9009      	str	r0, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ea:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ec:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ee:	900c      	str	r0, [sp, #48]	; 0x30
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80030f0:	4620      	mov	r0, r4
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 80030f2:	9307      	str	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80030f4:	f7ff f94e 	bl	8002394 <HAL_TIM_PWM_Stop>
	/*************************************/
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f8:	462a      	mov	r2, r5
 80030fa:	a906      	add	r1, sp, #24
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff f8b5 	bl	800226c <HAL_TIM_PWM_ConfigChannel>
 8003102:	b100      	cbz	r0, 8003106 <main+0xe6>
 8003104:	e7fe      	b.n	8003104 <main+0xe4>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	{
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800310a:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800310c:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800310e:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8003110:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003112:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003114:	9312      	str	r3, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003116:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003118:	9014      	str	r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800311a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 800311e:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003120:	9017      	str	r0, [sp, #92]	; 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003122:	a90d      	add	r1, sp, #52	; 0x34
 8003124:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003126:	9315      	str	r3, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003128:	f7ff f98c 	bl	8002444 <HAL_TIMEx_ConfigBreakDeadTime>
 800312c:	b100      	cbz	r0, 8003130 <main+0x110>
 800312e:	e7fe      	b.n	800312e <main+0x10e>
	{
		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim1);
 8003130:	4620      	mov	r0, r4
 8003132:	f000 f89f 	bl	8003274 <HAL_TIM_MspPostInit>
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();

	/* USER CODE BEGIN 2 */
	printf("Debit Card State Machine\r\n");
 8003136:	481d      	ldr	r0, [pc, #116]	; (80031ac <main+0x18c>)
		 for OK back from Bank If OK from Bank received. Print
		 Reciept, Record transaction. Move back to State 1.
		 6   Cancel Pressed. Display "Transaction Cancelled" back to
		 state 1
		 */
		switch (transactionState)
 8003138:	4c1d      	ldr	r4, [pc, #116]	; (80031b0 <main+0x190>)
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();

	/* USER CODE BEGIN 2 */
	printf("Debit Card State Machine\r\n");
 800313a:	f000 fd93 	bl	8003c64 <puts>
	HD44780_Init();
 800313e:	f7ff fd31 	bl	8002ba4 <HD44780_Init>
	/* setup Port A bits 0,1,2 and 3, i.e.: PA0-PA3 for input */
	pushButtonInit();
 8003142:	f7ff fe7f 	bl	8002e44 <pushButtonInit>
	displayWelcome();
 8003146:	f7ff fe95 	bl	8002e74 <displayWelcome>
 800314a:	4625      	mov	r5, r4
		 for OK back from Bank If OK from Bank received. Print
		 Reciept, Record transaction. Move back to State 1.
		 6   Cancel Pressed. Display "Transaction Cancelled" back to
		 state 1
		 */
		switch (transactionState)
 800314c:	f994 3000 	ldrsb.w	r3, [r4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d002      	beq.n	800315a <main+0x13a>
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00e      	beq.n	8003176 <main+0x156>
 8003158:	e7fa      	b.n	8003150 <main+0x130>
		{
		case 1: 						 //checking if an amount has been received
			amount = checkIfAmountRecd();
 800315a:	f7ff fec3 	bl	8002ee4 <checkIfAmountRecd>
			if (amount != 0)        	//returns a 0 if an transaction amount has
 800315e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	d0f1      	beq.n	800314c <main+0x12c>
			{ 							//NOT been received on the serial port.
				displayAmount(amount);	//but if we're we've received a debitAmount
 8003168:	f7ff fe98 	bl	8002e9c <displayAmount>
				displayOkCancel();		//so display it and the prompt ok or cancel
 800316c:	f7ff feec 	bl	8002f48 <displayOkCancel>
				transactionState = 2;	//and do that before we move on to state 2
 8003170:	2302      	movs	r3, #2
 8003172:	702b      	strb	r3, [r5, #0]
 8003174:	e7ea      	b.n	800314c <main+0x12c>
			}
			break;
		case 2: 						//amount has been received waiting for
			pbPressed = checkOkOrCancel();
 8003176:	f7ff fed3 	bl	8002f20 <checkOkOrCancel>

			if (pbPressed != 0)
 800317a:	2800      	cmp	r0, #0
 800317c:	d0e6      	beq.n	800314c <main+0x12c>
			{
				if (pbPressed == cancel)
 800317e:	2803      	cmp	r0, #3
 8003180:	d101      	bne.n	8003186 <main+0x166>
				{
					//then cancel was pressed.
					printf("Cancel Pressed\r\n");
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <main+0x194>)
 8003184:	e002      	b.n	800318c <main+0x16c>
				}
				else if (pbPressed == ok)
 8003186:	2802      	cmp	r0, #2
 8003188:	d1e0      	bne.n	800314c <main+0x12c>
				{
					//then ok pressed
					printf("OK Pressed\r\n");
 800318a:	480b      	ldr	r0, [pc, #44]	; (80031b8 <main+0x198>)
 800318c:	f000 fd6a 	bl	8003c64 <puts>
 8003190:	e7dc      	b.n	800314c <main+0x12c>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	48000400 	.word	0x48000400
 800319c:	2000066c 	.word	0x2000066c
 80031a0:	40004400 	.word	0x40004400
 80031a4:	20000630 	.word	0x20000630
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	0800979a 	.word	0x0800979a
 80031b0:	20000000 	.word	0x20000000
 80031b4:	080097b4 	.word	0x080097b4
 80031b8:	080097c4 	.word	0x080097c4

080031bc <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 80031bc:	e7fe      	b.n	80031bc <Error_Handler>
	...

080031c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ce:	f002 0201 	and.w	r2, r2, #1
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031dc:	659a      	str	r2, [r3, #88]	; 0x58
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e6:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ea:	f7fd ff0f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	4611      	mov	r1, r2
 80031f2:	f06f 000b 	mvn.w	r0, #11
 80031f6:	f7fd ff1b 	bl	8001030 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	4611      	mov	r1, r2
 80031fe:	f06f 000a 	mvn.w	r0, #10
 8003202:	f7fd ff15 	bl	8001030 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	4611      	mov	r1, r2
 800320a:	f06f 0009 	mvn.w	r0, #9
 800320e:	f7fd ff0f 	bl	8001030 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	4611      	mov	r1, r2
 8003216:	f06f 0004 	mvn.w	r0, #4
 800321a:	f7fd ff09 	bl	8001030 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	4611      	mov	r1, r2
 8003222:	f06f 0003 	mvn.w	r0, #3
 8003226:	f7fd ff03 	bl	8001030 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	4611      	mov	r1, r2
 800322e:	f06f 0001 	mvn.w	r0, #1
 8003232:	f7fd fefd 	bl	8001030 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	4611      	mov	r1, r2
 800323a:	f04f 30ff 	mov.w	r0, #4294967295
 800323e:	f7fd fef7 	bl	8001030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003242:	b003      	add	sp, #12
 8003244:	f85d fb04 	ldr.w	pc, [sp], #4
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 800324c:	6802      	ldr	r2, [r0, #0]
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_TIM_PWM_MspInit+0x24>)
 8003250:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003252:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8003254:	d10a      	bne.n	800326c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003256:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800325a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800325c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003260:	661a      	str	r2, [r3, #96]	; 0x60
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800326c:	b002      	add	sp, #8
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00

08003274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003276:	6802      	ldr	r2, [r0, #0]
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_TIM_MspPostInit+0x2c>)
 800327a:	429a      	cmp	r2, r3
 800327c:	d10d      	bne.n	800329a <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800328e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003294:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003296:	f7fd ff27 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800329a:	b007      	add	sp, #28
 800329c:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80032a6:	6802      	ldr	r2, [r0, #0]
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_UART_MspInit+0x5c>)
 80032aa:	429a      	cmp	r2, r3
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ac:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80032ae:	d125      	bne.n	80032fc <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032ca:	2304      	movs	r3, #4
 80032cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032d0:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d2:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032d4:	a901      	add	r1, sp, #4
 80032d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032da:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032de:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032e0:	f7fd ff02 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	a901      	add	r1, sp, #4
 80032ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80032f6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f7fd fef6 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032fc:	b006      	add	sp, #24
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	40004400 	.word	0x40004400

08003304 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003306:	f7fd fe67 	bl	8000fd8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800330a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800330e:	f7fd bee6 	b.w	80010de <HAL_SYSTICK_IRQHandler>
	...

08003314 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003314:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8003316:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800331a:	b085      	sub	sp, #20
 800331c:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 800331e:	4810      	ldr	r0, [pc, #64]	; (8003360 <_write+0x4c>)
 8003320:	b292      	uxth	r2, r2
 8003322:	f7ff fa6c 	bl	80027fe <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 8003326:	1e42      	subs	r2, r0, #1
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	2a02      	cmp	r2, #2
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 800332c:	4605      	mov	r5, r0
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 800332e:	d813      	bhi.n	8003358 <_write+0x44>
	{
		char stringBuffer[16] = {0};
 8003330:	2210      	movs	r2, #16
 8003332:	2100      	movs	r1, #0
 8003334:	4668      	mov	r0, sp
 8003336:	f000 fc3f 	bl	8003bb8 <memset>
		HD44780_GotoXY(1,0); //move to second line first position
 800333a:	2100      	movs	r1, #0
 800333c:	2001      	movs	r0, #1
 800333e:	f7ff fc89 	bl	8002c54 <HD44780_GotoXY>
		snprintf(stringBuffer,16,"Error: %i",result);
 8003342:	462b      	mov	r3, r5
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <_write+0x50>)
 8003346:	2110      	movs	r1, #16
 8003348:	4668      	mov	r0, sp
 800334a:	f000 fcbb 	bl	8003cc4 <snprintf>
		HD44780_PutStr(stringBuffer);
 800334e:	4668      	mov	r0, sp
 8003350:	f7ff fc8e 	bl	8002c70 <HD44780_PutStr>

		Error_Handler();
 8003354:	f7ff ff32 	bl	80031bc <Error_Handler>
	}
	return len;
}
 8003358:	4620      	mov	r0, r4
 800335a:	b005      	add	sp, #20
 800335c:	bd30      	pop	{r4, r5, pc}
 800335e:	bf00      	nop
 8003360:	2000066c 	.word	0x2000066c
 8003364:	080097d0 	.word	0x080097d0

08003368 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <_sbrk+0x14>)
 800336a:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 800336c:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800336e:	b909      	cbnz	r1, 8003374 <_sbrk+0xc>
		heap_end = & end;
 8003370:	4903      	ldr	r1, [pc, #12]	; (8003380 <_sbrk+0x18>)
 8003372:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003374:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8003376:	4402      	add	r2, r0
 8003378:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 800337a:	4770      	bx	lr
 800337c:	2000058c 	.word	0x2000058c
 8003380:	200006e0 	.word	0x200006e0

08003384 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <_close+0xc>)
 8003386:	2258      	movs	r2, #88	; 0x58
 8003388:	601a      	str	r2, [r3, #0]
	return -1;
}
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	4770      	bx	lr
 8003390:	200006dc 	.word	0x200006dc

08003394 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003394:	4b02      	ldr	r3, [pc, #8]	; (80033a0 <_fstat+0xc>)
 8003396:	2258      	movs	r2, #88	; 0x58
 8003398:	601a      	str	r2, [r3, #0]
	return -1;
}
 800339a:	f04f 30ff 	mov.w	r0, #4294967295
 800339e:	4770      	bx	lr
 80033a0:	200006dc 	.word	0x200006dc

080033a4 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <_isatty+0xc>)
 80033a6:	2258      	movs	r2, #88	; 0x58
 80033a8:	601a      	str	r2, [r3, #0]
	return 0;
}
 80033aa:	2000      	movs	r0, #0
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	200006dc 	.word	0x200006dc

080033b4 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <_lseek+0xc>)
 80033b6:	2258      	movs	r2, #88	; 0x58
 80033b8:	601a      	str	r2, [r3, #0]
	return -1;
}
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
 80033be:	4770      	bx	lr
 80033c0:	200006dc 	.word	0x200006dc

080033c4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80033c4:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 80033c6:	2201      	movs	r2, #1
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <_read+0x14>)
 80033ce:	f7ff fa70 	bl	80028b2 <HAL_UART_Receive>
	return 1;
}
 80033d2:	2001      	movs	r0, #1
 80033d4:	bd08      	pop	{r3, pc}
 80033d6:	bf00      	nop
 80033d8:	2000066c 	.word	0x2000066c

080033dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033dc:	490f      	ldr	r1, [pc, #60]	; (800341c <SystemInit+0x40>)
 80033de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <SystemInit+0x44>)
 80033ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033ee:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80033fe:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003402:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003408:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003410:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003412:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003414:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003418:	608b      	str	r3, [r1, #8]
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00
 8003420:	40021000 	.word	0x40021000

08003424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800345c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003428:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800342a:	e003      	b.n	8003434 <LoopCopyDataInit>

0800342c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800342e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003430:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003432:	3104      	adds	r1, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003434:	480b      	ldr	r0, [pc, #44]	; (8003464 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003438:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800343a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800343c:	d3f6      	bcc.n	800342c <CopyDataInit>
	ldr	r2, =_sbss
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003440:	e002      	b.n	8003448 <LoopFillZerobss>

08003442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003442:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003444:	f842 3b04 	str.w	r3, [r2], #4

08003448 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <LoopForever+0x16>)
	cmp	r2, r3
 800344a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800344c:	d3f9      	bcc.n	8003442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800344e:	f7ff ffc5 	bl	80033dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003452:	f000 f96b 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003456:	f7ff fde3 	bl	8003020 <main>

0800345a <LoopForever>:

LoopForever:
    b LoopForever
 800345a:	e7fe      	b.n	800345a <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800345c:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003460:	08009b80 	.word	0x08009b80
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003464:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003468:	20000570 	.word	0x20000570
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800346c:	20000570 	.word	0x20000570
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003470:	200006e0 	.word	0x200006e0

08003474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC1_IRQHandler>
	...

08003478 <_fpurge_r>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	460c      	mov	r4, r1
 800347c:	4606      	mov	r6, r0
 800347e:	b118      	cbz	r0, 8003488 <_fpurge_r+0x10>
 8003480:	6983      	ldr	r3, [r0, #24]
 8003482:	b90b      	cbnz	r3, 8003488 <_fpurge_r+0x10>
 8003484:	f003 f820 	bl	80064c8 <__sinit>
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <_fpurge_r+0x70>)
 800348a:	429c      	cmp	r4, r3
 800348c:	d101      	bne.n	8003492 <_fpurge_r+0x1a>
 800348e:	6874      	ldr	r4, [r6, #4]
 8003490:	e008      	b.n	80034a4 <_fpurge_r+0x2c>
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <_fpurge_r+0x74>)
 8003494:	429c      	cmp	r4, r3
 8003496:	d101      	bne.n	800349c <_fpurge_r+0x24>
 8003498:	68b4      	ldr	r4, [r6, #8]
 800349a:	e003      	b.n	80034a4 <_fpurge_r+0x2c>
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <_fpurge_r+0x78>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	bf08      	it	eq
 80034a2:	68f4      	ldreq	r4, [r6, #12]
 80034a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a8:	b922      	cbnz	r2, 80034b4 <_fpurge_r+0x3c>
 80034aa:	2309      	movs	r3, #9
 80034ac:	6033      	str	r3, [r6, #0]
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	f002 0308 	and.w	r3, r2, #8
 80034bc:	b21b      	sxth	r3, r3
 80034be:	b96b      	cbnz	r3, 80034dc <_fpurge_r+0x64>
 80034c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	461d      	mov	r5, r3
 80034c6:	b139      	cbz	r1, 80034d8 <_fpurge_r+0x60>
 80034c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034cc:	4299      	cmp	r1, r3
 80034ce:	d002      	beq.n	80034d6 <_fpurge_r+0x5e>
 80034d0:	4630      	mov	r0, r6
 80034d2:	f000 f86d 	bl	80035b0 <_free_r>
 80034d6:	6365      	str	r5, [r4, #52]	; 0x34
 80034d8:	2000      	movs	r0, #0
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	0793      	lsls	r3, r2, #30
 80034de:	bf0c      	ite	eq
 80034e0:	6963      	ldreq	r3, [r4, #20]
 80034e2:	2300      	movne	r3, #0
 80034e4:	60a3      	str	r3, [r4, #8]
 80034e6:	e7f7      	b.n	80034d8 <_fpurge_r+0x60>
 80034e8:	080099b8 	.word	0x080099b8
 80034ec:	080099d8 	.word	0x080099d8
 80034f0:	080099f8 	.word	0x080099f8

080034f4 <fpurge>:
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <fpurge+0xc>)
 80034f6:	4601      	mov	r1, r0
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f7ff bfbd 	b.w	8003478 <_fpurge_r>
 80034fe:	bf00      	nop
 8003500:	200000f8 	.word	0x200000f8

08003504 <_malloc_trim_r>:
 8003504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	4f25      	ldr	r7, [pc, #148]	; (80035a0 <_malloc_trim_r+0x9c>)
 800350a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80035ac <_malloc_trim_r+0xa8>
 800350e:	4689      	mov	r9, r1
 8003510:	4606      	mov	r6, r0
 8003512:	f000 fb59 	bl	8003bc8 <__malloc_lock>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	685d      	ldr	r5, [r3, #4]
 800351a:	f1a8 0411 	sub.w	r4, r8, #17
 800351e:	f025 0503 	bic.w	r5, r5, #3
 8003522:	442c      	add	r4, r5
 8003524:	ebc9 0404 	rsb	r4, r9, r4
 8003528:	fbb4 f4f8 	udiv	r4, r4, r8
 800352c:	3c01      	subs	r4, #1
 800352e:	fb08 f404 	mul.w	r4, r8, r4
 8003532:	4544      	cmp	r4, r8
 8003534:	da05      	bge.n	8003542 <_malloc_trim_r+0x3e>
 8003536:	4630      	mov	r0, r6
 8003538:	f000 fb47 	bl	8003bca <__malloc_unlock>
 800353c:	2000      	movs	r0, #0
 800353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003542:	2100      	movs	r1, #0
 8003544:	4630      	mov	r0, r6
 8003546:	f000 fb95 	bl	8003c74 <_sbrk_r>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	442b      	add	r3, r5
 800354e:	4298      	cmp	r0, r3
 8003550:	d1f1      	bne.n	8003536 <_malloc_trim_r+0x32>
 8003552:	4261      	negs	r1, r4
 8003554:	4630      	mov	r0, r6
 8003556:	f000 fb8d 	bl	8003c74 <_sbrk_r>
 800355a:	3001      	adds	r0, #1
 800355c:	d110      	bne.n	8003580 <_malloc_trim_r+0x7c>
 800355e:	2100      	movs	r1, #0
 8003560:	4630      	mov	r0, r6
 8003562:	f000 fb87 	bl	8003c74 <_sbrk_r>
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	1a83      	subs	r3, r0, r2
 800356a:	2b0f      	cmp	r3, #15
 800356c:	dde3      	ble.n	8003536 <_malloc_trim_r+0x32>
 800356e:	490d      	ldr	r1, [pc, #52]	; (80035a4 <_malloc_trim_r+0xa0>)
 8003570:	6809      	ldr	r1, [r1, #0]
 8003572:	1a40      	subs	r0, r0, r1
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <_malloc_trim_r+0xa4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6008      	str	r0, [r1, #0]
 800357c:	6053      	str	r3, [r2, #4]
 800357e:	e7da      	b.n	8003536 <_malloc_trim_r+0x32>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <_malloc_trim_r+0xa4>)
 8003584:	1b2d      	subs	r5, r5, r4
 8003586:	f045 0501 	orr.w	r5, r5, #1
 800358a:	605d      	str	r5, [r3, #4]
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	4630      	mov	r0, r6
 8003590:	1b1c      	subs	r4, r3, r4
 8003592:	6014      	str	r4, [r2, #0]
 8003594:	f000 fb19 	bl	8003bca <__malloc_unlock>
 8003598:	2001      	movs	r0, #1
 800359a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800359e:	bf00      	nop
 80035a0:	200000fc 	.word	0x200000fc
 80035a4:	20000508 	.word	0x20000508
 80035a8:	2000059c 	.word	0x2000059c
 80035ac:	00000080 	.word	0x00000080

080035b0 <_free_r>:
 80035b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b4:	4604      	mov	r4, r0
 80035b6:	4688      	mov	r8, r1
 80035b8:	2900      	cmp	r1, #0
 80035ba:	f000 80ad 	beq.w	8003718 <_free_r+0x168>
 80035be:	f000 fb03 	bl	8003bc8 <__malloc_lock>
 80035c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80035c6:	4d55      	ldr	r5, [pc, #340]	; (800371c <_free_r+0x16c>)
 80035c8:	f022 0001 	bic.w	r0, r2, #1
 80035cc:	f1a8 0308 	sub.w	r3, r8, #8
 80035d0:	181f      	adds	r7, r3, r0
 80035d2:	68a9      	ldr	r1, [r5, #8]
 80035d4:	687e      	ldr	r6, [r7, #4]
 80035d6:	428f      	cmp	r7, r1
 80035d8:	f026 0603 	bic.w	r6, r6, #3
 80035dc:	f002 0201 	and.w	r2, r2, #1
 80035e0:	d11b      	bne.n	800361a <_free_r+0x6a>
 80035e2:	4430      	add	r0, r6
 80035e4:	b93a      	cbnz	r2, 80035f6 <_free_r+0x46>
 80035e6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	4410      	add	r0, r2
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	60ca      	str	r2, [r1, #12]
 80035f4:	6091      	str	r1, [r2, #8]
 80035f6:	f040 0201 	orr.w	r2, r0, #1
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	60ab      	str	r3, [r5, #8]
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <_free_r+0x170>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4298      	cmp	r0, r3
 8003604:	d304      	bcc.n	8003610 <_free_r+0x60>
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <_free_r+0x174>)
 8003608:	4620      	mov	r0, r4
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	f7ff ff7a 	bl	8003504 <_malloc_trim_r>
 8003610:	4620      	mov	r0, r4
 8003612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003616:	f000 bad8 	b.w	8003bca <__malloc_unlock>
 800361a:	607e      	str	r6, [r7, #4]
 800361c:	b97a      	cbnz	r2, 800363e <_free_r+0x8e>
 800361e:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8003622:	1a5b      	subs	r3, r3, r1
 8003624:	4408      	add	r0, r1
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	f105 0e08 	add.w	lr, r5, #8
 800362c:	4571      	cmp	r1, lr
 800362e:	d008      	beq.n	8003642 <_free_r+0x92>
 8003630:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003634:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003638:	f8ce 1008 	str.w	r1, [lr, #8]
 800363c:	e002      	b.n	8003644 <_free_r+0x94>
 800363e:	2200      	movs	r2, #0
 8003640:	e000      	b.n	8003644 <_free_r+0x94>
 8003642:	2201      	movs	r2, #1
 8003644:	19b9      	adds	r1, r7, r6
 8003646:	6849      	ldr	r1, [r1, #4]
 8003648:	07c9      	lsls	r1, r1, #31
 800364a:	d40e      	bmi.n	800366a <_free_r+0xba>
 800364c:	4430      	add	r0, r6
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	b942      	cbnz	r2, 8003664 <_free_r+0xb4>
 8003652:	4e35      	ldr	r6, [pc, #212]	; (8003728 <_free_r+0x178>)
 8003654:	42b1      	cmp	r1, r6
 8003656:	d105      	bne.n	8003664 <_free_r+0xb4>
 8003658:	616b      	str	r3, [r5, #20]
 800365a:	612b      	str	r3, [r5, #16]
 800365c:	2201      	movs	r2, #1
 800365e:	60d9      	str	r1, [r3, #12]
 8003660:	6099      	str	r1, [r3, #8]
 8003662:	e002      	b.n	800366a <_free_r+0xba>
 8003664:	68fe      	ldr	r6, [r7, #12]
 8003666:	60ce      	str	r6, [r1, #12]
 8003668:	60b1      	str	r1, [r6, #8]
 800366a:	f040 0101 	orr.w	r1, r0, #1
 800366e:	6059      	str	r1, [r3, #4]
 8003670:	5018      	str	r0, [r3, r0]
 8003672:	2a00      	cmp	r2, #0
 8003674:	d1cc      	bne.n	8003610 <_free_r+0x60>
 8003676:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800367a:	d212      	bcs.n	80036a2 <_free_r+0xf2>
 800367c:	08c0      	lsrs	r0, r0, #3
 800367e:	1081      	asrs	r1, r0, #2
 8003680:	2201      	movs	r2, #1
 8003682:	fa02 f101 	lsl.w	r1, r2, r1
 8003686:	686a      	ldr	r2, [r5, #4]
 8003688:	3001      	adds	r0, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	606a      	str	r2, [r5, #4]
 800368e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003692:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8003696:	6099      	str	r1, [r3, #8]
 8003698:	3a08      	subs	r2, #8
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80036a0:	e038      	b.n	8003714 <_free_r+0x164>
 80036a2:	0a42      	lsrs	r2, r0, #9
 80036a4:	2a04      	cmp	r2, #4
 80036a6:	d802      	bhi.n	80036ae <_free_r+0xfe>
 80036a8:	0982      	lsrs	r2, r0, #6
 80036aa:	3238      	adds	r2, #56	; 0x38
 80036ac:	e015      	b.n	80036da <_free_r+0x12a>
 80036ae:	2a14      	cmp	r2, #20
 80036b0:	d801      	bhi.n	80036b6 <_free_r+0x106>
 80036b2:	325b      	adds	r2, #91	; 0x5b
 80036b4:	e011      	b.n	80036da <_free_r+0x12a>
 80036b6:	2a54      	cmp	r2, #84	; 0x54
 80036b8:	d802      	bhi.n	80036c0 <_free_r+0x110>
 80036ba:	0b02      	lsrs	r2, r0, #12
 80036bc:	326e      	adds	r2, #110	; 0x6e
 80036be:	e00c      	b.n	80036da <_free_r+0x12a>
 80036c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80036c4:	d802      	bhi.n	80036cc <_free_r+0x11c>
 80036c6:	0bc2      	lsrs	r2, r0, #15
 80036c8:	3277      	adds	r2, #119	; 0x77
 80036ca:	e006      	b.n	80036da <_free_r+0x12a>
 80036cc:	f240 5154 	movw	r1, #1364	; 0x554
 80036d0:	428a      	cmp	r2, r1
 80036d2:	bf9a      	itte	ls
 80036d4:	0c82      	lsrls	r2, r0, #18
 80036d6:	327c      	addls	r2, #124	; 0x7c
 80036d8:	227e      	movhi	r2, #126	; 0x7e
 80036da:	1c51      	adds	r1, r2, #1
 80036dc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80036e0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80036e4:	4f0d      	ldr	r7, [pc, #52]	; (800371c <_free_r+0x16c>)
 80036e6:	428e      	cmp	r6, r1
 80036e8:	d10b      	bne.n	8003702 <_free_r+0x152>
 80036ea:	2101      	movs	r1, #1
 80036ec:	1092      	asrs	r2, r2, #2
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4311      	orrs	r1, r2
 80036f6:	6079      	str	r1, [r7, #4]
 80036f8:	4631      	mov	r1, r6
 80036fa:	e008      	b.n	800370e <_free_r+0x15e>
 80036fc:	6889      	ldr	r1, [r1, #8]
 80036fe:	428e      	cmp	r6, r1
 8003700:	d004      	beq.n	800370c <_free_r+0x15c>
 8003702:	684a      	ldr	r2, [r1, #4]
 8003704:	f022 0203 	bic.w	r2, r2, #3
 8003708:	4290      	cmp	r0, r2
 800370a:	d3f7      	bcc.n	80036fc <_free_r+0x14c>
 800370c:	68ce      	ldr	r6, [r1, #12]
 800370e:	60de      	str	r6, [r3, #12]
 8003710:	6099      	str	r1, [r3, #8]
 8003712:	60b3      	str	r3, [r6, #8]
 8003714:	60cb      	str	r3, [r1, #12]
 8003716:	e77b      	b.n	8003610 <_free_r+0x60>
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	200000fc 	.word	0x200000fc
 8003720:	20000504 	.word	0x20000504
 8003724:	20000598 	.word	0x20000598
 8003728:	20000104 	.word	0x20000104

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <__libc_init_array+0x3c>)
 8003730:	4c0e      	ldr	r4, [pc, #56]	; (800376c <__libc_init_array+0x40>)
 8003732:	1ae4      	subs	r4, r4, r3
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2500      	movs	r5, #0
 8003738:	461e      	mov	r6, r3
 800373a:	42a5      	cmp	r5, r4
 800373c:	d004      	beq.n	8003748 <__libc_init_array+0x1c>
 800373e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003742:	4798      	blx	r3
 8003744:	3501      	adds	r5, #1
 8003746:	e7f8      	b.n	800373a <__libc_init_array+0xe>
 8003748:	f005 ffdc 	bl	8009704 <_init>
 800374c:	4c08      	ldr	r4, [pc, #32]	; (8003770 <__libc_init_array+0x44>)
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <__libc_init_array+0x48>)
 8003750:	1ae4      	subs	r4, r4, r3
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2500      	movs	r5, #0
 8003756:	461e      	mov	r6, r3
 8003758:	42a5      	cmp	r5, r4
 800375a:	d004      	beq.n	8003766 <__libc_init_array+0x3a>
 800375c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003760:	4798      	blx	r3
 8003762:	3501      	adds	r5, #1
 8003764:	e7f8      	b.n	8003758 <__libc_init_array+0x2c>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	08009b78 	.word	0x08009b78
 800376c:	08009b78 	.word	0x08009b78
 8003770:	08009b7c 	.word	0x08009b7c
 8003774:	08009b78 	.word	0x08009b78

08003778 <_malloc_r>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	f101 040b 	add.w	r4, r1, #11
 8003780:	2c16      	cmp	r4, #22
 8003782:	b085      	sub	sp, #20
 8003784:	4681      	mov	r9, r0
 8003786:	d903      	bls.n	8003790 <_malloc_r+0x18>
 8003788:	f034 0407 	bics.w	r4, r4, #7
 800378c:	d501      	bpl.n	8003792 <_malloc_r+0x1a>
 800378e:	e002      	b.n	8003796 <_malloc_r+0x1e>
 8003790:	2410      	movs	r4, #16
 8003792:	428c      	cmp	r4, r1
 8003794:	d203      	bcs.n	800379e <_malloc_r+0x26>
 8003796:	230c      	movs	r3, #12
 8003798:	f8c9 3000 	str.w	r3, [r9]
 800379c:	e1ea      	b.n	8003b74 <_malloc_r+0x3fc>
 800379e:	4648      	mov	r0, r9
 80037a0:	f000 fa12 	bl	8003bc8 <__malloc_lock>
 80037a4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80037a8:	4d9e      	ldr	r5, [pc, #632]	; (8003a24 <_malloc_r+0x2ac>)
 80037aa:	d217      	bcs.n	80037dc <_malloc_r+0x64>
 80037ac:	f104 0208 	add.w	r2, r4, #8
 80037b0:	442a      	add	r2, r5
 80037b2:	f1a2 0108 	sub.w	r1, r2, #8
 80037b6:	6856      	ldr	r6, [r2, #4]
 80037b8:	428e      	cmp	r6, r1
 80037ba:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80037be:	d102      	bne.n	80037c6 <_malloc_r+0x4e>
 80037c0:	68d6      	ldr	r6, [r2, #12]
 80037c2:	42b2      	cmp	r2, r6
 80037c4:	d008      	beq.n	80037d8 <_malloc_r+0x60>
 80037c6:	6873      	ldr	r3, [r6, #4]
 80037c8:	68f2      	ldr	r2, [r6, #12]
 80037ca:	68b1      	ldr	r1, [r6, #8]
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	60ca      	str	r2, [r1, #12]
 80037d2:	4433      	add	r3, r6
 80037d4:	6091      	str	r1, [r2, #8]
 80037d6:	e02f      	b.n	8003838 <_malloc_r+0xc0>
 80037d8:	3302      	adds	r3, #2
 80037da:	e03d      	b.n	8003858 <_malloc_r+0xe0>
 80037dc:	0a63      	lsrs	r3, r4, #9
 80037de:	d01a      	beq.n	8003816 <_malloc_r+0x9e>
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d802      	bhi.n	80037ea <_malloc_r+0x72>
 80037e4:	09a3      	lsrs	r3, r4, #6
 80037e6:	3338      	adds	r3, #56	; 0x38
 80037e8:	e018      	b.n	800381c <_malloc_r+0xa4>
 80037ea:	2b14      	cmp	r3, #20
 80037ec:	d801      	bhi.n	80037f2 <_malloc_r+0x7a>
 80037ee:	335b      	adds	r3, #91	; 0x5b
 80037f0:	e014      	b.n	800381c <_malloc_r+0xa4>
 80037f2:	2b54      	cmp	r3, #84	; 0x54
 80037f4:	d802      	bhi.n	80037fc <_malloc_r+0x84>
 80037f6:	0b23      	lsrs	r3, r4, #12
 80037f8:	336e      	adds	r3, #110	; 0x6e
 80037fa:	e00f      	b.n	800381c <_malloc_r+0xa4>
 80037fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003800:	d802      	bhi.n	8003808 <_malloc_r+0x90>
 8003802:	0be3      	lsrs	r3, r4, #15
 8003804:	3377      	adds	r3, #119	; 0x77
 8003806:	e009      	b.n	800381c <_malloc_r+0xa4>
 8003808:	f240 5254 	movw	r2, #1364	; 0x554
 800380c:	4293      	cmp	r3, r2
 800380e:	d804      	bhi.n	800381a <_malloc_r+0xa2>
 8003810:	0ca3      	lsrs	r3, r4, #18
 8003812:	337c      	adds	r3, #124	; 0x7c
 8003814:	e002      	b.n	800381c <_malloc_r+0xa4>
 8003816:	233f      	movs	r3, #63	; 0x3f
 8003818:	e000      	b.n	800381c <_malloc_r+0xa4>
 800381a:	237e      	movs	r3, #126	; 0x7e
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003822:	f1a2 0008 	sub.w	r0, r2, #8
 8003826:	6856      	ldr	r6, [r2, #4]
 8003828:	e00c      	b.n	8003844 <_malloc_r+0xcc>
 800382a:	2900      	cmp	r1, #0
 800382c:	68f1      	ldr	r1, [r6, #12]
 800382e:	db08      	blt.n	8003842 <_malloc_r+0xca>
 8003830:	68b3      	ldr	r3, [r6, #8]
 8003832:	60d9      	str	r1, [r3, #12]
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	18b3      	adds	r3, r6, r2
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e1a3      	b.n	8003b8a <_malloc_r+0x412>
 8003842:	460e      	mov	r6, r1
 8003844:	4286      	cmp	r6, r0
 8003846:	d006      	beq.n	8003856 <_malloc_r+0xde>
 8003848:	6872      	ldr	r2, [r6, #4]
 800384a:	f022 0203 	bic.w	r2, r2, #3
 800384e:	1b11      	subs	r1, r2, r4
 8003850:	290f      	cmp	r1, #15
 8003852:	ddea      	ble.n	800382a <_malloc_r+0xb2>
 8003854:	3b01      	subs	r3, #1
 8003856:	3301      	adds	r3, #1
 8003858:	4a72      	ldr	r2, [pc, #456]	; (8003a24 <_malloc_r+0x2ac>)
 800385a:	692e      	ldr	r6, [r5, #16]
 800385c:	f102 0708 	add.w	r7, r2, #8
 8003860:	42be      	cmp	r6, r7
 8003862:	4639      	mov	r1, r7
 8003864:	d079      	beq.n	800395a <_malloc_r+0x1e2>
 8003866:	6870      	ldr	r0, [r6, #4]
 8003868:	f020 0003 	bic.w	r0, r0, #3
 800386c:	ebc4 0e00 	rsb	lr, r4, r0
 8003870:	f1be 0f0f 	cmp.w	lr, #15
 8003874:	dd0d      	ble.n	8003892 <_malloc_r+0x11a>
 8003876:	1933      	adds	r3, r6, r4
 8003878:	f044 0401 	orr.w	r4, r4, #1
 800387c:	6074      	str	r4, [r6, #4]
 800387e:	6153      	str	r3, [r2, #20]
 8003880:	6113      	str	r3, [r2, #16]
 8003882:	f04e 0201 	orr.w	r2, lr, #1
 8003886:	60df      	str	r7, [r3, #12]
 8003888:	609f      	str	r7, [r3, #8]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	f843 e00e 	str.w	lr, [r3, lr]
 8003890:	e17b      	b.n	8003b8a <_malloc_r+0x412>
 8003892:	f1be 0f00 	cmp.w	lr, #0
 8003896:	6157      	str	r7, [r2, #20]
 8003898:	6117      	str	r7, [r2, #16]
 800389a:	db05      	blt.n	80038a8 <_malloc_r+0x130>
 800389c:	4430      	add	r0, r6
 800389e:	6843      	ldr	r3, [r0, #4]
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6043      	str	r3, [r0, #4]
 80038a6:	e170      	b.n	8003b8a <_malloc_r+0x412>
 80038a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80038ac:	d215      	bcs.n	80038da <_malloc_r+0x162>
 80038ae:	08c0      	lsrs	r0, r0, #3
 80038b0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80038b4:	2701      	movs	r7, #1
 80038b6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80038ba:	6857      	ldr	r7, [r2, #4]
 80038bc:	3001      	adds	r0, #1
 80038be:	ea4e 0707 	orr.w	r7, lr, r7
 80038c2:	6057      	str	r7, [r2, #4]
 80038c4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80038c8:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80038cc:	f8c6 e008 	str.w	lr, [r6, #8]
 80038d0:	3f08      	subs	r7, #8
 80038d2:	60f7      	str	r7, [r6, #12]
 80038d4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80038d8:	e03d      	b.n	8003956 <_malloc_r+0x1de>
 80038da:	0a42      	lsrs	r2, r0, #9
 80038dc:	2a04      	cmp	r2, #4
 80038de:	d802      	bhi.n	80038e6 <_malloc_r+0x16e>
 80038e0:	0982      	lsrs	r2, r0, #6
 80038e2:	3238      	adds	r2, #56	; 0x38
 80038e4:	e015      	b.n	8003912 <_malloc_r+0x19a>
 80038e6:	2a14      	cmp	r2, #20
 80038e8:	d801      	bhi.n	80038ee <_malloc_r+0x176>
 80038ea:	325b      	adds	r2, #91	; 0x5b
 80038ec:	e011      	b.n	8003912 <_malloc_r+0x19a>
 80038ee:	2a54      	cmp	r2, #84	; 0x54
 80038f0:	d802      	bhi.n	80038f8 <_malloc_r+0x180>
 80038f2:	0b02      	lsrs	r2, r0, #12
 80038f4:	326e      	adds	r2, #110	; 0x6e
 80038f6:	e00c      	b.n	8003912 <_malloc_r+0x19a>
 80038f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80038fc:	d802      	bhi.n	8003904 <_malloc_r+0x18c>
 80038fe:	0bc2      	lsrs	r2, r0, #15
 8003900:	3277      	adds	r2, #119	; 0x77
 8003902:	e006      	b.n	8003912 <_malloc_r+0x19a>
 8003904:	f240 5754 	movw	r7, #1364	; 0x554
 8003908:	42ba      	cmp	r2, r7
 800390a:	bf9a      	itte	ls
 800390c:	0c82      	lsrls	r2, r0, #18
 800390e:	327c      	addls	r2, #124	; 0x7c
 8003910:	227e      	movhi	r2, #126	; 0x7e
 8003912:	1c57      	adds	r7, r2, #1
 8003914:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003918:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800391c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003a24 <_malloc_r+0x2ac>
 8003920:	45be      	cmp	lr, r7
 8003922:	d10d      	bne.n	8003940 <_malloc_r+0x1c8>
 8003924:	2001      	movs	r0, #1
 8003926:	1092      	asrs	r2, r2, #2
 8003928:	fa00 f202 	lsl.w	r2, r0, r2
 800392c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003930:	4310      	orrs	r0, r2
 8003932:	f8cc 0004 	str.w	r0, [ip, #4]
 8003936:	4672      	mov	r2, lr
 8003938:	e009      	b.n	800394e <_malloc_r+0x1d6>
 800393a:	68bf      	ldr	r7, [r7, #8]
 800393c:	45be      	cmp	lr, r7
 800393e:	d004      	beq.n	800394a <_malloc_r+0x1d2>
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	f022 0203 	bic.w	r2, r2, #3
 8003946:	4290      	cmp	r0, r2
 8003948:	d3f7      	bcc.n	800393a <_malloc_r+0x1c2>
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	46be      	mov	lr, r7
 800394e:	60f2      	str	r2, [r6, #12]
 8003950:	f8c6 e008 	str.w	lr, [r6, #8]
 8003954:	6096      	str	r6, [r2, #8]
 8003956:	f8ce 600c 	str.w	r6, [lr, #12]
 800395a:	2001      	movs	r0, #1
 800395c:	109a      	asrs	r2, r3, #2
 800395e:	fa00 f202 	lsl.w	r2, r0, r2
 8003962:	6868      	ldr	r0, [r5, #4]
 8003964:	4282      	cmp	r2, r0
 8003966:	d85f      	bhi.n	8003a28 <_malloc_r+0x2b0>
 8003968:	4202      	tst	r2, r0
 800396a:	d106      	bne.n	800397a <_malloc_r+0x202>
 800396c:	f023 0303 	bic.w	r3, r3, #3
 8003970:	0052      	lsls	r2, r2, #1
 8003972:	4202      	tst	r2, r0
 8003974:	f103 0304 	add.w	r3, r3, #4
 8003978:	d0fa      	beq.n	8003970 <_malloc_r+0x1f8>
 800397a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800397e:	46c2      	mov	sl, r8
 8003980:	469c      	mov	ip, r3
 8003982:	f8da 600c 	ldr.w	r6, [sl, #12]
 8003986:	4556      	cmp	r6, sl
 8003988:	d02c      	beq.n	80039e4 <_malloc_r+0x26c>
 800398a:	6870      	ldr	r0, [r6, #4]
 800398c:	68f7      	ldr	r7, [r6, #12]
 800398e:	f020 0003 	bic.w	r0, r0, #3
 8003992:	ebc4 0e00 	rsb	lr, r4, r0
 8003996:	f1be 0f0f 	cmp.w	lr, #15
 800399a:	dd11      	ble.n	80039c0 <_malloc_r+0x248>
 800399c:	1933      	adds	r3, r6, r4
 800399e:	f044 0401 	orr.w	r4, r4, #1
 80039a2:	6074      	str	r4, [r6, #4]
 80039a4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80039a8:	60d7      	str	r7, [r2, #12]
 80039aa:	60ba      	str	r2, [r7, #8]
 80039ac:	f04e 0201 	orr.w	r2, lr, #1
 80039b0:	616b      	str	r3, [r5, #20]
 80039b2:	612b      	str	r3, [r5, #16]
 80039b4:	60d9      	str	r1, [r3, #12]
 80039b6:	6099      	str	r1, [r3, #8]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	f843 e00e 	str.w	lr, [r3, lr]
 80039be:	e00b      	b.n	80039d8 <_malloc_r+0x260>
 80039c0:	f1be 0f00 	cmp.w	lr, #0
 80039c4:	db0c      	blt.n	80039e0 <_malloc_r+0x268>
 80039c6:	1833      	adds	r3, r6, r0
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80039d4:	60df      	str	r7, [r3, #12]
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	4648      	mov	r0, r9
 80039da:	f000 f8f6 	bl	8003bca <__malloc_unlock>
 80039de:	e0d8      	b.n	8003b92 <_malloc_r+0x41a>
 80039e0:	463e      	mov	r6, r7
 80039e2:	e7d0      	b.n	8003986 <_malloc_r+0x20e>
 80039e4:	f10c 0c01 	add.w	ip, ip, #1
 80039e8:	f01c 0f03 	tst.w	ip, #3
 80039ec:	f10a 0a08 	add.w	sl, sl, #8
 80039f0:	d1c7      	bne.n	8003982 <_malloc_r+0x20a>
 80039f2:	0798      	lsls	r0, r3, #30
 80039f4:	d104      	bne.n	8003a00 <_malloc_r+0x288>
 80039f6:	686b      	ldr	r3, [r5, #4]
 80039f8:	ea23 0302 	bic.w	r3, r3, r2
 80039fc:	606b      	str	r3, [r5, #4]
 80039fe:	e005      	b.n	8003a0c <_malloc_r+0x294>
 8003a00:	f858 0908 	ldr.w	r0, [r8], #-8
 8003a04:	4580      	cmp	r8, r0
 8003a06:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a0a:	d0f2      	beq.n	80039f2 <_malloc_r+0x27a>
 8003a0c:	6868      	ldr	r0, [r5, #4]
 8003a0e:	0052      	lsls	r2, r2, #1
 8003a10:	4282      	cmp	r2, r0
 8003a12:	d809      	bhi.n	8003a28 <_malloc_r+0x2b0>
 8003a14:	b142      	cbz	r2, 8003a28 <_malloc_r+0x2b0>
 8003a16:	4663      	mov	r3, ip
 8003a18:	4202      	tst	r2, r0
 8003a1a:	d1ae      	bne.n	800397a <_malloc_r+0x202>
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	0052      	lsls	r2, r2, #1
 8003a20:	e7fa      	b.n	8003a18 <_malloc_r+0x2a0>
 8003a22:	bf00      	nop
 8003a24:	200000fc 	.word	0x200000fc
 8003a28:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003a2c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003a30:	f026 0603 	bic.w	r6, r6, #3
 8003a34:	42b4      	cmp	r4, r6
 8003a36:	d803      	bhi.n	8003a40 <_malloc_r+0x2c8>
 8003a38:	1b33      	subs	r3, r6, r4
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	f300 809c 	bgt.w	8003b78 <_malloc_r+0x400>
 8003a40:	4a56      	ldr	r2, [pc, #344]	; (8003b9c <_malloc_r+0x424>)
 8003a42:	4957      	ldr	r1, [pc, #348]	; (8003ba0 <_malloc_r+0x428>)
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	6808      	ldr	r0, [r1, #0]
 8003a48:	9101      	str	r1, [sp, #4]
 8003a4a:	f102 0810 	add.w	r8, r2, #16
 8003a4e:	4a55      	ldr	r2, [pc, #340]	; (8003ba4 <_malloc_r+0x42c>)
 8003a50:	9203      	str	r2, [sp, #12]
 8003a52:	3001      	adds	r0, #1
 8003a54:	bf18      	it	ne
 8003a56:	f102 31ff 	addne.w	r1, r2, #4294967295
 8003a5a:	44a0      	add	r8, r4
 8003a5c:	bf1e      	ittt	ne
 8003a5e:	4488      	addne	r8, r1
 8003a60:	4251      	negne	r1, r2
 8003a62:	ea01 0808 	andne.w	r8, r1, r8
 8003a66:	eb0b 0306 	add.w	r3, fp, r6
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	4648      	mov	r0, r9
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	f000 f900 	bl	8003c74 <_sbrk_r>
 8003a74:	1c42      	adds	r2, r0, #1
 8003a76:	4607      	mov	r7, r0
 8003a78:	d06f      	beq.n	8003b5a <_malloc_r+0x3e2>
 8003a7a:	9b02      	ldr	r3, [sp, #8]
 8003a7c:	9a03      	ldr	r2, [sp, #12]
 8003a7e:	4283      	cmp	r3, r0
 8003a80:	d901      	bls.n	8003a86 <_malloc_r+0x30e>
 8003a82:	45ab      	cmp	fp, r5
 8003a84:	d169      	bne.n	8003b5a <_malloc_r+0x3e2>
 8003a86:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003bb0 <_malloc_r+0x438>
 8003a8a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003bb4 <_malloc_r+0x43c>
 8003a8e:	f8da 0000 	ldr.w	r0, [sl]
 8003a92:	42bb      	cmp	r3, r7
 8003a94:	4440      	add	r0, r8
 8003a96:	f8ca 0000 	str.w	r0, [sl]
 8003a9a:	d108      	bne.n	8003aae <_malloc_r+0x336>
 8003a9c:	ea13 0f0c 	tst.w	r3, ip
 8003aa0:	d105      	bne.n	8003aae <_malloc_r+0x336>
 8003aa2:	68ab      	ldr	r3, [r5, #8]
 8003aa4:	4446      	add	r6, r8
 8003aa6:	f046 0601 	orr.w	r6, r6, #1
 8003aaa:	605e      	str	r6, [r3, #4]
 8003aac:	e049      	b.n	8003b42 <_malloc_r+0x3ca>
 8003aae:	9901      	ldr	r1, [sp, #4]
 8003ab0:	f8d1 e000 	ldr.w	lr, [r1]
 8003ab4:	f1be 3fff 	cmp.w	lr, #4294967295
 8003ab8:	bf15      	itete	ne
 8003aba:	1afb      	subne	r3, r7, r3
 8003abc:	4b38      	ldreq	r3, [pc, #224]	; (8003ba0 <_malloc_r+0x428>)
 8003abe:	181b      	addne	r3, r3, r0
 8003ac0:	601f      	streq	r7, [r3, #0]
 8003ac2:	bf18      	it	ne
 8003ac4:	f8ca 3000 	strne.w	r3, [sl]
 8003ac8:	f017 0307 	ands.w	r3, r7, #7
 8003acc:	bf1c      	itt	ne
 8003ace:	f1c3 0308 	rsbne	r3, r3, #8
 8003ad2:	18ff      	addne	r7, r7, r3
 8003ad4:	44b8      	add	r8, r7
 8003ad6:	441a      	add	r2, r3
 8003ad8:	ea08 080c 	and.w	r8, r8, ip
 8003adc:	ebc8 0802 	rsb	r8, r8, r2
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	4648      	mov	r0, r9
 8003ae4:	f000 f8c6 	bl	8003c74 <_sbrk_r>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	bf04      	itt	eq
 8003aec:	4638      	moveq	r0, r7
 8003aee:	f04f 0800 	moveq.w	r8, #0
 8003af2:	f8da 3000 	ldr.w	r3, [sl]
 8003af6:	60af      	str	r7, [r5, #8]
 8003af8:	1bc2      	subs	r2, r0, r7
 8003afa:	4442      	add	r2, r8
 8003afc:	4443      	add	r3, r8
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	45ab      	cmp	fp, r5
 8003b04:	f8ca 3000 	str.w	r3, [sl]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	d01a      	beq.n	8003b42 <_malloc_r+0x3ca>
 8003b0c:	2e0f      	cmp	r6, #15
 8003b0e:	d802      	bhi.n	8003b16 <_malloc_r+0x39e>
 8003b10:	2301      	movs	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e021      	b.n	8003b5a <_malloc_r+0x3e2>
 8003b16:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003b1a:	3e0c      	subs	r6, #12
 8003b1c:	f026 0607 	bic.w	r6, r6, #7
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	4333      	orrs	r3, r6
 8003b26:	f8cb 3004 	str.w	r3, [fp, #4]
 8003b2a:	eb0b 0306 	add.w	r3, fp, r6
 8003b2e:	2205      	movs	r2, #5
 8003b30:	2e0f      	cmp	r6, #15
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	d904      	bls.n	8003b42 <_malloc_r+0x3ca>
 8003b38:	f10b 0108 	add.w	r1, fp, #8
 8003b3c:	4648      	mov	r0, r9
 8003b3e:	f7ff fd37 	bl	80035b0 <_free_r>
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <_malloc_r+0x430>)
 8003b44:	f8da 3000 	ldr.w	r3, [sl]
 8003b48:	6811      	ldr	r1, [r2, #0]
 8003b4a:	428b      	cmp	r3, r1
 8003b4c:	bf88      	it	hi
 8003b4e:	6013      	strhi	r3, [r2, #0]
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <_malloc_r+0x434>)
 8003b52:	6811      	ldr	r1, [r2, #0]
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf88      	it	hi
 8003b58:	6013      	strhi	r3, [r2, #0]
 8003b5a:	68ab      	ldr	r3, [r5, #8]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	f022 0203 	bic.w	r2, r2, #3
 8003b62:	4294      	cmp	r4, r2
 8003b64:	eba2 0304 	sub.w	r3, r2, r4
 8003b68:	d801      	bhi.n	8003b6e <_malloc_r+0x3f6>
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	dc04      	bgt.n	8003b78 <_malloc_r+0x400>
 8003b6e:	4648      	mov	r0, r9
 8003b70:	f000 f82b 	bl	8003bca <__malloc_unlock>
 8003b74:	2600      	movs	r6, #0
 8003b76:	e00c      	b.n	8003b92 <_malloc_r+0x41a>
 8003b78:	68ae      	ldr	r6, [r5, #8]
 8003b7a:	f044 0201 	orr.w	r2, r4, #1
 8003b7e:	4434      	add	r4, r6
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6072      	str	r2, [r6, #4]
 8003b86:	60ac      	str	r4, [r5, #8]
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	4648      	mov	r0, r9
 8003b8c:	f000 f81d 	bl	8003bca <__malloc_unlock>
 8003b90:	3608      	adds	r6, #8
 8003b92:	4630      	mov	r0, r6
 8003b94:	b005      	add	sp, #20
 8003b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000598 	.word	0x20000598
 8003ba0:	20000508 	.word	0x20000508
 8003ba4:	00000080 	.word	0x00000080
 8003ba8:	20000594 	.word	0x20000594
 8003bac:	20000590 	.word	0x20000590
 8003bb0:	2000059c 	.word	0x2000059c
 8003bb4:	0000007f 	.word	0x0000007f

08003bb8 <memset>:
 8003bb8:	4402      	add	r2, r0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d002      	beq.n	8003bc6 <memset+0xe>
 8003bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc4:	e7fa      	b.n	8003bbc <memset+0x4>
 8003bc6:	4770      	bx	lr

08003bc8 <__malloc_lock>:
 8003bc8:	4770      	bx	lr

08003bca <__malloc_unlock>:
 8003bca:	4770      	bx	lr

08003bcc <_puts_r>:
 8003bcc:	b530      	push	{r4, r5, lr}
 8003bce:	4605      	mov	r5, r0
 8003bd0:	b089      	sub	sp, #36	; 0x24
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	f7fc fafb 	bl	80001d0 <strlen>
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <_puts_r+0x88>)
 8003bdc:	9306      	str	r3, [sp, #24]
 8003bde:	2301      	movs	r3, #1
 8003be0:	9005      	str	r0, [sp, #20]
 8003be2:	9307      	str	r3, [sp, #28]
 8003be4:	4418      	add	r0, r3
 8003be6:	ab04      	add	r3, sp, #16
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	2302      	movs	r3, #2
 8003bec:	9404      	str	r4, [sp, #16]
 8003bee:	9003      	str	r0, [sp, #12]
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	b125      	cbz	r5, 8003bfe <_puts_r+0x32>
 8003bf4:	69ab      	ldr	r3, [r5, #24]
 8003bf6:	b913      	cbnz	r3, 8003bfe <_puts_r+0x32>
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f002 fc65 	bl	80064c8 <__sinit>
 8003bfe:	69ab      	ldr	r3, [r5, #24]
 8003c00:	68ac      	ldr	r4, [r5, #8]
 8003c02:	b913      	cbnz	r3, 8003c0a <_puts_r+0x3e>
 8003c04:	4628      	mov	r0, r5
 8003c06:	f002 fc5f 	bl	80064c8 <__sinit>
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <_puts_r+0x8c>)
 8003c0c:	429c      	cmp	r4, r3
 8003c0e:	d101      	bne.n	8003c14 <_puts_r+0x48>
 8003c10:	686c      	ldr	r4, [r5, #4]
 8003c12:	e008      	b.n	8003c26 <_puts_r+0x5a>
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_puts_r+0x90>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d101      	bne.n	8003c1e <_puts_r+0x52>
 8003c1a:	68ac      	ldr	r4, [r5, #8]
 8003c1c:	e003      	b.n	8003c26 <_puts_r+0x5a>
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <_puts_r+0x94>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	bf08      	it	eq
 8003c24:	68ec      	ldreq	r4, [r5, #12]
 8003c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c2a:	049a      	lsls	r2, r3, #18
 8003c2c:	d406      	bmi.n	8003c3c <_puts_r+0x70>
 8003c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	6662      	str	r2, [r4, #100]	; 0x64
 8003c3c:	aa01      	add	r2, sp, #4
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	f002 fd13 	bl	800666c <__sfvwrite_r>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	bf14      	ite	ne
 8003c4a:	f04f 30ff 	movne.w	r0, #4294967295
 8003c4e:	200a      	moveq	r0, #10
 8003c50:	b009      	add	sp, #36	; 0x24
 8003c52:	bd30      	pop	{r4, r5, pc}
 8003c54:	0800982c 	.word	0x0800982c
 8003c58:	080099b8 	.word	0x080099b8
 8003c5c:	080099d8 	.word	0x080099d8
 8003c60:	080099f8 	.word	0x080099f8

08003c64 <puts>:
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <puts+0xc>)
 8003c66:	4601      	mov	r1, r0
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f7ff bfaf 	b.w	8003bcc <_puts_r>
 8003c6e:	bf00      	nop
 8003c70:	200000f8 	.word	0x200000f8

08003c74 <_sbrk_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4c06      	ldr	r4, [pc, #24]	; (8003c90 <_sbrk_r+0x1c>)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	f7ff fb72 	bl	8003368 <_sbrk>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_sbrk_r+0x1a>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_sbrk_r+0x1a>
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	200006dc 	.word	0x200006dc

08003c94 <scanf>:
 8003c94:	b40f      	push	{r0, r1, r2, r3}
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <scanf+0x2c>)
 8003c98:	b513      	push	{r0, r1, r4, lr}
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	b124      	cbz	r4, 8003ca8 <scanf+0x14>
 8003c9e:	69a3      	ldr	r3, [r4, #24]
 8003ca0:	b913      	cbnz	r3, 8003ca8 <scanf+0x14>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f002 fc10 	bl	80064c8 <__sinit>
 8003ca8:	ab05      	add	r3, sp, #20
 8003caa:	9a04      	ldr	r2, [sp, #16]
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f001 fd6f 	bl	8005794 <_vfscanf_r>
 8003cb6:	b002      	add	sp, #8
 8003cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbc:	b004      	add	sp, #16
 8003cbe:	4770      	bx	lr
 8003cc0:	200000f8 	.word	0x200000f8

08003cc4 <snprintf>:
 8003cc4:	b40c      	push	{r2, r3}
 8003cc6:	b530      	push	{r4, r5, lr}
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <snprintf+0x60>)
 8003cca:	1e0c      	subs	r4, r1, #0
 8003ccc:	b09d      	sub	sp, #116	; 0x74
 8003cce:	681d      	ldr	r5, [r3, #0]
 8003cd0:	da04      	bge.n	8003cdc <snprintf+0x18>
 8003cd2:	238b      	movs	r3, #139	; 0x8b
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	e01e      	b.n	8003d1a <snprintf+0x56>
 8003cdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ce4:	bf14      	ite	ne
 8003ce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cea:	4623      	moveq	r3, r4
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	9006      	str	r0, [sp, #24]
 8003cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cfe:	ab21      	add	r3, sp, #132	; 0x84
 8003d00:	a902      	add	r1, sp, #8
 8003d02:	4628      	mov	r0, r5
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f000 f817 	bl	8003d38 <_svfprintf_r>
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	bfbc      	itt	lt
 8003d0e:	238b      	movlt	r3, #139	; 0x8b
 8003d10:	602b      	strlt	r3, [r5, #0]
 8003d12:	b114      	cbz	r4, 8003d1a <snprintf+0x56>
 8003d14:	9b02      	ldr	r3, [sp, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	b01d      	add	sp, #116	; 0x74
 8003d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d20:	b002      	add	sp, #8
 8003d22:	4770      	bx	lr
 8003d24:	200000f8 	.word	0x200000f8

08003d28 <strcpy>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d2e:	f803 2b01 	strb.w	r2, [r3], #1
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d1f9      	bne.n	8003d2a <strcpy+0x2>
 8003d36:	4770      	bx	lr

08003d38 <_svfprintf_r>:
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0bd      	sub	sp, #244	; 0xf4
 8003d3e:	468b      	mov	fp, r1
 8003d40:	9205      	str	r2, [sp, #20]
 8003d42:	461f      	mov	r7, r3
 8003d44:	4682      	mov	sl, r0
 8003d46:	f002 fe2d 	bl	80069a4 <_localeconv_r>
 8003d4a:	6803      	ldr	r3, [r0, #0]
 8003d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fa3e 	bl	80001d0 <strlen>
 8003d54:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003d58:	9008      	str	r0, [sp, #32]
 8003d5a:	0619      	lsls	r1, r3, #24
 8003d5c:	d515      	bpl.n	8003d8a <_svfprintf_r+0x52>
 8003d5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003d62:	b993      	cbnz	r3, 8003d8a <_svfprintf_r+0x52>
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4650      	mov	r0, sl
 8003d68:	f7ff fd06 	bl	8003778 <_malloc_r>
 8003d6c:	f8cb 0000 	str.w	r0, [fp]
 8003d70:	f8cb 0010 	str.w	r0, [fp, #16]
 8003d74:	b930      	cbnz	r0, 8003d84 <_svfprintf_r+0x4c>
 8003d76:	230c      	movs	r3, #12
 8003d78:	f8ca 3000 	str.w	r3, [sl]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f000 bf95 	b.w	8004cae <_svfprintf_r+0xf76>
 8003d84:	2340      	movs	r3, #64	; 0x40
 8003d86:	f8cb 3014 	str.w	r3, [fp, #20]
 8003d8a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8003ff0 <_svfprintf_r+0x2b8>
 8003d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d92:	2300      	movs	r3, #0
 8003d94:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d96:	941f      	str	r4, [sp, #124]	; 0x7c
 8003d98:	9321      	str	r3, [sp, #132]	; 0x84
 8003d9a:	9320      	str	r3, [sp, #128]	; 0x80
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	9311      	str	r3, [sp, #68]	; 0x44
 8003da0:	9310      	str	r3, [sp, #64]	; 0x40
 8003da2:	930a      	str	r3, [sp, #40]	; 0x28
 8003da4:	9d05      	ldr	r5, [sp, #20]
 8003da6:	462b      	mov	r3, r5
 8003da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dac:	b11a      	cbz	r2, 8003db6 <_svfprintf_r+0x7e>
 8003dae:	2a25      	cmp	r2, #37	; 0x25
 8003db0:	d001      	beq.n	8003db6 <_svfprintf_r+0x7e>
 8003db2:	461d      	mov	r5, r3
 8003db4:	e7f7      	b.n	8003da6 <_svfprintf_r+0x6e>
 8003db6:	9b05      	ldr	r3, [sp, #20]
 8003db8:	1aee      	subs	r6, r5, r3
 8003dba:	d017      	beq.n	8003dec <_svfprintf_r+0xb4>
 8003dbc:	e884 0048 	stmia.w	r4, {r3, r6}
 8003dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dc2:	4433      	add	r3, r6
 8003dc4:	9321      	str	r3, [sp, #132]	; 0x84
 8003dc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dc8:	3301      	adds	r3, #1
 8003dca:	2b07      	cmp	r3, #7
 8003dcc:	9320      	str	r3, [sp, #128]	; 0x80
 8003dce:	dc01      	bgt.n	8003dd4 <_svfprintf_r+0x9c>
 8003dd0:	3408      	adds	r4, #8
 8003dd2:	e008      	b.n	8003de6 <_svfprintf_r+0xae>
 8003dd4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	4650      	mov	r0, sl
 8003dda:	f004 fd9f 	bl	800891c <__ssprint_r>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f040 862c 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8003de4:	ac2c      	add	r4, sp, #176	; 0xb0
 8003de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de8:	4433      	add	r3, r6
 8003dea:	930a      	str	r3, [sp, #40]	; 0x28
 8003dec:	782b      	ldrb	r3, [r5, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 861d 	beq.w	8004a2e <_svfprintf_r+0xcf6>
 8003df4:	2200      	movs	r2, #0
 8003df6:	1c6b      	adds	r3, r5, #1
 8003df8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	f04f 39ff 	mov.w	r9, #4294967295
 8003e02:	9209      	str	r2, [sp, #36]	; 0x24
 8003e04:	4615      	mov	r5, r2
 8003e06:	200a      	movs	r0, #10
 8003e08:	1c5e      	adds	r6, r3, #1
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	9605      	str	r6, [sp, #20]
 8003e0e:	9302      	str	r3, [sp, #8]
 8003e10:	9b02      	ldr	r3, [sp, #8]
 8003e12:	3b20      	subs	r3, #32
 8003e14:	2b58      	cmp	r3, #88	; 0x58
 8003e16:	f200 8263 	bhi.w	80042e0 <_svfprintf_r+0x5a8>
 8003e1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003e1e:	005c      	.short	0x005c
 8003e20:	02610261 	.word	0x02610261
 8003e24:	0261006b 	.word	0x0261006b
 8003e28:	02610261 	.word	0x02610261
 8003e2c:	02610261 	.word	0x02610261
 8003e30:	006e0261 	.word	0x006e0261
 8003e34:	02610059 	.word	0x02610059
 8003e38:	007c0079 	.word	0x007c0079
 8003e3c:	00a30261 	.word	0x00a30261
 8003e40:	00a600a6 	.word	0x00a600a6
 8003e44:	00a600a6 	.word	0x00a600a6
 8003e48:	00a600a6 	.word	0x00a600a6
 8003e4c:	00a600a6 	.word	0x00a600a6
 8003e50:	026100a6 	.word	0x026100a6
 8003e54:	02610261 	.word	0x02610261
 8003e58:	02610261 	.word	0x02610261
 8003e5c:	02610261 	.word	0x02610261
 8003e60:	02610261 	.word	0x02610261
 8003e64:	00d60261 	.word	0x00d60261
 8003e68:	0261010b 	.word	0x0261010b
 8003e6c:	0261010b 	.word	0x0261010b
 8003e70:	02610261 	.word	0x02610261
 8003e74:	00b90261 	.word	0x00b90261
 8003e78:	02610261 	.word	0x02610261
 8003e7c:	02610152 	.word	0x02610152
 8003e80:	02610261 	.word	0x02610261
 8003e84:	02610261 	.word	0x02610261
 8003e88:	02610199 	.word	0x02610199
 8003e8c:	00660261 	.word	0x00660261
 8003e90:	02610261 	.word	0x02610261
 8003e94:	02610261 	.word	0x02610261
 8003e98:	02610261 	.word	0x02610261
 8003e9c:	02610261 	.word	0x02610261
 8003ea0:	02610261 	.word	0x02610261
 8003ea4:	006100cd 	.word	0x006100cd
 8003ea8:	010b010b 	.word	0x010b010b
 8003eac:	00bc010b 	.word	0x00bc010b
 8003eb0:	02610061 	.word	0x02610061
 8003eb4:	00bf0261 	.word	0x00bf0261
 8003eb8:	01340261 	.word	0x01340261
 8003ebc:	016f0154 	.word	0x016f0154
 8003ec0:	026100ca 	.word	0x026100ca
 8003ec4:	02610180 	.word	0x02610180
 8003ec8:	0261019b 	.word	0x0261019b
 8003ecc:	01b30261 	.word	0x01b30261
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	212b      	movs	r1, #43	; 0x2b
 8003ed4:	e002      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003ed6:	b909      	cbnz	r1, 8003edc <_svfprintf_r+0x1a4>
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2120      	movs	r1, #32
 8003edc:	9b05      	ldr	r3, [sp, #20]
 8003ede:	e793      	b.n	8003e08 <_svfprintf_r+0xd0>
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d077      	beq.n	8003fd4 <_svfprintf_r+0x29c>
 8003ee4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003ee8:	e074      	b.n	8003fd4 <_svfprintf_r+0x29c>
 8003eea:	b10a      	cbz	r2, 8003ef0 <_svfprintf_r+0x1b8>
 8003eec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003ef0:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <_svfprintf_r+0x2c0>)
 8003ef2:	e14b      	b.n	800418c <_svfprintf_r+0x454>
 8003ef4:	f045 0501 	orr.w	r5, r5, #1
 8003ef8:	e7f0      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003efa:	683e      	ldr	r6, [r7, #0]
 8003efc:	9609      	str	r6, [sp, #36]	; 0x24
 8003efe:	2e00      	cmp	r6, #0
 8003f00:	f107 0304 	add.w	r3, r7, #4
 8003f04:	db01      	blt.n	8003f0a <_svfprintf_r+0x1d2>
 8003f06:	461f      	mov	r7, r3
 8003f08:	e7e8      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f0a:	4276      	negs	r6, r6
 8003f0c:	9609      	str	r6, [sp, #36]	; 0x24
 8003f0e:	461f      	mov	r7, r3
 8003f10:	f045 0504 	orr.w	r5, r5, #4
 8003f14:	e7e2      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f16:	9e05      	ldr	r6, [sp, #20]
 8003f18:	9b05      	ldr	r3, [sp, #20]
 8003f1a:	7836      	ldrb	r6, [r6, #0]
 8003f1c:	9602      	str	r6, [sp, #8]
 8003f1e:	2e2a      	cmp	r6, #42	; 0x2a
 8003f20:	f103 0301 	add.w	r3, r3, #1
 8003f24:	d002      	beq.n	8003f2c <_svfprintf_r+0x1f4>
 8003f26:	f04f 0900 	mov.w	r9, #0
 8003f2a:	e00a      	b.n	8003f42 <_svfprintf_r+0x20a>
 8003f2c:	f8d7 9000 	ldr.w	r9, [r7]
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	1d3e      	adds	r6, r7, #4
 8003f34:	f1b9 0f00 	cmp.w	r9, #0
 8003f38:	4637      	mov	r7, r6
 8003f3a:	dacf      	bge.n	8003edc <_svfprintf_r+0x1a4>
 8003f3c:	f04f 39ff 	mov.w	r9, #4294967295
 8003f40:	e7cc      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f42:	9305      	str	r3, [sp, #20]
 8003f44:	9b02      	ldr	r3, [sp, #8]
 8003f46:	3b30      	subs	r3, #48	; 0x30
 8003f48:	2b09      	cmp	r3, #9
 8003f4a:	d808      	bhi.n	8003f5e <_svfprintf_r+0x226>
 8003f4c:	fb00 3909 	mla	r9, r0, r9, r3
 8003f50:	9b05      	ldr	r3, [sp, #20]
 8003f52:	461e      	mov	r6, r3
 8003f54:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003f58:	9302      	str	r3, [sp, #8]
 8003f5a:	4633      	mov	r3, r6
 8003f5c:	e7f1      	b.n	8003f42 <_svfprintf_r+0x20a>
 8003f5e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003f62:	e755      	b.n	8003e10 <_svfprintf_r+0xd8>
 8003f64:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003f68:	e7b8      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	9b02      	ldr	r3, [sp, #8]
 8003f70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003f72:	3b30      	subs	r3, #48	; 0x30
 8003f74:	fb00 3306 	mla	r3, r0, r6, r3
 8003f78:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7a:	9b05      	ldr	r3, [sp, #20]
 8003f7c:	461e      	mov	r6, r3
 8003f7e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	9b02      	ldr	r3, [sp, #8]
 8003f86:	9605      	str	r6, [sp, #20]
 8003f88:	3b30      	subs	r3, #48	; 0x30
 8003f8a:	2b09      	cmp	r3, #9
 8003f8c:	d9ef      	bls.n	8003f6e <_svfprintf_r+0x236>
 8003f8e:	e73f      	b.n	8003e10 <_svfprintf_r+0xd8>
 8003f90:	f045 0508 	orr.w	r5, r5, #8
 8003f94:	e7a2      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f96:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003f9a:	e79f      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b6c      	cmp	r3, #108	; 0x6c
 8003fa2:	d103      	bne.n	8003fac <_svfprintf_r+0x274>
 8003fa4:	9b05      	ldr	r3, [sp, #20]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	e002      	b.n	8003fb2 <_svfprintf_r+0x27a>
 8003fac:	f045 0510 	orr.w	r5, r5, #16
 8003fb0:	e794      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003fb2:	f045 0520 	orr.w	r5, r5, #32
 8003fb6:	e791      	b.n	8003edc <_svfprintf_r+0x1a4>
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003fc4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003fc8:	e199      	b.n	80042fe <_svfprintf_r+0x5c6>
 8003fca:	b10a      	cbz	r2, 8003fd0 <_svfprintf_r+0x298>
 8003fcc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003fd0:	f045 0510 	orr.w	r5, r5, #16
 8003fd4:	06aa      	lsls	r2, r5, #26
 8003fd6:	d511      	bpl.n	8003ffc <_svfprintf_r+0x2c4>
 8003fd8:	3707      	adds	r7, #7
 8003fda:	f027 0707 	bic.w	r7, r7, #7
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	9303      	str	r3, [sp, #12]
 8003fe4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003fe8:	e017      	b.n	800401a <_svfprintf_r+0x2e2>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
	...
 8003ff8:	0800984e 	.word	0x0800984e
 8003ffc:	f015 0f10 	tst.w	r5, #16
 8004000:	f107 0304 	add.w	r3, r7, #4
 8004004:	d002      	beq.n	800400c <_svfprintf_r+0x2d4>
 8004006:	9303      	str	r3, [sp, #12]
 8004008:	683e      	ldr	r6, [r7, #0]
 800400a:	e005      	b.n	8004018 <_svfprintf_r+0x2e0>
 800400c:	683e      	ldr	r6, [r7, #0]
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004014:	bf18      	it	ne
 8004016:	b236      	sxthne	r6, r6
 8004018:	17f7      	asrs	r7, r6, #31
 800401a:	2e00      	cmp	r6, #0
 800401c:	f177 0300 	sbcs.w	r3, r7, #0
 8004020:	f280 80de 	bge.w	80041e0 <_svfprintf_r+0x4a8>
 8004024:	4276      	negs	r6, r6
 8004026:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800402a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800402e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004032:	e0d5      	b.n	80041e0 <_svfprintf_r+0x4a8>
 8004034:	b10a      	cbz	r2, 800403a <_svfprintf_r+0x302>
 8004036:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800403a:	3707      	adds	r7, #7
 800403c:	f027 0707 	bic.w	r7, r7, #7
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	ed97 7b00 	vldr	d7, [r7]
 800404a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800404e:	9b06      	ldr	r3, [sp, #24]
 8004050:	9312      	str	r3, [sp, #72]	; 0x48
 8004052:	9b07      	ldr	r3, [sp, #28]
 8004054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004058:	9313      	str	r3, [sp, #76]	; 0x4c
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	4bab      	ldr	r3, [pc, #684]	; (800430c <_svfprintf_r+0x5d4>)
 8004060:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004064:	f7fc fd5e 	bl	8000b24 <__aeabi_dcmpun>
 8004068:	2800      	cmp	r0, #0
 800406a:	f040 84f1 	bne.w	8004a50 <_svfprintf_r+0xd18>
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	4ba6      	ldr	r3, [pc, #664]	; (800430c <_svfprintf_r+0x5d4>)
 8004074:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004078:	f7fc fd36 	bl	8000ae8 <__aeabi_dcmple>
 800407c:	2800      	cmp	r0, #0
 800407e:	f040 84e7 	bne.w	8004a50 <_svfprintf_r+0xd18>
 8004082:	f000 bdfd 	b.w	8004c80 <_svfprintf_r+0xf48>
 8004086:	b10a      	cbz	r2, 800408c <_svfprintf_r+0x354>
 8004088:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800408c:	f015 0f20 	tst.w	r5, #32
 8004090:	f107 0304 	add.w	r3, r7, #4
 8004094:	d007      	beq.n	80040a6 <_svfprintf_r+0x36e>
 8004096:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	17ce      	asrs	r6, r1, #31
 800409c:	4608      	mov	r0, r1
 800409e:	4631      	mov	r1, r6
 80040a0:	e9c2 0100 	strd	r0, r1, [r2]
 80040a4:	e00b      	b.n	80040be <_svfprintf_r+0x386>
 80040a6:	06e9      	lsls	r1, r5, #27
 80040a8:	d406      	bmi.n	80040b8 <_svfprintf_r+0x380>
 80040aa:	066a      	lsls	r2, r5, #25
 80040ac:	d504      	bpl.n	80040b8 <_svfprintf_r+0x380>
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80040b4:	8011      	strh	r1, [r2, #0]
 80040b6:	e002      	b.n	80040be <_svfprintf_r+0x386>
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	461f      	mov	r7, r3
 80040c0:	e670      	b.n	8003da4 <_svfprintf_r+0x6c>
 80040c2:	f045 0510 	orr.w	r5, r5, #16
 80040c6:	f015 0320 	ands.w	r3, r5, #32
 80040ca:	d009      	beq.n	80040e0 <_svfprintf_r+0x3a8>
 80040cc:	3707      	adds	r7, #7
 80040ce:	f027 0707 	bic.w	r7, r7, #7
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	2300      	movs	r3, #0
 80040de:	e07b      	b.n	80041d8 <_svfprintf_r+0x4a0>
 80040e0:	1d3a      	adds	r2, r7, #4
 80040e2:	f015 0110 	ands.w	r1, r5, #16
 80040e6:	9203      	str	r2, [sp, #12]
 80040e8:	d105      	bne.n	80040f6 <_svfprintf_r+0x3be>
 80040ea:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80040ee:	d002      	beq.n	80040f6 <_svfprintf_r+0x3be>
 80040f0:	883e      	ldrh	r6, [r7, #0]
 80040f2:	2700      	movs	r7, #0
 80040f4:	e7f2      	b.n	80040dc <_svfprintf_r+0x3a4>
 80040f6:	683e      	ldr	r6, [r7, #0]
 80040f8:	2700      	movs	r7, #0
 80040fa:	e06d      	b.n	80041d8 <_svfprintf_r+0x4a0>
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	2330      	movs	r3, #48	; 0x30
 8004102:	2278      	movs	r2, #120	; 0x78
 8004104:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004108:	4b81      	ldr	r3, [pc, #516]	; (8004310 <_svfprintf_r+0x5d8>)
 800410a:	683e      	ldr	r6, [r7, #0]
 800410c:	9311      	str	r3, [sp, #68]	; 0x44
 800410e:	2700      	movs	r7, #0
 8004110:	f045 0502 	orr.w	r5, r5, #2
 8004114:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004118:	2302      	movs	r3, #2
 800411a:	9202      	str	r2, [sp, #8]
 800411c:	e05c      	b.n	80041d8 <_svfprintf_r+0x4a0>
 800411e:	2600      	movs	r6, #0
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	45b1      	cmp	r9, r6
 8004124:	9303      	str	r3, [sp, #12]
 8004126:	f8d7 8000 	ldr.w	r8, [r7]
 800412a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800412e:	db0a      	blt.n	8004146 <_svfprintf_r+0x40e>
 8004130:	464a      	mov	r2, r9
 8004132:	4631      	mov	r1, r6
 8004134:	4640      	mov	r0, r8
 8004136:	f7fc f853 	bl	80001e0 <memchr>
 800413a:	2800      	cmp	r0, #0
 800413c:	f000 80ea 	beq.w	8004314 <_svfprintf_r+0x5dc>
 8004140:	ebc8 0900 	rsb	r9, r8, r0
 8004144:	e0e7      	b.n	8004316 <_svfprintf_r+0x5de>
 8004146:	4640      	mov	r0, r8
 8004148:	f7fc f842 	bl	80001d0 <strlen>
 800414c:	4681      	mov	r9, r0
 800414e:	e0e2      	b.n	8004316 <_svfprintf_r+0x5de>
 8004150:	f045 0510 	orr.w	r5, r5, #16
 8004154:	06ae      	lsls	r6, r5, #26
 8004156:	d508      	bpl.n	800416a <_svfprintf_r+0x432>
 8004158:	3707      	adds	r7, #7
 800415a:	f027 0707 	bic.w	r7, r7, #7
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	9303      	str	r3, [sp, #12]
 8004164:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004168:	e00a      	b.n	8004180 <_svfprintf_r+0x448>
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	f015 0f10 	tst.w	r5, #16
 8004170:	9303      	str	r3, [sp, #12]
 8004172:	d103      	bne.n	800417c <_svfprintf_r+0x444>
 8004174:	0668      	lsls	r0, r5, #25
 8004176:	d501      	bpl.n	800417c <_svfprintf_r+0x444>
 8004178:	883e      	ldrh	r6, [r7, #0]
 800417a:	e000      	b.n	800417e <_svfprintf_r+0x446>
 800417c:	683e      	ldr	r6, [r7, #0]
 800417e:	2700      	movs	r7, #0
 8004180:	2301      	movs	r3, #1
 8004182:	e029      	b.n	80041d8 <_svfprintf_r+0x4a0>
 8004184:	b10a      	cbz	r2, 800418a <_svfprintf_r+0x452>
 8004186:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800418a:	4b61      	ldr	r3, [pc, #388]	; (8004310 <_svfprintf_r+0x5d8>)
 800418c:	9311      	str	r3, [sp, #68]	; 0x44
 800418e:	06a9      	lsls	r1, r5, #26
 8004190:	d508      	bpl.n	80041a4 <_svfprintf_r+0x46c>
 8004192:	3707      	adds	r7, #7
 8004194:	f027 0707 	bic.w	r7, r7, #7
 8004198:	f107 0308 	add.w	r3, r7, #8
 800419c:	9303      	str	r3, [sp, #12]
 800419e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80041a2:	e00a      	b.n	80041ba <_svfprintf_r+0x482>
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	f015 0f10 	tst.w	r5, #16
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	d103      	bne.n	80041b6 <_svfprintf_r+0x47e>
 80041ae:	066a      	lsls	r2, r5, #25
 80041b0:	d501      	bpl.n	80041b6 <_svfprintf_r+0x47e>
 80041b2:	883e      	ldrh	r6, [r7, #0]
 80041b4:	e000      	b.n	80041b8 <_svfprintf_r+0x480>
 80041b6:	683e      	ldr	r6, [r7, #0]
 80041b8:	2700      	movs	r7, #0
 80041ba:	07eb      	lsls	r3, r5, #31
 80041bc:	d50b      	bpl.n	80041d6 <_svfprintf_r+0x49e>
 80041be:	ea56 0307 	orrs.w	r3, r6, r7
 80041c2:	d008      	beq.n	80041d6 <_svfprintf_r+0x49e>
 80041c4:	2330      	movs	r3, #48	; 0x30
 80041c6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80041ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80041ce:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80041d2:	f045 0502 	orr.w	r5, r5, #2
 80041d6:	2302      	movs	r3, #2
 80041d8:	2200      	movs	r2, #0
 80041da:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80041de:	e000      	b.n	80041e2 <_svfprintf_r+0x4aa>
 80041e0:	2301      	movs	r3, #1
 80041e2:	f1b9 0f00 	cmp.w	r9, #0
 80041e6:	f2c0 855c 	blt.w	8004ca2 <_svfprintf_r+0xf6a>
 80041ea:	ea56 0207 	orrs.w	r2, r6, r7
 80041ee:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80041f2:	d103      	bne.n	80041fc <_svfprintf_r+0x4c4>
 80041f4:	f1b9 0f00 	cmp.w	r9, #0
 80041f8:	d05f      	beq.n	80042ba <_svfprintf_r+0x582>
 80041fa:	e006      	b.n	800420a <_svfprintf_r+0x4d2>
 80041fc:	460d      	mov	r5, r1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d025      	beq.n	800424e <_svfprintf_r+0x516>
 8004202:	2b02      	cmp	r3, #2
 8004204:	d046      	beq.n	8004294 <_svfprintf_r+0x55c>
 8004206:	4629      	mov	r1, r5
 8004208:	e007      	b.n	800421a <_svfprintf_r+0x4e2>
 800420a:	460d      	mov	r5, r1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d022      	beq.n	8004256 <_svfprintf_r+0x51e>
 8004210:	2b02      	cmp	r3, #2
 8004212:	d03d      	beq.n	8004290 <_svfprintf_r+0x558>
 8004214:	4629      	mov	r1, r5
 8004216:	2600      	movs	r6, #0
 8004218:	2700      	movs	r7, #0
 800421a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800421e:	08f2      	lsrs	r2, r6, #3
 8004220:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004224:	08f8      	lsrs	r0, r7, #3
 8004226:	f006 0307 	and.w	r3, r6, #7
 800422a:	4607      	mov	r7, r0
 800422c:	4616      	mov	r6, r2
 800422e:	3330      	adds	r3, #48	; 0x30
 8004230:	ea56 0207 	orrs.w	r2, r6, r7
 8004234:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004238:	d1f1      	bne.n	800421e <_svfprintf_r+0x4e6>
 800423a:	07e8      	lsls	r0, r5, #31
 800423c:	d548      	bpl.n	80042d0 <_svfprintf_r+0x598>
 800423e:	2b30      	cmp	r3, #48	; 0x30
 8004240:	d046      	beq.n	80042d0 <_svfprintf_r+0x598>
 8004242:	2330      	movs	r3, #48	; 0x30
 8004244:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004248:	f108 38ff 	add.w	r8, r8, #4294967295
 800424c:	e040      	b.n	80042d0 <_svfprintf_r+0x598>
 800424e:	2f00      	cmp	r7, #0
 8004250:	bf08      	it	eq
 8004252:	2e0a      	cmpeq	r6, #10
 8004254:	d205      	bcs.n	8004262 <_svfprintf_r+0x52a>
 8004256:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800425a:	3630      	adds	r6, #48	; 0x30
 800425c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004260:	e029      	b.n	80042b6 <_svfprintf_r+0x57e>
 8004262:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004266:	4630      	mov	r0, r6
 8004268:	4639      	mov	r1, r7
 800426a:	220a      	movs	r2, #10
 800426c:	2300      	movs	r3, #0
 800426e:	f7fc fd07 	bl	8000c80 <__aeabi_uldivmod>
 8004272:	3230      	adds	r2, #48	; 0x30
 8004274:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004278:	2300      	movs	r3, #0
 800427a:	4630      	mov	r0, r6
 800427c:	4639      	mov	r1, r7
 800427e:	220a      	movs	r2, #10
 8004280:	f7fc fcfe 	bl	8000c80 <__aeabi_uldivmod>
 8004284:	4606      	mov	r6, r0
 8004286:	460f      	mov	r7, r1
 8004288:	ea56 0307 	orrs.w	r3, r6, r7
 800428c:	d1eb      	bne.n	8004266 <_svfprintf_r+0x52e>
 800428e:	e012      	b.n	80042b6 <_svfprintf_r+0x57e>
 8004290:	2600      	movs	r6, #0
 8004292:	2700      	movs	r7, #0
 8004294:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004298:	f006 030f 	and.w	r3, r6, #15
 800429c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80042a4:	0933      	lsrs	r3, r6, #4
 80042a6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80042aa:	093a      	lsrs	r2, r7, #4
 80042ac:	461e      	mov	r6, r3
 80042ae:	4617      	mov	r7, r2
 80042b0:	ea56 0307 	orrs.w	r3, r6, r7
 80042b4:	d1f0      	bne.n	8004298 <_svfprintf_r+0x560>
 80042b6:	4629      	mov	r1, r5
 80042b8:	e00a      	b.n	80042d0 <_svfprintf_r+0x598>
 80042ba:	b93b      	cbnz	r3, 80042cc <_svfprintf_r+0x594>
 80042bc:	07ea      	lsls	r2, r5, #31
 80042be:	d505      	bpl.n	80042cc <_svfprintf_r+0x594>
 80042c0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80042c4:	2330      	movs	r3, #48	; 0x30
 80042c6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80042ca:	e001      	b.n	80042d0 <_svfprintf_r+0x598>
 80042cc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80042d0:	464e      	mov	r6, r9
 80042d2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80042d6:	ebc8 0909 	rsb	r9, r8, r9
 80042da:	460d      	mov	r5, r1
 80042dc:	2700      	movs	r7, #0
 80042de:	e01b      	b.n	8004318 <_svfprintf_r+0x5e0>
 80042e0:	b10a      	cbz	r2, 80042e6 <_svfprintf_r+0x5ae>
 80042e2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80042e6:	9b02      	ldr	r3, [sp, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 83a0 	beq.w	8004a2e <_svfprintf_r+0xcf6>
 80042ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042f2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80042f6:	2600      	movs	r6, #0
 80042f8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80042fc:	9703      	str	r7, [sp, #12]
 80042fe:	f04f 0901 	mov.w	r9, #1
 8004302:	4637      	mov	r7, r6
 8004304:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004308:	e006      	b.n	8004318 <_svfprintf_r+0x5e0>
 800430a:	bf00      	nop
 800430c:	7fefffff 	.word	0x7fefffff
 8004310:	0800985f 	.word	0x0800985f
 8004314:	4606      	mov	r6, r0
 8004316:	4637      	mov	r7, r6
 8004318:	454e      	cmp	r6, r9
 800431a:	4633      	mov	r3, r6
 800431c:	bfb8      	it	lt
 800431e:	464b      	movlt	r3, r9
 8004320:	930b      	str	r3, [sp, #44]	; 0x2c
 8004322:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004326:	b113      	cbz	r3, 800432e <_svfprintf_r+0x5f6>
 8004328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800432a:	3301      	adds	r3, #1
 800432c:	930b      	str	r3, [sp, #44]	; 0x2c
 800432e:	f015 0302 	ands.w	r3, r5, #2
 8004332:	9314      	str	r3, [sp, #80]	; 0x50
 8004334:	bf1e      	ittt	ne
 8004336:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8004338:	3302      	addne	r3, #2
 800433a:	930b      	strne	r3, [sp, #44]	; 0x2c
 800433c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004340:	9315      	str	r3, [sp, #84]	; 0x54
 8004342:	d139      	bne.n	80043b8 <_svfprintf_r+0x680>
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	930c      	str	r3, [sp, #48]	; 0x30
 800434e:	dd33      	ble.n	80043b8 <_svfprintf_r+0x680>
 8004350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004352:	2b10      	cmp	r3, #16
 8004354:	4ba6      	ldr	r3, [pc, #664]	; (80045f0 <_svfprintf_r+0x8b8>)
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	dd18      	ble.n	800438c <_svfprintf_r+0x654>
 800435a:	2310      	movs	r3, #16
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004360:	3310      	adds	r3, #16
 8004362:	9321      	str	r3, [sp, #132]	; 0x84
 8004364:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004366:	3301      	adds	r3, #1
 8004368:	2b07      	cmp	r3, #7
 800436a:	9320      	str	r3, [sp, #128]	; 0x80
 800436c:	dc01      	bgt.n	8004372 <_svfprintf_r+0x63a>
 800436e:	3408      	adds	r4, #8
 8004370:	e008      	b.n	8004384 <_svfprintf_r+0x64c>
 8004372:	aa1f      	add	r2, sp, #124	; 0x7c
 8004374:	4659      	mov	r1, fp
 8004376:	4650      	mov	r0, sl
 8004378:	f004 fad0 	bl	800891c <__ssprint_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	f040 835d 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004382:	ac2c      	add	r4, sp, #176	; 0xb0
 8004384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004386:	3b10      	subs	r3, #16
 8004388:	930c      	str	r3, [sp, #48]	; 0x30
 800438a:	e7e1      	b.n	8004350 <_svfprintf_r+0x618>
 800438c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004394:	4413      	add	r3, r2
 8004396:	9321      	str	r3, [sp, #132]	; 0x84
 8004398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800439a:	3301      	adds	r3, #1
 800439c:	2b07      	cmp	r3, #7
 800439e:	9320      	str	r3, [sp, #128]	; 0x80
 80043a0:	dc01      	bgt.n	80043a6 <_svfprintf_r+0x66e>
 80043a2:	3408      	adds	r4, #8
 80043a4:	e008      	b.n	80043b8 <_svfprintf_r+0x680>
 80043a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80043a8:	4659      	mov	r1, fp
 80043aa:	4650      	mov	r0, sl
 80043ac:	f004 fab6 	bl	800891c <__ssprint_r>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f040 8343 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80043b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80043b8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80043bc:	b1bb      	cbz	r3, 80043ee <_svfprintf_r+0x6b6>
 80043be:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	2301      	movs	r3, #1
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043ca:	3301      	adds	r3, #1
 80043cc:	9321      	str	r3, [sp, #132]	; 0x84
 80043ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043d0:	3301      	adds	r3, #1
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	9320      	str	r3, [sp, #128]	; 0x80
 80043d6:	dc01      	bgt.n	80043dc <_svfprintf_r+0x6a4>
 80043d8:	3408      	adds	r4, #8
 80043da:	e008      	b.n	80043ee <_svfprintf_r+0x6b6>
 80043dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80043de:	4659      	mov	r1, fp
 80043e0:	4650      	mov	r0, sl
 80043e2:	f004 fa9b 	bl	800891c <__ssprint_r>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	f040 8328 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80043ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80043ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043f0:	b1b3      	cbz	r3, 8004420 <_svfprintf_r+0x6e8>
 80043f2:	ab18      	add	r3, sp, #96	; 0x60
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	2302      	movs	r3, #2
 80043f8:	6063      	str	r3, [r4, #4]
 80043fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043fc:	3302      	adds	r3, #2
 80043fe:	9321      	str	r3, [sp, #132]	; 0x84
 8004400:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004402:	3301      	adds	r3, #1
 8004404:	2b07      	cmp	r3, #7
 8004406:	9320      	str	r3, [sp, #128]	; 0x80
 8004408:	dc01      	bgt.n	800440e <_svfprintf_r+0x6d6>
 800440a:	3408      	adds	r4, #8
 800440c:	e008      	b.n	8004420 <_svfprintf_r+0x6e8>
 800440e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004410:	4659      	mov	r1, fp
 8004412:	4650      	mov	r0, sl
 8004414:	f004 fa82 	bl	800891c <__ssprint_r>
 8004418:	2800      	cmp	r0, #0
 800441a:	f040 830f 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800441e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d135      	bne.n	8004492 <_svfprintf_r+0x75a>
 8004426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	dd30      	ble.n	8004492 <_svfprintf_r+0x75a>
 8004430:	4a70      	ldr	r2, [pc, #448]	; (80045f4 <_svfprintf_r+0x8bc>)
 8004432:	6022      	str	r2, [r4, #0]
 8004434:	2b10      	cmp	r3, #16
 8004436:	dd18      	ble.n	800446a <_svfprintf_r+0x732>
 8004438:	2210      	movs	r2, #16
 800443a:	6062      	str	r2, [r4, #4]
 800443c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800443e:	3210      	adds	r2, #16
 8004440:	9221      	str	r2, [sp, #132]	; 0x84
 8004442:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004444:	3201      	adds	r2, #1
 8004446:	2a07      	cmp	r2, #7
 8004448:	9220      	str	r2, [sp, #128]	; 0x80
 800444a:	dc01      	bgt.n	8004450 <_svfprintf_r+0x718>
 800444c:	3408      	adds	r4, #8
 800444e:	e00a      	b.n	8004466 <_svfprintf_r+0x72e>
 8004450:	aa1f      	add	r2, sp, #124	; 0x7c
 8004452:	4659      	mov	r1, fp
 8004454:	4650      	mov	r0, sl
 8004456:	930c      	str	r3, [sp, #48]	; 0x30
 8004458:	f004 fa60 	bl	800891c <__ssprint_r>
 800445c:	2800      	cmp	r0, #0
 800445e:	f040 82ed 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004464:	ac2c      	add	r4, sp, #176	; 0xb0
 8004466:	3b10      	subs	r3, #16
 8004468:	e7e2      	b.n	8004430 <_svfprintf_r+0x6f8>
 800446a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	4413      	add	r3, r2
 8004470:	9321      	str	r3, [sp, #132]	; 0x84
 8004472:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004474:	3301      	adds	r3, #1
 8004476:	2b07      	cmp	r3, #7
 8004478:	9320      	str	r3, [sp, #128]	; 0x80
 800447a:	dc01      	bgt.n	8004480 <_svfprintf_r+0x748>
 800447c:	3408      	adds	r4, #8
 800447e:	e008      	b.n	8004492 <_svfprintf_r+0x75a>
 8004480:	aa1f      	add	r2, sp, #124	; 0x7c
 8004482:	4659      	mov	r1, fp
 8004484:	4650      	mov	r0, sl
 8004486:	f004 fa49 	bl	800891c <__ssprint_r>
 800448a:	2800      	cmp	r0, #0
 800448c:	f040 82d6 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004490:	ac2c      	add	r4, sp, #176	; 0xb0
 8004492:	ebc9 0606 	rsb	r6, r9, r6
 8004496:	2e00      	cmp	r6, #0
 8004498:	dd2e      	ble.n	80044f8 <_svfprintf_r+0x7c0>
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <_svfprintf_r+0x8bc>)
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	2e10      	cmp	r6, #16
 80044a0:	dd16      	ble.n	80044d0 <_svfprintf_r+0x798>
 80044a2:	2310      	movs	r3, #16
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a8:	3310      	adds	r3, #16
 80044aa:	9321      	str	r3, [sp, #132]	; 0x84
 80044ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044ae:	3301      	adds	r3, #1
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	9320      	str	r3, [sp, #128]	; 0x80
 80044b4:	dc01      	bgt.n	80044ba <_svfprintf_r+0x782>
 80044b6:	3408      	adds	r4, #8
 80044b8:	e008      	b.n	80044cc <_svfprintf_r+0x794>
 80044ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80044bc:	4659      	mov	r1, fp
 80044be:	4650      	mov	r0, sl
 80044c0:	f004 fa2c 	bl	800891c <__ssprint_r>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f040 82b9 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80044ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80044cc:	3e10      	subs	r6, #16
 80044ce:	e7e4      	b.n	800449a <_svfprintf_r+0x762>
 80044d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044d2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80044d4:	6066      	str	r6, [r4, #4]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4406      	add	r6, r0
 80044da:	2b07      	cmp	r3, #7
 80044dc:	9621      	str	r6, [sp, #132]	; 0x84
 80044de:	9320      	str	r3, [sp, #128]	; 0x80
 80044e0:	dc01      	bgt.n	80044e6 <_svfprintf_r+0x7ae>
 80044e2:	3408      	adds	r4, #8
 80044e4:	e008      	b.n	80044f8 <_svfprintf_r+0x7c0>
 80044e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80044e8:	4659      	mov	r1, fp
 80044ea:	4650      	mov	r0, sl
 80044ec:	f004 fa16 	bl	800891c <__ssprint_r>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f040 82a3 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80044f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80044f8:	05eb      	lsls	r3, r5, #23
 80044fa:	d414      	bmi.n	8004526 <_svfprintf_r+0x7ee>
 80044fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044fe:	e884 0300 	stmia.w	r4, {r8, r9}
 8004502:	444b      	add	r3, r9
 8004504:	9321      	str	r3, [sp, #132]	; 0x84
 8004506:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004508:	3301      	adds	r3, #1
 800450a:	2b07      	cmp	r3, #7
 800450c:	9320      	str	r3, [sp, #128]	; 0x80
 800450e:	f340 8244 	ble.w	800499a <_svfprintf_r+0xc62>
 8004512:	aa1f      	add	r2, sp, #124	; 0x7c
 8004514:	4659      	mov	r1, fp
 8004516:	4650      	mov	r0, sl
 8004518:	f004 fa00 	bl	800891c <__ssprint_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	f040 828d 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004522:	ac2c      	add	r4, sp, #176	; 0xb0
 8004524:	e23a      	b.n	800499c <_svfprintf_r+0xc64>
 8004526:	9b02      	ldr	r3, [sp, #8]
 8004528:	2b65      	cmp	r3, #101	; 0x65
 800452a:	f340 81ad 	ble.w	8004888 <_svfprintf_r+0xb50>
 800452e:	2200      	movs	r2, #0
 8004530:	2300      	movs	r3, #0
 8004532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004536:	f7fc fac3 	bl	8000ac0 <__aeabi_dcmpeq>
 800453a:	2800      	cmp	r0, #0
 800453c:	d05e      	beq.n	80045fc <_svfprintf_r+0x8c4>
 800453e:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <_svfprintf_r+0x8c0>)
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	2301      	movs	r3, #1
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004548:	3301      	adds	r3, #1
 800454a:	9321      	str	r3, [sp, #132]	; 0x84
 800454c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800454e:	3301      	adds	r3, #1
 8004550:	2b07      	cmp	r3, #7
 8004552:	9320      	str	r3, [sp, #128]	; 0x80
 8004554:	dc01      	bgt.n	800455a <_svfprintf_r+0x822>
 8004556:	3408      	adds	r4, #8
 8004558:	e008      	b.n	800456c <_svfprintf_r+0x834>
 800455a:	aa1f      	add	r2, sp, #124	; 0x7c
 800455c:	4659      	mov	r1, fp
 800455e:	4650      	mov	r0, sl
 8004560:	f004 f9dc 	bl	800891c <__ssprint_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	f040 8269 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800456a:	ac2c      	add	r4, sp, #176	; 0xb0
 800456c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800456e:	9a04      	ldr	r2, [sp, #16]
 8004570:	4293      	cmp	r3, r2
 8004572:	db02      	blt.n	800457a <_svfprintf_r+0x842>
 8004574:	07ee      	lsls	r6, r5, #31
 8004576:	f140 8211 	bpl.w	800499c <_svfprintf_r+0xc64>
 800457a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	9b08      	ldr	r3, [sp, #32]
 8004580:	6063      	str	r3, [r4, #4]
 8004582:	9a08      	ldr	r2, [sp, #32]
 8004584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004586:	4413      	add	r3, r2
 8004588:	9321      	str	r3, [sp, #132]	; 0x84
 800458a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800458c:	3301      	adds	r3, #1
 800458e:	2b07      	cmp	r3, #7
 8004590:	9320      	str	r3, [sp, #128]	; 0x80
 8004592:	dc01      	bgt.n	8004598 <_svfprintf_r+0x860>
 8004594:	3408      	adds	r4, #8
 8004596:	e008      	b.n	80045aa <_svfprintf_r+0x872>
 8004598:	aa1f      	add	r2, sp, #124	; 0x7c
 800459a:	4659      	mov	r1, fp
 800459c:	4650      	mov	r0, sl
 800459e:	f004 f9bd 	bl	800891c <__ssprint_r>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	f040 824a 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80045a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80045aa:	9b04      	ldr	r3, [sp, #16]
 80045ac:	1e5e      	subs	r6, r3, #1
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	f340 81f4 	ble.w	800499c <_svfprintf_r+0xc64>
 80045b4:	4f0f      	ldr	r7, [pc, #60]	; (80045f4 <_svfprintf_r+0x8bc>)
 80045b6:	f04f 0810 	mov.w	r8, #16
 80045ba:	2e10      	cmp	r6, #16
 80045bc:	f340 8159 	ble.w	8004872 <_svfprintf_r+0xb3a>
 80045c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c2:	3310      	adds	r3, #16
 80045c4:	9321      	str	r3, [sp, #132]	; 0x84
 80045c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045c8:	3301      	adds	r3, #1
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	e884 0180 	stmia.w	r4, {r7, r8}
 80045d0:	9320      	str	r3, [sp, #128]	; 0x80
 80045d2:	dc01      	bgt.n	80045d8 <_svfprintf_r+0x8a0>
 80045d4:	3408      	adds	r4, #8
 80045d6:	e008      	b.n	80045ea <_svfprintf_r+0x8b2>
 80045d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80045da:	4659      	mov	r1, fp
 80045dc:	4650      	mov	r0, sl
 80045de:	f004 f99d 	bl	800891c <__ssprint_r>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f040 822a 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80045e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80045ea:	3e10      	subs	r6, #16
 80045ec:	e7e5      	b.n	80045ba <_svfprintf_r+0x882>
 80045ee:	bf00      	nop
 80045f0:	08009872 	.word	0x08009872
 80045f4:	0800982e 	.word	0x0800982e
 80045f8:	08009870 	.word	0x08009870
 80045fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dc7c      	bgt.n	80046fc <_svfprintf_r+0x9c4>
 8004602:	4b9f      	ldr	r3, [pc, #636]	; (8004880 <_svfprintf_r+0xb48>)
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	2301      	movs	r3, #1
 8004608:	6063      	str	r3, [r4, #4]
 800460a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800460c:	3301      	adds	r3, #1
 800460e:	9321      	str	r3, [sp, #132]	; 0x84
 8004610:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004612:	3301      	adds	r3, #1
 8004614:	2b07      	cmp	r3, #7
 8004616:	9320      	str	r3, [sp, #128]	; 0x80
 8004618:	dc01      	bgt.n	800461e <_svfprintf_r+0x8e6>
 800461a:	3408      	adds	r4, #8
 800461c:	e008      	b.n	8004630 <_svfprintf_r+0x8f8>
 800461e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004620:	4659      	mov	r1, fp
 8004622:	4650      	mov	r0, sl
 8004624:	f004 f97a 	bl	800891c <__ssprint_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	f040 8207 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800462e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004630:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004632:	b923      	cbnz	r3, 800463e <_svfprintf_r+0x906>
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	b913      	cbnz	r3, 800463e <_svfprintf_r+0x906>
 8004638:	07e8      	lsls	r0, r5, #31
 800463a:	f140 81af 	bpl.w	800499c <_svfprintf_r+0xc64>
 800463e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	9b08      	ldr	r3, [sp, #32]
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	9a08      	ldr	r2, [sp, #32]
 8004648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800464a:	4413      	add	r3, r2
 800464c:	9321      	str	r3, [sp, #132]	; 0x84
 800464e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004650:	3301      	adds	r3, #1
 8004652:	2b07      	cmp	r3, #7
 8004654:	9320      	str	r3, [sp, #128]	; 0x80
 8004656:	dc02      	bgt.n	800465e <_svfprintf_r+0x926>
 8004658:	f104 0308 	add.w	r3, r4, #8
 800465c:	e008      	b.n	8004670 <_svfprintf_r+0x938>
 800465e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004660:	4659      	mov	r1, fp
 8004662:	4650      	mov	r0, sl
 8004664:	f004 f95a 	bl	800891c <__ssprint_r>
 8004668:	2800      	cmp	r0, #0
 800466a:	f040 81e7 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800466e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004670:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004672:	4276      	negs	r6, r6
 8004674:	2e00      	cmp	r6, #0
 8004676:	dd30      	ble.n	80046da <_svfprintf_r+0x9a2>
 8004678:	4f82      	ldr	r7, [pc, #520]	; (8004884 <_svfprintf_r+0xb4c>)
 800467a:	2410      	movs	r4, #16
 800467c:	2e10      	cmp	r6, #16
 800467e:	dd16      	ble.n	80046ae <_svfprintf_r+0x976>
 8004680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004682:	601f      	str	r7, [r3, #0]
 8004684:	3210      	adds	r2, #16
 8004686:	9221      	str	r2, [sp, #132]	; 0x84
 8004688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800468a:	605c      	str	r4, [r3, #4]
 800468c:	3201      	adds	r2, #1
 800468e:	2a07      	cmp	r2, #7
 8004690:	9220      	str	r2, [sp, #128]	; 0x80
 8004692:	dc01      	bgt.n	8004698 <_svfprintf_r+0x960>
 8004694:	3308      	adds	r3, #8
 8004696:	e008      	b.n	80046aa <_svfprintf_r+0x972>
 8004698:	aa1f      	add	r2, sp, #124	; 0x7c
 800469a:	4659      	mov	r1, fp
 800469c:	4650      	mov	r0, sl
 800469e:	f004 f93d 	bl	800891c <__ssprint_r>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f040 81ca 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80046a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80046aa:	3e10      	subs	r6, #16
 80046ac:	e7e6      	b.n	800467c <_svfprintf_r+0x944>
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <_svfprintf_r+0xb4c>)
 80046b0:	e883 0044 	stmia.w	r3, {r2, r6}
 80046b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046b6:	4416      	add	r6, r2
 80046b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046ba:	9621      	str	r6, [sp, #132]	; 0x84
 80046bc:	3201      	adds	r2, #1
 80046be:	2a07      	cmp	r2, #7
 80046c0:	9220      	str	r2, [sp, #128]	; 0x80
 80046c2:	dc01      	bgt.n	80046c8 <_svfprintf_r+0x990>
 80046c4:	3308      	adds	r3, #8
 80046c6:	e008      	b.n	80046da <_svfprintf_r+0x9a2>
 80046c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80046ca:	4659      	mov	r1, fp
 80046cc:	4650      	mov	r0, sl
 80046ce:	f004 f925 	bl	800891c <__ssprint_r>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	f040 81b2 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80046d8:	ab2c      	add	r3, sp, #176	; 0xb0
 80046da:	9a04      	ldr	r2, [sp, #16]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	9904      	ldr	r1, [sp, #16]
 80046e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80046e2:	f8c3 8000 	str.w	r8, [r3]
 80046e6:	440a      	add	r2, r1
 80046e8:	9221      	str	r2, [sp, #132]	; 0x84
 80046ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046ec:	3201      	adds	r2, #1
 80046ee:	2a07      	cmp	r2, #7
 80046f0:	9220      	str	r2, [sp, #128]	; 0x80
 80046f2:	f73f af0e 	bgt.w	8004512 <_svfprintf_r+0x7da>
 80046f6:	f103 0408 	add.w	r4, r3, #8
 80046fa:	e14f      	b.n	800499c <_svfprintf_r+0xc64>
 80046fc:	9b04      	ldr	r3, [sp, #16]
 80046fe:	42bb      	cmp	r3, r7
 8004700:	bfa8      	it	ge
 8004702:	463b      	movge	r3, r7
 8004704:	2b00      	cmp	r3, #0
 8004706:	461e      	mov	r6, r3
 8004708:	dd15      	ble.n	8004736 <_svfprintf_r+0x9fe>
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800470e:	f8c4 8000 	str.w	r8, [r4]
 8004712:	4433      	add	r3, r6
 8004714:	9321      	str	r3, [sp, #132]	; 0x84
 8004716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004718:	3301      	adds	r3, #1
 800471a:	2b07      	cmp	r3, #7
 800471c:	9320      	str	r3, [sp, #128]	; 0x80
 800471e:	dc01      	bgt.n	8004724 <_svfprintf_r+0x9ec>
 8004720:	3408      	adds	r4, #8
 8004722:	e008      	b.n	8004736 <_svfprintf_r+0x9fe>
 8004724:	aa1f      	add	r2, sp, #124	; 0x7c
 8004726:	4659      	mov	r1, fp
 8004728:	4650      	mov	r0, sl
 800472a:	f004 f8f7 	bl	800891c <__ssprint_r>
 800472e:	2800      	cmp	r0, #0
 8004730:	f040 8184 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004734:	ac2c      	add	r4, sp, #176	; 0xb0
 8004736:	2e00      	cmp	r6, #0
 8004738:	bfac      	ite	ge
 800473a:	1bbe      	subge	r6, r7, r6
 800473c:	463e      	movlt	r6, r7
 800473e:	2e00      	cmp	r6, #0
 8004740:	dd30      	ble.n	80047a4 <_svfprintf_r+0xa6c>
 8004742:	f04f 0910 	mov.w	r9, #16
 8004746:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <_svfprintf_r+0xb4c>)
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	2e10      	cmp	r6, #16
 800474c:	dd16      	ble.n	800477c <_svfprintf_r+0xa44>
 800474e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004750:	f8c4 9004 	str.w	r9, [r4, #4]
 8004754:	3310      	adds	r3, #16
 8004756:	9321      	str	r3, [sp, #132]	; 0x84
 8004758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800475a:	3301      	adds	r3, #1
 800475c:	2b07      	cmp	r3, #7
 800475e:	9320      	str	r3, [sp, #128]	; 0x80
 8004760:	dc01      	bgt.n	8004766 <_svfprintf_r+0xa2e>
 8004762:	3408      	adds	r4, #8
 8004764:	e008      	b.n	8004778 <_svfprintf_r+0xa40>
 8004766:	aa1f      	add	r2, sp, #124	; 0x7c
 8004768:	4659      	mov	r1, fp
 800476a:	4650      	mov	r0, sl
 800476c:	f004 f8d6 	bl	800891c <__ssprint_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	f040 8163 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004776:	ac2c      	add	r4, sp, #176	; 0xb0
 8004778:	3e10      	subs	r6, #16
 800477a:	e7e4      	b.n	8004746 <_svfprintf_r+0xa0e>
 800477c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800477e:	6066      	str	r6, [r4, #4]
 8004780:	441e      	add	r6, r3
 8004782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004784:	9621      	str	r6, [sp, #132]	; 0x84
 8004786:	3301      	adds	r3, #1
 8004788:	2b07      	cmp	r3, #7
 800478a:	9320      	str	r3, [sp, #128]	; 0x80
 800478c:	dc01      	bgt.n	8004792 <_svfprintf_r+0xa5a>
 800478e:	3408      	adds	r4, #8
 8004790:	e008      	b.n	80047a4 <_svfprintf_r+0xa6c>
 8004792:	aa1f      	add	r2, sp, #124	; 0x7c
 8004794:	4659      	mov	r1, fp
 8004796:	4650      	mov	r0, sl
 8004798:	f004 f8c0 	bl	800891c <__ssprint_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	f040 814d 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80047a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80047a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047a6:	9a04      	ldr	r2, [sp, #16]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	4447      	add	r7, r8
 80047ac:	db01      	blt.n	80047b2 <_svfprintf_r+0xa7a>
 80047ae:	07e9      	lsls	r1, r5, #31
 80047b0:	d517      	bpl.n	80047e2 <_svfprintf_r+0xaaa>
 80047b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	9b08      	ldr	r3, [sp, #32]
 80047b8:	6063      	str	r3, [r4, #4]
 80047ba:	9a08      	ldr	r2, [sp, #32]
 80047bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047be:	4413      	add	r3, r2
 80047c0:	9321      	str	r3, [sp, #132]	; 0x84
 80047c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047c4:	3301      	adds	r3, #1
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	9320      	str	r3, [sp, #128]	; 0x80
 80047ca:	dc01      	bgt.n	80047d0 <_svfprintf_r+0xa98>
 80047cc:	3408      	adds	r4, #8
 80047ce:	e008      	b.n	80047e2 <_svfprintf_r+0xaaa>
 80047d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80047d2:	4659      	mov	r1, fp
 80047d4:	4650      	mov	r0, sl
 80047d6:	f004 f8a1 	bl	800891c <__ssprint_r>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 812e 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80047e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	eb08 0603 	add.w	r6, r8, r3
 80047ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047ec:	1bf6      	subs	r6, r6, r7
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	429e      	cmp	r6, r3
 80047f2:	bfa8      	it	ge
 80047f4:	461e      	movge	r6, r3
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	dd14      	ble.n	8004824 <_svfprintf_r+0xaec>
 80047fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047fc:	6027      	str	r7, [r4, #0]
 80047fe:	4433      	add	r3, r6
 8004800:	9321      	str	r3, [sp, #132]	; 0x84
 8004802:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004804:	6066      	str	r6, [r4, #4]
 8004806:	3301      	adds	r3, #1
 8004808:	2b07      	cmp	r3, #7
 800480a:	9320      	str	r3, [sp, #128]	; 0x80
 800480c:	dc01      	bgt.n	8004812 <_svfprintf_r+0xada>
 800480e:	3408      	adds	r4, #8
 8004810:	e008      	b.n	8004824 <_svfprintf_r+0xaec>
 8004812:	aa1f      	add	r2, sp, #124	; 0x7c
 8004814:	4659      	mov	r1, fp
 8004816:	4650      	mov	r0, sl
 8004818:	f004 f880 	bl	800891c <__ssprint_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	f040 810d 	bne.w	8004a3c <_svfprintf_r+0xd04>
 8004822:	ac2c      	add	r4, sp, #176	; 0xb0
 8004824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004826:	9a04      	ldr	r2, [sp, #16]
 8004828:	2e00      	cmp	r6, #0
 800482a:	eba2 0303 	sub.w	r3, r2, r3
 800482e:	bfac      	ite	ge
 8004830:	1b9e      	subge	r6, r3, r6
 8004832:	461e      	movlt	r6, r3
 8004834:	2e00      	cmp	r6, #0
 8004836:	f340 80b1 	ble.w	800499c <_svfprintf_r+0xc64>
 800483a:	4f12      	ldr	r7, [pc, #72]	; (8004884 <_svfprintf_r+0xb4c>)
 800483c:	f04f 0810 	mov.w	r8, #16
 8004840:	2e10      	cmp	r6, #16
 8004842:	dd16      	ble.n	8004872 <_svfprintf_r+0xb3a>
 8004844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004846:	3310      	adds	r3, #16
 8004848:	9321      	str	r3, [sp, #132]	; 0x84
 800484a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800484c:	3301      	adds	r3, #1
 800484e:	2b07      	cmp	r3, #7
 8004850:	e884 0180 	stmia.w	r4, {r7, r8}
 8004854:	9320      	str	r3, [sp, #128]	; 0x80
 8004856:	dc01      	bgt.n	800485c <_svfprintf_r+0xb24>
 8004858:	3408      	adds	r4, #8
 800485a:	e008      	b.n	800486e <_svfprintf_r+0xb36>
 800485c:	aa1f      	add	r2, sp, #124	; 0x7c
 800485e:	4659      	mov	r1, fp
 8004860:	4650      	mov	r0, sl
 8004862:	f004 f85b 	bl	800891c <__ssprint_r>
 8004866:	2800      	cmp	r0, #0
 8004868:	f040 80e8 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800486c:	ac2c      	add	r4, sp, #176	; 0xb0
 800486e:	3e10      	subs	r6, #16
 8004870:	e7e6      	b.n	8004840 <_svfprintf_r+0xb08>
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <_svfprintf_r+0xb4c>)
 8004874:	e884 0048 	stmia.w	r4, {r3, r6}
 8004878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800487a:	441e      	add	r6, r3
 800487c:	9621      	str	r6, [sp, #132]	; 0x84
 800487e:	e642      	b.n	8004506 <_svfprintf_r+0x7ce>
 8004880:	08009870 	.word	0x08009870
 8004884:	0800982e 	.word	0x0800982e
 8004888:	9b04      	ldr	r3, [sp, #16]
 800488a:	2b01      	cmp	r3, #1
 800488c:	dc01      	bgt.n	8004892 <_svfprintf_r+0xb5a>
 800488e:	07ea      	lsls	r2, r5, #31
 8004890:	d573      	bpl.n	800497a <_svfprintf_r+0xc42>
 8004892:	2301      	movs	r3, #1
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004898:	f8c4 8000 	str.w	r8, [r4]
 800489c:	3301      	adds	r3, #1
 800489e:	9321      	str	r3, [sp, #132]	; 0x84
 80048a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048a2:	3301      	adds	r3, #1
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	9320      	str	r3, [sp, #128]	; 0x80
 80048a8:	dc01      	bgt.n	80048ae <_svfprintf_r+0xb76>
 80048aa:	3408      	adds	r4, #8
 80048ac:	e008      	b.n	80048c0 <_svfprintf_r+0xb88>
 80048ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80048b0:	4659      	mov	r1, fp
 80048b2:	4650      	mov	r0, sl
 80048b4:	f004 f832 	bl	800891c <__ssprint_r>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	f040 80bf 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80048be:	ac2c      	add	r4, sp, #176	; 0xb0
 80048c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	9b08      	ldr	r3, [sp, #32]
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	9a08      	ldr	r2, [sp, #32]
 80048ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048cc:	4413      	add	r3, r2
 80048ce:	9321      	str	r3, [sp, #132]	; 0x84
 80048d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048d2:	3301      	adds	r3, #1
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	9320      	str	r3, [sp, #128]	; 0x80
 80048d8:	dc01      	bgt.n	80048de <_svfprintf_r+0xba6>
 80048da:	3408      	adds	r4, #8
 80048dc:	e008      	b.n	80048f0 <_svfprintf_r+0xbb8>
 80048de:	aa1f      	add	r2, sp, #124	; 0x7c
 80048e0:	4659      	mov	r1, fp
 80048e2:	4650      	mov	r0, sl
 80048e4:	f004 f81a 	bl	800891c <__ssprint_r>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f040 80a7 	bne.w	8004a3c <_svfprintf_r+0xd04>
 80048ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80048f0:	2300      	movs	r3, #0
 80048f2:	2200      	movs	r2, #0
 80048f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f8:	f7fc f8e2 	bl	8000ac0 <__aeabi_dcmpeq>
 80048fc:	9b04      	ldr	r3, [sp, #16]
 80048fe:	1e5e      	subs	r6, r3, #1
 8004900:	b9b8      	cbnz	r0, 8004932 <_svfprintf_r+0xbfa>
 8004902:	f108 0301 	add.w	r3, r8, #1
 8004906:	e884 0048 	stmia.w	r4, {r3, r6}
 800490a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800490c:	9a04      	ldr	r2, [sp, #16]
 800490e:	3b01      	subs	r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	9321      	str	r3, [sp, #132]	; 0x84
 8004914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004916:	3301      	adds	r3, #1
 8004918:	2b07      	cmp	r3, #7
 800491a:	9320      	str	r3, [sp, #128]	; 0x80
 800491c:	dd34      	ble.n	8004988 <_svfprintf_r+0xc50>
 800491e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004920:	4659      	mov	r1, fp
 8004922:	4650      	mov	r0, sl
 8004924:	f003 fffa 	bl	800891c <__ssprint_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	f040 8087 	bne.w	8004a3c <_svfprintf_r+0xd04>
 800492e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004930:	e02b      	b.n	800498a <_svfprintf_r+0xc52>
 8004932:	2e00      	cmp	r6, #0
 8004934:	dd29      	ble.n	800498a <_svfprintf_r+0xc52>
 8004936:	4fa7      	ldr	r7, [pc, #668]	; (8004bd4 <_svfprintf_r+0xe9c>)
 8004938:	f04f 0810 	mov.w	r8, #16
 800493c:	2e10      	cmp	r6, #16
 800493e:	dd15      	ble.n	800496c <_svfprintf_r+0xc34>
 8004940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004942:	3310      	adds	r3, #16
 8004944:	9321      	str	r3, [sp, #132]	; 0x84
 8004946:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004948:	3301      	adds	r3, #1
 800494a:	2b07      	cmp	r3, #7
 800494c:	e884 0180 	stmia.w	r4, {r7, r8}
 8004950:	9320      	str	r3, [sp, #128]	; 0x80
 8004952:	dc01      	bgt.n	8004958 <_svfprintf_r+0xc20>
 8004954:	3408      	adds	r4, #8
 8004956:	e007      	b.n	8004968 <_svfprintf_r+0xc30>
 8004958:	aa1f      	add	r2, sp, #124	; 0x7c
 800495a:	4659      	mov	r1, fp
 800495c:	4650      	mov	r0, sl
 800495e:	f003 ffdd 	bl	800891c <__ssprint_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	d16a      	bne.n	8004a3c <_svfprintf_r+0xd04>
 8004966:	ac2c      	add	r4, sp, #176	; 0xb0
 8004968:	3e10      	subs	r6, #16
 800496a:	e7e7      	b.n	800493c <_svfprintf_r+0xc04>
 800496c:	4b99      	ldr	r3, [pc, #612]	; (8004bd4 <_svfprintf_r+0xe9c>)
 800496e:	e884 0048 	stmia.w	r4, {r3, r6}
 8004972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004974:	441e      	add	r6, r3
 8004976:	9621      	str	r6, [sp, #132]	; 0x84
 8004978:	e7cc      	b.n	8004914 <_svfprintf_r+0xbdc>
 800497a:	2301      	movs	r3, #1
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004980:	f8c4 8000 	str.w	r8, [r4]
 8004984:	3301      	adds	r3, #1
 8004986:	e7c4      	b.n	8004912 <_svfprintf_r+0xbda>
 8004988:	3408      	adds	r4, #8
 800498a:	ab1b      	add	r3, sp, #108	; 0x6c
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004996:	4413      	add	r3, r2
 8004998:	e5b4      	b.n	8004504 <_svfprintf_r+0x7cc>
 800499a:	3408      	adds	r4, #8
 800499c:	076b      	lsls	r3, r5, #29
 800499e:	d40b      	bmi.n	80049b8 <_svfprintf_r+0xc80>
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a6:	428a      	cmp	r2, r1
 80049a8:	bfac      	ite	ge
 80049aa:	189b      	addge	r3, r3, r2
 80049ac:	185b      	addlt	r3, r3, r1
 80049ae:	930a      	str	r3, [sp, #40]	; 0x28
 80049b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d035      	beq.n	8004a22 <_svfprintf_r+0xcea>
 80049b6:	e02e      	b.n	8004a16 <_svfprintf_r+0xcde>
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049bc:	1a9d      	subs	r5, r3, r2
 80049be:	2d00      	cmp	r5, #0
 80049c0:	ddee      	ble.n	80049a0 <_svfprintf_r+0xc68>
 80049c2:	2610      	movs	r6, #16
 80049c4:	4b84      	ldr	r3, [pc, #528]	; (8004bd8 <_svfprintf_r+0xea0>)
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	2d10      	cmp	r5, #16
 80049ca:	dd13      	ble.n	80049f4 <_svfprintf_r+0xcbc>
 80049cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ce:	6066      	str	r6, [r4, #4]
 80049d0:	3310      	adds	r3, #16
 80049d2:	9321      	str	r3, [sp, #132]	; 0x84
 80049d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049d6:	3301      	adds	r3, #1
 80049d8:	2b07      	cmp	r3, #7
 80049da:	9320      	str	r3, [sp, #128]	; 0x80
 80049dc:	dc01      	bgt.n	80049e2 <_svfprintf_r+0xcaa>
 80049de:	3408      	adds	r4, #8
 80049e0:	e006      	b.n	80049f0 <_svfprintf_r+0xcb8>
 80049e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80049e4:	4659      	mov	r1, fp
 80049e6:	4650      	mov	r0, sl
 80049e8:	f003 ff98 	bl	800891c <__ssprint_r>
 80049ec:	bb30      	cbnz	r0, 8004a3c <_svfprintf_r+0xd04>
 80049ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80049f0:	3d10      	subs	r5, #16
 80049f2:	e7e7      	b.n	80049c4 <_svfprintf_r+0xc8c>
 80049f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049f6:	6065      	str	r5, [r4, #4]
 80049f8:	441d      	add	r5, r3
 80049fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049fc:	9521      	str	r5, [sp, #132]	; 0x84
 80049fe:	3301      	adds	r3, #1
 8004a00:	2b07      	cmp	r3, #7
 8004a02:	9320      	str	r3, [sp, #128]	; 0x80
 8004a04:	ddcc      	ble.n	80049a0 <_svfprintf_r+0xc68>
 8004a06:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a08:	4659      	mov	r1, fp
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	f003 ff86 	bl	800891c <__ssprint_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0c5      	beq.n	80049a0 <_svfprintf_r+0xc68>
 8004a14:	e012      	b.n	8004a3c <_svfprintf_r+0xd04>
 8004a16:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a18:	4659      	mov	r1, fp
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f003 ff7e 	bl	800891c <__ssprint_r>
 8004a20:	b960      	cbnz	r0, 8004a3c <_svfprintf_r+0xd04>
 8004a22:	2300      	movs	r3, #0
 8004a24:	9320      	str	r3, [sp, #128]	; 0x80
 8004a26:	9f03      	ldr	r7, [sp, #12]
 8004a28:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a2a:	f7ff b9bb 	b.w	8003da4 <_svfprintf_r+0x6c>
 8004a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a30:	b123      	cbz	r3, 8004a3c <_svfprintf_r+0xd04>
 8004a32:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a34:	4659      	mov	r1, fp
 8004a36:	4650      	mov	r0, sl
 8004a38:	f003 ff70 	bl	800891c <__ssprint_r>
 8004a3c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004a40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a46:	bf18      	it	ne
 8004a48:	f04f 33ff 	movne.w	r3, #4294967295
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	e12e      	b.n	8004cae <_svfprintf_r+0xf76>
 8004a50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7fc f864 	bl	8000b24 <__aeabi_dcmpun>
 8004a5c:	b160      	cbz	r0, 8004a78 <_svfprintf_r+0xd40>
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <_svfprintf_r+0xea4>)
 8004a60:	4a5f      	ldr	r2, [pc, #380]	; (8004be0 <_svfprintf_r+0xea8>)
 8004a62:	9902      	ldr	r1, [sp, #8]
 8004a64:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004a68:	2947      	cmp	r1, #71	; 0x47
 8004a6a:	bfcc      	ite	gt
 8004a6c:	4690      	movgt	r8, r2
 8004a6e:	4698      	movle	r8, r3
 8004a70:	f04f 0903 	mov.w	r9, #3
 8004a74:	2600      	movs	r6, #0
 8004a76:	e44e      	b.n	8004316 <_svfprintf_r+0x5de>
 8004a78:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004a7c:	d00a      	beq.n	8004a94 <_svfprintf_r+0xd5c>
 8004a7e:	9b02      	ldr	r3, [sp, #8]
 8004a80:	f023 0320 	bic.w	r3, r3, #32
 8004a84:	2b47      	cmp	r3, #71	; 0x47
 8004a86:	d107      	bne.n	8004a98 <_svfprintf_r+0xd60>
 8004a88:	f1b9 0f00 	cmp.w	r9, #0
 8004a8c:	bf08      	it	eq
 8004a8e:	f04f 0901 	moveq.w	r9, #1
 8004a92:	e001      	b.n	8004a98 <_svfprintf_r+0xd60>
 8004a94:	f04f 0906 	mov.w	r9, #6
 8004a98:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8004a9e:	9b07      	ldr	r3, [sp, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da07      	bge.n	8004ab4 <_svfprintf_r+0xd7c>
 8004aa4:	9b06      	ldr	r3, [sp, #24]
 8004aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8004aa8:	9b07      	ldr	r3, [sp, #28]
 8004aaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ab0:	232d      	movs	r3, #45	; 0x2d
 8004ab2:	e004      	b.n	8004abe <_svfprintf_r+0xd86>
 8004ab4:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004ab8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004abc:	2300      	movs	r3, #0
 8004abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ac0:	9b02      	ldr	r3, [sp, #8]
 8004ac2:	f023 0720 	bic.w	r7, r3, #32
 8004ac6:	2f46      	cmp	r7, #70	; 0x46
 8004ac8:	d004      	beq.n	8004ad4 <_svfprintf_r+0xd9c>
 8004aca:	2f45      	cmp	r7, #69	; 0x45
 8004acc:	d105      	bne.n	8004ada <_svfprintf_r+0xda2>
 8004ace:	f109 0601 	add.w	r6, r9, #1
 8004ad2:	e003      	b.n	8004adc <_svfprintf_r+0xda4>
 8004ad4:	464e      	mov	r6, r9
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	e001      	b.n	8004ade <_svfprintf_r+0xda6>
 8004ada:	464e      	mov	r6, r9
 8004adc:	2102      	movs	r1, #2
 8004ade:	ab1d      	add	r3, sp, #116	; 0x74
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	ab1a      	add	r3, sp, #104	; 0x68
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	ab19      	add	r3, sp, #100	; 0x64
 8004aea:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004aee:	4650      	mov	r0, sl
 8004af0:	f000 ff0a 	bl	8005908 <_dtoa_r>
 8004af4:	2f47      	cmp	r7, #71	; 0x47
 8004af6:	4680      	mov	r8, r0
 8004af8:	d102      	bne.n	8004b00 <_svfprintf_r+0xdc8>
 8004afa:	07eb      	lsls	r3, r5, #31
 8004afc:	f140 80cd 	bpl.w	8004c9a <_svfprintf_r+0xf62>
 8004b00:	eb08 0306 	add.w	r3, r8, r6
 8004b04:	2f46      	cmp	r7, #70	; 0x46
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	d111      	bne.n	8004b2e <_svfprintf_r+0xdf6>
 8004b0a:	f898 3000 	ldrb.w	r3, [r8]
 8004b0e:	2b30      	cmp	r3, #48	; 0x30
 8004b10:	d109      	bne.n	8004b26 <_svfprintf_r+0xdee>
 8004b12:	2200      	movs	r2, #0
 8004b14:	2300      	movs	r3, #0
 8004b16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b1a:	f7fb ffd1 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b1e:	b910      	cbnz	r0, 8004b26 <_svfprintf_r+0xdee>
 8004b20:	f1c6 0601 	rsb	r6, r6, #1
 8004b24:	9619      	str	r6, [sp, #100]	; 0x64
 8004b26:	9a04      	ldr	r2, [sp, #16]
 8004b28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b2a:	441a      	add	r2, r3
 8004b2c:	9204      	str	r2, [sp, #16]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b36:	f7fb ffc3 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b3a:	b908      	cbnz	r0, 8004b40 <_svfprintf_r+0xe08>
 8004b3c:	2230      	movs	r2, #48	; 0x30
 8004b3e:	e002      	b.n	8004b46 <_svfprintf_r+0xe0e>
 8004b40:	9b04      	ldr	r3, [sp, #16]
 8004b42:	931d      	str	r3, [sp, #116]	; 0x74
 8004b44:	e007      	b.n	8004b56 <_svfprintf_r+0xe1e>
 8004b46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b48:	9904      	ldr	r1, [sp, #16]
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	d903      	bls.n	8004b56 <_svfprintf_r+0xe1e>
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	911d      	str	r1, [sp, #116]	; 0x74
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e7f7      	b.n	8004b46 <_svfprintf_r+0xe0e>
 8004b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b58:	2f47      	cmp	r7, #71	; 0x47
 8004b5a:	ebc8 0303 	rsb	r3, r8, r3
 8004b5e:	9304      	str	r3, [sp, #16]
 8004b60:	d108      	bne.n	8004b74 <_svfprintf_r+0xe3c>
 8004b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b64:	1cdf      	adds	r7, r3, #3
 8004b66:	db01      	blt.n	8004b6c <_svfprintf_r+0xe34>
 8004b68:	4599      	cmp	r9, r3
 8004b6a:	da68      	bge.n	8004c3e <_svfprintf_r+0xf06>
 8004b6c:	9b02      	ldr	r3, [sp, #8]
 8004b6e:	3b02      	subs	r3, #2
 8004b70:	9302      	str	r3, [sp, #8]
 8004b72:	e002      	b.n	8004b7a <_svfprintf_r+0xe42>
 8004b74:	9b02      	ldr	r3, [sp, #8]
 8004b76:	2b65      	cmp	r3, #101	; 0x65
 8004b78:	dc4a      	bgt.n	8004c10 <_svfprintf_r+0xed8>
 8004b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004b80:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8004b84:	3b01      	subs	r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	9319      	str	r3, [sp, #100]	; 0x64
 8004b8a:	bfba      	itte	lt
 8004b8c:	425b      	neglt	r3, r3
 8004b8e:	222d      	movlt	r2, #45	; 0x2d
 8004b90:	222b      	movge	r2, #43	; 0x2b
 8004b92:	2b09      	cmp	r3, #9
 8004b94:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004b98:	dd24      	ble.n	8004be4 <_svfprintf_r+0xeac>
 8004b9a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004b9e:	200a      	movs	r0, #10
 8004ba0:	fb93 f1f0 	sdiv	r1, r3, r0
 8004ba4:	fb00 3311 	mls	r3, r0, r1, r3
 8004ba8:	3330      	adds	r3, #48	; 0x30
 8004baa:	2909      	cmp	r1, #9
 8004bac:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	dcf5      	bgt.n	8004ba0 <_svfprintf_r+0xe68>
 8004bb4:	3330      	adds	r3, #48	; 0x30
 8004bb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004bba:	1e51      	subs	r1, r2, #1
 8004bbc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004bc0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004bc4:	4281      	cmp	r1, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	d213      	bcs.n	8004bf2 <_svfprintf_r+0xeba>
 8004bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bce:	f803 2b01 	strb.w	r2, [r3], #1
 8004bd2:	e7f7      	b.n	8004bc4 <_svfprintf_r+0xe8c>
 8004bd4:	0800982e 	.word	0x0800982e
 8004bd8:	08009872 	.word	0x08009872
 8004bdc:	08009846 	.word	0x08009846
 8004be0:	0800984a 	.word	0x0800984a
 8004be4:	2230      	movs	r2, #48	; 0x30
 8004be6:	4413      	add	r3, r2
 8004be8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004bec:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004bf0:	aa1c      	add	r2, sp, #112	; 0x70
 8004bf2:	ab1b      	add	r3, sp, #108	; 0x6c
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	9a04      	ldr	r2, [sp, #16]
 8004bf8:	9310      	str	r3, [sp, #64]	; 0x40
 8004bfa:	2a01      	cmp	r2, #1
 8004bfc:	eb03 0902 	add.w	r9, r3, r2
 8004c00:	dc02      	bgt.n	8004c08 <_svfprintf_r+0xed0>
 8004c02:	f015 0701 	ands.w	r7, r5, #1
 8004c06:	d032      	beq.n	8004c6e <_svfprintf_r+0xf36>
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	2700      	movs	r7, #0
 8004c0c:	4499      	add	r9, r3
 8004c0e:	e02e      	b.n	8004c6e <_svfprintf_r+0xf36>
 8004c10:	9b02      	ldr	r3, [sp, #8]
 8004c12:	2b66      	cmp	r3, #102	; 0x66
 8004c14:	d113      	bne.n	8004c3e <_svfprintf_r+0xf06>
 8004c16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dd07      	ble.n	8004c2c <_svfprintf_r+0xef4>
 8004c1c:	f1b9 0f00 	cmp.w	r9, #0
 8004c20:	d101      	bne.n	8004c26 <_svfprintf_r+0xeee>
 8004c22:	07ee      	lsls	r6, r5, #31
 8004c24:	d521      	bpl.n	8004c6a <_svfprintf_r+0xf32>
 8004c26:	9a08      	ldr	r2, [sp, #32]
 8004c28:	4413      	add	r3, r2
 8004c2a:	e006      	b.n	8004c3a <_svfprintf_r+0xf02>
 8004c2c:	f1b9 0f00 	cmp.w	r9, #0
 8004c30:	d101      	bne.n	8004c36 <_svfprintf_r+0xefe>
 8004c32:	07ed      	lsls	r5, r5, #31
 8004c34:	d514      	bpl.n	8004c60 <_svfprintf_r+0xf28>
 8004c36:	9b08      	ldr	r3, [sp, #32]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	444b      	add	r3, r9
 8004c3c:	e015      	b.n	8004c6a <_svfprintf_r+0xf32>
 8004c3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c40:	9a04      	ldr	r2, [sp, #16]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	db03      	blt.n	8004c4e <_svfprintf_r+0xf16>
 8004c46:	07e8      	lsls	r0, r5, #31
 8004c48:	d50d      	bpl.n	8004c66 <_svfprintf_r+0xf2e>
 8004c4a:	9a08      	ldr	r2, [sp, #32]
 8004c4c:	e006      	b.n	8004c5c <_svfprintf_r+0xf24>
 8004c4e:	9a04      	ldr	r2, [sp, #16]
 8004c50:	9908      	ldr	r1, [sp, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	440a      	add	r2, r1
 8004c56:	dc05      	bgt.n	8004c64 <_svfprintf_r+0xf2c>
 8004c58:	f1c3 0301 	rsb	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	e002      	b.n	8004c66 <_svfprintf_r+0xf2e>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e002      	b.n	8004c6a <_svfprintf_r+0xf32>
 8004c64:	4613      	mov	r3, r2
 8004c66:	2267      	movs	r2, #103	; 0x67
 8004c68:	9202      	str	r2, [sp, #8]
 8004c6a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c70:	b113      	cbz	r3, 8004c78 <_svfprintf_r+0xf40>
 8004c72:	232d      	movs	r3, #45	; 0x2d
 8004c74:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004c78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	f7ff bb4c 	b.w	8004318 <_svfprintf_r+0x5e0>
 8004c80:	2200      	movs	r2, #0
 8004c82:	2300      	movs	r3, #0
 8004c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c88:	f7fb ff24 	bl	8000ad4 <__aeabi_dcmplt>
 8004c8c:	b110      	cbz	r0, 8004c94 <_svfprintf_r+0xf5c>
 8004c8e:	232d      	movs	r3, #45	; 0x2d
 8004c90:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <_svfprintf_r+0xf7c>)
 8004c96:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <_svfprintf_r+0xf80>)
 8004c98:	e6e3      	b.n	8004a62 <_svfprintf_r+0xd2a>
 8004c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c9c:	1a1b      	subs	r3, r3, r0
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	e75f      	b.n	8004b62 <_svfprintf_r+0xe2a>
 8004ca2:	ea56 0207 	orrs.w	r2, r6, r7
 8004ca6:	f47f aaaa 	bne.w	80041fe <_svfprintf_r+0x4c6>
 8004caa:	f7ff baaf 	b.w	800420c <_svfprintf_r+0x4d4>
 8004cae:	b03d      	add	sp, #244	; 0xf4
 8004cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb4:	0800983e 	.word	0x0800983e
 8004cb8:	08009842 	.word	0x08009842

08004cbc <__svfscanf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	461f      	mov	r7, r3
 8004cc2:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8004cc6:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8004cca:	460d      	mov	r5, r1
 8004ccc:	0499      	lsls	r1, r3, #18
 8004cce:	4681      	mov	r9, r0
 8004cd0:	9206      	str	r2, [sp, #24]
 8004cd2:	d406      	bmi.n	8004ce2 <__svfscanf_r+0x26>
 8004cd4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8004cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cde:	81ab      	strh	r3, [r5, #12]
 8004ce0:	666a      	str	r2, [r5, #100]	; 0x64
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9305      	str	r3, [sp, #20]
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	4698      	mov	r8, r3
 8004cea:	9303      	str	r3, [sp, #12]
 8004cec:	9b06      	ldr	r3, [sp, #24]
 8004cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	920f      	str	r2, [sp, #60]	; 0x3c
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	f000 853f 	beq.w	800577a <__svfscanf_r+0xabe>
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <__svfscanf_r+0x2ac>)
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	188b      	adds	r3, r1, r2
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8004d0c:	b1cb      	cbz	r3, 8004d42 <__svfscanf_r+0x86>
 8004d0e:	686b      	ldr	r3, [r5, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	dd0f      	ble.n	8004d34 <__svfscanf_r+0x78>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	4994      	ldr	r1, [pc, #592]	; (8004f68 <__svfscanf_r+0x2ac>)
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	6809      	ldr	r1, [r1, #0]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	7852      	ldrb	r2, [r2, #1]
 8004d20:	0712      	lsls	r2, r2, #28
 8004d22:	d5e3      	bpl.n	8004cec <__svfscanf_r+0x30>
 8004d24:	686a      	ldr	r2, [r5, #4]
 8004d26:	3301      	adds	r3, #1
 8004d28:	3a01      	subs	r2, #1
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	606a      	str	r2, [r5, #4]
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	e7ec      	b.n	8004d0e <__svfscanf_r+0x52>
 8004d34:	4629      	mov	r1, r5
 8004d36:	4648      	mov	r0, r9
 8004d38:	f002 fc42 	bl	80075c0 <__srefill_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d0e9      	beq.n	8004d14 <__svfscanf_r+0x58>
 8004d40:	e7d4      	b.n	8004cec <__svfscanf_r+0x30>
 8004d42:	2a25      	cmp	r2, #37	; 0x25
 8004d44:	d155      	bne.n	8004df2 <__svfscanf_r+0x136>
 8004d46:	9a06      	ldr	r2, [sp, #24]
 8004d48:	4626      	mov	r6, r4
 8004d4a:	200a      	movs	r0, #10
 8004d4c:	9b06      	ldr	r3, [sp, #24]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	9306      	str	r3, [sp, #24]
 8004d52:	7813      	ldrb	r3, [r2, #0]
 8004d54:	2b63      	cmp	r3, #99	; 0x63
 8004d56:	f000 808f 	beq.w	8004e78 <__svfscanf_r+0x1bc>
 8004d5a:	d828      	bhi.n	8004dae <__svfscanf_r+0xf2>
 8004d5c:	2b44      	cmp	r3, #68	; 0x44
 8004d5e:	f000 80b5 	beq.w	8004ecc <__svfscanf_r+0x210>
 8004d62:	d812      	bhi.n	8004d8a <__svfscanf_r+0xce>
 8004d64:	2b2a      	cmp	r3, #42	; 0x2a
 8004d66:	d05f      	beq.n	8004e28 <__svfscanf_r+0x16c>
 8004d68:	d805      	bhi.n	8004d76 <__svfscanf_r+0xba>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8507 	beq.w	800577e <__svfscanf_r+0xac2>
 8004d70:	2b25      	cmp	r3, #37	; 0x25
 8004d72:	d03e      	beq.n	8004df2 <__svfscanf_r+0x136>
 8004d74:	e0a4      	b.n	8004ec0 <__svfscanf_r+0x204>
 8004d76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004d7a:	2a09      	cmp	r2, #9
 8004d7c:	f200 80a0 	bhi.w	8004ec0 <__svfscanf_r+0x204>
 8004d80:	fb00 3606 	mla	r6, r0, r6, r3
 8004d84:	3e30      	subs	r6, #48	; 0x30
 8004d86:	9a06      	ldr	r2, [sp, #24]
 8004d88:	e7e0      	b.n	8004d4c <__svfscanf_r+0x90>
 8004d8a:	2b4c      	cmp	r3, #76	; 0x4c
 8004d8c:	d058      	beq.n	8004e40 <__svfscanf_r+0x184>
 8004d8e:	d804      	bhi.n	8004d9a <__svfscanf_r+0xde>
 8004d90:	2b45      	cmp	r3, #69	; 0x45
 8004d92:	d064      	beq.n	8004e5e <__svfscanf_r+0x1a2>
 8004d94:	2b47      	cmp	r3, #71	; 0x47
 8004d96:	d062      	beq.n	8004e5e <__svfscanf_r+0x1a2>
 8004d98:	e092      	b.n	8004ec0 <__svfscanf_r+0x204>
 8004d9a:	2b58      	cmp	r3, #88	; 0x58
 8004d9c:	d05c      	beq.n	8004e58 <__svfscanf_r+0x19c>
 8004d9e:	2b5b      	cmp	r3, #91	; 0x5b
 8004da0:	d060      	beq.n	8004e64 <__svfscanf_r+0x1a8>
 8004da2:	2b4f      	cmp	r3, #79	; 0x4f
 8004da4:	f040 808c 	bne.w	8004ec0 <__svfscanf_r+0x204>
 8004da8:	f044 0401 	orr.w	r4, r4, #1
 8004dac:	e04e      	b.n	8004e4c <__svfscanf_r+0x190>
 8004dae:	2b6c      	cmp	r3, #108	; 0x6c
 8004db0:	d03d      	beq.n	8004e2e <__svfscanf_r+0x172>
 8004db2:	d80d      	bhi.n	8004dd0 <__svfscanf_r+0x114>
 8004db4:	2b67      	cmp	r3, #103	; 0x67
 8004db6:	d803      	bhi.n	8004dc0 <__svfscanf_r+0x104>
 8004db8:	2b65      	cmp	r3, #101	; 0x65
 8004dba:	f0c0 8089 	bcc.w	8004ed0 <__svfscanf_r+0x214>
 8004dbe:	e04e      	b.n	8004e5e <__svfscanf_r+0x1a2>
 8004dc0:	2b68      	cmp	r3, #104	; 0x68
 8004dc2:	d040      	beq.n	8004e46 <__svfscanf_r+0x18a>
 8004dc4:	2b69      	cmp	r3, #105	; 0x69
 8004dc6:	d17b      	bne.n	8004ec0 <__svfscanf_r+0x204>
 8004dc8:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <__svfscanf_r+0x2b0>)
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e082      	b.n	8004ed6 <__svfscanf_r+0x21a>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d056      	beq.n	8004e82 <__svfscanf_r+0x1c6>
 8004dd4:	d804      	bhi.n	8004de0 <__svfscanf_r+0x124>
 8004dd6:	2b6e      	cmp	r3, #110	; 0x6e
 8004dd8:	d059      	beq.n	8004e8e <__svfscanf_r+0x1d2>
 8004dda:	2b6f      	cmp	r3, #111	; 0x6f
 8004ddc:	d036      	beq.n	8004e4c <__svfscanf_r+0x190>
 8004dde:	e06f      	b.n	8004ec0 <__svfscanf_r+0x204>
 8004de0:	2b75      	cmp	r3, #117	; 0x75
 8004de2:	d037      	beq.n	8004e54 <__svfscanf_r+0x198>
 8004de4:	2b78      	cmp	r3, #120	; 0x78
 8004de6:	d037      	beq.n	8004e58 <__svfscanf_r+0x19c>
 8004de8:	2b73      	cmp	r3, #115	; 0x73
 8004dea:	d169      	bne.n	8004ec0 <__svfscanf_r+0x204>
 8004dec:	f04f 0a02 	mov.w	sl, #2
 8004df0:	e074      	b.n	8004edc <__svfscanf_r+0x220>
 8004df2:	686b      	ldr	r3, [r5, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd0f      	ble.n	8004e18 <__svfscanf_r+0x15c>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	9a06      	ldr	r2, [sp, #24]
 8004dfc:	7819      	ldrb	r1, [r3, #0]
 8004dfe:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f040 84b9 	bne.w	800577a <__svfscanf_r+0xabe>
 8004e08:	686a      	ldr	r2, [r5, #4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	606a      	str	r2, [r5, #4]
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f108 0801 	add.w	r8, r8, #1
 8004e16:	e769      	b.n	8004cec <__svfscanf_r+0x30>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f002 fbd0 	bl	80075c0 <__srefill_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d0e9      	beq.n	8004df8 <__svfscanf_r+0x13c>
 8004e24:	f000 bc9e 	b.w	8005764 <__svfscanf_r+0xaa8>
 8004e28:	f044 0410 	orr.w	r4, r4, #16
 8004e2c:	e7ab      	b.n	8004d86 <__svfscanf_r+0xca>
 8004e2e:	7853      	ldrb	r3, [r2, #1]
 8004e30:	2b6c      	cmp	r3, #108	; 0x6c
 8004e32:	d102      	bne.n	8004e3a <__svfscanf_r+0x17e>
 8004e34:	1c93      	adds	r3, r2, #2
 8004e36:	9306      	str	r3, [sp, #24]
 8004e38:	e002      	b.n	8004e40 <__svfscanf_r+0x184>
 8004e3a:	f044 0401 	orr.w	r4, r4, #1
 8004e3e:	e7a2      	b.n	8004d86 <__svfscanf_r+0xca>
 8004e40:	f044 0402 	orr.w	r4, r4, #2
 8004e44:	e79f      	b.n	8004d86 <__svfscanf_r+0xca>
 8004e46:	f044 0404 	orr.w	r4, r4, #4
 8004e4a:	e79c      	b.n	8004d86 <__svfscanf_r+0xca>
 8004e4c:	4b48      	ldr	r3, [pc, #288]	; (8004f70 <__svfscanf_r+0x2b4>)
 8004e4e:	9305      	str	r3, [sp, #20]
 8004e50:	2308      	movs	r3, #8
 8004e52:	e040      	b.n	8004ed6 <__svfscanf_r+0x21a>
 8004e54:	4b46      	ldr	r3, [pc, #280]	; (8004f70 <__svfscanf_r+0x2b4>)
 8004e56:	e03c      	b.n	8004ed2 <__svfscanf_r+0x216>
 8004e58:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8004e5c:	e013      	b.n	8004e86 <__svfscanf_r+0x1ca>
 8004e5e:	f04f 0a04 	mov.w	sl, #4
 8004e62:	e03b      	b.n	8004edc <__svfscanf_r+0x220>
 8004e64:	9906      	ldr	r1, [sp, #24]
 8004e66:	a812      	add	r0, sp, #72	; 0x48
 8004e68:	f002 fc3e 	bl	80076e8 <__sccl>
 8004e6c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8004e70:	9006      	str	r0, [sp, #24]
 8004e72:	f04f 0a01 	mov.w	sl, #1
 8004e76:	e031      	b.n	8004edc <__svfscanf_r+0x220>
 8004e78:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8004e7c:	f04f 0a00 	mov.w	sl, #0
 8004e80:	e02c      	b.n	8004edc <__svfscanf_r+0x220>
 8004e82:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 8004e86:	4b3a      	ldr	r3, [pc, #232]	; (8004f70 <__svfscanf_r+0x2b4>)
 8004e88:	9305      	str	r3, [sp, #20]
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	e023      	b.n	8004ed6 <__svfscanf_r+0x21a>
 8004e8e:	06e6      	lsls	r6, r4, #27
 8004e90:	f53f af2c 	bmi.w	8004cec <__svfscanf_r+0x30>
 8004e94:	f014 0f04 	tst.w	r4, #4
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	f107 0304 	add.w	r3, r7, #4
 8004e9e:	d002      	beq.n	8004ea6 <__svfscanf_r+0x1ea>
 8004ea0:	f8a2 8000 	strh.w	r8, [r2]
 8004ea4:	e003      	b.n	8004eae <__svfscanf_r+0x1f2>
 8004ea6:	07e0      	lsls	r0, r4, #31
 8004ea8:	d503      	bpl.n	8004eb2 <__svfscanf_r+0x1f6>
 8004eaa:	f8c2 8000 	str.w	r8, [r2]
 8004eae:	461f      	mov	r7, r3
 8004eb0:	e71c      	b.n	8004cec <__svfscanf_r+0x30>
 8004eb2:	07a1      	lsls	r1, r4, #30
 8004eb4:	d5f9      	bpl.n	8004eaa <__svfscanf_r+0x1ee>
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	17c1      	asrs	r1, r0, #31
 8004eba:	e9c2 0100 	strd	r0, r1, [r2]
 8004ebe:	e7f6      	b.n	8004eae <__svfscanf_r+0x1f2>
 8004ec0:	440b      	add	r3, r1
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <__svfscanf_r+0x214>
 8004ecc:	f044 0401 	orr.w	r4, r4, #1
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <__svfscanf_r+0x2b0>)
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	230a      	movs	r3, #10
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	f04f 0a03 	mov.w	sl, #3
 8004edc:	686b      	ldr	r3, [r5, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dd02      	ble.n	8004ee8 <__svfscanf_r+0x22c>
 8004ee2:	0663      	lsls	r3, r4, #25
 8004ee4:	d422      	bmi.n	8004f2c <__svfscanf_r+0x270>
 8004ee6:	e010      	b.n	8004f0a <__svfscanf_r+0x24e>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4648      	mov	r0, r9
 8004eec:	f002 fb68 	bl	80075c0 <__srefill_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0f6      	beq.n	8004ee2 <__svfscanf_r+0x226>
 8004ef4:	f000 bc36 	b.w	8005764 <__svfscanf_r+0xaa8>
 8004ef8:	686a      	ldr	r2, [r5, #4]
 8004efa:	3a01      	subs	r2, #1
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	606a      	str	r2, [r5, #4]
 8004f04:	dd0a      	ble.n	8004f1c <__svfscanf_r+0x260>
 8004f06:	3301      	adds	r3, #1
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <__svfscanf_r+0x2ac>)
 8004f0e:	7819      	ldrb	r1, [r3, #0]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	440a      	add	r2, r1
 8004f14:	7852      	ldrb	r2, [r2, #1]
 8004f16:	0710      	lsls	r0, r2, #28
 8004f18:	d4ee      	bmi.n	8004ef8 <__svfscanf_r+0x23c>
 8004f1a:	e007      	b.n	8004f2c <__svfscanf_r+0x270>
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4648      	mov	r0, r9
 8004f20:	f002 fb4e 	bl	80075c0 <__srefill_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d0f0      	beq.n	8004f0a <__svfscanf_r+0x24e>
 8004f28:	f000 bc1c 	b.w	8005764 <__svfscanf_r+0xaa8>
 8004f2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f30:	f1ba 0f03 	cmp.w	sl, #3
 8004f34:	d805      	bhi.n	8004f42 <__svfscanf_r+0x286>
 8004f36:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8004f3a:	008a      	.short	0x008a
 8004f3c:	019800dd 	.word	0x019800dd
 8004f40:	0265      	.short	0x0265
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	bf08      	it	eq
 8004f46:	2601      	moveq	r6, #1
 8004f48:	f014 0301 	ands.w	r3, r4, #1
 8004f4c:	f004 0410 	and.w	r4, r4, #16
 8004f50:	d056      	beq.n	8005000 <__svfscanf_r+0x344>
 8004f52:	2208      	movs	r2, #8
 8004f54:	2100      	movs	r1, #0
 8004f56:	a810      	add	r0, sp, #64	; 0x40
 8004f58:	f7fe fe2e 	bl	8003bb8 <memset>
 8004f5c:	b954      	cbnz	r4, 8004f74 <__svfscanf_r+0x2b8>
 8004f5e:	f8d7 b000 	ldr.w	fp, [r7]
 8004f62:	3704      	adds	r7, #4
 8004f64:	e008      	b.n	8004f78 <__svfscanf_r+0x2bc>
 8004f66:	bf00      	nop
 8004f68:	2000050c 	.word	0x2000050c
 8004f6c:	08008461 	.word	0x08008461
 8004f70:	080086cd 	.word	0x080086cd
 8004f74:	f04f 0b00 	mov.w	fp, #0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9307      	str	r3, [sp, #28]
 8004f7c:	f001 fd0c 	bl	8006998 <__locale_mb_cur_max>
 8004f80:	9b07      	ldr	r3, [sp, #28]
 8004f82:	4298      	cmp	r0, r3
 8004f84:	f000 83ee 	beq.w	8005764 <__svfscanf_r+0xaa8>
 8004f88:	682a      	ldr	r2, [r5, #0]
 8004f8a:	a852      	add	r0, sp, #328	; 0x148
 8004f8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004f90:	54c1      	strb	r1, [r0, r3]
 8004f92:	f103 0a01 	add.w	sl, r3, #1
 8004f96:	686b      	ldr	r3, [r5, #4]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	e885 000c 	stmia.w	r5, {r2, r3}
 8004f9e:	ab10      	add	r3, sp, #64	; 0x40
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	4653      	mov	r3, sl
 8004fa8:	4648      	mov	r0, r9
 8004faa:	f001 fd07 	bl	80069bc <_mbrtowc_r>
 8004fae:	1c41      	adds	r1, r0, #1
 8004fb0:	f000 83d8 	beq.w	8005764 <__svfscanf_r+0xaa8>
 8004fb4:	b938      	cbnz	r0, 8004fc6 <__svfscanf_r+0x30a>
 8004fb6:	44d0      	add	r8, sl
 8004fb8:	3e01      	subs	r6, #1
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	f040 83e2 	bne.w	8005784 <__svfscanf_r+0xac8>
 8004fc0:	f8cb 4000 	str.w	r4, [fp]
 8004fc4:	e004      	b.n	8004fd0 <__svfscanf_r+0x314>
 8004fc6:	3002      	adds	r0, #2
 8004fc8:	d006      	beq.n	8004fd8 <__svfscanf_r+0x31c>
 8004fca:	44d0      	add	r8, sl
 8004fcc:	3e01      	subs	r6, #1
 8004fce:	b90c      	cbnz	r4, 8004fd4 <__svfscanf_r+0x318>
 8004fd0:	f10b 0b04 	add.w	fp, fp, #4
 8004fd4:	f04f 0a00 	mov.w	sl, #0
 8004fd8:	686b      	ldr	r3, [r5, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dc0c      	bgt.n	8004ff8 <__svfscanf_r+0x33c>
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4648      	mov	r0, r9
 8004fe2:	f002 faed 	bl	80075c0 <__srefill_r>
 8004fe6:	b138      	cbz	r0, 8004ff8 <__svfscanf_r+0x33c>
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	f040 83ba 	bne.w	8005764 <__svfscanf_r+0xaa8>
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	f000 80f0 	beq.w	80051d6 <__svfscanf_r+0x51a>
 8004ff6:	e679      	b.n	8004cec <__svfscanf_r+0x30>
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	d0f9      	beq.n	8004ff0 <__svfscanf_r+0x334>
 8004ffc:	4653      	mov	r3, sl
 8004ffe:	e7bc      	b.n	8004f7a <__svfscanf_r+0x2be>
 8005000:	b1c4      	cbz	r4, 8005034 <__svfscanf_r+0x378>
 8005002:	461c      	mov	r4, r3
 8005004:	686b      	ldr	r3, [r5, #4]
 8005006:	682a      	ldr	r2, [r5, #0]
 8005008:	42b3      	cmp	r3, r6
 800500a:	da0d      	bge.n	8005028 <__svfscanf_r+0x36c>
 800500c:	441c      	add	r4, r3
 800500e:	1af6      	subs	r6, r6, r3
 8005010:	4413      	add	r3, r2
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	4629      	mov	r1, r5
 8005016:	4648      	mov	r0, r9
 8005018:	f002 fad2 	bl	80075c0 <__srefill_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	d0f1      	beq.n	8005004 <__svfscanf_r+0x348>
 8005020:	2c00      	cmp	r4, #0
 8005022:	f040 80f7 	bne.w	8005214 <__svfscanf_r+0x558>
 8005026:	e39d      	b.n	8005764 <__svfscanf_r+0xaa8>
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	606b      	str	r3, [r5, #4]
 800502c:	1993      	adds	r3, r2, r6
 800502e:	4434      	add	r4, r6
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	e0ef      	b.n	8005214 <__svfscanf_r+0x558>
 8005034:	9500      	str	r5, [sp, #0]
 8005036:	4633      	mov	r3, r6
 8005038:	2201      	movs	r2, #1
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	4648      	mov	r0, r9
 800503e:	1d3c      	adds	r4, r7, #4
 8005040:	f001 fab4 	bl	80065ac <_fread_r>
 8005044:	2800      	cmp	r0, #0
 8005046:	f000 838d 	beq.w	8005764 <__svfscanf_r+0xaa8>
 800504a:	4480      	add	r8, r0
 800504c:	e108      	b.n	8005260 <__svfscanf_r+0x5a4>
 800504e:	2e00      	cmp	r6, #0
 8005050:	bf08      	it	eq
 8005052:	f04f 36ff 	moveq.w	r6, #4294967295
 8005056:	06e2      	lsls	r2, r4, #27
 8005058:	d51f      	bpl.n	800509a <__svfscanf_r+0x3de>
 800505a:	46b2      	mov	sl, r6
 800505c:	2400      	movs	r4, #0
 800505e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800506a:	b192      	cbz	r2, 8005092 <__svfscanf_r+0x3d6>
 800506c:	686a      	ldr	r2, [r5, #4]
 800506e:	3401      	adds	r4, #1
 8005070:	3a01      	subs	r2, #1
 8005072:	3301      	adds	r3, #1
 8005074:	42a6      	cmp	r6, r4
 8005076:	606a      	str	r2, [r5, #4]
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	f000 80ca 	beq.w	8005212 <__svfscanf_r+0x556>
 800507e:	2a00      	cmp	r2, #0
 8005080:	dcef      	bgt.n	8005062 <__svfscanf_r+0x3a6>
 8005082:	4629      	mov	r1, r5
 8005084:	4648      	mov	r0, r9
 8005086:	f002 fa9b 	bl	80075c0 <__srefill_r>
 800508a:	2800      	cmp	r0, #0
 800508c:	d0e9      	beq.n	8005062 <__svfscanf_r+0x3a6>
 800508e:	46a2      	mov	sl, r4
 8005090:	e0bf      	b.n	8005212 <__svfscanf_r+0x556>
 8005092:	2c00      	cmp	r4, #0
 8005094:	f040 80be 	bne.w	8005214 <__svfscanf_r+0x558>
 8005098:	e36f      	b.n	800577a <__svfscanf_r+0xabe>
 800509a:	683c      	ldr	r4, [r7, #0]
 800509c:	f107 0a04 	add.w	sl, r7, #4
 80050a0:	4426      	add	r6, r4
 80050a2:	4627      	mov	r7, r4
 80050a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80050b0:	b1aa      	cbz	r2, 80050de <__svfscanf_r+0x422>
 80050b2:	686a      	ldr	r2, [r5, #4]
 80050b4:	3a01      	subs	r2, #1
 80050b6:	606a      	str	r2, [r5, #4]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	602a      	str	r2, [r5, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	f807 3b01 	strb.w	r3, [r7], #1
 80050c2:	42be      	cmp	r6, r7
 80050c4:	d00c      	beq.n	80050e0 <__svfscanf_r+0x424>
 80050c6:	686b      	ldr	r3, [r5, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dced      	bgt.n	80050a8 <__svfscanf_r+0x3ec>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4648      	mov	r0, r9
 80050d0:	f002 fa76 	bl	80075c0 <__srefill_r>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d0e7      	beq.n	80050a8 <__svfscanf_r+0x3ec>
 80050d8:	42bc      	cmp	r4, r7
 80050da:	f000 8343 	beq.w	8005764 <__svfscanf_r+0xaa8>
 80050de:	463e      	mov	r6, r7
 80050e0:	1b34      	subs	r4, r6, r4
 80050e2:	f000 834a 	beq.w	800577a <__svfscanf_r+0xabe>
 80050e6:	2300      	movs	r3, #0
 80050e8:	7033      	strb	r3, [r6, #0]
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	4657      	mov	r7, sl
 80050f2:	e08f      	b.n	8005214 <__svfscanf_r+0x558>
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	bf08      	it	eq
 80050f8:	f04f 36ff 	moveq.w	r6, #4294967295
 80050fc:	f014 0301 	ands.w	r3, r4, #1
 8005100:	f004 0410 	and.w	r4, r4, #16
 8005104:	d06a      	beq.n	80051dc <__svfscanf_r+0x520>
 8005106:	2208      	movs	r2, #8
 8005108:	2100      	movs	r1, #0
 800510a:	a810      	add	r0, sp, #64	; 0x40
 800510c:	f7fe fd54 	bl	8003bb8 <memset>
 8005110:	b91c      	cbnz	r4, 800511a <__svfscanf_r+0x45e>
 8005112:	f8d7 b000 	ldr.w	fp, [r7]
 8005116:	3704      	adds	r7, #4
 8005118:	e001      	b.n	800511e <__svfscanf_r+0x462>
 800511a:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800511e:	2300      	movs	r3, #0
 8005120:	682a      	ldr	r2, [r5, #0]
 8005122:	49a5      	ldr	r1, [pc, #660]	; (80053b8 <__svfscanf_r+0x6fc>)
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	6809      	ldr	r1, [r1, #0]
 8005128:	440a      	add	r2, r1
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	0711      	lsls	r1, r2, #28
 800512e:	d44d      	bmi.n	80051cc <__svfscanf_r+0x510>
 8005130:	2e00      	cmp	r6, #0
 8005132:	d04b      	beq.n	80051cc <__svfscanf_r+0x510>
 8005134:	9307      	str	r3, [sp, #28]
 8005136:	f001 fc2f 	bl	8006998 <__locale_mb_cur_max>
 800513a:	9b07      	ldr	r3, [sp, #28]
 800513c:	4283      	cmp	r3, r0
 800513e:	f000 8311 	beq.w	8005764 <__svfscanf_r+0xaa8>
 8005142:	682a      	ldr	r2, [r5, #0]
 8005144:	a852      	add	r0, sp, #328	; 0x148
 8005146:	f812 1b01 	ldrb.w	r1, [r2], #1
 800514a:	54c1      	strb	r1, [r0, r3]
 800514c:	f103 0a01 	add.w	sl, r3, #1
 8005150:	686b      	ldr	r3, [r5, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	e885 000c 	stmia.w	r5, {r2, r3}
 8005158:	ab10      	add	r3, sp, #64	; 0x40
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4602      	mov	r2, r0
 800515e:	4653      	mov	r3, sl
 8005160:	4659      	mov	r1, fp
 8005162:	4648      	mov	r0, r9
 8005164:	f001 fc2a 	bl	80069bc <_mbrtowc_r>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	f000 82fb 	beq.w	8005764 <__svfscanf_r+0xaa8>
 800516e:	b910      	cbnz	r0, 8005176 <__svfscanf_r+0x4ba>
 8005170:	f8cb 0000 	str.w	r0, [fp]
 8005174:	e001      	b.n	800517a <__svfscanf_r+0x4be>
 8005176:	3002      	adds	r0, #2
 8005178:	d019      	beq.n	80051ae <__svfscanf_r+0x4f2>
 800517a:	f8db 0000 	ldr.w	r0, [fp]
 800517e:	f001 fbf9 	bl	8006974 <iswspace>
 8005182:	b160      	cbz	r0, 800519e <__svfscanf_r+0x4e2>
 8005184:	ae52      	add	r6, sp, #328	; 0x148
 8005186:	f1ba 0f00 	cmp.w	sl, #0
 800518a:	d01f      	beq.n	80051cc <__svfscanf_r+0x510>
 800518c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005190:	462a      	mov	r2, r5
 8005192:	f816 100a 	ldrb.w	r1, [r6, sl]
 8005196:	4648      	mov	r0, r9
 8005198:	f003 fc7a 	bl	8008a90 <_ungetc_r>
 800519c:	e7f3      	b.n	8005186 <__svfscanf_r+0x4ca>
 800519e:	44d0      	add	r8, sl
 80051a0:	3e01      	subs	r6, #1
 80051a2:	b91c      	cbnz	r4, 80051ac <__svfscanf_r+0x4f0>
 80051a4:	f10b 0b04 	add.w	fp, fp, #4
 80051a8:	46a2      	mov	sl, r4
 80051aa:	e000      	b.n	80051ae <__svfscanf_r+0x4f2>
 80051ac:	4682      	mov	sl, r0
 80051ae:	686b      	ldr	r3, [r5, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	dc09      	bgt.n	80051c8 <__svfscanf_r+0x50c>
 80051b4:	4629      	mov	r1, r5
 80051b6:	4648      	mov	r0, r9
 80051b8:	f002 fa02 	bl	80075c0 <__srefill_r>
 80051bc:	b120      	cbz	r0, 80051c8 <__svfscanf_r+0x50c>
 80051be:	f1ba 0f00 	cmp.w	sl, #0
 80051c2:	f040 82cf 	bne.w	8005764 <__svfscanf_r+0xaa8>
 80051c6:	e001      	b.n	80051cc <__svfscanf_r+0x510>
 80051c8:	4653      	mov	r3, sl
 80051ca:	e7a9      	b.n	8005120 <__svfscanf_r+0x464>
 80051cc:	2c00      	cmp	r4, #0
 80051ce:	f47f ad8d 	bne.w	8004cec <__svfscanf_r+0x30>
 80051d2:	f8cb 4000 	str.w	r4, [fp]
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	e586      	b.n	8004cea <__svfscanf_r+0x2e>
 80051dc:	b1e4      	cbz	r4, 8005218 <__svfscanf_r+0x55c>
 80051de:	461c      	mov	r4, r3
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	4975      	ldr	r1, [pc, #468]	; (80053b8 <__svfscanf_r+0x6fc>)
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	6809      	ldr	r1, [r1, #0]
 80051e8:	440a      	add	r2, r1
 80051ea:	7852      	ldrb	r2, [r2, #1]
 80051ec:	0712      	lsls	r2, r2, #28
 80051ee:	d411      	bmi.n	8005214 <__svfscanf_r+0x558>
 80051f0:	686a      	ldr	r2, [r5, #4]
 80051f2:	3401      	adds	r4, #1
 80051f4:	3a01      	subs	r2, #1
 80051f6:	3301      	adds	r3, #1
 80051f8:	42b4      	cmp	r4, r6
 80051fa:	606a      	str	r2, [r5, #4]
 80051fc:	602b      	str	r3, [r5, #0]
 80051fe:	d009      	beq.n	8005214 <__svfscanf_r+0x558>
 8005200:	2a00      	cmp	r2, #0
 8005202:	dced      	bgt.n	80051e0 <__svfscanf_r+0x524>
 8005204:	4629      	mov	r1, r5
 8005206:	4648      	mov	r0, r9
 8005208:	f002 f9da 	bl	80075c0 <__srefill_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	d0e7      	beq.n	80051e0 <__svfscanf_r+0x524>
 8005210:	e000      	b.n	8005214 <__svfscanf_r+0x558>
 8005212:	4654      	mov	r4, sl
 8005214:	44a0      	add	r8, r4
 8005216:	e569      	b.n	8004cec <__svfscanf_r+0x30>
 8005218:	1d3c      	adds	r4, r7, #4
 800521a:	683f      	ldr	r7, [r7, #0]
 800521c:	443e      	add	r6, r7
 800521e:	46ba      	mov	sl, r7
 8005220:	6829      	ldr	r1, [r5, #0]
 8005222:	4a65      	ldr	r2, [pc, #404]	; (80053b8 <__svfscanf_r+0x6fc>)
 8005224:	780b      	ldrb	r3, [r1, #0]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	4413      	add	r3, r2
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	d412      	bmi.n	8005256 <__svfscanf_r+0x59a>
 8005230:	686b      	ldr	r3, [r5, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	606b      	str	r3, [r5, #4]
 8005236:	1c4b      	adds	r3, r1, #1
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	780b      	ldrb	r3, [r1, #0]
 800523c:	f80a 3b01 	strb.w	r3, [sl], #1
 8005240:	4556      	cmp	r6, sl
 8005242:	d009      	beq.n	8005258 <__svfscanf_r+0x59c>
 8005244:	686b      	ldr	r3, [r5, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	dcea      	bgt.n	8005220 <__svfscanf_r+0x564>
 800524a:	4629      	mov	r1, r5
 800524c:	4648      	mov	r0, r9
 800524e:	f002 f9b7 	bl	80075c0 <__srefill_r>
 8005252:	2800      	cmp	r0, #0
 8005254:	d0e4      	beq.n	8005220 <__svfscanf_r+0x564>
 8005256:	4656      	mov	r6, sl
 8005258:	2300      	movs	r3, #0
 800525a:	7033      	strb	r3, [r6, #0]
 800525c:	1bf6      	subs	r6, r6, r7
 800525e:	44b0      	add	r8, r6
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	4627      	mov	r7, r4
 8005268:	e540      	b.n	8004cec <__svfscanf_r+0x30>
 800526a:	1e73      	subs	r3, r6, #1
 800526c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005270:	bf88      	it	hi
 8005272:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8005276:	4a51      	ldr	r2, [pc, #324]	; (80053bc <__svfscanf_r+0x700>)
 8005278:	bf8a      	itet	hi
 800527a:	eb06 030c 	addhi.w	r3, r6, ip
 800527e:	2300      	movls	r3, #0
 8005280:	f240 165d 	movwhi	r6, #349	; 0x15d
 8005284:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8005288:	f04f 0b00 	mov.w	fp, #0
 800528c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8005290:	f8d5 c000 	ldr.w	ip, [r5]
 8005294:	f89c 1000 	ldrb.w	r1, [ip]
 8005298:	2939      	cmp	r1, #57	; 0x39
 800529a:	d809      	bhi.n	80052b0 <__svfscanf_r+0x5f4>
 800529c:	2938      	cmp	r1, #56	; 0x38
 800529e:	d231      	bcs.n	8005304 <__svfscanf_r+0x648>
 80052a0:	2930      	cmp	r1, #48	; 0x30
 80052a2:	d015      	beq.n	80052d0 <__svfscanf_r+0x614>
 80052a4:	d829      	bhi.n	80052fa <__svfscanf_r+0x63e>
 80052a6:	292b      	cmp	r1, #43	; 0x2b
 80052a8:	d038      	beq.n	800531c <__svfscanf_r+0x660>
 80052aa:	292d      	cmp	r1, #45	; 0x2d
 80052ac:	d036      	beq.n	800531c <__svfscanf_r+0x660>
 80052ae:	e05d      	b.n	800536c <__svfscanf_r+0x6b0>
 80052b0:	2958      	cmp	r1, #88	; 0x58
 80052b2:	d038      	beq.n	8005326 <__svfscanf_r+0x66a>
 80052b4:	d805      	bhi.n	80052c2 <__svfscanf_r+0x606>
 80052b6:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 80052ba:	f1be 0f05 	cmp.w	lr, #5
 80052be:	d927      	bls.n	8005310 <__svfscanf_r+0x654>
 80052c0:	e054      	b.n	800536c <__svfscanf_r+0x6b0>
 80052c2:	2961      	cmp	r1, #97	; 0x61
 80052c4:	d352      	bcc.n	800536c <__svfscanf_r+0x6b0>
 80052c6:	2966      	cmp	r1, #102	; 0x66
 80052c8:	d922      	bls.n	8005310 <__svfscanf_r+0x654>
 80052ca:	2978      	cmp	r1, #120	; 0x78
 80052cc:	d02b      	beq.n	8005326 <__svfscanf_r+0x66a>
 80052ce:	e04d      	b.n	800536c <__svfscanf_r+0x6b0>
 80052d0:	0520      	lsls	r0, r4, #20
 80052d2:	d533      	bpl.n	800533c <__svfscanf_r+0x680>
 80052d4:	9804      	ldr	r0, [sp, #16]
 80052d6:	b918      	cbnz	r0, 80052e0 <__svfscanf_r+0x624>
 80052d8:	2008      	movs	r0, #8
 80052da:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80052de:	9004      	str	r0, [sp, #16]
 80052e0:	0560      	lsls	r0, r4, #21
 80052e2:	d502      	bpl.n	80052ea <__svfscanf_r+0x62e>
 80052e4:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 80052e8:	e028      	b.n	800533c <__svfscanf_r+0x680>
 80052ea:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 80052ee:	b10b      	cbz	r3, 80052f4 <__svfscanf_r+0x638>
 80052f0:	3b01      	subs	r3, #1
 80052f2:	3601      	adds	r6, #1
 80052f4:	f10b 0b01 	add.w	fp, fp, #1
 80052f8:	e024      	b.n	8005344 <__svfscanf_r+0x688>
 80052fa:	9804      	ldr	r0, [sp, #16]
 80052fc:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8005300:	9004      	str	r0, [sp, #16]
 8005302:	e008      	b.n	8005316 <__svfscanf_r+0x65a>
 8005304:	9804      	ldr	r0, [sp, #16]
 8005306:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 800530a:	9004      	str	r0, [sp, #16]
 800530c:	2808      	cmp	r0, #8
 800530e:	e001      	b.n	8005314 <__svfscanf_r+0x658>
 8005310:	9804      	ldr	r0, [sp, #16]
 8005312:	280a      	cmp	r0, #10
 8005314:	dd2a      	ble.n	800536c <__svfscanf_r+0x6b0>
 8005316:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 800531a:	e00f      	b.n	800533c <__svfscanf_r+0x680>
 800531c:	0620      	lsls	r0, r4, #24
 800531e:	d525      	bpl.n	800536c <__svfscanf_r+0x6b0>
 8005320:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8005324:	e00a      	b.n	800533c <__svfscanf_r+0x680>
 8005326:	f404 6ec0 	and.w	lr, r4, #1536	; 0x600
 800532a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 800532e:	d11d      	bne.n	800536c <__svfscanf_r+0x6b0>
 8005330:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8005334:	2010      	movs	r0, #16
 8005336:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 800533a:	9004      	str	r0, [sp, #16]
 800533c:	f88a 1000 	strb.w	r1, [sl]
 8005340:	f10a 0a01 	add.w	sl, sl, #1
 8005344:	6869      	ldr	r1, [r5, #4]
 8005346:	3901      	subs	r1, #1
 8005348:	2900      	cmp	r1, #0
 800534a:	6069      	str	r1, [r5, #4]
 800534c:	dd03      	ble.n	8005356 <__svfscanf_r+0x69a>
 800534e:	f10c 0001 	add.w	r0, ip, #1
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	e008      	b.n	8005368 <__svfscanf_r+0x6ac>
 8005356:	4629      	mov	r1, r5
 8005358:	4648      	mov	r0, r9
 800535a:	9208      	str	r2, [sp, #32]
 800535c:	9307      	str	r3, [sp, #28]
 800535e:	f002 f92f 	bl	80075c0 <__srefill_r>
 8005362:	9b07      	ldr	r3, [sp, #28]
 8005364:	9a08      	ldr	r2, [sp, #32]
 8005366:	b908      	cbnz	r0, 800536c <__svfscanf_r+0x6b0>
 8005368:	3e01      	subs	r6, #1
 800536a:	d191      	bne.n	8005290 <__svfscanf_r+0x5d4>
 800536c:	05e3      	lsls	r3, r4, #23
 800536e:	d50f      	bpl.n	8005390 <__svfscanf_r+0x6d4>
 8005370:	ab52      	add	r3, sp, #328	; 0x148
 8005372:	459a      	cmp	sl, r3
 8005374:	d908      	bls.n	8005388 <__svfscanf_r+0x6cc>
 8005376:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800537a:	462a      	mov	r2, r5
 800537c:	4648      	mov	r0, r9
 800537e:	f003 fb87 	bl	8008a90 <_ungetc_r>
 8005382:	f10a 36ff 	add.w	r6, sl, #4294967295
 8005386:	46b2      	mov	sl, r6
 8005388:	ab52      	add	r3, sp, #328	; 0x148
 800538a:	459a      	cmp	sl, r3
 800538c:	f000 81f5 	beq.w	800577a <__svfscanf_r+0xabe>
 8005390:	f014 0210 	ands.w	r2, r4, #16
 8005394:	d130      	bne.n	80053f8 <__svfscanf_r+0x73c>
 8005396:	9b04      	ldr	r3, [sp, #16]
 8005398:	9e05      	ldr	r6, [sp, #20]
 800539a:	f88a 2000 	strb.w	r2, [sl]
 800539e:	a952      	add	r1, sp, #328	; 0x148
 80053a0:	4648      	mov	r0, r9
 80053a2:	47b0      	blx	r6
 80053a4:	f014 0f20 	tst.w	r4, #32
 80053a8:	f107 0304 	add.w	r3, r7, #4
 80053ac:	d11e      	bne.n	80053ec <__svfscanf_r+0x730>
 80053ae:	0766      	lsls	r6, r4, #29
 80053b0:	d506      	bpl.n	80053c0 <__svfscanf_r+0x704>
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	8010      	strh	r0, [r2, #0]
 80053b6:	e01b      	b.n	80053f0 <__svfscanf_r+0x734>
 80053b8:	2000050c 	.word	0x2000050c
 80053bc:	08009888 	.word	0x08009888
 80053c0:	f014 0201 	ands.w	r2, r4, #1
 80053c4:	d112      	bne.n	80053ec <__svfscanf_r+0x730>
 80053c6:	07a1      	lsls	r1, r4, #30
 80053c8:	d510      	bpl.n	80053ec <__svfscanf_r+0x730>
 80053ca:	4bac      	ldr	r3, [pc, #688]	; (800567c <__svfscanf_r+0x9c0>)
 80053cc:	9905      	ldr	r1, [sp, #20]
 80053ce:	4299      	cmp	r1, r3
 80053d0:	4648      	mov	r0, r9
 80053d2:	9b04      	ldr	r3, [sp, #16]
 80053d4:	a952      	add	r1, sp, #328	; 0x148
 80053d6:	d102      	bne.n	80053de <__svfscanf_r+0x722>
 80053d8:	f003 f9f6 	bl	80087c8 <_strtoull_r>
 80053dc:	e001      	b.n	80053e2 <__svfscanf_r+0x726>
 80053de:	f003 f8c5 	bl	800856c <_strtoll_r>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	3704      	adds	r7, #4
 80053e6:	e9c3 0100 	strd	r0, r1, [r3]
 80053ea:	e002      	b.n	80053f2 <__svfscanf_r+0x736>
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	6010      	str	r0, [r2, #0]
 80053f0:	461f      	mov	r7, r3
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	9303      	str	r3, [sp, #12]
 80053f8:	ab52      	add	r3, sp, #328	; 0x148
 80053fa:	ebc3 0a0a 	rsb	sl, r3, sl
 80053fe:	44da      	add	sl, fp
 8005400:	44d0      	add	r8, sl
 8005402:	e473      	b.n	8004cec <__svfscanf_r+0x30>
 8005404:	4648      	mov	r0, r9
 8005406:	f001 facd 	bl	80069a4 <_localeconv_r>
 800540a:	6803      	ldr	r3, [r0, #0]
 800540c:	930b      	str	r3, [sp, #44]	; 0x2c
 800540e:	1e73      	subs	r3, r6, #1
 8005410:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005414:	bf88      	it	hi
 8005416:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 800541a:	f04f 0a00 	mov.w	sl, #0
 800541e:	bf8b      	itete	hi
 8005420:	eb06 030c 	addhi.w	r3, r6, ip
 8005424:	2300      	movls	r3, #0
 8005426:	9307      	strhi	r3, [sp, #28]
 8005428:	9307      	strls	r3, [sp, #28]
 800542a:	bf88      	it	hi
 800542c:	f240 165d 	movwhi	r6, #349	; 0x15d
 8005430:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 8005434:	4652      	mov	r2, sl
 8005436:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800543a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800543e:	4653      	mov	r3, sl
 8005440:	f8cd a020 	str.w	sl, [sp, #32]
 8005444:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8005448:	f8d5 c000 	ldr.w	ip, [r5]
 800544c:	f89c 1000 	ldrb.w	r1, [ip]
 8005450:	294e      	cmp	r1, #78	; 0x4e
 8005452:	d048      	beq.n	80054e6 <__svfscanf_r+0x82a>
 8005454:	d815      	bhi.n	8005482 <__svfscanf_r+0x7c6>
 8005456:	2939      	cmp	r1, #57	; 0x39
 8005458:	d809      	bhi.n	800546e <__svfscanf_r+0x7b2>
 800545a:	2931      	cmp	r1, #49	; 0x31
 800545c:	d236      	bcs.n	80054cc <__svfscanf_r+0x810>
 800545e:	292d      	cmp	r1, #45	; 0x2d
 8005460:	d03b      	beq.n	80054da <__svfscanf_r+0x81e>
 8005462:	2930      	cmp	r1, #48	; 0x30
 8005464:	d026      	beq.n	80054b4 <__svfscanf_r+0x7f8>
 8005466:	292b      	cmp	r1, #43	; 0x2b
 8005468:	f040 8097 	bne.w	800559a <__svfscanf_r+0x8de>
 800546c:	e035      	b.n	80054da <__svfscanf_r+0x81e>
 800546e:	2945      	cmp	r1, #69	; 0x45
 8005470:	d07c      	beq.n	800556c <__svfscanf_r+0x8b0>
 8005472:	d802      	bhi.n	800547a <__svfscanf_r+0x7be>
 8005474:	2941      	cmp	r1, #65	; 0x41
 8005476:	d049      	beq.n	800550c <__svfscanf_r+0x850>
 8005478:	e08f      	b.n	800559a <__svfscanf_r+0x8de>
 800547a:	2946      	cmp	r1, #70	; 0x46
 800547c:	d064      	beq.n	8005548 <__svfscanf_r+0x88c>
 800547e:	2949      	cmp	r1, #73	; 0x49
 8005480:	e011      	b.n	80054a6 <__svfscanf_r+0x7ea>
 8005482:	2966      	cmp	r1, #102	; 0x66
 8005484:	d060      	beq.n	8005548 <__svfscanf_r+0x88c>
 8005486:	d80a      	bhi.n	800549e <__svfscanf_r+0x7e2>
 8005488:	2959      	cmp	r1, #89	; 0x59
 800548a:	d069      	beq.n	8005560 <__svfscanf_r+0x8a4>
 800548c:	d802      	bhi.n	8005494 <__svfscanf_r+0x7d8>
 800548e:	2954      	cmp	r1, #84	; 0x54
 8005490:	d060      	beq.n	8005554 <__svfscanf_r+0x898>
 8005492:	e082      	b.n	800559a <__svfscanf_r+0x8de>
 8005494:	2961      	cmp	r1, #97	; 0x61
 8005496:	d039      	beq.n	800550c <__svfscanf_r+0x850>
 8005498:	2965      	cmp	r1, #101	; 0x65
 800549a:	d067      	beq.n	800556c <__svfscanf_r+0x8b0>
 800549c:	e07d      	b.n	800559a <__svfscanf_r+0x8de>
 800549e:	296e      	cmp	r1, #110	; 0x6e
 80054a0:	d021      	beq.n	80054e6 <__svfscanf_r+0x82a>
 80054a2:	d802      	bhi.n	80054aa <__svfscanf_r+0x7ee>
 80054a4:	2969      	cmp	r1, #105	; 0x69
 80054a6:	d035      	beq.n	8005514 <__svfscanf_r+0x858>
 80054a8:	e077      	b.n	800559a <__svfscanf_r+0x8de>
 80054aa:	2974      	cmp	r1, #116	; 0x74
 80054ac:	d052      	beq.n	8005554 <__svfscanf_r+0x898>
 80054ae:	2979      	cmp	r1, #121	; 0x79
 80054b0:	d056      	beq.n	8005560 <__svfscanf_r+0x8a4>
 80054b2:	e072      	b.n	800559a <__svfscanf_r+0x8de>
 80054b4:	05e0      	lsls	r0, r4, #23
 80054b6:	d509      	bpl.n	80054cc <__svfscanf_r+0x810>
 80054b8:	9907      	ldr	r1, [sp, #28]
 80054ba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80054be:	3301      	adds	r3, #1
 80054c0:	2900      	cmp	r1, #0
 80054c2:	d07a      	beq.n	80055ba <__svfscanf_r+0x8fe>
 80054c4:	3901      	subs	r1, #1
 80054c6:	9107      	str	r1, [sp, #28]
 80054c8:	3601      	adds	r6, #1
 80054ca:	e076      	b.n	80055ba <__svfscanf_r+0x8fe>
 80054cc:	eb12 0f0a 	cmn.w	r2, sl
 80054d0:	f040 808c 	bne.w	80055ec <__svfscanf_r+0x930>
 80054d4:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 80054d8:	e06b      	b.n	80055b2 <__svfscanf_r+0x8f6>
 80054da:	0620      	lsls	r0, r4, #24
 80054dc:	f140 8086 	bpl.w	80055ec <__svfscanf_r+0x930>
 80054e0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80054e4:	e065      	b.n	80055b2 <__svfscanf_r+0x8f6>
 80054e6:	b94a      	cbnz	r2, 80054fc <__svfscanf_r+0x840>
 80054e8:	b953      	cbnz	r3, 8005500 <__svfscanf_r+0x844>
 80054ea:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 80054ee:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 80054f2:	d105      	bne.n	8005500 <__svfscanf_r+0x844>
 80054f4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 80054f8:	2201      	movs	r2, #1
 80054fa:	e05a      	b.n	80055b2 <__svfscanf_r+0x8f6>
 80054fc:	2a02      	cmp	r2, #2
 80054fe:	d057      	beq.n	80055b0 <__svfscanf_r+0x8f4>
 8005500:	f1ba 0f01 	cmp.w	sl, #1
 8005504:	d01b      	beq.n	800553e <__svfscanf_r+0x882>
 8005506:	f1ba 0f04 	cmp.w	sl, #4
 800550a:	e017      	b.n	800553c <__svfscanf_r+0x880>
 800550c:	2a01      	cmp	r2, #1
 800550e:	d16d      	bne.n	80055ec <__svfscanf_r+0x930>
 8005510:	2202      	movs	r2, #2
 8005512:	e04e      	b.n	80055b2 <__svfscanf_r+0x8f6>
 8005514:	f1ba 0f00 	cmp.w	sl, #0
 8005518:	d10b      	bne.n	8005532 <__svfscanf_r+0x876>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d167      	bne.n	80055ee <__svfscanf_r+0x932>
 800551e:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 8005522:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8005526:	d164      	bne.n	80055f2 <__svfscanf_r+0x936>
 8005528:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800552c:	f04f 0a01 	mov.w	sl, #1
 8005530:	e03f      	b.n	80055b2 <__svfscanf_r+0x8f6>
 8005532:	f1ba 0f03 	cmp.w	sl, #3
 8005536:	d002      	beq.n	800553e <__svfscanf_r+0x882>
 8005538:	f1ba 0f05 	cmp.w	sl, #5
 800553c:	d156      	bne.n	80055ec <__svfscanf_r+0x930>
 800553e:	f10a 0a01 	add.w	sl, sl, #1
 8005542:	fa5f fa8a 	uxtb.w	sl, sl
 8005546:	e034      	b.n	80055b2 <__svfscanf_r+0x8f6>
 8005548:	f1ba 0f02 	cmp.w	sl, #2
 800554c:	d14e      	bne.n	80055ec <__svfscanf_r+0x930>
 800554e:	f04f 0a03 	mov.w	sl, #3
 8005552:	e02e      	b.n	80055b2 <__svfscanf_r+0x8f6>
 8005554:	f1ba 0f06 	cmp.w	sl, #6
 8005558:	d148      	bne.n	80055ec <__svfscanf_r+0x930>
 800555a:	f04f 0a07 	mov.w	sl, #7
 800555e:	e028      	b.n	80055b2 <__svfscanf_r+0x8f6>
 8005560:	f1ba 0f07 	cmp.w	sl, #7
 8005564:	d142      	bne.n	80055ec <__svfscanf_r+0x930>
 8005566:	f04f 0a08 	mov.w	sl, #8
 800556a:	e022      	b.n	80055b2 <__svfscanf_r+0x8f6>
 800556c:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 8005570:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8005574:	d003      	beq.n	800557e <__svfscanf_r+0x8c2>
 8005576:	0560      	lsls	r0, r4, #21
 8005578:	d538      	bpl.n	80055ec <__svfscanf_r+0x930>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d039      	beq.n	80055f2 <__svfscanf_r+0x936>
 800557e:	05a0      	lsls	r0, r4, #22
 8005580:	bf5e      	ittt	pl
 8005582:	9808      	ldrpl	r0, [sp, #32]
 8005584:	f8cd b028 	strpl.w	fp, [sp, #40]	; 0x28
 8005588:	1a1b      	subpl	r3, r3, r0
 800558a:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800558e:	bf58      	it	pl
 8005590:	9309      	strpl	r3, [sp, #36]	; 0x24
 8005592:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 8005596:	2300      	movs	r3, #0
 8005598:	e00b      	b.n	80055b2 <__svfscanf_r+0x8f6>
 800559a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800559c:	f890 e000 	ldrb.w	lr, [r0]
 80055a0:	4571      	cmp	r1, lr
 80055a2:	d123      	bne.n	80055ec <__svfscanf_r+0x930>
 80055a4:	05a0      	lsls	r0, r4, #22
 80055a6:	d521      	bpl.n	80055ec <__svfscanf_r+0x930>
 80055a8:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 80055ac:	9308      	str	r3, [sp, #32]
 80055ae:	e000      	b.n	80055b2 <__svfscanf_r+0x8f6>
 80055b0:	2203      	movs	r2, #3
 80055b2:	f88b 1000 	strb.w	r1, [fp]
 80055b6:	f10b 0b01 	add.w	fp, fp, #1
 80055ba:	6869      	ldr	r1, [r5, #4]
 80055bc:	3901      	subs	r1, #1
 80055be:	2900      	cmp	r1, #0
 80055c0:	f106 36ff 	add.w	r6, r6, #4294967295
 80055c4:	f108 0801 	add.w	r8, r8, #1
 80055c8:	6069      	str	r1, [r5, #4]
 80055ca:	dd03      	ble.n	80055d4 <__svfscanf_r+0x918>
 80055cc:	f10c 0001 	add.w	r0, ip, #1
 80055d0:	6028      	str	r0, [r5, #0]
 80055d2:	e008      	b.n	80055e6 <__svfscanf_r+0x92a>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4648      	mov	r0, r9
 80055d8:	920d      	str	r2, [sp, #52]	; 0x34
 80055da:	930c      	str	r3, [sp, #48]	; 0x30
 80055dc:	f001 fff0 	bl	80075c0 <__srefill_r>
 80055e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055e4:	b910      	cbnz	r0, 80055ec <__svfscanf_r+0x930>
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	f47f af2e 	bne.w	8005448 <__svfscanf_r+0x78c>
 80055ec:	b10b      	cbz	r3, 80055f2 <__svfscanf_r+0x936>
 80055ee:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80055f2:	3a01      	subs	r2, #1
 80055f4:	2a01      	cmp	r2, #1
 80055f6:	d80a      	bhi.n	800560e <__svfscanf_r+0x952>
 80055f8:	ac52      	add	r4, sp, #328	; 0x148
 80055fa:	45a3      	cmp	fp, r4
 80055fc:	f240 80bd 	bls.w	800577a <__svfscanf_r+0xabe>
 8005600:	462a      	mov	r2, r5
 8005602:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005606:	4648      	mov	r0, r9
 8005608:	f003 fa42 	bl	8008a90 <_ungetc_r>
 800560c:	e7f5      	b.n	80055fa <__svfscanf_r+0x93e>
 800560e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005612:	2a06      	cmp	r2, #6
 8005614:	d822      	bhi.n	800565c <__svfscanf_r+0x9a0>
 8005616:	f1ba 0f02 	cmp.w	sl, #2
 800561a:	d801      	bhi.n	8005620 <__svfscanf_r+0x964>
 800561c:	ac52      	add	r4, sp, #328	; 0x148
 800561e:	e013      	b.n	8005648 <__svfscanf_r+0x98c>
 8005620:	f1aa 0a03 	sub.w	sl, sl, #3
 8005624:	fa5f fa8a 	uxtb.w	sl, sl
 8005628:	ebca 060b 	rsb	r6, sl, fp
 800562c:	45b3      	cmp	fp, r6
 800562e:	d008      	beq.n	8005642 <__svfscanf_r+0x986>
 8005630:	462a      	mov	r2, r5
 8005632:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	4648      	mov	r0, r9
 800563a:	f003 fa29 	bl	8008a90 <_ungetc_r>
 800563e:	9b07      	ldr	r3, [sp, #28]
 8005640:	e7f4      	b.n	800562c <__svfscanf_r+0x970>
 8005642:	ebca 0808 	rsb	r8, sl, r8
 8005646:	e009      	b.n	800565c <__svfscanf_r+0x9a0>
 8005648:	45a3      	cmp	fp, r4
 800564a:	f240 8096 	bls.w	800577a <__svfscanf_r+0xabe>
 800564e:	462a      	mov	r2, r5
 8005650:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005654:	4648      	mov	r0, r9
 8005656:	f003 fa1b 	bl	8008a90 <_ungetc_r>
 800565a:	e7f5      	b.n	8005648 <__svfscanf_r+0x98c>
 800565c:	05e1      	lsls	r1, r4, #23
 800565e:	d52d      	bpl.n	80056bc <__svfscanf_r+0xa00>
 8005660:	0562      	lsls	r2, r4, #21
 8005662:	d50d      	bpl.n	8005680 <__svfscanf_r+0x9c4>
 8005664:	ac52      	add	r4, sp, #328	; 0x148
 8005666:	45a3      	cmp	fp, r4
 8005668:	f240 8087 	bls.w	800577a <__svfscanf_r+0xabe>
 800566c:	462a      	mov	r2, r5
 800566e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005672:	4648      	mov	r0, r9
 8005674:	f003 fa0c 	bl	8008a90 <_ungetc_r>
 8005678:	e7f5      	b.n	8005666 <__svfscanf_r+0x9aa>
 800567a:	bf00      	nop
 800567c:	080086cd 	.word	0x080086cd
 8005680:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
 8005684:	2965      	cmp	r1, #101	; 0x65
 8005686:	f10b 36ff 	add.w	r6, fp, #4294967295
 800568a:	f108 3aff 	add.w	sl, r8, #4294967295
 800568e:	d00d      	beq.n	80056ac <__svfscanf_r+0x9f0>
 8005690:	2945      	cmp	r1, #69	; 0x45
 8005692:	d00b      	beq.n	80056ac <__svfscanf_r+0x9f0>
 8005694:	462a      	mov	r2, r5
 8005696:	4648      	mov	r0, r9
 8005698:	9307      	str	r3, [sp, #28]
 800569a:	f003 f9f9 	bl	8008a90 <_ungetc_r>
 800569e:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
 80056a2:	9b07      	ldr	r3, [sp, #28]
 80056a4:	f1ab 0602 	sub.w	r6, fp, #2
 80056a8:	f1a8 0a02 	sub.w	sl, r8, #2
 80056ac:	462a      	mov	r2, r5
 80056ae:	4648      	mov	r0, r9
 80056b0:	9307      	str	r3, [sp, #28]
 80056b2:	f003 f9ed 	bl	8008a90 <_ungetc_r>
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	46d0      	mov	r8, sl
 80056ba:	46b3      	mov	fp, r6
 80056bc:	f014 0210 	ands.w	r2, r4, #16
 80056c0:	f47f ab14 	bne.w	8004cec <__svfscanf_r+0x30>
 80056c4:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 80056c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056cc:	f88b 2000 	strb.w	r2, [fp]
 80056d0:	d104      	bne.n	80056dc <__svfscanf_r+0xa20>
 80056d2:	9a08      	ldr	r2, [sp, #32]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	425a      	negs	r2, r3
 80056d8:	b963      	cbnz	r3, 80056f4 <__svfscanf_r+0xa38>
 80056da:	e015      	b.n	8005708 <__svfscanf_r+0xa4c>
 80056dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056de:	b19b      	cbz	r3, 8005708 <__svfscanf_r+0xa4c>
 80056e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056e2:	230a      	movs	r3, #10
 80056e4:	3101      	adds	r1, #1
 80056e6:	4648      	mov	r0, r9
 80056e8:	f002 feba 	bl	8008460 <_strtol_r>
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80056f2:	1ac2      	subs	r2, r0, r3
 80056f4:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 80056f8:	459b      	cmp	fp, r3
 80056fa:	bf28      	it	cs
 80056fc:	f20d 2b9a 	addwcs	fp, sp, #666	; 0x29a
 8005700:	4923      	ldr	r1, [pc, #140]	; (8005790 <__svfscanf_r+0xad4>)
 8005702:	4658      	mov	r0, fp
 8005704:	f002 f828 	bl	8007758 <sprintf>
 8005708:	2200      	movs	r2, #0
 800570a:	a952      	add	r1, sp, #328	; 0x148
 800570c:	4648      	mov	r0, r9
 800570e:	f002 f8a7 	bl	8007860 <_strtod_r>
 8005712:	f014 0f01 	tst.w	r4, #1
 8005716:	ec5b ab10 	vmov	sl, fp, d0
 800571a:	f107 0604 	add.w	r6, r7, #4
 800571e:	d102      	bne.n	8005726 <__svfscanf_r+0xa6a>
 8005720:	f014 0402 	ands.w	r4, r4, #2
 8005724:	d003      	beq.n	800572e <__svfscanf_r+0xa72>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	e9c3 ab00 	strd	sl, fp, [r3]
 800572c:	e014      	b.n	8005758 <__svfscanf_r+0xa9c>
 800572e:	ee10 2a10 	vmov	r2, s0
 8005732:	465b      	mov	r3, fp
 8005734:	ee10 0a10 	vmov	r0, s0
 8005738:	4659      	mov	r1, fp
 800573a:	683f      	ldr	r7, [r7, #0]
 800573c:	f7fb f9f2 	bl	8000b24 <__aeabi_dcmpun>
 8005740:	b128      	cbz	r0, 800574e <__svfscanf_r+0xa92>
 8005742:	4620      	mov	r0, r4
 8005744:	f002 f802 	bl	800774c <nanf>
 8005748:	ed87 0a00 	vstr	s0, [r7]
 800574c:	e004      	b.n	8005758 <__svfscanf_r+0xa9c>
 800574e:	4650      	mov	r0, sl
 8005750:	4659      	mov	r1, fp
 8005752:	f7fb fa45 	bl	8000be0 <__aeabi_d2f>
 8005756:	6038      	str	r0, [r7, #0]
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	4637      	mov	r7, r6
 8005760:	f7ff bac4 	b.w	8004cec <__svfscanf_r+0x30>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	b153      	cbz	r3, 800577e <__svfscanf_r+0xac2>
 8005768:	89ab      	ldrh	r3, [r5, #12]
 800576a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	bf18      	it	ne
 8005772:	f04f 33ff 	movne.w	r3, #4294967295
 8005776:	4618      	mov	r0, r3
 8005778:	e006      	b.n	8005788 <__svfscanf_r+0xacc>
 800577a:	9803      	ldr	r0, [sp, #12]
 800577c:	e004      	b.n	8005788 <__svfscanf_r+0xacc>
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	e001      	b.n	8005788 <__svfscanf_r+0xacc>
 8005784:	4682      	mov	sl, r0
 8005786:	e427      	b.n	8004fd8 <__svfscanf_r+0x31c>
 8005788:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	08009882 	.word	0x08009882

08005794 <_vfscanf_r>:
 8005794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005798:	460c      	mov	r4, r1
 800579a:	4616      	mov	r6, r2
 800579c:	461f      	mov	r7, r3
 800579e:	4605      	mov	r5, r0
 80057a0:	b118      	cbz	r0, 80057aa <_vfscanf_r+0x16>
 80057a2:	6983      	ldr	r3, [r0, #24]
 80057a4:	b90b      	cbnz	r3, 80057aa <_vfscanf_r+0x16>
 80057a6:	f000 fe8f 	bl	80064c8 <__sinit>
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <_vfscanf_r+0x44>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d101      	bne.n	80057b4 <_vfscanf_r+0x20>
 80057b0:	686c      	ldr	r4, [r5, #4]
 80057b2:	e008      	b.n	80057c6 <_vfscanf_r+0x32>
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <_vfscanf_r+0x48>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d101      	bne.n	80057be <_vfscanf_r+0x2a>
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	e003      	b.n	80057c6 <_vfscanf_r+0x32>
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <_vfscanf_r+0x4c>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	bf08      	it	eq
 80057c4:	68ec      	ldreq	r4, [r5, #12]
 80057c6:	463b      	mov	r3, r7
 80057c8:	4632      	mov	r2, r6
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	f7ff ba73 	b.w	8004cbc <__svfscanf_r>
 80057d6:	bf00      	nop
 80057d8:	080099b8 	.word	0x080099b8
 80057dc:	080099d8 	.word	0x080099d8
 80057e0:	080099f8 	.word	0x080099f8

080057e4 <quorem>:
 80057e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	6903      	ldr	r3, [r0, #16]
 80057ea:	690c      	ldr	r4, [r1, #16]
 80057ec:	429c      	cmp	r4, r3
 80057ee:	4680      	mov	r8, r0
 80057f0:	f300 8083 	bgt.w	80058fa <quorem+0x116>
 80057f4:	3c01      	subs	r4, #1
 80057f6:	f101 0714 	add.w	r7, r1, #20
 80057fa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80057fe:	f100 0614 	add.w	r6, r0, #20
 8005802:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005806:	eb06 030e 	add.w	r3, r6, lr
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	3501      	adds	r5, #1
 800580e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005812:	fbb3 f5f5 	udiv	r5, r3, r5
 8005816:	eb07 090e 	add.w	r9, r7, lr
 800581a:	2d00      	cmp	r5, #0
 800581c:	d039      	beq.n	8005892 <quorem+0xae>
 800581e:	f04f 0a00 	mov.w	sl, #0
 8005822:	4638      	mov	r0, r7
 8005824:	46b4      	mov	ip, r6
 8005826:	46d3      	mov	fp, sl
 8005828:	f850 2b04 	ldr.w	r2, [r0], #4
 800582c:	b293      	uxth	r3, r2
 800582e:	fb05 a303 	mla	r3, r5, r3, sl
 8005832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	ebc3 030b 	rsb	r3, r3, fp
 800583c:	0c12      	lsrs	r2, r2, #16
 800583e:	f8bc b000 	ldrh.w	fp, [ip]
 8005842:	fb05 a202 	mla	r2, r5, r2, sl
 8005846:	fa13 f38b 	uxtah	r3, r3, fp
 800584a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800584e:	fa1f fb82 	uxth.w	fp, r2
 8005852:	f8dc 2000 	ldr.w	r2, [ip]
 8005856:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800585a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005864:	4581      	cmp	r9, r0
 8005866:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800586a:	f84c 3b04 	str.w	r3, [ip], #4
 800586e:	d2db      	bcs.n	8005828 <quorem+0x44>
 8005870:	f856 300e 	ldr.w	r3, [r6, lr]
 8005874:	b96b      	cbnz	r3, 8005892 <quorem+0xae>
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	3b04      	subs	r3, #4
 800587a:	429e      	cmp	r6, r3
 800587c:	461a      	mov	r2, r3
 800587e:	d302      	bcc.n	8005886 <quorem+0xa2>
 8005880:	f8c8 4010 	str.w	r4, [r8, #16]
 8005884:	e005      	b.n	8005892 <quorem+0xae>
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	3b04      	subs	r3, #4
 800588a:	2a00      	cmp	r2, #0
 800588c:	d1f8      	bne.n	8005880 <quorem+0x9c>
 800588e:	3c01      	subs	r4, #1
 8005890:	e7f3      	b.n	800587a <quorem+0x96>
 8005892:	4640      	mov	r0, r8
 8005894:	f001 fb3d 	bl	8006f12 <__mcmp>
 8005898:	2800      	cmp	r0, #0
 800589a:	db2c      	blt.n	80058f6 <quorem+0x112>
 800589c:	3501      	adds	r5, #1
 800589e:	4630      	mov	r0, r6
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	f857 1b04 	ldr.w	r1, [r7], #4
 80058a8:	f8d0 c000 	ldr.w	ip, [r0]
 80058ac:	b28a      	uxth	r2, r1
 80058ae:	ebc2 030e 	rsb	r3, r2, lr
 80058b2:	0c09      	lsrs	r1, r1, #16
 80058b4:	fa13 f38c 	uxtah	r3, r3, ip
 80058b8:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80058bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058c6:	45b9      	cmp	r9, r7
 80058c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80058cc:	f840 3b04 	str.w	r3, [r0], #4
 80058d0:	d2e8      	bcs.n	80058a4 <quorem+0xc0>
 80058d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80058d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058da:	b962      	cbnz	r2, 80058f6 <quorem+0x112>
 80058dc:	3b04      	subs	r3, #4
 80058de:	429e      	cmp	r6, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	d302      	bcc.n	80058ea <quorem+0x106>
 80058e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80058e8:	e005      	b.n	80058f6 <quorem+0x112>
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	3b04      	subs	r3, #4
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d1f8      	bne.n	80058e4 <quorem+0x100>
 80058f2:	3c01      	subs	r4, #1
 80058f4:	e7f3      	b.n	80058de <quorem+0xfa>
 80058f6:	4628      	mov	r0, r5
 80058f8:	e000      	b.n	80058fc <quorem+0x118>
 80058fa:	2000      	movs	r0, #0
 80058fc:	b003      	add	sp, #12
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005902:	0000      	movs	r0, r0
 8005904:	0000      	movs	r0, r0
	...

08005908 <_dtoa_r>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	ec59 8b10 	vmov	r8, r9, d0
 8005910:	b097      	sub	sp, #92	; 0x5c
 8005912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005914:	9106      	str	r1, [sp, #24]
 8005916:	4682      	mov	sl, r0
 8005918:	9209      	str	r2, [sp, #36]	; 0x24
 800591a:	9310      	str	r3, [sp, #64]	; 0x40
 800591c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800591e:	e9cd 8900 	strd	r8, r9, [sp]
 8005922:	b945      	cbnz	r5, 8005936 <_dtoa_r+0x2e>
 8005924:	2010      	movs	r0, #16
 8005926:	f001 f841 	bl	80069ac <malloc>
 800592a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800592e:	6045      	str	r5, [r0, #4]
 8005930:	6085      	str	r5, [r0, #8]
 8005932:	6005      	str	r5, [r0, #0]
 8005934:	60c5      	str	r5, [r0, #12]
 8005936:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	b159      	cbz	r1, 8005956 <_dtoa_r+0x4e>
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	604a      	str	r2, [r1, #4]
 8005942:	2301      	movs	r3, #1
 8005944:	4093      	lsls	r3, r2
 8005946:	608b      	str	r3, [r1, #8]
 8005948:	4650      	mov	r0, sl
 800594a:	f001 f8cc 	bl	8006ae6 <_Bfree>
 800594e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	4a9f      	ldr	r2, [pc, #636]	; (8005bd8 <_dtoa_r+0x2d0>)
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfbf      	itttt	lt
 800595e:	2301      	movlt	r3, #1
 8005960:	6023      	strlt	r3, [r4, #0]
 8005962:	9b01      	ldrlt	r3, [sp, #4]
 8005964:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005968:	bfb8      	it	lt
 800596a:	9301      	strlt	r3, [sp, #4]
 800596c:	9f01      	ldr	r7, [sp, #4]
 800596e:	bfa4      	itt	ge
 8005970:	2300      	movge	r3, #0
 8005972:	6023      	strge	r3, [r4, #0]
 8005974:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8005978:	0d1b      	lsrs	r3, r3, #20
 800597a:	051b      	lsls	r3, r3, #20
 800597c:	4293      	cmp	r3, r2
 800597e:	d11d      	bne.n	80059bc <_dtoa_r+0xb4>
 8005980:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005982:	f242 730f 	movw	r3, #9999	; 0x270f
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	b943      	cbnz	r3, 800599e <_dtoa_r+0x96>
 800598c:	4a93      	ldr	r2, [pc, #588]	; (8005bdc <_dtoa_r+0x2d4>)
 800598e:	4b94      	ldr	r3, [pc, #592]	; (8005be0 <_dtoa_r+0x2d8>)
 8005990:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8005994:	2800      	cmp	r0, #0
 8005996:	bf14      	ite	ne
 8005998:	4618      	movne	r0, r3
 800599a:	4610      	moveq	r0, r2
 800599c:	e000      	b.n	80059a0 <_dtoa_r+0x98>
 800599e:	4890      	ldr	r0, [pc, #576]	; (8005be0 <_dtoa_r+0x2d8>)
 80059a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 854a 	beq.w	800643c <_dtoa_r+0xb34>
 80059a8:	78c3      	ldrb	r3, [r0, #3]
 80059aa:	b113      	cbz	r3, 80059b2 <_dtoa_r+0xaa>
 80059ac:	f100 0308 	add.w	r3, r0, #8
 80059b0:	e000      	b.n	80059b4 <_dtoa_r+0xac>
 80059b2:	1cc3      	adds	r3, r0, #3
 80059b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	f000 bd40 	b.w	800643c <_dtoa_r+0xb34>
 80059bc:	e9dd 4500 	ldrd	r4, r5, [sp]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	f7fb f87a 	bl	8000ac0 <__aeabi_dcmpeq>
 80059cc:	4680      	mov	r8, r0
 80059ce:	b158      	cbz	r0, 80059e8 <_dtoa_r+0xe0>
 80059d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059d2:	2301      	movs	r3, #1
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8522 	beq.w	8006422 <_dtoa_r+0xb1a>
 80059de:	4881      	ldr	r0, [pc, #516]	; (8005be4 <_dtoa_r+0x2dc>)
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	3801      	subs	r0, #1
 80059e4:	f000 bd2a 	b.w	800643c <_dtoa_r+0xb34>
 80059e8:	aa14      	add	r2, sp, #80	; 0x50
 80059ea:	a915      	add	r1, sp, #84	; 0x54
 80059ec:	ec45 4b10 	vmov	d0, r4, r5
 80059f0:	4650      	mov	r0, sl
 80059f2:	f001 fb7e 	bl	80070f2 <__d2b>
 80059f6:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80059fa:	9002      	str	r0, [sp, #8]
 80059fc:	b15e      	cbz	r6, 8005a16 <_dtoa_r+0x10e>
 80059fe:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005a02:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a06:	4620      	mov	r0, r4
 8005a08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a0c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005a10:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8005a14:	e01d      	b.n	8005a52 <_dtoa_r+0x14a>
 8005a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a18:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005a1a:	441e      	add	r6, r3
 8005a1c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	dd0a      	ble.n	8005a3a <_dtoa_r+0x132>
 8005a24:	9a00      	ldr	r2, [sp, #0]
 8005a26:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005a2a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005a2e:	fa22 f000 	lsr.w	r0, r2, r0
 8005a32:	fa07 f303 	lsl.w	r3, r7, r3
 8005a36:	4318      	orrs	r0, r3
 8005a38:	e004      	b.n	8005a44 <_dtoa_r+0x13c>
 8005a3a:	f1c3 0020 	rsb	r0, r3, #32
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	fa03 f000 	lsl.w	r0, r3, r0
 8005a44:	f7fa fd5e 	bl	8000504 <__aeabi_ui2d>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005a4e:	3e01      	subs	r6, #1
 8005a50:	9311      	str	r3, [sp, #68]	; 0x44
 8005a52:	2200      	movs	r2, #0
 8005a54:	4b64      	ldr	r3, [pc, #400]	; (8005be8 <_dtoa_r+0x2e0>)
 8005a56:	f7fa fc17 	bl	8000288 <__aeabi_dsub>
 8005a5a:	a359      	add	r3, pc, #356	; (adr r3, 8005bc0 <_dtoa_r+0x2b8>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fdc6 	bl	80005f0 <__aeabi_dmul>
 8005a64:	a358      	add	r3, pc, #352	; (adr r3, 8005bc8 <_dtoa_r+0x2c0>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fc0f 	bl	800028c <__adddf3>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4630      	mov	r0, r6
 8005a72:	460d      	mov	r5, r1
 8005a74:	f7fa fd56 	bl	8000524 <__aeabi_i2d>
 8005a78:	a355      	add	r3, pc, #340	; (adr r3, 8005bd0 <_dtoa_r+0x2c8>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fdb7 	bl	80005f0 <__aeabi_dmul>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4620      	mov	r0, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7fa fbff 	bl	800028c <__adddf3>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	f7fb f85d 	bl	8000b50 <__aeabi_d2iz>
 8005a96:	2200      	movs	r2, #0
 8005a98:	4683      	mov	fp, r0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fb f818 	bl	8000ad4 <__aeabi_dcmplt>
 8005aa4:	b158      	cbz	r0, 8005abe <_dtoa_r+0x1b6>
 8005aa6:	4658      	mov	r0, fp
 8005aa8:	f7fa fd3c 	bl	8000524 <__aeabi_i2d>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fb f804 	bl	8000ac0 <__aeabi_dcmpeq>
 8005ab8:	b908      	cbnz	r0, 8005abe <_dtoa_r+0x1b6>
 8005aba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005abe:	f1bb 0f16 	cmp.w	fp, #22
 8005ac2:	d80d      	bhi.n	8005ae0 <_dtoa_r+0x1d8>
 8005ac4:	4949      	ldr	r1, [pc, #292]	; (8005bec <_dtoa_r+0x2e4>)
 8005ac6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005aca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ad2:	f7fb f81d 	bl	8000b10 <__aeabi_dcmpgt>
 8005ad6:	b130      	cbz	r0, 8005ae6 <_dtoa_r+0x1de>
 8005ad8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005adc:	2300      	movs	r3, #0
 8005ade:	e000      	b.n	8005ae2 <_dtoa_r+0x1da>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ae4:	e000      	b.n	8005ae8 <_dtoa_r+0x1e0>
 8005ae6:	900d      	str	r0, [sp, #52]	; 0x34
 8005ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aea:	1b9e      	subs	r6, r3, r6
 8005aec:	1e73      	subs	r3, r6, #1
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	bf43      	ittte	mi
 8005af2:	f1c3 0900 	rsbmi	r9, r3, #0
 8005af6:	2300      	movmi	r3, #0
 8005af8:	9305      	strmi	r3, [sp, #20]
 8005afa:	f04f 0900 	movpl.w	r9, #0
 8005afe:	f1bb 0f00 	cmp.w	fp, #0
 8005b02:	db07      	blt.n	8005b14 <_dtoa_r+0x20c>
 8005b04:	9b05      	ldr	r3, [sp, #20]
 8005b06:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005b0a:	445b      	add	r3, fp
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	e006      	b.n	8005b22 <_dtoa_r+0x21a>
 8005b14:	f1cb 0300 	rsb	r3, fp, #0
 8005b18:	9307      	str	r3, [sp, #28]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	ebcb 0909 	rsb	r9, fp, r9
 8005b20:	930c      	str	r3, [sp, #48]	; 0x30
 8005b22:	9b06      	ldr	r3, [sp, #24]
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	d827      	bhi.n	8005b78 <_dtoa_r+0x270>
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	bfc4      	itt	gt
 8005b2c:	3b04      	subgt	r3, #4
 8005b2e:	9306      	strgt	r3, [sp, #24]
 8005b30:	9b06      	ldr	r3, [sp, #24]
 8005b32:	f1a3 0302 	sub.w	r3, r3, #2
 8005b36:	bfcc      	ite	gt
 8005b38:	2500      	movgt	r5, #0
 8005b3a:	2501      	movle	r5, #1
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d820      	bhi.n	8005b82 <_dtoa_r+0x27a>
 8005b40:	e8df f003 	tbb	[pc, r3]
 8005b44:	04020e06 	.word	0x04020e06
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e002      	b.n	8005b52 <_dtoa_r+0x24a>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e008      	b.n	8005b62 <_dtoa_r+0x25a>
 8005b50:	2300      	movs	r3, #0
 8005b52:	9308      	str	r3, [sp, #32]
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dd1c      	ble.n	8005b94 <_dtoa_r+0x28c>
 8005b5a:	9303      	str	r3, [sp, #12]
 8005b5c:	4698      	mov	r8, r3
 8005b5e:	e01e      	b.n	8005b9e <_dtoa_r+0x296>
 8005b60:	2300      	movs	r3, #0
 8005b62:	9308      	str	r3, [sp, #32]
 8005b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b66:	445b      	add	r3, fp
 8005b68:	f103 0801 	add.w	r8, r3, #1
 8005b6c:	9303      	str	r3, [sp, #12]
 8005b6e:	4643      	mov	r3, r8
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	bfb8      	it	lt
 8005b74:	2301      	movlt	r3, #1
 8005b76:	e012      	b.n	8005b9e <_dtoa_r+0x296>
 8005b78:	2501      	movs	r5, #1
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	9508      	str	r5, [sp, #32]
 8005b80:	e001      	b.n	8005b86 <_dtoa_r+0x27e>
 8005b82:	2301      	movs	r3, #1
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	4698      	mov	r8, r3
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2312      	movs	r3, #18
 8005b92:	e003      	b.n	8005b9c <_dtoa_r+0x294>
 8005b94:	2301      	movs	r3, #1
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	4698      	mov	r8, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6062      	str	r2, [r4, #4]
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	f101 0214 	add.w	r2, r1, #20
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d81f      	bhi.n	8005bf0 <_dtoa_r+0x2e8>
 8005bb0:	6862      	ldr	r2, [r4, #4]
 8005bb2:	3201      	adds	r2, #1
 8005bb4:	6062      	str	r2, [r4, #4]
 8005bb6:	0049      	lsls	r1, r1, #1
 8005bb8:	e7f6      	b.n	8005ba8 <_dtoa_r+0x2a0>
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	636f4361 	.word	0x636f4361
 8005bc4:	3fd287a7 	.word	0x3fd287a7
 8005bc8:	8b60c8b3 	.word	0x8b60c8b3
 8005bcc:	3fc68a28 	.word	0x3fc68a28
 8005bd0:	509f79fb 	.word	0x509f79fb
 8005bd4:	3fd34413 	.word	0x3fd34413
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	080099ab 	.word	0x080099ab
 8005be0:	080099b4 	.word	0x080099b4
 8005be4:	08009871 	.word	0x08009871
 8005be8:	3ff80000 	.word	0x3ff80000
 8005bec:	08009a20 	.word	0x08009a20
 8005bf0:	6861      	ldr	r1, [r4, #4]
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	f000 ff42 	bl	8006a7c <_Balloc>
 8005bf8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005bfc:	6020      	str	r0, [r4, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	f1b8 0f0e 	cmp.w	r8, #14
 8005c06:	f200 815d 	bhi.w	8005ec4 <_dtoa_r+0x5bc>
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	f000 815a 	beq.w	8005ec4 <_dtoa_r+0x5bc>
 8005c10:	ed9d 7b00 	vldr	d7, [sp]
 8005c14:	f1bb 0f00 	cmp.w	fp, #0
 8005c18:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005c1c:	dd31      	ble.n	8005c82 <_dtoa_r+0x37a>
 8005c1e:	4aa0      	ldr	r2, [pc, #640]	; (8005ea0 <_dtoa_r+0x598>)
 8005c20:	f00b 030f 	and.w	r3, fp, #15
 8005c24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005c30:	06e2      	lsls	r2, r4, #27
 8005c32:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005c36:	d50c      	bpl.n	8005c52 <_dtoa_r+0x34a>
 8005c38:	4b9a      	ldr	r3, [pc, #616]	; (8005ea4 <_dtoa_r+0x59c>)
 8005c3a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c42:	f7fa fdff 	bl	8000844 <__aeabi_ddiv>
 8005c46:	f004 040f 	and.w	r4, r4, #15
 8005c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8005c4e:	2603      	movs	r6, #3
 8005c50:	e000      	b.n	8005c54 <_dtoa_r+0x34c>
 8005c52:	2602      	movs	r6, #2
 8005c54:	4d93      	ldr	r5, [pc, #588]	; (8005ea4 <_dtoa_r+0x59c>)
 8005c56:	b16c      	cbz	r4, 8005c74 <_dtoa_r+0x36c>
 8005c58:	07e3      	lsls	r3, r4, #31
 8005c5a:	d508      	bpl.n	8005c6e <_dtoa_r+0x366>
 8005c5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c64:	f7fa fcc4 	bl	80005f0 <__aeabi_dmul>
 8005c68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	1064      	asrs	r4, r4, #1
 8005c70:	3508      	adds	r5, #8
 8005c72:	e7f0      	b.n	8005c56 <_dtoa_r+0x34e>
 8005c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c7c:	f7fa fde2 	bl	8000844 <__aeabi_ddiv>
 8005c80:	e020      	b.n	8005cc4 <_dtoa_r+0x3bc>
 8005c82:	f1cb 0400 	rsb	r4, fp, #0
 8005c86:	b304      	cbz	r4, 8005cca <_dtoa_r+0x3c2>
 8005c88:	4b85      	ldr	r3, [pc, #532]	; (8005ea0 <_dtoa_r+0x598>)
 8005c8a:	4d86      	ldr	r5, [pc, #536]	; (8005ea4 <_dtoa_r+0x59c>)
 8005c8c:	f004 020f 	and.w	r2, r4, #15
 8005c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c9c:	f7fa fca8 	bl	80005f0 <__aeabi_dmul>
 8005ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca4:	1124      	asrs	r4, r4, #4
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2602      	movs	r6, #2
 8005caa:	b154      	cbz	r4, 8005cc2 <_dtoa_r+0x3ba>
 8005cac:	07e7      	lsls	r7, r4, #31
 8005cae:	d505      	bpl.n	8005cbc <_dtoa_r+0x3b4>
 8005cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cb4:	f7fa fc9c 	bl	80005f0 <__aeabi_dmul>
 8005cb8:	3601      	adds	r6, #1
 8005cba:	2301      	movs	r3, #1
 8005cbc:	1064      	asrs	r4, r4, #1
 8005cbe:	3508      	adds	r5, #8
 8005cc0:	e7f3      	b.n	8005caa <_dtoa_r+0x3a2>
 8005cc2:	b11b      	cbz	r3, 8005ccc <_dtoa_r+0x3c4>
 8005cc4:	e9cd 0100 	strd	r0, r1, [sp]
 8005cc8:	e000      	b.n	8005ccc <_dtoa_r+0x3c4>
 8005cca:	2602      	movs	r6, #2
 8005ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cce:	b1eb      	cbz	r3, 8005d0c <_dtoa_r+0x404>
 8005cd0:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4b74      	ldr	r3, [pc, #464]	; (8005ea8 <_dtoa_r+0x5a0>)
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fefa 	bl	8000ad4 <__aeabi_dcmplt>
 8005ce0:	b1a0      	cbz	r0, 8005d0c <_dtoa_r+0x404>
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	d011      	beq.n	8005d0c <_dtoa_r+0x404>
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f340 80e6 	ble.w	8005ebc <_dtoa_r+0x5b4>
 8005cf0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4b6c      	ldr	r3, [pc, #432]	; (8005eac <_dtoa_r+0x5a4>)
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7fa fc77 	bl	80005f0 <__aeabi_dmul>
 8005d02:	3601      	adds	r6, #1
 8005d04:	e9cd 0100 	strd	r0, r1, [sp]
 8005d08:	9f03      	ldr	r7, [sp, #12]
 8005d0a:	e002      	b.n	8005d12 <_dtoa_r+0x40a>
 8005d0c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005d10:	4647      	mov	r7, r8
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7fa fc06 	bl	8000524 <__aeabi_i2d>
 8005d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d1c:	f7fa fc68 	bl	80005f0 <__aeabi_dmul>
 8005d20:	2200      	movs	r2, #0
 8005d22:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <_dtoa_r+0x5a8>)
 8005d24:	f7fa fab2 	bl	800028c <__adddf3>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005d2e:	b9cf      	cbnz	r7, 8005d64 <_dtoa_r+0x45c>
 8005d30:	2200      	movs	r2, #0
 8005d32:	4b60      	ldr	r3, [pc, #384]	; (8005eb4 <_dtoa_r+0x5ac>)
 8005d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d38:	f7fa faa6 	bl	8000288 <__aeabi_dsub>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	462b      	mov	r3, r5
 8005d40:	e9cd 0100 	strd	r0, r1, [sp]
 8005d44:	f7fa fee4 	bl	8000b10 <__aeabi_dcmpgt>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f040 8241 	bne.w	80061d0 <_dtoa_r+0x8c8>
 8005d4e:	4622      	mov	r2, r4
 8005d50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d58:	f7fa febc 	bl	8000ad4 <__aeabi_dcmplt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f040 822e 	bne.w	80061be <_dtoa_r+0x8b6>
 8005d62:	e0ab      	b.n	8005ebc <_dtoa_r+0x5b4>
 8005d64:	9a08      	ldr	r2, [sp, #32]
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <_dtoa_r+0x598>)
 8005d68:	1e79      	subs	r1, r7, #1
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	d04a      	beq.n	8005e04 <_dtoa_r+0x4fc>
 8005d6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	2000      	movs	r0, #0
 8005d78:	494f      	ldr	r1, [pc, #316]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005d7a:	f7fa fd63 	bl	8000844 <__aeabi_ddiv>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f7fa fa81 	bl	8000288 <__aeabi_dsub>
 8005d86:	9c04      	ldr	r4, [sp, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d90:	f7fa fede 	bl	8000b50 <__aeabi_d2iz>
 8005d94:	9012      	str	r0, [sp, #72]	; 0x48
 8005d96:	f7fa fbc5 	bl	8000524 <__aeabi_i2d>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005da2:	f7fa fa71 	bl	8000288 <__aeabi_dsub>
 8005da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da8:	3330      	adds	r3, #48	; 0x30
 8005daa:	f804 3b01 	strb.w	r3, [r4], #1
 8005dae:	462a      	mov	r2, r5
 8005db0:	4633      	mov	r3, r6
 8005db2:	e9cd 0100 	strd	r0, r1, [sp]
 8005db6:	f7fa fe8d 	bl	8000ad4 <__aeabi_dcmplt>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f040 8321 	bne.w	8006402 <_dtoa_r+0xafa>
 8005dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4938      	ldr	r1, [pc, #224]	; (8005ea8 <_dtoa_r+0x5a0>)
 8005dc8:	f7fa fa5e 	bl	8000288 <__aeabi_dsub>
 8005dcc:	462a      	mov	r2, r5
 8005dce:	4633      	mov	r3, r6
 8005dd0:	f7fa fe80 	bl	8000ad4 <__aeabi_dcmplt>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	f040 80d2 	bne.w	8005f7e <_dtoa_r+0x676>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	1ae3      	subs	r3, r4, r3
 8005dde:	42bb      	cmp	r3, r7
 8005de0:	da6c      	bge.n	8005ebc <_dtoa_r+0x5b4>
 8005de2:	2200      	movs	r2, #0
 8005de4:	4b31      	ldr	r3, [pc, #196]	; (8005eac <_dtoa_r+0x5a4>)
 8005de6:	4628      	mov	r0, r5
 8005de8:	4631      	mov	r1, r6
 8005dea:	f7fa fc01 	bl	80005f0 <__aeabi_dmul>
 8005dee:	2200      	movs	r2, #0
 8005df0:	4605      	mov	r5, r0
 8005df2:	460e      	mov	r6, r1
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <_dtoa_r+0x5a4>)
 8005df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dfa:	f7fa fbf9 	bl	80005f0 <__aeabi_dmul>
 8005dfe:	e9cd 0100 	strd	r0, r1, [sp]
 8005e02:	e7c3      	b.n	8005d8c <_dtoa_r+0x484>
 8005e04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005e08:	4622      	mov	r2, r4
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	f7fa fbee 	bl	80005f0 <__aeabi_dmul>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005e1a:	19dc      	adds	r4, r3, r7
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e22:	f7fa fe95 	bl	8000b50 <__aeabi_d2iz>
 8005e26:	4606      	mov	r6, r0
 8005e28:	f7fa fb7c 	bl	8000524 <__aeabi_i2d>
 8005e2c:	3630      	adds	r6, #48	; 0x30
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e36:	f7fa fa27 	bl	8000288 <__aeabi_dsub>
 8005e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e3e:	42ac      	cmp	r4, r5
 8005e40:	e9cd 0100 	strd	r0, r1, [sp]
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	d123      	bne.n	8005e92 <_dtoa_r+0x58a>
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005e4c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005e50:	f7fa fa1c 	bl	800028c <__adddf3>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e5c:	f7fa fe58 	bl	8000b10 <__aeabi_dcmpgt>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	f040 808c 	bne.w	8005f7e <_dtoa_r+0x676>
 8005e66:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	4912      	ldr	r1, [pc, #72]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005e6e:	f7fa fa0b 	bl	8000288 <__aeabi_dsub>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e7a:	f7fa fe2b 	bl	8000ad4 <__aeabi_dcmplt>
 8005e7e:	b1e8      	cbz	r0, 8005ebc <_dtoa_r+0x5b4>
 8005e80:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	f104 32ff 	add.w	r2, r4, #4294967295
 8005e8a:	f040 82ba 	bne.w	8006402 <_dtoa_r+0xafa>
 8005e8e:	4614      	mov	r4, r2
 8005e90:	e7f6      	b.n	8005e80 <_dtoa_r+0x578>
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <_dtoa_r+0x5a4>)
 8005e94:	f7fa fbac 	bl	80005f0 <__aeabi_dmul>
 8005e98:	e9cd 0100 	strd	r0, r1, [sp]
 8005e9c:	e7bf      	b.n	8005e1e <_dtoa_r+0x516>
 8005e9e:	bf00      	nop
 8005ea0:	08009a20 	.word	0x08009a20
 8005ea4:	08009ae8 	.word	0x08009ae8
 8005ea8:	3ff00000 	.word	0x3ff00000
 8005eac:	40240000 	.word	0x40240000
 8005eb0:	401c0000 	.word	0x401c0000
 8005eb4:	40140000 	.word	0x40140000
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005ec0:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db7c      	blt.n	8005fc4 <_dtoa_r+0x6bc>
 8005eca:	f1bb 0f0e 	cmp.w	fp, #14
 8005ece:	dc79      	bgt.n	8005fc4 <_dtoa_r+0x6bc>
 8005ed0:	4b8f      	ldr	r3, [pc, #572]	; (8006110 <_dtoa_r+0x808>)
 8005ed2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ed6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da14      	bge.n	8005f0a <_dtoa_r+0x602>
 8005ee0:	f1b8 0f00 	cmp.w	r8, #0
 8005ee4:	dc11      	bgt.n	8005f0a <_dtoa_r+0x602>
 8005ee6:	f040 816c 	bne.w	80061c2 <_dtoa_r+0x8ba>
 8005eea:	2200      	movs	r2, #0
 8005eec:	4b89      	ldr	r3, [pc, #548]	; (8006114 <_dtoa_r+0x80c>)
 8005eee:	4630      	mov	r0, r6
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	f7fa fb7d 	bl	80005f0 <__aeabi_dmul>
 8005ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005efa:	f7fa fdff 	bl	8000afc <__aeabi_dcmpge>
 8005efe:	4645      	mov	r5, r8
 8005f00:	4646      	mov	r6, r8
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 815f 	bne.w	80061c6 <_dtoa_r+0x8be>
 8005f08:	e166      	b.n	80061d8 <_dtoa_r+0x8d0>
 8005f0a:	9c04      	ldr	r4, [sp, #16]
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f14:	f7fa fc96 	bl	8000844 <__aeabi_ddiv>
 8005f18:	f7fa fe1a 	bl	8000b50 <__aeabi_d2iz>
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	f7fa fb01 	bl	8000524 <__aeabi_i2d>
 8005f22:	4632      	mov	r2, r6
 8005f24:	463b      	mov	r3, r7
 8005f26:	f7fa fb63 	bl	80005f0 <__aeabi_dmul>
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f32:	f7fa f9a9 	bl	8000288 <__aeabi_dsub>
 8005f36:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8005f3a:	f804 eb01 	strb.w	lr, [r4], #1
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	ebc3 0e04 	rsb	lr, r3, r4
 8005f44:	45f0      	cmp	r8, lr
 8005f46:	e9cd 0100 	strd	r0, r1, [sp]
 8005f4a:	d12e      	bne.n	8005faa <_dtoa_r+0x6a2>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	f7fa f99c 	bl	800028c <__adddf3>
 8005f54:	4680      	mov	r8, r0
 8005f56:	4689      	mov	r9, r1
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4639      	mov	r1, r7
 8005f60:	f7fa fdb8 	bl	8000ad4 <__aeabi_dcmplt>
 8005f64:	b978      	cbnz	r0, 8005f86 <_dtoa_r+0x67e>
 8005f66:	4642      	mov	r2, r8
 8005f68:	464b      	mov	r3, r9
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	f7fa fda7 	bl	8000ac0 <__aeabi_dcmpeq>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f000 8247 	beq.w	8006406 <_dtoa_r+0xafe>
 8005f78:	07e9      	lsls	r1, r5, #31
 8005f7a:	d404      	bmi.n	8005f86 <_dtoa_r+0x67e>
 8005f7c:	e243      	b.n	8006406 <_dtoa_r+0xafe>
 8005f7e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005f82:	e000      	b.n	8005f86 <_dtoa_r+0x67e>
 8005f84:	461c      	mov	r4, r3
 8005f86:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005f8a:	2a39      	cmp	r2, #57	; 0x39
 8005f8c:	f104 33ff 	add.w	r3, r4, #4294967295
 8005f90:	d107      	bne.n	8005fa2 <_dtoa_r+0x69a>
 8005f92:	9a04      	ldr	r2, [sp, #16]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d1f5      	bne.n	8005f84 <_dtoa_r+0x67c>
 8005f98:	9904      	ldr	r1, [sp, #16]
 8005f9a:	2230      	movs	r2, #48	; 0x30
 8005f9c:	f10b 0b01 	add.w	fp, fp, #1
 8005fa0:	700a      	strb	r2, [r1, #0]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	3201      	adds	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e22d      	b.n	8006406 <_dtoa_r+0xafe>
 8005faa:	2200      	movs	r2, #0
 8005fac:	4b5a      	ldr	r3, [pc, #360]	; (8006118 <_dtoa_r+0x810>)
 8005fae:	f7fa fb1f 	bl	80005f0 <__aeabi_dmul>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e9cd 0100 	strd	r0, r1, [sp]
 8005fba:	f7fa fd81 	bl	8000ac0 <__aeabi_dcmpeq>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0a4      	beq.n	8005f0c <_dtoa_r+0x604>
 8005fc2:	e220      	b.n	8006406 <_dtoa_r+0xafe>
 8005fc4:	9a08      	ldr	r2, [sp, #32]
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d02d      	beq.n	8006026 <_dtoa_r+0x71e>
 8005fca:	9a06      	ldr	r2, [sp, #24]
 8005fcc:	2a01      	cmp	r2, #1
 8005fce:	dc0a      	bgt.n	8005fe6 <_dtoa_r+0x6de>
 8005fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fd2:	b112      	cbz	r2, 8005fda <_dtoa_r+0x6d2>
 8005fd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fd8:	e002      	b.n	8005fe0 <_dtoa_r+0x6d8>
 8005fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fdc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fe0:	9d07      	ldr	r5, [sp, #28]
 8005fe2:	464c      	mov	r4, r9
 8005fe4:	e015      	b.n	8006012 <_dtoa_r+0x70a>
 8005fe6:	9b07      	ldr	r3, [sp, #28]
 8005fe8:	f108 35ff 	add.w	r5, r8, #4294967295
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	bfbf      	itttt	lt
 8005ff0:	9b07      	ldrlt	r3, [sp, #28]
 8005ff2:	9507      	strlt	r5, [sp, #28]
 8005ff4:	1aea      	sublt	r2, r5, r3
 8005ff6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005ff8:	bfb7      	itett	lt
 8005ffa:	189b      	addlt	r3, r3, r2
 8005ffc:	1b5d      	subge	r5, r3, r5
 8005ffe:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006000:	2500      	movlt	r5, #0
 8006002:	f1b8 0f00 	cmp.w	r8, #0
 8006006:	bfb9      	ittee	lt
 8006008:	ebc8 0409 	rsblt	r4, r8, r9
 800600c:	2300      	movlt	r3, #0
 800600e:	464c      	movge	r4, r9
 8006010:	4643      	movge	r3, r8
 8006012:	9a05      	ldr	r2, [sp, #20]
 8006014:	2101      	movs	r1, #1
 8006016:	441a      	add	r2, r3
 8006018:	4650      	mov	r0, sl
 800601a:	4499      	add	r9, r3
 800601c:	9205      	str	r2, [sp, #20]
 800601e:	f000 fe3f 	bl	8006ca0 <__i2b>
 8006022:	4606      	mov	r6, r0
 8006024:	e002      	b.n	800602c <_dtoa_r+0x724>
 8006026:	9d07      	ldr	r5, [sp, #28]
 8006028:	9e08      	ldr	r6, [sp, #32]
 800602a:	464c      	mov	r4, r9
 800602c:	b15c      	cbz	r4, 8006046 <_dtoa_r+0x73e>
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	dd08      	ble.n	8006046 <_dtoa_r+0x73e>
 8006034:	42a3      	cmp	r3, r4
 8006036:	9a05      	ldr	r2, [sp, #20]
 8006038:	bfa8      	it	ge
 800603a:	4623      	movge	r3, r4
 800603c:	ebc3 0909 	rsb	r9, r3, r9
 8006040:	1ae4      	subs	r4, r4, r3
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	9b07      	ldr	r3, [sp, #28]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd1d      	ble.n	8006088 <_dtoa_r+0x780>
 800604c:	9b08      	ldr	r3, [sp, #32]
 800604e:	b1ab      	cbz	r3, 800607c <_dtoa_r+0x774>
 8006050:	b185      	cbz	r5, 8006074 <_dtoa_r+0x76c>
 8006052:	4631      	mov	r1, r6
 8006054:	462a      	mov	r2, r5
 8006056:	4650      	mov	r0, sl
 8006058:	f000 febc 	bl	8006dd4 <__pow5mult>
 800605c:	9a02      	ldr	r2, [sp, #8]
 800605e:	4601      	mov	r1, r0
 8006060:	4606      	mov	r6, r0
 8006062:	4650      	mov	r0, sl
 8006064:	f000 fe25 	bl	8006cb2 <__multiply>
 8006068:	9902      	ldr	r1, [sp, #8]
 800606a:	4607      	mov	r7, r0
 800606c:	4650      	mov	r0, sl
 800606e:	f000 fd3a 	bl	8006ae6 <_Bfree>
 8006072:	9702      	str	r7, [sp, #8]
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	1b5a      	subs	r2, r3, r5
 8006078:	d006      	beq.n	8006088 <_dtoa_r+0x780>
 800607a:	e000      	b.n	800607e <_dtoa_r+0x776>
 800607c:	9a07      	ldr	r2, [sp, #28]
 800607e:	9902      	ldr	r1, [sp, #8]
 8006080:	4650      	mov	r0, sl
 8006082:	f000 fea7 	bl	8006dd4 <__pow5mult>
 8006086:	9002      	str	r0, [sp, #8]
 8006088:	2101      	movs	r1, #1
 800608a:	4650      	mov	r0, sl
 800608c:	f000 fe08 	bl	8006ca0 <__i2b>
 8006090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006092:	4605      	mov	r5, r0
 8006094:	b35b      	cbz	r3, 80060ee <_dtoa_r+0x7e6>
 8006096:	461a      	mov	r2, r3
 8006098:	4601      	mov	r1, r0
 800609a:	4650      	mov	r0, sl
 800609c:	f000 fe9a 	bl	8006dd4 <__pow5mult>
 80060a0:	9b06      	ldr	r3, [sp, #24]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	4605      	mov	r5, r0
 80060a6:	dc18      	bgt.n	80060da <_dtoa_r+0x7d2>
 80060a8:	9b00      	ldr	r3, [sp, #0]
 80060aa:	b983      	cbnz	r3, 80060ce <_dtoa_r+0x7c6>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b2:	b973      	cbnz	r3, 80060d2 <_dtoa_r+0x7ca>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80060ba:	0d3f      	lsrs	r7, r7, #20
 80060bc:	053f      	lsls	r7, r7, #20
 80060be:	b14f      	cbz	r7, 80060d4 <_dtoa_r+0x7cc>
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	3301      	adds	r3, #1
 80060c4:	f109 0901 	add.w	r9, r9, #1
 80060c8:	9305      	str	r3, [sp, #20]
 80060ca:	2701      	movs	r7, #1
 80060cc:	e002      	b.n	80060d4 <_dtoa_r+0x7cc>
 80060ce:	2700      	movs	r7, #0
 80060d0:	e000      	b.n	80060d4 <_dtoa_r+0x7cc>
 80060d2:	9f00      	ldr	r7, [sp, #0]
 80060d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060d6:	b173      	cbz	r3, 80060f6 <_dtoa_r+0x7ee>
 80060d8:	e000      	b.n	80060dc <_dtoa_r+0x7d4>
 80060da:	2700      	movs	r7, #0
 80060dc:	692b      	ldr	r3, [r5, #16]
 80060de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060e2:	6918      	ldr	r0, [r3, #16]
 80060e4:	f000 fd8f 	bl	8006c06 <__hi0bits>
 80060e8:	f1c0 0020 	rsb	r0, r0, #32
 80060ec:	e004      	b.n	80060f8 <_dtoa_r+0x7f0>
 80060ee:	9b06      	ldr	r3, [sp, #24]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	ddd9      	ble.n	80060a8 <_dtoa_r+0x7a0>
 80060f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80060f6:	2001      	movs	r0, #1
 80060f8:	9b05      	ldr	r3, [sp, #20]
 80060fa:	4418      	add	r0, r3
 80060fc:	f010 001f 	ands.w	r0, r0, #31
 8006100:	d00e      	beq.n	8006120 <_dtoa_r+0x818>
 8006102:	f1c0 0320 	rsb	r3, r0, #32
 8006106:	2b04      	cmp	r3, #4
 8006108:	dd08      	ble.n	800611c <_dtoa_r+0x814>
 800610a:	f1c0 001c 	rsb	r0, r0, #28
 800610e:	e008      	b.n	8006122 <_dtoa_r+0x81a>
 8006110:	08009a20 	.word	0x08009a20
 8006114:	40140000 	.word	0x40140000
 8006118:	40240000 	.word	0x40240000
 800611c:	d006      	beq.n	800612c <_dtoa_r+0x824>
 800611e:	4618      	mov	r0, r3
 8006120:	301c      	adds	r0, #28
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	4403      	add	r3, r0
 8006126:	4481      	add	r9, r0
 8006128:	4404      	add	r4, r0
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	f1b9 0f00 	cmp.w	r9, #0
 8006130:	dd05      	ble.n	800613e <_dtoa_r+0x836>
 8006132:	464a      	mov	r2, r9
 8006134:	9902      	ldr	r1, [sp, #8]
 8006136:	4650      	mov	r0, sl
 8006138:	f000 fe9a 	bl	8006e70 <__lshift>
 800613c:	9002      	str	r0, [sp, #8]
 800613e:	9b05      	ldr	r3, [sp, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dd05      	ble.n	8006150 <_dtoa_r+0x848>
 8006144:	4629      	mov	r1, r5
 8006146:	461a      	mov	r2, r3
 8006148:	4650      	mov	r0, sl
 800614a:	f000 fe91 	bl	8006e70 <__lshift>
 800614e:	4605      	mov	r5, r0
 8006150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006152:	b1eb      	cbz	r3, 8006190 <_dtoa_r+0x888>
 8006154:	4629      	mov	r1, r5
 8006156:	9802      	ldr	r0, [sp, #8]
 8006158:	f000 fedb 	bl	8006f12 <__mcmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	da17      	bge.n	8006190 <_dtoa_r+0x888>
 8006160:	2300      	movs	r3, #0
 8006162:	220a      	movs	r2, #10
 8006164:	9902      	ldr	r1, [sp, #8]
 8006166:	4650      	mov	r0, sl
 8006168:	f000 fcd4 	bl	8006b14 <__multadd>
 800616c:	9b08      	ldr	r3, [sp, #32]
 800616e:	9002      	str	r0, [sp, #8]
 8006170:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8158 	beq.w	800642a <_dtoa_r+0xb22>
 800617a:	2300      	movs	r3, #0
 800617c:	4631      	mov	r1, r6
 800617e:	220a      	movs	r2, #10
 8006180:	4650      	mov	r0, sl
 8006182:	f000 fcc7 	bl	8006b14 <__multadd>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	4606      	mov	r6, r0
 800618c:	dc37      	bgt.n	80061fe <_dtoa_r+0x8f6>
 800618e:	e033      	b.n	80061f8 <_dtoa_r+0x8f0>
 8006190:	f1b8 0f00 	cmp.w	r8, #0
 8006194:	dc2a      	bgt.n	80061ec <_dtoa_r+0x8e4>
 8006196:	9b06      	ldr	r3, [sp, #24]
 8006198:	2b02      	cmp	r3, #2
 800619a:	dd27      	ble.n	80061ec <_dtoa_r+0x8e4>
 800619c:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	b983      	cbnz	r3, 80061c6 <_dtoa_r+0x8be>
 80061a4:	4629      	mov	r1, r5
 80061a6:	2205      	movs	r2, #5
 80061a8:	4650      	mov	r0, sl
 80061aa:	f000 fcb3 	bl	8006b14 <__multadd>
 80061ae:	4601      	mov	r1, r0
 80061b0:	4605      	mov	r5, r0
 80061b2:	9802      	ldr	r0, [sp, #8]
 80061b4:	f000 fead 	bl	8006f12 <__mcmp>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	dc0d      	bgt.n	80061d8 <_dtoa_r+0x8d0>
 80061bc:	e003      	b.n	80061c6 <_dtoa_r+0x8be>
 80061be:	463d      	mov	r5, r7
 80061c0:	e000      	b.n	80061c4 <_dtoa_r+0x8bc>
 80061c2:	2500      	movs	r5, #0
 80061c4:	462e      	mov	r6, r5
 80061c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c8:	9c04      	ldr	r4, [sp, #16]
 80061ca:	ea6f 0b03 	mvn.w	fp, r3
 80061ce:	e00a      	b.n	80061e6 <_dtoa_r+0x8de>
 80061d0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80061d4:	463d      	mov	r5, r7
 80061d6:	463e      	mov	r6, r7
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	9a04      	ldr	r2, [sp, #16]
 80061dc:	1c5c      	adds	r4, r3, #1
 80061de:	2331      	movs	r3, #49	; 0x31
 80061e0:	7013      	strb	r3, [r2, #0]
 80061e2:	f10b 0b01 	add.w	fp, fp, #1
 80061e6:	46b0      	mov	r8, r6
 80061e8:	2600      	movs	r6, #0
 80061ea:	e0f7      	b.n	80063dc <_dtoa_r+0xad4>
 80061ec:	9b08      	ldr	r3, [sp, #32]
 80061ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80061f2:	b923      	cbnz	r3, 80061fe <_dtoa_r+0x8f6>
 80061f4:	9c04      	ldr	r4, [sp, #16]
 80061f6:	e0b1      	b.n	800635c <_dtoa_r+0xa54>
 80061f8:	9b06      	ldr	r3, [sp, #24]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	dcd0      	bgt.n	80061a0 <_dtoa_r+0x898>
 80061fe:	2c00      	cmp	r4, #0
 8006200:	dd05      	ble.n	800620e <_dtoa_r+0x906>
 8006202:	4631      	mov	r1, r6
 8006204:	4622      	mov	r2, r4
 8006206:	4650      	mov	r0, sl
 8006208:	f000 fe32 	bl	8006e70 <__lshift>
 800620c:	4606      	mov	r6, r0
 800620e:	b19f      	cbz	r7, 8006238 <_dtoa_r+0x930>
 8006210:	6871      	ldr	r1, [r6, #4]
 8006212:	4650      	mov	r0, sl
 8006214:	f000 fc32 	bl	8006a7c <_Balloc>
 8006218:	6932      	ldr	r2, [r6, #16]
 800621a:	3202      	adds	r2, #2
 800621c:	4604      	mov	r4, r0
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	f106 010c 	add.w	r1, r6, #12
 8006224:	300c      	adds	r0, #12
 8006226:	f000 fc03 	bl	8006a30 <memcpy>
 800622a:	2201      	movs	r2, #1
 800622c:	4621      	mov	r1, r4
 800622e:	4650      	mov	r0, sl
 8006230:	f000 fe1e 	bl	8006e70 <__lshift>
 8006234:	4680      	mov	r8, r0
 8006236:	e000      	b.n	800623a <_dtoa_r+0x932>
 8006238:	46b0      	mov	r8, r6
 800623a:	9b00      	ldr	r3, [sp, #0]
 800623c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	9305      	str	r3, [sp, #20]
 8006246:	4629      	mov	r1, r5
 8006248:	9802      	ldr	r0, [sp, #8]
 800624a:	f7ff facb 	bl	80057e4 <quorem>
 800624e:	4631      	mov	r1, r6
 8006250:	4604      	mov	r4, r0
 8006252:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006256:	9802      	ldr	r0, [sp, #8]
 8006258:	f000 fe5b 	bl	8006f12 <__mcmp>
 800625c:	4642      	mov	r2, r8
 800625e:	9000      	str	r0, [sp, #0]
 8006260:	4629      	mov	r1, r5
 8006262:	4650      	mov	r0, sl
 8006264:	f000 fe71 	bl	8006f4a <__mdiff>
 8006268:	68c3      	ldr	r3, [r0, #12]
 800626a:	4602      	mov	r2, r0
 800626c:	b93b      	cbnz	r3, 800627e <_dtoa_r+0x976>
 800626e:	4601      	mov	r1, r0
 8006270:	9007      	str	r0, [sp, #28]
 8006272:	9802      	ldr	r0, [sp, #8]
 8006274:	f000 fe4d 	bl	8006f12 <__mcmp>
 8006278:	9a07      	ldr	r2, [sp, #28]
 800627a:	4603      	mov	r3, r0
 800627c:	e000      	b.n	8006280 <_dtoa_r+0x978>
 800627e:	2301      	movs	r3, #1
 8006280:	4611      	mov	r1, r2
 8006282:	4650      	mov	r0, sl
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	f000 fc2e 	bl	8006ae6 <_Bfree>
 800628a:	9b07      	ldr	r3, [sp, #28]
 800628c:	b94b      	cbnz	r3, 80062a2 <_dtoa_r+0x99a>
 800628e:	9a06      	ldr	r2, [sp, #24]
 8006290:	b93a      	cbnz	r2, 80062a2 <_dtoa_r+0x99a>
 8006292:	9a05      	ldr	r2, [sp, #20]
 8006294:	b92a      	cbnz	r2, 80062a2 <_dtoa_r+0x99a>
 8006296:	2f39      	cmp	r7, #57	; 0x39
 8006298:	d028      	beq.n	80062ec <_dtoa_r+0x9e4>
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc1a      	bgt.n	80062d6 <_dtoa_r+0x9ce>
 80062a0:	e01b      	b.n	80062da <_dtoa_r+0x9d2>
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	2a00      	cmp	r2, #0
 80062a6:	db04      	blt.n	80062b2 <_dtoa_r+0x9aa>
 80062a8:	d11a      	bne.n	80062e0 <_dtoa_r+0x9d8>
 80062aa:	9a06      	ldr	r2, [sp, #24]
 80062ac:	b9c2      	cbnz	r2, 80062e0 <_dtoa_r+0x9d8>
 80062ae:	9a05      	ldr	r2, [sp, #20]
 80062b0:	b9b2      	cbnz	r2, 80062e0 <_dtoa_r+0x9d8>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dd11      	ble.n	80062da <_dtoa_r+0x9d2>
 80062b6:	2201      	movs	r2, #1
 80062b8:	9902      	ldr	r1, [sp, #8]
 80062ba:	4650      	mov	r0, sl
 80062bc:	f000 fdd8 	bl	8006e70 <__lshift>
 80062c0:	4629      	mov	r1, r5
 80062c2:	9002      	str	r0, [sp, #8]
 80062c4:	f000 fe25 	bl	8006f12 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dc02      	bgt.n	80062d2 <_dtoa_r+0x9ca>
 80062cc:	d105      	bne.n	80062da <_dtoa_r+0x9d2>
 80062ce:	07fa      	lsls	r2, r7, #31
 80062d0:	d503      	bpl.n	80062da <_dtoa_r+0x9d2>
 80062d2:	2f39      	cmp	r7, #57	; 0x39
 80062d4:	d00a      	beq.n	80062ec <_dtoa_r+0x9e4>
 80062d6:	f104 0731 	add.w	r7, r4, #49	; 0x31
 80062da:	f109 0401 	add.w	r4, r9, #1
 80062de:	e00c      	b.n	80062fa <_dtoa_r+0x9f2>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f109 0401 	add.w	r4, r9, #1
 80062e6:	dd0b      	ble.n	8006300 <_dtoa_r+0x9f8>
 80062e8:	2f39      	cmp	r7, #57	; 0x39
 80062ea:	d105      	bne.n	80062f8 <_dtoa_r+0x9f0>
 80062ec:	2339      	movs	r3, #57	; 0x39
 80062ee:	f889 3000 	strb.w	r3, [r9]
 80062f2:	f109 0901 	add.w	r9, r9, #1
 80062f6:	e054      	b.n	80063a2 <_dtoa_r+0xa9a>
 80062f8:	3701      	adds	r7, #1
 80062fa:	f889 7000 	strb.w	r7, [r9]
 80062fe:	e06d      	b.n	80063dc <_dtoa_r+0xad4>
 8006300:	9b04      	ldr	r3, [sp, #16]
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	f804 7c01 	strb.w	r7, [r4, #-1]
 8006308:	1ae3      	subs	r3, r4, r3
 800630a:	4293      	cmp	r3, r2
 800630c:	46a1      	mov	r9, r4
 800630e:	d03a      	beq.n	8006386 <_dtoa_r+0xa7e>
 8006310:	2300      	movs	r3, #0
 8006312:	220a      	movs	r2, #10
 8006314:	9902      	ldr	r1, [sp, #8]
 8006316:	4650      	mov	r0, sl
 8006318:	f000 fbfc 	bl	8006b14 <__multadd>
 800631c:	4546      	cmp	r6, r8
 800631e:	9002      	str	r0, [sp, #8]
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	f04f 020a 	mov.w	r2, #10
 8006328:	4631      	mov	r1, r6
 800632a:	4650      	mov	r0, sl
 800632c:	d104      	bne.n	8006338 <_dtoa_r+0xa30>
 800632e:	f000 fbf1 	bl	8006b14 <__multadd>
 8006332:	4606      	mov	r6, r0
 8006334:	4680      	mov	r8, r0
 8006336:	e786      	b.n	8006246 <_dtoa_r+0x93e>
 8006338:	f000 fbec 	bl	8006b14 <__multadd>
 800633c:	4641      	mov	r1, r8
 800633e:	4606      	mov	r6, r0
 8006340:	2300      	movs	r3, #0
 8006342:	220a      	movs	r2, #10
 8006344:	4650      	mov	r0, sl
 8006346:	f000 fbe5 	bl	8006b14 <__multadd>
 800634a:	4680      	mov	r8, r0
 800634c:	e77b      	b.n	8006246 <_dtoa_r+0x93e>
 800634e:	2300      	movs	r3, #0
 8006350:	220a      	movs	r2, #10
 8006352:	9902      	ldr	r1, [sp, #8]
 8006354:	4650      	mov	r0, sl
 8006356:	f000 fbdd 	bl	8006b14 <__multadd>
 800635a:	9002      	str	r0, [sp, #8]
 800635c:	4629      	mov	r1, r5
 800635e:	9802      	ldr	r0, [sp, #8]
 8006360:	f7ff fa40 	bl	80057e4 <quorem>
 8006364:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006368:	f804 7b01 	strb.w	r7, [r4], #1
 800636c:	9b04      	ldr	r3, [sp, #16]
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	1ae3      	subs	r3, r4, r3
 8006372:	4293      	cmp	r3, r2
 8006374:	dbeb      	blt.n	800634e <_dtoa_r+0xa46>
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	2a01      	cmp	r2, #1
 800637a:	bfac      	ite	ge
 800637c:	189b      	addge	r3, r3, r2
 800637e:	3301      	addlt	r3, #1
 8006380:	46b0      	mov	r8, r6
 8006382:	4699      	mov	r9, r3
 8006384:	2600      	movs	r6, #0
 8006386:	2201      	movs	r2, #1
 8006388:	9902      	ldr	r1, [sp, #8]
 800638a:	4650      	mov	r0, sl
 800638c:	f000 fd70 	bl	8006e70 <__lshift>
 8006390:	4629      	mov	r1, r5
 8006392:	9002      	str	r0, [sp, #8]
 8006394:	f000 fdbd 	bl	8006f12 <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	dc02      	bgt.n	80063a2 <_dtoa_r+0xa9a>
 800639c:	d115      	bne.n	80063ca <_dtoa_r+0xac2>
 800639e:	07fb      	lsls	r3, r7, #31
 80063a0:	d513      	bpl.n	80063ca <_dtoa_r+0xac2>
 80063a2:	464c      	mov	r4, r9
 80063a4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80063a8:	2b39      	cmp	r3, #57	; 0x39
 80063aa:	f104 32ff 	add.w	r2, r4, #4294967295
 80063ae:	d109      	bne.n	80063c4 <_dtoa_r+0xabc>
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d104      	bne.n	80063c0 <_dtoa_r+0xab8>
 80063b6:	f10b 0b01 	add.w	fp, fp, #1
 80063ba:	2331      	movs	r3, #49	; 0x31
 80063bc:	9a04      	ldr	r2, [sp, #16]
 80063be:	e002      	b.n	80063c6 <_dtoa_r+0xabe>
 80063c0:	4614      	mov	r4, r2
 80063c2:	e7ef      	b.n	80063a4 <_dtoa_r+0xa9c>
 80063c4:	3301      	adds	r3, #1
 80063c6:	7013      	strb	r3, [r2, #0]
 80063c8:	e008      	b.n	80063dc <_dtoa_r+0xad4>
 80063ca:	464c      	mov	r4, r9
 80063cc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	f104 32ff 	add.w	r2, r4, #4294967295
 80063d6:	d101      	bne.n	80063dc <_dtoa_r+0xad4>
 80063d8:	4614      	mov	r4, r2
 80063da:	e7f7      	b.n	80063cc <_dtoa_r+0xac4>
 80063dc:	4629      	mov	r1, r5
 80063de:	4650      	mov	r0, sl
 80063e0:	f000 fb81 	bl	8006ae6 <_Bfree>
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d00d      	beq.n	8006406 <_dtoa_r+0xafe>
 80063ea:	b12e      	cbz	r6, 80063f8 <_dtoa_r+0xaf0>
 80063ec:	4546      	cmp	r6, r8
 80063ee:	d003      	beq.n	80063f8 <_dtoa_r+0xaf0>
 80063f0:	4631      	mov	r1, r6
 80063f2:	4650      	mov	r0, sl
 80063f4:	f000 fb77 	bl	8006ae6 <_Bfree>
 80063f8:	4641      	mov	r1, r8
 80063fa:	4650      	mov	r0, sl
 80063fc:	f000 fb73 	bl	8006ae6 <_Bfree>
 8006400:	e001      	b.n	8006406 <_dtoa_r+0xafe>
 8006402:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006406:	9902      	ldr	r1, [sp, #8]
 8006408:	4650      	mov	r0, sl
 800640a:	f000 fb6c 	bl	8006ae6 <_Bfree>
 800640e:	2300      	movs	r3, #0
 8006410:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006412:	7023      	strb	r3, [r4, #0]
 8006414:	f10b 0301 	add.w	r3, fp, #1
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800641c:	b11b      	cbz	r3, 8006426 <_dtoa_r+0xb1e>
 800641e:	601c      	str	r4, [r3, #0]
 8006420:	e001      	b.n	8006426 <_dtoa_r+0xb1e>
 8006422:	4808      	ldr	r0, [pc, #32]	; (8006444 <_dtoa_r+0xb3c>)
 8006424:	e00a      	b.n	800643c <_dtoa_r+0xb34>
 8006426:	9804      	ldr	r0, [sp, #16]
 8006428:	e008      	b.n	800643c <_dtoa_r+0xb34>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f73f aee1 	bgt.w	80061f4 <_dtoa_r+0x8ec>
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f77f aedd 	ble.w	80061f4 <_dtoa_r+0x8ec>
 800643a:	e6b1      	b.n	80061a0 <_dtoa_r+0x898>
 800643c:	b017      	add	sp, #92	; 0x5c
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	bf00      	nop
 8006444:	08009870 	.word	0x08009870

08006448 <_cleanup_r>:
 8006448:	4901      	ldr	r1, [pc, #4]	; (8006450 <_cleanup_r+0x8>)
 800644a:	f000 ba75 	b.w	8006938 <_fwalk_reent>
 800644e:	bf00      	nop
 8006450:	08008d05 	.word	0x08008d05

08006454 <std.isra.0>:
 8006454:	2300      	movs	r3, #0
 8006456:	b510      	push	{r4, lr}
 8006458:	4604      	mov	r4, r0
 800645a:	6003      	str	r3, [r0, #0]
 800645c:	6043      	str	r3, [r0, #4]
 800645e:	6083      	str	r3, [r0, #8]
 8006460:	8181      	strh	r1, [r0, #12]
 8006462:	6643      	str	r3, [r0, #100]	; 0x64
 8006464:	81c2      	strh	r2, [r0, #14]
 8006466:	6103      	str	r3, [r0, #16]
 8006468:	6143      	str	r3, [r0, #20]
 800646a:	6183      	str	r3, [r0, #24]
 800646c:	4619      	mov	r1, r3
 800646e:	2208      	movs	r2, #8
 8006470:	305c      	adds	r0, #92	; 0x5c
 8006472:	f7fd fba1 	bl	8003bb8 <memset>
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <std.isra.0+0x38>)
 8006478:	6263      	str	r3, [r4, #36]	; 0x24
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <std.isra.0+0x3c>)
 800647c:	62a3      	str	r3, [r4, #40]	; 0x28
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <std.isra.0+0x40>)
 8006480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <std.isra.0+0x44>)
 8006484:	6224      	str	r4, [r4, #32]
 8006486:	6323      	str	r3, [r4, #48]	; 0x30
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	080077a1 	.word	0x080077a1
 8006490:	080077c3 	.word	0x080077c3
 8006494:	080077fb 	.word	0x080077fb
 8006498:	0800781f 	.word	0x0800781f

0800649c <__sfmoreglue>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	2368      	movs	r3, #104	; 0x68
 80064a0:	1e4d      	subs	r5, r1, #1
 80064a2:	435d      	muls	r5, r3
 80064a4:	460e      	mov	r6, r1
 80064a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064aa:	f7fd f965 	bl	8003778 <_malloc_r>
 80064ae:	4604      	mov	r4, r0
 80064b0:	b140      	cbz	r0, 80064c4 <__sfmoreglue+0x28>
 80064b2:	2100      	movs	r1, #0
 80064b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80064b8:	300c      	adds	r0, #12
 80064ba:	60a0      	str	r0, [r4, #8]
 80064bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064c0:	f7fd fb7a 	bl	8003bb8 <memset>
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}

080064c8 <__sinit>:
 80064c8:	6983      	ldr	r3, [r0, #24]
 80064ca:	b510      	push	{r4, lr}
 80064cc:	4604      	mov	r4, r0
 80064ce:	bb4b      	cbnz	r3, 8006524 <__sinit+0x5c>
 80064d0:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80064d4:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80064d8:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <__sinit+0x60>)
 80064de:	4a13      	ldr	r2, [pc, #76]	; (800652c <__sinit+0x64>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6282      	str	r2, [r0, #40]	; 0x28
 80064e4:	4298      	cmp	r0, r3
 80064e6:	bf04      	itt	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	6183      	streq	r3, [r0, #24]
 80064ec:	f000 f820 	bl	8006530 <__sfp>
 80064f0:	6060      	str	r0, [r4, #4]
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f81c 	bl	8006530 <__sfp>
 80064f8:	60a0      	str	r0, [r4, #8]
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 f818 	bl	8006530 <__sfp>
 8006500:	2200      	movs	r2, #0
 8006502:	60e0      	str	r0, [r4, #12]
 8006504:	2104      	movs	r1, #4
 8006506:	6860      	ldr	r0, [r4, #4]
 8006508:	f7ff ffa4 	bl	8006454 <std.isra.0>
 800650c:	2201      	movs	r2, #1
 800650e:	2109      	movs	r1, #9
 8006510:	68a0      	ldr	r0, [r4, #8]
 8006512:	f7ff ff9f 	bl	8006454 <std.isra.0>
 8006516:	2202      	movs	r2, #2
 8006518:	2112      	movs	r1, #18
 800651a:	68e0      	ldr	r0, [r4, #12]
 800651c:	f7ff ff9a 	bl	8006454 <std.isra.0>
 8006520:	2301      	movs	r3, #1
 8006522:	61a3      	str	r3, [r4, #24]
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	08009828 	.word	0x08009828
 800652c:	08006449 	.word	0x08006449

08006530 <__sfp>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <__sfp+0x74>)
 8006534:	681e      	ldr	r6, [r3, #0]
 8006536:	69b3      	ldr	r3, [r6, #24]
 8006538:	4607      	mov	r7, r0
 800653a:	b913      	cbnz	r3, 8006542 <__sfp+0x12>
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff ffc3 	bl	80064c8 <__sinit>
 8006542:	36d8      	adds	r6, #216	; 0xd8
 8006544:	68b4      	ldr	r4, [r6, #8]
 8006546:	6873      	ldr	r3, [r6, #4]
 8006548:	3b01      	subs	r3, #1
 800654a:	d404      	bmi.n	8006556 <__sfp+0x26>
 800654c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006550:	b17d      	cbz	r5, 8006572 <__sfp+0x42>
 8006552:	3468      	adds	r4, #104	; 0x68
 8006554:	e7f8      	b.n	8006548 <__sfp+0x18>
 8006556:	6833      	ldr	r3, [r6, #0]
 8006558:	b10b      	cbz	r3, 800655e <__sfp+0x2e>
 800655a:	6836      	ldr	r6, [r6, #0]
 800655c:	e7f2      	b.n	8006544 <__sfp+0x14>
 800655e:	2104      	movs	r1, #4
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ff9b 	bl	800649c <__sfmoreglue>
 8006566:	6030      	str	r0, [r6, #0]
 8006568:	2800      	cmp	r0, #0
 800656a:	d1f6      	bne.n	800655a <__sfp+0x2a>
 800656c:	230c      	movs	r3, #12
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006576:	81e3      	strh	r3, [r4, #14]
 8006578:	2301      	movs	r3, #1
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	6665      	str	r5, [r4, #100]	; 0x64
 800657e:	6025      	str	r5, [r4, #0]
 8006580:	60a5      	str	r5, [r4, #8]
 8006582:	6065      	str	r5, [r4, #4]
 8006584:	6125      	str	r5, [r4, #16]
 8006586:	6165      	str	r5, [r4, #20]
 8006588:	61a5      	str	r5, [r4, #24]
 800658a:	2208      	movs	r2, #8
 800658c:	4629      	mov	r1, r5
 800658e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006592:	f7fd fb11 	bl	8003bb8 <memset>
 8006596:	6365      	str	r5, [r4, #52]	; 0x34
 8006598:	63a5      	str	r5, [r4, #56]	; 0x38
 800659a:	64a5      	str	r5, [r4, #72]	; 0x48
 800659c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800659e:	4620      	mov	r0, r4
 80065a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a2:	bf00      	nop
 80065a4:	08009828 	.word	0x08009828

080065a8 <__sfp_lock_acquire>:
 80065a8:	4770      	bx	lr

080065aa <__sfp_lock_release>:
 80065aa:	4770      	bx	lr

080065ac <_fread_r>:
 80065ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	4615      	mov	r5, r2
 80065b2:	435d      	muls	r5, r3
 80065b4:	4607      	mov	r7, r0
 80065b6:	468b      	mov	fp, r1
 80065b8:	4692      	mov	sl, r2
 80065ba:	4699      	mov	r9, r3
 80065bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065be:	d04b      	beq.n	8006658 <_fread_r+0xac>
 80065c0:	b118      	cbz	r0, 80065ca <_fread_r+0x1e>
 80065c2:	6983      	ldr	r3, [r0, #24]
 80065c4:	b90b      	cbnz	r3, 80065ca <_fread_r+0x1e>
 80065c6:	f7ff ff7f 	bl	80064c8 <__sinit>
 80065ca:	4b25      	ldr	r3, [pc, #148]	; (8006660 <_fread_r+0xb4>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d101      	bne.n	80065d4 <_fread_r+0x28>
 80065d0:	687c      	ldr	r4, [r7, #4]
 80065d2:	e008      	b.n	80065e6 <_fread_r+0x3a>
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <_fread_r+0xb8>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d101      	bne.n	80065de <_fread_r+0x32>
 80065da:	68bc      	ldr	r4, [r7, #8]
 80065dc:	e003      	b.n	80065e6 <_fread_r+0x3a>
 80065de:	4b22      	ldr	r3, [pc, #136]	; (8006668 <_fread_r+0xbc>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	bf08      	it	eq
 80065e4:	68fc      	ldreq	r4, [r7, #12]
 80065e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ea:	049a      	lsls	r2, r3, #18
 80065ec:	d406      	bmi.n	80065fc <_fread_r+0x50>
 80065ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	6662      	str	r2, [r4, #100]	; 0x64
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfbc      	itt	lt
 8006602:	2300      	movlt	r3, #0
 8006604:	6063      	strlt	r3, [r4, #4]
 8006606:	462e      	mov	r6, r5
 8006608:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800660c:	4546      	cmp	r6, r8
 800660e:	d915      	bls.n	800663c <_fread_r+0x90>
 8006610:	6821      	ldr	r1, [r4, #0]
 8006612:	4658      	mov	r0, fp
 8006614:	4642      	mov	r2, r8
 8006616:	f000 fa0b 	bl	8006a30 <memcpy>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	4443      	add	r3, r8
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	4621      	mov	r1, r4
 8006622:	4638      	mov	r0, r7
 8006624:	44c3      	add	fp, r8
 8006626:	ebc8 0606 	rsb	r6, r8, r6
 800662a:	f000 ffc9 	bl	80075c0 <__srefill_r>
 800662e:	2800      	cmp	r0, #0
 8006630:	d0ea      	beq.n	8006608 <_fread_r+0x5c>
 8006632:	1ba8      	subs	r0, r5, r6
 8006634:	fbb0 f0fa 	udiv	r0, r0, sl
 8006638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	4632      	mov	r2, r6
 800663e:	6821      	ldr	r1, [r4, #0]
 8006640:	4658      	mov	r0, fp
 8006642:	f000 f9f5 	bl	8006a30 <memcpy>
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	1b9b      	subs	r3, r3, r6
 800664c:	4430      	add	r0, r6
 800664e:	6020      	str	r0, [r4, #0]
 8006650:	6063      	str	r3, [r4, #4]
 8006652:	4648      	mov	r0, r9
 8006654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4628      	mov	r0, r5
 800665a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	bf00      	nop
 8006660:	080099b8 	.word	0x080099b8
 8006664:	080099d8 	.word	0x080099d8
 8006668:	080099f8 	.word	0x080099f8

0800666c <__sfvwrite_r>:
 800666c:	6893      	ldr	r3, [r2, #8]
 800666e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006672:	4606      	mov	r6, r0
 8006674:	460c      	mov	r4, r1
 8006676:	4690      	mov	r8, r2
 8006678:	b90b      	cbnz	r3, 800667e <__sfvwrite_r+0x12>
 800667a:	2000      	movs	r0, #0
 800667c:	e13b      	b.n	80068f6 <__sfvwrite_r+0x28a>
 800667e:	898b      	ldrh	r3, [r1, #12]
 8006680:	0718      	lsls	r0, r3, #28
 8006682:	d50f      	bpl.n	80066a4 <__sfvwrite_r+0x38>
 8006684:	690b      	ldr	r3, [r1, #16]
 8006686:	b16b      	cbz	r3, 80066a4 <__sfvwrite_r+0x38>
 8006688:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800668c:	f8d8 b000 	ldr.w	fp, [r8]
 8006690:	f009 0502 	and.w	r5, r9, #2
 8006694:	b2ad      	uxth	r5, r5
 8006696:	b355      	cbz	r5, 80066ee <__sfvwrite_r+0x82>
 8006698:	f04f 0900 	mov.w	r9, #0
 800669c:	464f      	mov	r7, r9
 800669e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80068fc <__sfvwrite_r+0x290>
 80066a2:	e01b      	b.n	80066dc <__sfvwrite_r+0x70>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4630      	mov	r0, r6
 80066a8:	f002 fa80 	bl	8008bac <__swsetup_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d0eb      	beq.n	8006688 <__sfvwrite_r+0x1c>
 80066b0:	e11f      	b.n	80068f2 <__sfvwrite_r+0x286>
 80066b2:	4557      	cmp	r7, sl
 80066b4:	463b      	mov	r3, r7
 80066b6:	464a      	mov	r2, r9
 80066b8:	bf28      	it	cs
 80066ba:	4653      	movcs	r3, sl
 80066bc:	6a21      	ldr	r1, [r4, #32]
 80066be:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80066c0:	4630      	mov	r0, r6
 80066c2:	47a8      	blx	r5
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f340 8110 	ble.w	80068ea <__sfvwrite_r+0x27e>
 80066ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066ce:	4481      	add	r9, r0
 80066d0:	1a3f      	subs	r7, r7, r0
 80066d2:	1a18      	subs	r0, r3, r0
 80066d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0ce      	beq.n	800667a <__sfvwrite_r+0xe>
 80066dc:	2f00      	cmp	r7, #0
 80066de:	d1e8      	bne.n	80066b2 <__sfvwrite_r+0x46>
 80066e0:	f8db 9000 	ldr.w	r9, [fp]
 80066e4:	f8db 7004 	ldr.w	r7, [fp, #4]
 80066e8:	f10b 0b08 	add.w	fp, fp, #8
 80066ec:	e7f6      	b.n	80066dc <__sfvwrite_r+0x70>
 80066ee:	f019 0901 	ands.w	r9, r9, #1
 80066f2:	d003      	beq.n	80066fc <__sfvwrite_r+0x90>
 80066f4:	9500      	str	r5, [sp, #0]
 80066f6:	46a9      	mov	r9, r5
 80066f8:	46aa      	mov	sl, r5
 80066fa:	e0bd      	b.n	8006878 <__sfvwrite_r+0x20c>
 80066fc:	464f      	mov	r7, r9
 80066fe:	b937      	cbnz	r7, 800670e <__sfvwrite_r+0xa2>
 8006700:	f8db 9000 	ldr.w	r9, [fp]
 8006704:	f8db 7004 	ldr.w	r7, [fp, #4]
 8006708:	f10b 0b08 	add.w	fp, fp, #8
 800670c:	e7f7      	b.n	80066fe <__sfvwrite_r+0x92>
 800670e:	89a2      	ldrh	r2, [r4, #12]
 8006710:	68a5      	ldr	r5, [r4, #8]
 8006712:	0591      	lsls	r1, r2, #22
 8006714:	d552      	bpl.n	80067bc <__sfvwrite_r+0x150>
 8006716:	42af      	cmp	r7, r5
 8006718:	d342      	bcc.n	80067a0 <__sfvwrite_r+0x134>
 800671a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800671e:	d03d      	beq.n	800679c <__sfvwrite_r+0x130>
 8006720:	6921      	ldr	r1, [r4, #16]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	1a5b      	subs	r3, r3, r1
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	6963      	ldr	r3, [r4, #20]
 800672a:	2002      	movs	r0, #2
 800672c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006730:	fb93 faf0 	sdiv	sl, r3, r0
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	443b      	add	r3, r7
 800673a:	459a      	cmp	sl, r3
 800673c:	bf38      	it	cc
 800673e:	469a      	movcc	sl, r3
 8006740:	0553      	lsls	r3, r2, #21
 8006742:	d510      	bpl.n	8006766 <__sfvwrite_r+0xfa>
 8006744:	4651      	mov	r1, sl
 8006746:	4630      	mov	r0, r6
 8006748:	f7fd f816 	bl	8003778 <_malloc_r>
 800674c:	4605      	mov	r5, r0
 800674e:	b1c0      	cbz	r0, 8006782 <__sfvwrite_r+0x116>
 8006750:	9a00      	ldr	r2, [sp, #0]
 8006752:	6921      	ldr	r1, [r4, #16]
 8006754:	f000 f96c 	bl	8006a30 <memcpy>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800675e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	e010      	b.n	8006788 <__sfvwrite_r+0x11c>
 8006766:	4652      	mov	r2, sl
 8006768:	4630      	mov	r0, r6
 800676a:	f000 fd77 	bl	800725c <_realloc_r>
 800676e:	4605      	mov	r5, r0
 8006770:	b950      	cbnz	r0, 8006788 <__sfvwrite_r+0x11c>
 8006772:	6921      	ldr	r1, [r4, #16]
 8006774:	4630      	mov	r0, r6
 8006776:	f7fc ff1b 	bl	80035b0 <_free_r>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	230c      	movs	r3, #12
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	e0b0      	b.n	80068ea <__sfvwrite_r+0x27e>
 8006788:	9b00      	ldr	r3, [sp, #0]
 800678a:	6125      	str	r5, [r4, #16]
 800678c:	441d      	add	r5, r3
 800678e:	ebc3 030a 	rsb	r3, r3, sl
 8006792:	6025      	str	r5, [r4, #0]
 8006794:	f8c4 a014 	str.w	sl, [r4, #20]
 8006798:	463d      	mov	r5, r7
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	42af      	cmp	r7, r5
 800679e:	d200      	bcs.n	80067a2 <__sfvwrite_r+0x136>
 80067a0:	463d      	mov	r5, r7
 80067a2:	462a      	mov	r2, r5
 80067a4:	4649      	mov	r1, r9
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	f000 f94d 	bl	8006a46 <memmove>
 80067ac:	68a3      	ldr	r3, [r4, #8]
 80067ae:	1b5b      	subs	r3, r3, r5
 80067b0:	60a3      	str	r3, [r4, #8]
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	441d      	add	r5, r3
 80067b6:	6025      	str	r5, [r4, #0]
 80067b8:	463d      	mov	r5, r7
 80067ba:	e029      	b.n	8006810 <__sfvwrite_r+0x1a4>
 80067bc:	6820      	ldr	r0, [r4, #0]
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	4298      	cmp	r0, r3
 80067c2:	d802      	bhi.n	80067ca <__sfvwrite_r+0x15e>
 80067c4:	6962      	ldr	r2, [r4, #20]
 80067c6:	4297      	cmp	r7, r2
 80067c8:	d213      	bcs.n	80067f2 <__sfvwrite_r+0x186>
 80067ca:	42bd      	cmp	r5, r7
 80067cc:	bf28      	it	cs
 80067ce:	463d      	movcs	r5, r7
 80067d0:	462a      	mov	r2, r5
 80067d2:	4649      	mov	r1, r9
 80067d4:	f000 f937 	bl	8006a46 <memmove>
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	1b5b      	subs	r3, r3, r5
 80067de:	442a      	add	r2, r5
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	6022      	str	r2, [r4, #0]
 80067e4:	b9a3      	cbnz	r3, 8006810 <__sfvwrite_r+0x1a4>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4630      	mov	r0, r6
 80067ea:	f002 fb6d 	bl	8008ec8 <_fflush_r>
 80067ee:	b178      	cbz	r0, 8006810 <__sfvwrite_r+0x1a4>
 80067f0:	e07b      	b.n	80068ea <__sfvwrite_r+0x27e>
 80067f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80067f6:	42bb      	cmp	r3, r7
 80067f8:	bf28      	it	cs
 80067fa:	463b      	movcs	r3, r7
 80067fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80067fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006802:	6a21      	ldr	r1, [r4, #32]
 8006804:	4353      	muls	r3, r2
 8006806:	4630      	mov	r0, r6
 8006808:	464a      	mov	r2, r9
 800680a:	47a8      	blx	r5
 800680c:	1e05      	subs	r5, r0, #0
 800680e:	dd6c      	ble.n	80068ea <__sfvwrite_r+0x27e>
 8006810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006814:	44a9      	add	r9, r5
 8006816:	1b7f      	subs	r7, r7, r5
 8006818:	1b5d      	subs	r5, r3, r5
 800681a:	f8c8 5008 	str.w	r5, [r8, #8]
 800681e:	2d00      	cmp	r5, #0
 8006820:	f47f af6d 	bne.w	80066fe <__sfvwrite_r+0x92>
 8006824:	e729      	b.n	800667a <__sfvwrite_r+0xe>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	b383      	cbz	r3, 800688c <__sfvwrite_r+0x220>
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	6921      	ldr	r1, [r4, #16]
 800682e:	6962      	ldr	r2, [r4, #20]
 8006830:	4555      	cmp	r5, sl
 8006832:	462b      	mov	r3, r5
 8006834:	bf28      	it	cs
 8006836:	4653      	movcs	r3, sl
 8006838:	4288      	cmp	r0, r1
 800683a:	d936      	bls.n	80068aa <__sfvwrite_r+0x23e>
 800683c:	68a7      	ldr	r7, [r4, #8]
 800683e:	4417      	add	r7, r2
 8006840:	42bb      	cmp	r3, r7
 8006842:	dd32      	ble.n	80068aa <__sfvwrite_r+0x23e>
 8006844:	4649      	mov	r1, r9
 8006846:	463a      	mov	r2, r7
 8006848:	f000 f8fd 	bl	8006a46 <memmove>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	443b      	add	r3, r7
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	4621      	mov	r1, r4
 8006854:	4630      	mov	r0, r6
 8006856:	f002 fb37 	bl	8008ec8 <_fflush_r>
 800685a:	2800      	cmp	r0, #0
 800685c:	d145      	bne.n	80068ea <__sfvwrite_r+0x27e>
 800685e:	1bed      	subs	r5, r5, r7
 8006860:	d03c      	beq.n	80068dc <__sfvwrite_r+0x270>
 8006862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006866:	44b9      	add	r9, r7
 8006868:	ebc7 0a0a 	rsb	sl, r7, sl
 800686c:	1bdf      	subs	r7, r3, r7
 800686e:	f8c8 7008 	str.w	r7, [r8, #8]
 8006872:	2f00      	cmp	r7, #0
 8006874:	f43f af01 	beq.w	800667a <__sfvwrite_r+0xe>
 8006878:	f1ba 0f00 	cmp.w	sl, #0
 800687c:	d1d3      	bne.n	8006826 <__sfvwrite_r+0x1ba>
 800687e:	2300      	movs	r3, #0
 8006880:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	f10b 0b08 	add.w	fp, fp, #8
 800688a:	e7f5      	b.n	8006878 <__sfvwrite_r+0x20c>
 800688c:	4652      	mov	r2, sl
 800688e:	210a      	movs	r1, #10
 8006890:	4648      	mov	r0, r9
 8006892:	f7f9 fca5 	bl	80001e0 <memchr>
 8006896:	b118      	cbz	r0, 80068a0 <__sfvwrite_r+0x234>
 8006898:	3001      	adds	r0, #1
 800689a:	ebc9 0500 	rsb	r5, r9, r0
 800689e:	e001      	b.n	80068a4 <__sfvwrite_r+0x238>
 80068a0:	f10a 0501 	add.w	r5, sl, #1
 80068a4:	2301      	movs	r3, #1
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	e7bf      	b.n	800682a <__sfvwrite_r+0x1be>
 80068aa:	4293      	cmp	r3, r2
 80068ac:	db08      	blt.n	80068c0 <__sfvwrite_r+0x254>
 80068ae:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80068b0:	6a21      	ldr	r1, [r4, #32]
 80068b2:	4613      	mov	r3, r2
 80068b4:	4630      	mov	r0, r6
 80068b6:	464a      	mov	r2, r9
 80068b8:	47b8      	blx	r7
 80068ba:	1e07      	subs	r7, r0, #0
 80068bc:	dccf      	bgt.n	800685e <__sfvwrite_r+0x1f2>
 80068be:	e014      	b.n	80068ea <__sfvwrite_r+0x27e>
 80068c0:	461a      	mov	r2, r3
 80068c2:	4649      	mov	r1, r9
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f000 f8be 	bl	8006a46 <memmove>
 80068ca:	9b01      	ldr	r3, [sp, #4]
 80068cc:	68a2      	ldr	r2, [r4, #8]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	60a2      	str	r2, [r4, #8]
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	441a      	add	r2, r3
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	461f      	mov	r7, r3
 80068da:	e7c0      	b.n	800685e <__sfvwrite_r+0x1f2>
 80068dc:	4621      	mov	r1, r4
 80068de:	4630      	mov	r0, r6
 80068e0:	f002 faf2 	bl	8008ec8 <_fflush_r>
 80068e4:	b908      	cbnz	r0, 80068ea <__sfvwrite_r+0x27e>
 80068e6:	9500      	str	r5, [sp, #0]
 80068e8:	e7bb      	b.n	8006862 <__sfvwrite_r+0x1f6>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	b003      	add	sp, #12
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	7ffffc00 	.word	0x7ffffc00

08006900 <_fwalk>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	4688      	mov	r8, r1
 8006906:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800690a:	2600      	movs	r6, #0
 800690c:	b18c      	cbz	r4, 8006932 <_fwalk+0x32>
 800690e:	68a5      	ldr	r5, [r4, #8]
 8006910:	6867      	ldr	r7, [r4, #4]
 8006912:	3f01      	subs	r7, #1
 8006914:	d40b      	bmi.n	800692e <_fwalk+0x2e>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d906      	bls.n	800692a <_fwalk+0x2a>
 800691c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006920:	3301      	adds	r3, #1
 8006922:	d002      	beq.n	800692a <_fwalk+0x2a>
 8006924:	4628      	mov	r0, r5
 8006926:	47c0      	blx	r8
 8006928:	4306      	orrs	r6, r0
 800692a:	3568      	adds	r5, #104	; 0x68
 800692c:	e7f1      	b.n	8006912 <_fwalk+0x12>
 800692e:	6824      	ldr	r4, [r4, #0]
 8006930:	e7ec      	b.n	800690c <_fwalk+0xc>
 8006932:	4630      	mov	r0, r6
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006938 <_fwalk_reent>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4680      	mov	r8, r0
 800693e:	4689      	mov	r9, r1
 8006940:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8006944:	2600      	movs	r6, #0
 8006946:	b194      	cbz	r4, 800696e <_fwalk_reent+0x36>
 8006948:	68a5      	ldr	r5, [r4, #8]
 800694a:	6867      	ldr	r7, [r4, #4]
 800694c:	3f01      	subs	r7, #1
 800694e:	d40c      	bmi.n	800696a <_fwalk_reent+0x32>
 8006950:	89ab      	ldrh	r3, [r5, #12]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d907      	bls.n	8006966 <_fwalk_reent+0x2e>
 8006956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800695a:	3301      	adds	r3, #1
 800695c:	d003      	beq.n	8006966 <_fwalk_reent+0x2e>
 800695e:	4629      	mov	r1, r5
 8006960:	4640      	mov	r0, r8
 8006962:	47c8      	blx	r9
 8006964:	4306      	orrs	r6, r0
 8006966:	3568      	adds	r5, #104	; 0x68
 8006968:	e7f0      	b.n	800694c <_fwalk_reent+0x14>
 800696a:	6824      	ldr	r4, [r4, #0]
 800696c:	e7eb      	b.n	8006946 <_fwalk_reent+0xe>
 800696e:	4630      	mov	r0, r6
 8006970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006974 <iswspace>:
 8006974:	28ff      	cmp	r0, #255	; 0xff
 8006976:	bf9f      	itttt	ls
 8006978:	4b04      	ldrls	r3, [pc, #16]	; (800698c <iswspace+0x18>)
 800697a:	681b      	ldrls	r3, [r3, #0]
 800697c:	18c0      	addls	r0, r0, r3
 800697e:	7840      	ldrbls	r0, [r0, #1]
 8006980:	bf9a      	itte	ls
 8006982:	f000 0008 	andls.w	r0, r0, #8
 8006986:	b2c0      	uxtbls	r0, r0
 8006988:	2000      	movhi	r0, #0
 800698a:	4770      	bx	lr
 800698c:	2000050c 	.word	0x2000050c

08006990 <__locale_charset>:
 8006990:	4800      	ldr	r0, [pc, #0]	; (8006994 <__locale_charset+0x4>)
 8006992:	4770      	bx	lr
 8006994:	20000548 	.word	0x20000548

08006998 <__locale_mb_cur_max>:
 8006998:	4b01      	ldr	r3, [pc, #4]	; (80069a0 <__locale_mb_cur_max+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20000568 	.word	0x20000568

080069a4 <_localeconv_r>:
 80069a4:	4800      	ldr	r0, [pc, #0]	; (80069a8 <_localeconv_r+0x4>)
 80069a6:	4770      	bx	lr
 80069a8:	20000510 	.word	0x20000510

080069ac <malloc>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <malloc+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f7fc bee1 	b.w	8003778 <_malloc_r>
 80069b6:	bf00      	nop
 80069b8:	200000f8 	.word	0x200000f8

080069bc <_mbrtowc_r>:
 80069bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4616      	mov	r6, r2
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <_mbrtowc_r+0x48>)
 80069c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80069c6:	6817      	ldr	r7, [r2, #0]
 80069c8:	4604      	mov	r4, r0
 80069ca:	4688      	mov	r8, r1
 80069cc:	4699      	mov	r9, r3
 80069ce:	b93e      	cbnz	r6, 80069e0 <_mbrtowc_r+0x24>
 80069d0:	f7ff ffde 	bl	8006990 <__locale_charset>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e88d 0021 	stmia.w	sp, {r0, r5}
 80069da:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <_mbrtowc_r+0x4c>)
 80069dc:	4631      	mov	r1, r6
 80069de:	e006      	b.n	80069ee <_mbrtowc_r+0x32>
 80069e0:	f7ff ffd6 	bl	8006990 <__locale_charset>
 80069e4:	e88d 0021 	stmia.w	sp, {r0, r5}
 80069e8:	464b      	mov	r3, r9
 80069ea:	4632      	mov	r2, r6
 80069ec:	4641      	mov	r1, r8
 80069ee:	4620      	mov	r0, r4
 80069f0:	47b8      	blx	r7
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	bf01      	itttt	eq
 80069f6:	2300      	moveq	r3, #0
 80069f8:	602b      	streq	r3, [r5, #0]
 80069fa:	238a      	moveq	r3, #138	; 0x8a
 80069fc:	6023      	streq	r3, [r4, #0]
 80069fe:	b003      	add	sp, #12
 8006a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a04:	2000056c 	.word	0x2000056c
 8006a08:	0800982d 	.word	0x0800982d

08006a0c <__ascii_mbtowc>:
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	b901      	cbnz	r1, 8006a12 <__ascii_mbtowc+0x6>
 8006a10:	a901      	add	r1, sp, #4
 8006a12:	b13a      	cbz	r2, 8006a24 <__ascii_mbtowc+0x18>
 8006a14:	b143      	cbz	r3, 8006a28 <__ascii_mbtowc+0x1c>
 8006a16:	7813      	ldrb	r3, [r2, #0]
 8006a18:	600b      	str	r3, [r1, #0]
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	1c10      	adds	r0, r2, #0
 8006a1e:	bf18      	it	ne
 8006a20:	2001      	movne	r0, #1
 8006a22:	e003      	b.n	8006a2c <__ascii_mbtowc+0x20>
 8006a24:	4610      	mov	r0, r2
 8006a26:	e001      	b.n	8006a2c <__ascii_mbtowc+0x20>
 8006a28:	f06f 0001 	mvn.w	r0, #1
 8006a2c:	b002      	add	sp, #8
 8006a2e:	4770      	bx	lr

08006a30 <memcpy>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	1e43      	subs	r3, r0, #1
 8006a34:	440a      	add	r2, r1
 8006a36:	4291      	cmp	r1, r2
 8006a38:	d004      	beq.n	8006a44 <memcpy+0x14>
 8006a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a42:	e7f8      	b.n	8006a36 <memcpy+0x6>
 8006a44:	bd10      	pop	{r4, pc}

08006a46 <memmove>:
 8006a46:	4288      	cmp	r0, r1
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	eb01 0302 	add.w	r3, r1, r2
 8006a4e:	d801      	bhi.n	8006a54 <memmove+0xe>
 8006a50:	1e42      	subs	r2, r0, #1
 8006a52:	e00b      	b.n	8006a6c <memmove+0x26>
 8006a54:	4298      	cmp	r0, r3
 8006a56:	d2fb      	bcs.n	8006a50 <memmove+0xa>
 8006a58:	1881      	adds	r1, r0, r2
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	42d3      	cmn	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <memmove+0x24>
 8006a60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a68:	e7f8      	b.n	8006a5c <memmove+0x16>
 8006a6a:	bd10      	pop	{r4, pc}
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	d004      	beq.n	8006a7a <memmove+0x34>
 8006a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a78:	e7f8      	b.n	8006a6c <memmove+0x26>
 8006a7a:	bd10      	pop	{r4, pc}

08006a7c <_Balloc>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a80:	4604      	mov	r4, r0
 8006a82:	460e      	mov	r6, r1
 8006a84:	b93d      	cbnz	r5, 8006a96 <_Balloc+0x1a>
 8006a86:	2010      	movs	r0, #16
 8006a88:	f7ff ff90 	bl	80069ac <malloc>
 8006a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a8e:	6045      	str	r5, [r0, #4]
 8006a90:	6085      	str	r5, [r0, #8]
 8006a92:	6005      	str	r5, [r0, #0]
 8006a94:	60c5      	str	r5, [r0, #12]
 8006a96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a98:	68eb      	ldr	r3, [r5, #12]
 8006a9a:	b143      	cbz	r3, 8006aae <_Balloc+0x32>
 8006a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006aa4:	b178      	cbz	r0, 8006ac6 <_Balloc+0x4a>
 8006aa6:	6802      	ldr	r2, [r0, #0]
 8006aa8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006aac:	e017      	b.n	8006ade <_Balloc+0x62>
 8006aae:	2221      	movs	r2, #33	; 0x21
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f002 f8e8 	bl	8008c88 <_calloc_r>
 8006ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aba:	60e8      	str	r0, [r5, #12]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ec      	bne.n	8006a9c <_Balloc+0x20>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	fa01 f506 	lsl.w	r5, r1, r6
 8006acc:	1d6a      	adds	r2, r5, #5
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f002 f8d9 	bl	8008c88 <_calloc_r>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0f3      	beq.n	8006ac2 <_Balloc+0x46>
 8006ada:	6046      	str	r6, [r0, #4]
 8006adc:	6085      	str	r5, [r0, #8]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6103      	str	r3, [r0, #16]
 8006ae2:	60c3      	str	r3, [r0, #12]
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}

08006ae6 <_Bfree>:
 8006ae6:	b570      	push	{r4, r5, r6, lr}
 8006ae8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006aea:	4606      	mov	r6, r0
 8006aec:	460d      	mov	r5, r1
 8006aee:	b93c      	cbnz	r4, 8006b00 <_Bfree+0x1a>
 8006af0:	2010      	movs	r0, #16
 8006af2:	f7ff ff5b 	bl	80069ac <malloc>
 8006af6:	6270      	str	r0, [r6, #36]	; 0x24
 8006af8:	6044      	str	r4, [r0, #4]
 8006afa:	6084      	str	r4, [r0, #8]
 8006afc:	6004      	str	r4, [r0, #0]
 8006afe:	60c4      	str	r4, [r0, #12]
 8006b00:	b13d      	cbz	r5, 8006b12 <_Bfree+0x2c>
 8006b02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b04:	686a      	ldr	r2, [r5, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b0c:	6029      	str	r1, [r5, #0]
 8006b0e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b12:	bd70      	pop	{r4, r5, r6, pc}

08006b14 <__multadd>:
 8006b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b18:	690d      	ldr	r5, [r1, #16]
 8006b1a:	461f      	mov	r7, r3
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	f101 0e14 	add.w	lr, r1, #20
 8006b24:	2300      	movs	r3, #0
 8006b26:	f8de 0000 	ldr.w	r0, [lr]
 8006b2a:	b281      	uxth	r1, r0
 8006b2c:	fb02 7101 	mla	r1, r2, r1, r7
 8006b30:	0c0f      	lsrs	r7, r1, #16
 8006b32:	0c00      	lsrs	r0, r0, #16
 8006b34:	fb02 7000 	mla	r0, r2, r0, r7
 8006b38:	b289      	uxth	r1, r1
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b40:	429d      	cmp	r5, r3
 8006b42:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b46:	f84e 1b04 	str.w	r1, [lr], #4
 8006b4a:	dcec      	bgt.n	8006b26 <__multadd+0x12>
 8006b4c:	b1d7      	cbz	r7, 8006b84 <__multadd+0x70>
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	429d      	cmp	r5, r3
 8006b52:	db12      	blt.n	8006b7a <__multadd+0x66>
 8006b54:	6861      	ldr	r1, [r4, #4]
 8006b56:	4630      	mov	r0, r6
 8006b58:	3101      	adds	r1, #1
 8006b5a:	f7ff ff8f 	bl	8006a7c <_Balloc>
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	3202      	adds	r2, #2
 8006b62:	f104 010c 	add.w	r1, r4, #12
 8006b66:	4680      	mov	r8, r0
 8006b68:	0092      	lsls	r2, r2, #2
 8006b6a:	300c      	adds	r0, #12
 8006b6c:	f7ff ff60 	bl	8006a30 <memcpy>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ffb7 	bl	8006ae6 <_Bfree>
 8006b78:	4644      	mov	r4, r8
 8006b7a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b7e:	3501      	adds	r5, #1
 8006b80:	615f      	str	r7, [r3, #20]
 8006b82:	6125      	str	r5, [r4, #16]
 8006b84:	4620      	mov	r0, r4
 8006b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b8a <__s2b>:
 8006b8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4615      	mov	r5, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	2209      	movs	r2, #9
 8006b96:	3308      	adds	r3, #8
 8006b98:	4606      	mov	r6, r0
 8006b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	da02      	bge.n	8006bac <__s2b+0x22>
 8006ba6:	0052      	lsls	r2, r2, #1
 8006ba8:	3101      	adds	r1, #1
 8006baa:	e7fa      	b.n	8006ba2 <__s2b+0x18>
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff ff65 	bl	8006a7c <_Balloc>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	6143      	str	r3, [r0, #20]
 8006bb6:	2d09      	cmp	r5, #9
 8006bb8:	f04f 0301 	mov.w	r3, #1
 8006bbc:	6103      	str	r3, [r0, #16]
 8006bbe:	dd11      	ble.n	8006be4 <__s2b+0x5a>
 8006bc0:	f104 0809 	add.w	r8, r4, #9
 8006bc4:	46c1      	mov	r9, r8
 8006bc6:	442c      	add	r4, r5
 8006bc8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006bcc:	4601      	mov	r1, r0
 8006bce:	3b30      	subs	r3, #48	; 0x30
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ff9e 	bl	8006b14 <__multadd>
 8006bd8:	45a1      	cmp	r9, r4
 8006bda:	d1f5      	bne.n	8006bc8 <__s2b+0x3e>
 8006bdc:	eb08 0405 	add.w	r4, r8, r5
 8006be0:	3c08      	subs	r4, #8
 8006be2:	e001      	b.n	8006be8 <__s2b+0x5e>
 8006be4:	340a      	adds	r4, #10
 8006be6:	2509      	movs	r5, #9
 8006be8:	1b2d      	subs	r5, r5, r4
 8006bea:	1963      	adds	r3, r4, r5
 8006bec:	429f      	cmp	r7, r3
 8006bee:	dd08      	ble.n	8006c02 <__s2b+0x78>
 8006bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	3b30      	subs	r3, #48	; 0x30
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff ff8a 	bl	8006b14 <__multadd>
 8006c00:	e7f3      	b.n	8006bea <__s2b+0x60>
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c06 <__hi0bits>:
 8006c06:	0c03      	lsrs	r3, r0, #16
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	b913      	cbnz	r3, 8006c12 <__hi0bits+0xc>
 8006c0c:	0400      	lsls	r0, r0, #16
 8006c0e:	2310      	movs	r3, #16
 8006c10:	e000      	b.n	8006c14 <__hi0bits+0xe>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c18:	bf04      	itt	eq
 8006c1a:	0200      	lsleq	r0, r0, #8
 8006c1c:	3308      	addeq	r3, #8
 8006c1e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c22:	bf04      	itt	eq
 8006c24:	0100      	lsleq	r0, r0, #4
 8006c26:	3304      	addeq	r3, #4
 8006c28:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c2c:	bf04      	itt	eq
 8006c2e:	0080      	lsleq	r0, r0, #2
 8006c30:	3302      	addeq	r3, #2
 8006c32:	2800      	cmp	r0, #0
 8006c34:	db03      	blt.n	8006c3e <__hi0bits+0x38>
 8006c36:	0042      	lsls	r2, r0, #1
 8006c38:	d503      	bpl.n	8006c42 <__hi0bits+0x3c>
 8006c3a:	1c58      	adds	r0, r3, #1
 8006c3c:	4770      	bx	lr
 8006c3e:	4618      	mov	r0, r3
 8006c40:	4770      	bx	lr
 8006c42:	2020      	movs	r0, #32
 8006c44:	4770      	bx	lr

08006c46 <__lo0bits>:
 8006c46:	6803      	ldr	r3, [r0, #0]
 8006c48:	f013 0207 	ands.w	r2, r3, #7
 8006c4c:	d00b      	beq.n	8006c66 <__lo0bits+0x20>
 8006c4e:	07d9      	lsls	r1, r3, #31
 8006c50:	d422      	bmi.n	8006c98 <__lo0bits+0x52>
 8006c52:	079a      	lsls	r2, r3, #30
 8006c54:	bf4b      	itete	mi
 8006c56:	085b      	lsrmi	r3, r3, #1
 8006c58:	089b      	lsrpl	r3, r3, #2
 8006c5a:	6003      	strmi	r3, [r0, #0]
 8006c5c:	6003      	strpl	r3, [r0, #0]
 8006c5e:	bf4c      	ite	mi
 8006c60:	2001      	movmi	r0, #1
 8006c62:	2002      	movpl	r0, #2
 8006c64:	4770      	bx	lr
 8006c66:	b299      	uxth	r1, r3
 8006c68:	b909      	cbnz	r1, 8006c6e <__lo0bits+0x28>
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c72:	bf04      	itt	eq
 8006c74:	0a1b      	lsreq	r3, r3, #8
 8006c76:	3208      	addeq	r2, #8
 8006c78:	0719      	lsls	r1, r3, #28
 8006c7a:	bf04      	itt	eq
 8006c7c:	091b      	lsreq	r3, r3, #4
 8006c7e:	3204      	addeq	r2, #4
 8006c80:	0799      	lsls	r1, r3, #30
 8006c82:	bf04      	itt	eq
 8006c84:	089b      	lsreq	r3, r3, #2
 8006c86:	3202      	addeq	r2, #2
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	d402      	bmi.n	8006c92 <__lo0bits+0x4c>
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	d005      	beq.n	8006c9c <__lo0bits+0x56>
 8006c90:	3201      	adds	r2, #1
 8006c92:	6003      	str	r3, [r0, #0]
 8006c94:	4610      	mov	r0, r2
 8006c96:	4770      	bx	lr
 8006c98:	2000      	movs	r0, #0
 8006c9a:	4770      	bx	lr
 8006c9c:	2020      	movs	r0, #32
 8006c9e:	4770      	bx	lr

08006ca0 <__i2b>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	f7ff fee9 	bl	8006a7c <_Balloc>
 8006caa:	2201      	movs	r2, #1
 8006cac:	6144      	str	r4, [r0, #20]
 8006cae:	6102      	str	r2, [r0, #16]
 8006cb0:	bd10      	pop	{r4, pc}

08006cb2 <__multiply>:
 8006cb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	690a      	ldr	r2, [r1, #16]
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	bfb8      	it	lt
 8006cc0:	460b      	movlt	r3, r1
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	bfbc      	itt	lt
 8006cc6:	46a0      	movlt	r8, r4
 8006cc8:	461c      	movlt	r4, r3
 8006cca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cda:	eb07 0609 	add.w	r6, r7, r9
 8006cde:	429e      	cmp	r6, r3
 8006ce0:	bfc8      	it	gt
 8006ce2:	3101      	addgt	r1, #1
 8006ce4:	f7ff feca 	bl	8006a7c <_Balloc>
 8006ce8:	f100 0514 	add.w	r5, r0, #20
 8006cec:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4563      	cmp	r3, ip
 8006cf6:	d202      	bcs.n	8006cfe <__multiply+0x4c>
 8006cf8:	f843 2b04 	str.w	r2, [r3], #4
 8006cfc:	e7fa      	b.n	8006cf4 <__multiply+0x42>
 8006cfe:	f104 0214 	add.w	r2, r4, #20
 8006d02:	f108 0114 	add.w	r1, r8, #20
 8006d06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	9201      	str	r2, [sp, #4]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d957      	bls.n	8006dc8 <__multiply+0x116>
 8006d18:	f8b2 b000 	ldrh.w	fp, [r2]
 8006d1c:	f1bb 0f00 	cmp.w	fp, #0
 8006d20:	d023      	beq.n	8006d6a <__multiply+0xb8>
 8006d22:	4689      	mov	r9, r1
 8006d24:	46ae      	mov	lr, r5
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d2e:	f8be a000 	ldrh.w	sl, [lr]
 8006d32:	b2a3      	uxth	r3, r4
 8006d34:	fb0b a303 	mla	r3, fp, r3, sl
 8006d38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d3c:	f8de 4000 	ldr.w	r4, [lr]
 8006d40:	4443      	add	r3, r8
 8006d42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d46:	fb0b 840a 	mla	r4, fp, sl, r8
 8006d4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006d4e:	46f2      	mov	sl, lr
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d56:	454f      	cmp	r7, r9
 8006d58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d5c:	f84a 3b04 	str.w	r3, [sl], #4
 8006d60:	d901      	bls.n	8006d66 <__multiply+0xb4>
 8006d62:	46d6      	mov	lr, sl
 8006d64:	e7e1      	b.n	8006d2a <__multiply+0x78>
 8006d66:	f8ce 8004 	str.w	r8, [lr, #4]
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006d70:	3204      	adds	r2, #4
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	d021      	beq.n	8006dbc <__multiply+0x10a>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	462c      	mov	r4, r5
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	f8b9 e000 	ldrh.w	lr, [r9]
 8006d86:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8006d8a:	fb0a be0e 	mla	lr, sl, lr, fp
 8006d8e:	44f0      	add	r8, lr
 8006d90:	46a3      	mov	fp, r4
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006d98:	f84b 3b04 	str.w	r3, [fp], #4
 8006d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006da0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	fb0a e303 	mla	r3, sl, r3, lr
 8006daa:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8006dae:	454f      	cmp	r7, r9
 8006db0:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8006db4:	d901      	bls.n	8006dba <__multiply+0x108>
 8006db6:	465c      	mov	r4, fp
 8006db8:	e7e3      	b.n	8006d82 <__multiply+0xd0>
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	3504      	adds	r5, #4
 8006dbe:	e7a7      	b.n	8006d10 <__multiply+0x5e>
 8006dc0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8006dc4:	b913      	cbnz	r3, 8006dcc <__multiply+0x11a>
 8006dc6:	3e01      	subs	r6, #1
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	dcf9      	bgt.n	8006dc0 <__multiply+0x10e>
 8006dcc:	6106      	str	r6, [r0, #16]
 8006dce:	b003      	add	sp, #12
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006dd4 <__pow5mult>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	4615      	mov	r5, r2
 8006dda:	f012 0203 	ands.w	r2, r2, #3
 8006dde:	4606      	mov	r6, r0
 8006de0:	460f      	mov	r7, r1
 8006de2:	d007      	beq.n	8006df4 <__pow5mult+0x20>
 8006de4:	3a01      	subs	r2, #1
 8006de6:	4c21      	ldr	r4, [pc, #132]	; (8006e6c <__pow5mult+0x98>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dee:	f7ff fe91 	bl	8006b14 <__multadd>
 8006df2:	4607      	mov	r7, r0
 8006df4:	10ad      	asrs	r5, r5, #2
 8006df6:	d036      	beq.n	8006e66 <__pow5mult+0x92>
 8006df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006dfa:	b93c      	cbnz	r4, 8006e0c <__pow5mult+0x38>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f7ff fdd5 	bl	80069ac <malloc>
 8006e02:	6270      	str	r0, [r6, #36]	; 0x24
 8006e04:	6044      	str	r4, [r0, #4]
 8006e06:	6084      	str	r4, [r0, #8]
 8006e08:	6004      	str	r4, [r0, #0]
 8006e0a:	60c4      	str	r4, [r0, #12]
 8006e0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e14:	b94c      	cbnz	r4, 8006e2a <__pow5mult+0x56>
 8006e16:	f240 2171 	movw	r1, #625	; 0x271
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff ff40 	bl	8006ca0 <__i2b>
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e26:	4604      	mov	r4, r0
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	07eb      	lsls	r3, r5, #31
 8006e30:	d50a      	bpl.n	8006e48 <__pow5mult+0x74>
 8006e32:	4639      	mov	r1, r7
 8006e34:	4622      	mov	r2, r4
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff ff3b 	bl	8006cb2 <__multiply>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4681      	mov	r9, r0
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff fe50 	bl	8006ae6 <_Bfree>
 8006e46:	464f      	mov	r7, r9
 8006e48:	106d      	asrs	r5, r5, #1
 8006e4a:	d00c      	beq.n	8006e66 <__pow5mult+0x92>
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	b108      	cbz	r0, 8006e54 <__pow5mult+0x80>
 8006e50:	4604      	mov	r4, r0
 8006e52:	e7ec      	b.n	8006e2e <__pow5mult+0x5a>
 8006e54:	4622      	mov	r2, r4
 8006e56:	4621      	mov	r1, r4
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ff2a 	bl	8006cb2 <__multiply>
 8006e5e:	6020      	str	r0, [r4, #0]
 8006e60:	f8c0 8000 	str.w	r8, [r0]
 8006e64:	e7f4      	b.n	8006e50 <__pow5mult+0x7c>
 8006e66:	4638      	mov	r0, r7
 8006e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6c:	08009b10 	.word	0x08009b10

08006e70 <__lshift>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e7a:	6926      	ldr	r6, [r4, #16]
 8006e7c:	6849      	ldr	r1, [r1, #4]
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	4456      	add	r6, sl
 8006e82:	4607      	mov	r7, r0
 8006e84:	4691      	mov	r9, r2
 8006e86:	1c75      	adds	r5, r6, #1
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	da02      	bge.n	8006e92 <__lshift+0x22>
 8006e8c:	3101      	adds	r1, #1
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	e7fa      	b.n	8006e88 <__lshift+0x18>
 8006e92:	4638      	mov	r0, r7
 8006e94:	f7ff fdf2 	bl	8006a7c <_Balloc>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	f100 0114 	add.w	r1, r0, #20
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4553      	cmp	r3, sl
 8006ea4:	da03      	bge.n	8006eae <__lshift+0x3e>
 8006ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	e7f9      	b.n	8006ea2 <__lshift+0x32>
 8006eae:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8006eb2:	6920      	ldr	r0, [r4, #16]
 8006eb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006eb8:	f019 091f 	ands.w	r9, r9, #31
 8006ebc:	f104 0114 	add.w	r1, r4, #20
 8006ec0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006ec4:	d014      	beq.n	8006ef0 <__lshift+0x80>
 8006ec6:	f1c9 0c20 	rsb	ip, r9, #32
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6808      	ldr	r0, [r1, #0]
 8006ece:	fa00 f009 	lsl.w	r0, r0, r9
 8006ed2:	4302      	orrs	r2, r0
 8006ed4:	469a      	mov	sl, r3
 8006ed6:	f843 2b04 	str.w	r2, [r3], #4
 8006eda:	f851 2b04 	ldr.w	r2, [r1], #4
 8006ede:	458e      	cmp	lr, r1
 8006ee0:	fa22 f20c 	lsr.w	r2, r2, ip
 8006ee4:	d8f2      	bhi.n	8006ecc <__lshift+0x5c>
 8006ee6:	f8ca 2004 	str.w	r2, [sl, #4]
 8006eea:	b142      	cbz	r2, 8006efe <__lshift+0x8e>
 8006eec:	1cb5      	adds	r5, r6, #2
 8006eee:	e006      	b.n	8006efe <__lshift+0x8e>
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	f851 2b04 	ldr.w	r2, [r1], #4
 8006ef6:	f843 2f04 	str.w	r2, [r3, #4]!
 8006efa:	458e      	cmp	lr, r1
 8006efc:	d8f9      	bhi.n	8006ef2 <__lshift+0x82>
 8006efe:	3d01      	subs	r5, #1
 8006f00:	4638      	mov	r0, r7
 8006f02:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f06:	4621      	mov	r1, r4
 8006f08:	f7ff fded 	bl	8006ae6 <_Bfree>
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f12 <__mcmp>:
 8006f12:	6903      	ldr	r3, [r0, #16]
 8006f14:	690a      	ldr	r2, [r1, #16]
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	d111      	bne.n	8006f40 <__mcmp+0x2e>
 8006f1c:	0092      	lsls	r2, r2, #2
 8006f1e:	3014      	adds	r0, #20
 8006f20:	3114      	adds	r1, #20
 8006f22:	1883      	adds	r3, r0, r2
 8006f24:	440a      	add	r2, r1
 8006f26:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006f2a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006f2e:	428c      	cmp	r4, r1
 8006f30:	d002      	beq.n	8006f38 <__mcmp+0x26>
 8006f32:	d307      	bcc.n	8006f44 <__mcmp+0x32>
 8006f34:	2001      	movs	r0, #1
 8006f36:	bd10      	pop	{r4, pc}
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	d3f4      	bcc.n	8006f26 <__mcmp+0x14>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd10      	pop	{r4, pc}
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__mdiff>:
 8006f4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4607      	mov	r7, r0
 8006f52:	4611      	mov	r1, r2
 8006f54:	4620      	mov	r0, r4
 8006f56:	4615      	mov	r5, r2
 8006f58:	f7ff ffdb 	bl	8006f12 <__mcmp>
 8006f5c:	1e06      	subs	r6, r0, #0
 8006f5e:	d108      	bne.n	8006f72 <__mdiff+0x28>
 8006f60:	4631      	mov	r1, r6
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff fd8a 	bl	8006a7c <_Balloc>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	6103      	str	r3, [r0, #16]
 8006f6c:	6146      	str	r6, [r0, #20]
 8006f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f72:	bfbc      	itt	lt
 8006f74:	4623      	movlt	r3, r4
 8006f76:	462c      	movlt	r4, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	6861      	ldr	r1, [r4, #4]
 8006f7c:	bfba      	itte	lt
 8006f7e:	461d      	movlt	r5, r3
 8006f80:	2601      	movlt	r6, #1
 8006f82:	2600      	movge	r6, #0
 8006f84:	f7ff fd7a 	bl	8006a7c <_Balloc>
 8006f88:	692b      	ldr	r3, [r5, #16]
 8006f8a:	60c6      	str	r6, [r0, #12]
 8006f8c:	6926      	ldr	r6, [r4, #16]
 8006f8e:	f105 0914 	add.w	r9, r5, #20
 8006f92:	3414      	adds	r4, #20
 8006f94:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8006f98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006f9c:	f100 0514 	add.w	r5, r0, #20
 8006fa0:	f04f 0c00 	mov.w	ip, #0
 8006fa4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006fa8:	f859 2b04 	ldr.w	r2, [r9], #4
 8006fac:	fa1c f183 	uxtah	r1, ip, r3
 8006fb0:	fa1f fe82 	uxth.w	lr, r2
 8006fb4:	0c12      	lsrs	r2, r2, #16
 8006fb6:	ebce 0101 	rsb	r1, lr, r1
 8006fba:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8006fbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006fc8:	45c8      	cmp	r8, r9
 8006fca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006fce:	46a6      	mov	lr, r4
 8006fd0:	f845 3b04 	str.w	r3, [r5], #4
 8006fd4:	d8e6      	bhi.n	8006fa4 <__mdiff+0x5a>
 8006fd6:	45be      	cmp	lr, r7
 8006fd8:	d20e      	bcs.n	8006ff8 <__mdiff+0xae>
 8006fda:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006fde:	fa1c f281 	uxtah	r2, ip, r1
 8006fe2:	1413      	asrs	r3, r2, #16
 8006fe4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8006fe8:	b292      	uxth	r2, r2
 8006fea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ff2:	f845 2b04 	str.w	r2, [r5], #4
 8006ff6:	e7ee      	b.n	8006fd6 <__mdiff+0x8c>
 8006ff8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006ffc:	b90b      	cbnz	r3, 8007002 <__mdiff+0xb8>
 8006ffe:	3e01      	subs	r6, #1
 8007000:	e7fa      	b.n	8006ff8 <__mdiff+0xae>
 8007002:	6106      	str	r6, [r0, #16]
 8007004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007008 <__ulp>:
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <__ulp+0x4c>)
 800700a:	ee10 2a90 	vmov	r2, s1
 800700e:	401a      	ands	r2, r3
 8007010:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007014:	2b00      	cmp	r3, #0
 8007016:	dd02      	ble.n	800701e <__ulp+0x16>
 8007018:	2000      	movs	r0, #0
 800701a:	4619      	mov	r1, r3
 800701c:	e017      	b.n	800704e <__ulp+0x46>
 800701e:	425b      	negs	r3, r3
 8007020:	151b      	asrs	r3, r3, #20
 8007022:	2b13      	cmp	r3, #19
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	dc04      	bgt.n	8007038 <__ulp+0x30>
 800702e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007032:	fa42 f103 	asr.w	r1, r2, r3
 8007036:	e00a      	b.n	800704e <__ulp+0x46>
 8007038:	3b14      	subs	r3, #20
 800703a:	2b1e      	cmp	r3, #30
 800703c:	f04f 0201 	mov.w	r2, #1
 8007040:	bfda      	itte	le
 8007042:	f1c3 031f 	rsble	r3, r3, #31
 8007046:	fa02 f303 	lslle.w	r3, r2, r3
 800704a:	4613      	movgt	r3, r2
 800704c:	4618      	mov	r0, r3
 800704e:	ec41 0b10 	vmov	d0, r0, r1
 8007052:	4770      	bx	lr
 8007054:	7ff00000 	.word	0x7ff00000

08007058 <__b2d>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	6905      	ldr	r5, [r0, #16]
 800705c:	f100 0614 	add.w	r6, r0, #20
 8007060:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8007064:	1f2f      	subs	r7, r5, #4
 8007066:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff fdcb 	bl	8006c06 <__hi0bits>
 8007070:	f1c0 0320 	rsb	r3, r0, #32
 8007074:	280a      	cmp	r0, #10
 8007076:	600b      	str	r3, [r1, #0]
 8007078:	dc14      	bgt.n	80070a4 <__b2d+0x4c>
 800707a:	f1c0 0e0b 	rsb	lr, r0, #11
 800707e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007082:	42be      	cmp	r6, r7
 8007084:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8007088:	bf34      	ite	cc
 800708a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800708e:	2100      	movcs	r1, #0
 8007090:	3015      	adds	r0, #21
 8007092:	fa04 f000 	lsl.w	r0, r4, r0
 8007096:	fa21 f10e 	lsr.w	r1, r1, lr
 800709a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800709e:	ea40 0201 	orr.w	r2, r0, r1
 80070a2:	e023      	b.n	80070ec <__b2d+0x94>
 80070a4:	42be      	cmp	r6, r7
 80070a6:	bf3a      	itte	cc
 80070a8:	f1a5 0708 	subcc.w	r7, r5, #8
 80070ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070b0:	2100      	movcs	r1, #0
 80070b2:	380b      	subs	r0, #11
 80070b4:	d015      	beq.n	80070e2 <__b2d+0x8a>
 80070b6:	4084      	lsls	r4, r0
 80070b8:	f1c0 0520 	rsb	r5, r0, #32
 80070bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80070c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80070c4:	42b7      	cmp	r7, r6
 80070c6:	fa21 fe05 	lsr.w	lr, r1, r5
 80070ca:	ea44 030e 	orr.w	r3, r4, lr
 80070ce:	bf8c      	ite	hi
 80070d0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80070d4:	2400      	movls	r4, #0
 80070d6:	fa01 f000 	lsl.w	r0, r1, r0
 80070da:	40ec      	lsrs	r4, r5
 80070dc:	ea40 0204 	orr.w	r2, r0, r4
 80070e0:	e004      	b.n	80070ec <__b2d+0x94>
 80070e2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80070e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070ea:	460a      	mov	r2, r1
 80070ec:	ec43 2b10 	vmov	d0, r2, r3
 80070f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070f2 <__d2b>:
 80070f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070f6:	460e      	mov	r6, r1
 80070f8:	2101      	movs	r1, #1
 80070fa:	ec59 8b10 	vmov	r8, r9, d0
 80070fe:	4615      	mov	r5, r2
 8007100:	f7ff fcbc 	bl	8006a7c <_Balloc>
 8007104:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007108:	4607      	mov	r7, r0
 800710a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800710e:	b10c      	cbz	r4, 8007114 <__d2b+0x22>
 8007110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	f1b8 0f00 	cmp.w	r8, #0
 800711a:	d019      	beq.n	8007150 <__d2b+0x5e>
 800711c:	a802      	add	r0, sp, #8
 800711e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007122:	f7ff fd90 	bl	8006c46 <__lo0bits>
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	b148      	cbz	r0, 800713e <__d2b+0x4c>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	f1c0 0120 	rsb	r1, r0, #32
 8007130:	fa02 f101 	lsl.w	r1, r2, r1
 8007134:	430b      	orrs	r3, r1
 8007136:	40c2      	lsrs	r2, r0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	9201      	str	r2, [sp, #4]
 800713c:	e000      	b.n	8007140 <__d2b+0x4e>
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf14      	ite	ne
 8007148:	2102      	movne	r1, #2
 800714a:	2101      	moveq	r1, #1
 800714c:	6139      	str	r1, [r7, #16]
 800714e:	e007      	b.n	8007160 <__d2b+0x6e>
 8007150:	a801      	add	r0, sp, #4
 8007152:	f7ff fd78 	bl	8006c46 <__lo0bits>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	2101      	movs	r1, #1
 800715c:	6139      	str	r1, [r7, #16]
 800715e:	3020      	adds	r0, #32
 8007160:	b134      	cbz	r4, 8007170 <__d2b+0x7e>
 8007162:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007166:	4404      	add	r4, r0
 8007168:	6034      	str	r4, [r6, #0]
 800716a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800716e:	e009      	b.n	8007184 <__d2b+0x92>
 8007170:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007178:	6030      	str	r0, [r6, #0]
 800717a:	6918      	ldr	r0, [r3, #16]
 800717c:	f7ff fd43 	bl	8006c06 <__hi0bits>
 8007180:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007184:	6028      	str	r0, [r5, #0]
 8007186:	4638      	mov	r0, r7
 8007188:	b003      	add	sp, #12
 800718a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800718e <__ratio>:
 800718e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007192:	4688      	mov	r8, r1
 8007194:	4669      	mov	r1, sp
 8007196:	4681      	mov	r9, r0
 8007198:	f7ff ff5e 	bl	8007058 <__b2d>
 800719c:	a901      	add	r1, sp, #4
 800719e:	4640      	mov	r0, r8
 80071a0:	ec55 4b10 	vmov	r4, r5, d0
 80071a4:	f7ff ff58 	bl	8007058 <__b2d>
 80071a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80071b0:	1a9a      	subs	r2, r3, r2
 80071b2:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80071b6:	1ac9      	subs	r1, r1, r3
 80071b8:	ec57 6b10 	vmov	r6, r7, d0
 80071bc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfcc      	ite	gt
 80071c4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80071c8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80071cc:	4632      	mov	r2, r6
 80071ce:	463b      	mov	r3, r7
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f9 fb36 	bl	8000844 <__aeabi_ddiv>
 80071d8:	ec41 0b10 	vmov	d0, r0, r1
 80071dc:	b003      	add	sp, #12
 80071de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080071e2 <__copybits>:
 80071e2:	3901      	subs	r1, #1
 80071e4:	b510      	push	{r4, lr}
 80071e6:	1149      	asrs	r1, r1, #5
 80071e8:	6914      	ldr	r4, [r2, #16]
 80071ea:	3101      	adds	r1, #1
 80071ec:	f102 0314 	add.w	r3, r2, #20
 80071f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	4602      	mov	r2, r0
 80071fc:	d204      	bcs.n	8007208 <__copybits+0x26>
 80071fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007202:	f840 2b04 	str.w	r2, [r0], #4
 8007206:	e7f7      	b.n	80071f8 <__copybits+0x16>
 8007208:	2300      	movs	r3, #0
 800720a:	428a      	cmp	r2, r1
 800720c:	d202      	bcs.n	8007214 <__copybits+0x32>
 800720e:	f842 3b04 	str.w	r3, [r2], #4
 8007212:	e7fa      	b.n	800720a <__copybits+0x28>
 8007214:	bd10      	pop	{r4, pc}

08007216 <__any_on>:
 8007216:	f100 0214 	add.w	r2, r0, #20
 800721a:	6900      	ldr	r0, [r0, #16]
 800721c:	114b      	asrs	r3, r1, #5
 800721e:	4298      	cmp	r0, r3
 8007220:	b510      	push	{r4, lr}
 8007222:	db0c      	blt.n	800723e <__any_on+0x28>
 8007224:	dd0c      	ble.n	8007240 <__any_on+0x2a>
 8007226:	f011 011f 	ands.w	r1, r1, #31
 800722a:	d009      	beq.n	8007240 <__any_on+0x2a>
 800722c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007230:	fa24 f001 	lsr.w	r0, r4, r1
 8007234:	fa00 f101 	lsl.w	r1, r0, r1
 8007238:	428c      	cmp	r4, r1
 800723a:	d10c      	bne.n	8007256 <__any_on+0x40>
 800723c:	e000      	b.n	8007240 <__any_on+0x2a>
 800723e:	4603      	mov	r3, r0
 8007240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007244:	4293      	cmp	r3, r2
 8007246:	d904      	bls.n	8007252 <__any_on+0x3c>
 8007248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800724c:	2900      	cmp	r1, #0
 800724e:	d0f9      	beq.n	8007244 <__any_on+0x2e>
 8007250:	e001      	b.n	8007256 <__any_on+0x40>
 8007252:	2000      	movs	r0, #0
 8007254:	bd10      	pop	{r4, pc}
 8007256:	2001      	movs	r0, #1
 8007258:	bd10      	pop	{r4, pc}
	...

0800725c <_realloc_r>:
 800725c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4681      	mov	r9, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b929      	cbnz	r1, 8007272 <_realloc_r+0x16>
 8007266:	4611      	mov	r1, r2
 8007268:	b003      	add	sp, #12
 800726a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726e:	f7fc ba83 	b.w	8003778 <_malloc_r>
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	f7fc fca8 	bl	8003bc8 <__malloc_lock>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800727e:	f102 080b 	add.w	r8, r2, #11
 8007282:	f1b8 0f16 	cmp.w	r8, #22
 8007286:	f1a4 0b08 	sub.w	fp, r4, #8
 800728a:	f02e 0503 	bic.w	r5, lr, #3
 800728e:	d903      	bls.n	8007298 <_realloc_r+0x3c>
 8007290:	f038 0807 	bics.w	r8, r8, #7
 8007294:	d502      	bpl.n	800729c <_realloc_r+0x40>
 8007296:	e003      	b.n	80072a0 <_realloc_r+0x44>
 8007298:	f04f 0810 	mov.w	r8, #16
 800729c:	4590      	cmp	r8, r2
 800729e:	d204      	bcs.n	80072aa <_realloc_r+0x4e>
 80072a0:	230c      	movs	r3, #12
 80072a2:	f8c9 3000 	str.w	r3, [r9]
 80072a6:	2000      	movs	r0, #0
 80072a8:	e17d      	b.n	80075a6 <_realloc_r+0x34a>
 80072aa:	45a8      	cmp	r8, r5
 80072ac:	f340 8150 	ble.w	8007550 <_realloc_r+0x2f4>
 80072b0:	4ba6      	ldr	r3, [pc, #664]	; (800754c <_realloc_r+0x2f0>)
 80072b2:	6898      	ldr	r0, [r3, #8]
 80072b4:	eb0b 0105 	add.w	r1, fp, r5
 80072b8:	4281      	cmp	r1, r0
 80072ba:	684f      	ldr	r7, [r1, #4]
 80072bc:	d005      	beq.n	80072ca <_realloc_r+0x6e>
 80072be:	f027 0601 	bic.w	r6, r7, #1
 80072c2:	440e      	add	r6, r1
 80072c4:	6876      	ldr	r6, [r6, #4]
 80072c6:	07f6      	lsls	r6, r6, #31
 80072c8:	d426      	bmi.n	8007318 <_realloc_r+0xbc>
 80072ca:	f027 0a03 	bic.w	sl, r7, #3
 80072ce:	4281      	cmp	r1, r0
 80072d0:	eb05 070a 	add.w	r7, r5, sl
 80072d4:	d118      	bne.n	8007308 <_realloc_r+0xac>
 80072d6:	f108 0610 	add.w	r6, r8, #16
 80072da:	42b7      	cmp	r7, r6
 80072dc:	db1f      	blt.n	800731e <_realloc_r+0xc2>
 80072de:	eb0b 0008 	add.w	r0, fp, r8
 80072e2:	ebc8 0707 	rsb	r7, r8, r7
 80072e6:	f047 0701 	orr.w	r7, r7, #1
 80072ea:	6098      	str	r0, [r3, #8]
 80072ec:	6047      	str	r7, [r0, #4]
 80072ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	ea43 0308 	orr.w	r3, r3, r8
 80072fa:	4648      	mov	r0, r9
 80072fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007300:	f7fc fc63 	bl	8003bca <__malloc_unlock>
 8007304:	4620      	mov	r0, r4
 8007306:	e14e      	b.n	80075a6 <_realloc_r+0x34a>
 8007308:	45b8      	cmp	r8, r7
 800730a:	dc08      	bgt.n	800731e <_realloc_r+0xc2>
 800730c:	68cb      	ldr	r3, [r1, #12]
 800730e:	688a      	ldr	r2, [r1, #8]
 8007310:	463d      	mov	r5, r7
 8007312:	60d3      	str	r3, [r2, #12]
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	e11b      	b.n	8007550 <_realloc_r+0x2f4>
 8007318:	f04f 0a00 	mov.w	sl, #0
 800731c:	4651      	mov	r1, sl
 800731e:	f01e 0f01 	tst.w	lr, #1
 8007322:	f040 80c3 	bne.w	80074ac <_realloc_r+0x250>
 8007326:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800732a:	ebc7 070b 	rsb	r7, r7, fp
 800732e:	687e      	ldr	r6, [r7, #4]
 8007330:	f026 0603 	bic.w	r6, r6, #3
 8007334:	442e      	add	r6, r5
 8007336:	2900      	cmp	r1, #0
 8007338:	f000 8083 	beq.w	8007442 <_realloc_r+0x1e6>
 800733c:	4281      	cmp	r1, r0
 800733e:	44b2      	add	sl, r6
 8007340:	d147      	bne.n	80073d2 <_realloc_r+0x176>
 8007342:	f108 0110 	add.w	r1, r8, #16
 8007346:	458a      	cmp	sl, r1
 8007348:	db7b      	blt.n	8007442 <_realloc_r+0x1e6>
 800734a:	463e      	mov	r6, r7
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007352:	60ca      	str	r2, [r1, #12]
 8007354:	6091      	str	r1, [r2, #8]
 8007356:	1f2a      	subs	r2, r5, #4
 8007358:	2a24      	cmp	r2, #36	; 0x24
 800735a:	d825      	bhi.n	80073a8 <_realloc_r+0x14c>
 800735c:	2a13      	cmp	r2, #19
 800735e:	d91b      	bls.n	8007398 <_realloc_r+0x13c>
 8007360:	6821      	ldr	r1, [r4, #0]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	6861      	ldr	r1, [r4, #4]
 8007366:	60f9      	str	r1, [r7, #12]
 8007368:	2a1b      	cmp	r2, #27
 800736a:	d803      	bhi.n	8007374 <_realloc_r+0x118>
 800736c:	f107 0210 	add.w	r2, r7, #16
 8007370:	3408      	adds	r4, #8
 8007372:	e012      	b.n	800739a <_realloc_r+0x13e>
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	6139      	str	r1, [r7, #16]
 8007378:	68e1      	ldr	r1, [r4, #12]
 800737a:	6179      	str	r1, [r7, #20]
 800737c:	2a24      	cmp	r2, #36	; 0x24
 800737e:	bf01      	itttt	eq
 8007380:	6922      	ldreq	r2, [r4, #16]
 8007382:	61ba      	streq	r2, [r7, #24]
 8007384:	6961      	ldreq	r1, [r4, #20]
 8007386:	61f9      	streq	r1, [r7, #28]
 8007388:	bf19      	ittee	ne
 800738a:	f107 0218 	addne.w	r2, r7, #24
 800738e:	3410      	addne	r4, #16
 8007390:	f107 0220 	addeq.w	r2, r7, #32
 8007394:	3418      	addeq	r4, #24
 8007396:	e000      	b.n	800739a <_realloc_r+0x13e>
 8007398:	4632      	mov	r2, r6
 800739a:	6821      	ldr	r1, [r4, #0]
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	6051      	str	r1, [r2, #4]
 80073a2:	68a1      	ldr	r1, [r4, #8]
 80073a4:	6091      	str	r1, [r2, #8]
 80073a6:	e005      	b.n	80073b4 <_realloc_r+0x158>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4630      	mov	r0, r6
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	f7ff fb4a 	bl	8006a46 <memmove>
 80073b2:	9b01      	ldr	r3, [sp, #4]
 80073b4:	eb07 0208 	add.w	r2, r7, r8
 80073b8:	ebc8 0a0a 	rsb	sl, r8, sl
 80073bc:	609a      	str	r2, [r3, #8]
 80073be:	f04a 0301 	orr.w	r3, sl, #1
 80073c2:	6053      	str	r3, [r2, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	ea43 0308 	orr.w	r3, r3, r8
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e0b6      	b.n	8007540 <_realloc_r+0x2e4>
 80073d2:	45d0      	cmp	r8, sl
 80073d4:	dc35      	bgt.n	8007442 <_realloc_r+0x1e6>
 80073d6:	68cb      	ldr	r3, [r1, #12]
 80073d8:	688a      	ldr	r2, [r1, #8]
 80073da:	4638      	mov	r0, r7
 80073dc:	60d3      	str	r3, [r2, #12]
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	60d3      	str	r3, [r2, #12]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	1f2a      	subs	r2, r5, #4
 80073ec:	2a24      	cmp	r2, #36	; 0x24
 80073ee:	d823      	bhi.n	8007438 <_realloc_r+0x1dc>
 80073f0:	2a13      	cmp	r2, #19
 80073f2:	d91a      	bls.n	800742a <_realloc_r+0x1ce>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	2a1b      	cmp	r2, #27
 80073fe:	d803      	bhi.n	8007408 <_realloc_r+0x1ac>
 8007400:	f107 0010 	add.w	r0, r7, #16
 8007404:	3408      	adds	r4, #8
 8007406:	e010      	b.n	800742a <_realloc_r+0x1ce>
 8007408:	68a3      	ldr	r3, [r4, #8]
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	68e3      	ldr	r3, [r4, #12]
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	2a24      	cmp	r2, #36	; 0x24
 8007412:	bf01      	itttt	eq
 8007414:	6923      	ldreq	r3, [r4, #16]
 8007416:	61bb      	streq	r3, [r7, #24]
 8007418:	6963      	ldreq	r3, [r4, #20]
 800741a:	61fb      	streq	r3, [r7, #28]
 800741c:	bf19      	ittee	ne
 800741e:	f107 0018 	addne.w	r0, r7, #24
 8007422:	3410      	addne	r4, #16
 8007424:	f107 0020 	addeq.w	r0, r7, #32
 8007428:	3418      	addeq	r4, #24
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	6043      	str	r3, [r0, #4]
 8007432:	68a3      	ldr	r3, [r4, #8]
 8007434:	6083      	str	r3, [r0, #8]
 8007436:	e002      	b.n	800743e <_realloc_r+0x1e2>
 8007438:	4621      	mov	r1, r4
 800743a:	f7ff fb04 	bl	8006a46 <memmove>
 800743e:	4655      	mov	r5, sl
 8007440:	e02e      	b.n	80074a0 <_realloc_r+0x244>
 8007442:	45b0      	cmp	r8, r6
 8007444:	dc32      	bgt.n	80074ac <_realloc_r+0x250>
 8007446:	4638      	mov	r0, r7
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800744e:	60d3      	str	r3, [r2, #12]
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	1f2a      	subs	r2, r5, #4
 8007454:	2a24      	cmp	r2, #36	; 0x24
 8007456:	d825      	bhi.n	80074a4 <_realloc_r+0x248>
 8007458:	2a13      	cmp	r2, #19
 800745a:	d91a      	bls.n	8007492 <_realloc_r+0x236>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	2a1b      	cmp	r2, #27
 8007466:	d803      	bhi.n	8007470 <_realloc_r+0x214>
 8007468:	f107 0010 	add.w	r0, r7, #16
 800746c:	3408      	adds	r4, #8
 800746e:	e010      	b.n	8007492 <_realloc_r+0x236>
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	68e3      	ldr	r3, [r4, #12]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	2a24      	cmp	r2, #36	; 0x24
 800747a:	bf01      	itttt	eq
 800747c:	6923      	ldreq	r3, [r4, #16]
 800747e:	61bb      	streq	r3, [r7, #24]
 8007480:	6963      	ldreq	r3, [r4, #20]
 8007482:	61fb      	streq	r3, [r7, #28]
 8007484:	bf19      	ittee	ne
 8007486:	f107 0018 	addne.w	r0, r7, #24
 800748a:	3410      	addne	r4, #16
 800748c:	f107 0020 	addeq.w	r0, r7, #32
 8007490:	3418      	addeq	r4, #24
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	6043      	str	r3, [r0, #4]
 800749a:	68a3      	ldr	r3, [r4, #8]
 800749c:	6083      	str	r3, [r0, #8]
 800749e:	4635      	mov	r5, r6
 80074a0:	46bb      	mov	fp, r7
 80074a2:	e055      	b.n	8007550 <_realloc_r+0x2f4>
 80074a4:	4621      	mov	r1, r4
 80074a6:	f7ff face 	bl	8006a46 <memmove>
 80074aa:	e7f8      	b.n	800749e <_realloc_r+0x242>
 80074ac:	4611      	mov	r1, r2
 80074ae:	4648      	mov	r0, r9
 80074b0:	f7fc f962 	bl	8003778 <_malloc_r>
 80074b4:	4606      	mov	r6, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d042      	beq.n	8007540 <_realloc_r+0x2e4>
 80074ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	f1a0 0208 	sub.w	r2, r0, #8
 80074c6:	445b      	add	r3, fp
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d105      	bne.n	80074d8 <_realloc_r+0x27c>
 80074cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	441d      	add	r5, r3
 80074d6:	e03b      	b.n	8007550 <_realloc_r+0x2f4>
 80074d8:	1f2a      	subs	r2, r5, #4
 80074da:	2a24      	cmp	r2, #36	; 0x24
 80074dc:	d829      	bhi.n	8007532 <_realloc_r+0x2d6>
 80074de:	2a13      	cmp	r2, #19
 80074e0:	d91e      	bls.n	8007520 <_realloc_r+0x2c4>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	6043      	str	r3, [r0, #4]
 80074ea:	2a1b      	cmp	r2, #27
 80074ec:	d804      	bhi.n	80074f8 <_realloc_r+0x29c>
 80074ee:	f100 0308 	add.w	r3, r0, #8
 80074f2:	f104 0208 	add.w	r2, r4, #8
 80074f6:	e015      	b.n	8007524 <_realloc_r+0x2c8>
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	6083      	str	r3, [r0, #8]
 80074fc:	68e3      	ldr	r3, [r4, #12]
 80074fe:	60c3      	str	r3, [r0, #12]
 8007500:	2a24      	cmp	r2, #36	; 0x24
 8007502:	bf01      	itttt	eq
 8007504:	6923      	ldreq	r3, [r4, #16]
 8007506:	6103      	streq	r3, [r0, #16]
 8007508:	6961      	ldreq	r1, [r4, #20]
 800750a:	6141      	streq	r1, [r0, #20]
 800750c:	bf19      	ittee	ne
 800750e:	f100 0310 	addne.w	r3, r0, #16
 8007512:	f104 0210 	addne.w	r2, r4, #16
 8007516:	f100 0318 	addeq.w	r3, r0, #24
 800751a:	f104 0218 	addeq.w	r2, r4, #24
 800751e:	e001      	b.n	8007524 <_realloc_r+0x2c8>
 8007520:	4603      	mov	r3, r0
 8007522:	4622      	mov	r2, r4
 8007524:	6811      	ldr	r1, [r2, #0]
 8007526:	6019      	str	r1, [r3, #0]
 8007528:	6851      	ldr	r1, [r2, #4]
 800752a:	6059      	str	r1, [r3, #4]
 800752c:	6892      	ldr	r2, [r2, #8]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	e002      	b.n	8007538 <_realloc_r+0x2dc>
 8007532:	4621      	mov	r1, r4
 8007534:	f7ff fa87 	bl	8006a46 <memmove>
 8007538:	4621      	mov	r1, r4
 800753a:	4648      	mov	r0, r9
 800753c:	f7fc f838 	bl	80035b0 <_free_r>
 8007540:	4648      	mov	r0, r9
 8007542:	f7fc fb42 	bl	8003bca <__malloc_unlock>
 8007546:	4630      	mov	r0, r6
 8007548:	e02d      	b.n	80075a6 <_realloc_r+0x34a>
 800754a:	bf00      	nop
 800754c:	200000fc 	.word	0x200000fc
 8007550:	ebc8 0205 	rsb	r2, r8, r5
 8007554:	2a0f      	cmp	r2, #15
 8007556:	f8db 3004 	ldr.w	r3, [fp, #4]
 800755a:	d914      	bls.n	8007586 <_realloc_r+0x32a>
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	eb0b 0108 	add.w	r1, fp, r8
 8007564:	ea43 0308 	orr.w	r3, r3, r8
 8007568:	f8cb 3004 	str.w	r3, [fp, #4]
 800756c:	f042 0301 	orr.w	r3, r2, #1
 8007570:	440a      	add	r2, r1
 8007572:	604b      	str	r3, [r1, #4]
 8007574:	6853      	ldr	r3, [r2, #4]
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	6053      	str	r3, [r2, #4]
 800757c:	3108      	adds	r1, #8
 800757e:	4648      	mov	r0, r9
 8007580:	f7fc f816 	bl	80035b0 <_free_r>
 8007584:	e00a      	b.n	800759c <_realloc_r+0x340>
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	432b      	orrs	r3, r5
 800758c:	eb0b 0205 	add.w	r2, fp, r5
 8007590:	f8cb 3004 	str.w	r3, [fp, #4]
 8007594:	6853      	ldr	r3, [r2, #4]
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	6053      	str	r3, [r2, #4]
 800759c:	4648      	mov	r0, r9
 800759e:	f7fc fb14 	bl	8003bca <__malloc_unlock>
 80075a2:	f10b 0008 	add.w	r0, fp, #8
 80075a6:	b003      	add	sp, #12
 80075a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075ac <lflush>:
 80075ac:	8983      	ldrh	r3, [r0, #12]
 80075ae:	f003 0309 	and.w	r3, r3, #9
 80075b2:	2b09      	cmp	r3, #9
 80075b4:	d101      	bne.n	80075ba <lflush+0xe>
 80075b6:	f001 bcb1 	b.w	8008f1c <fflush>
 80075ba:	2000      	movs	r0, #0
 80075bc:	4770      	bx	lr
	...

080075c0 <__srefill_r>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	460c      	mov	r4, r1
 80075c4:	4605      	mov	r5, r0
 80075c6:	b118      	cbz	r0, 80075d0 <__srefill_r+0x10>
 80075c8:	6983      	ldr	r3, [r0, #24]
 80075ca:	b90b      	cbnz	r3, 80075d0 <__srefill_r+0x10>
 80075cc:	f7fe ff7c 	bl	80064c8 <__sinit>
 80075d0:	4b40      	ldr	r3, [pc, #256]	; (80076d4 <__srefill_r+0x114>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <__srefill_r+0x1a>
 80075d6:	686c      	ldr	r4, [r5, #4]
 80075d8:	e008      	b.n	80075ec <__srefill_r+0x2c>
 80075da:	4b3f      	ldr	r3, [pc, #252]	; (80076d8 <__srefill_r+0x118>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	d101      	bne.n	80075e4 <__srefill_r+0x24>
 80075e0:	68ac      	ldr	r4, [r5, #8]
 80075e2:	e003      	b.n	80075ec <__srefill_r+0x2c>
 80075e4:	4b3d      	ldr	r3, [pc, #244]	; (80076dc <__srefill_r+0x11c>)
 80075e6:	429c      	cmp	r4, r3
 80075e8:	bf08      	it	eq
 80075ea:	68ec      	ldreq	r4, [r5, #12]
 80075ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f0:	049f      	lsls	r7, r3, #18
 80075f2:	d406      	bmi.n	8007602 <__srefill_r+0x42>
 80075f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007600:	6663      	str	r3, [r4, #100]	; 0x64
 8007602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007606:	2300      	movs	r3, #0
 8007608:	6063      	str	r3, [r4, #4]
 800760a:	b293      	uxth	r3, r2
 800760c:	069e      	lsls	r6, r3, #26
 800760e:	d45b      	bmi.n	80076c8 <__srefill_r+0x108>
 8007610:	0758      	lsls	r0, r3, #29
 8007612:	d41a      	bmi.n	800764a <__srefill_r+0x8a>
 8007614:	06d9      	lsls	r1, r3, #27
 8007616:	d405      	bmi.n	8007624 <__srefill_r+0x64>
 8007618:	2309      	movs	r3, #9
 800761a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	81a2      	strh	r2, [r4, #12]
 8007622:	e051      	b.n	80076c8 <__srefill_r+0x108>
 8007624:	071a      	lsls	r2, r3, #28
 8007626:	d50b      	bpl.n	8007640 <__srefill_r+0x80>
 8007628:	4621      	mov	r1, r4
 800762a:	4628      	mov	r0, r5
 800762c:	f001 fc4c 	bl	8008ec8 <_fflush_r>
 8007630:	2800      	cmp	r0, #0
 8007632:	d149      	bne.n	80076c8 <__srefill_r+0x108>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f023 0308 	bic.w	r3, r3, #8
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	61a0      	str	r0, [r4, #24]
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0304 	orr.w	r3, r3, #4
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	e010      	b.n	800766c <__srefill_r+0xac>
 800764a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764c:	b171      	cbz	r1, 800766c <__srefill_r+0xac>
 800764e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007652:	4299      	cmp	r1, r3
 8007654:	d002      	beq.n	800765c <__srefill_r+0x9c>
 8007656:	4628      	mov	r0, r5
 8007658:	f7fb ffaa 	bl	80035b0 <_free_r>
 800765c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	2000      	movs	r0, #0
 8007662:	6360      	str	r0, [r4, #52]	; 0x34
 8007664:	b113      	cbz	r3, 800766c <__srefill_r+0xac>
 8007666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	b91b      	cbnz	r3, 8007678 <__srefill_r+0xb8>
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f001 ffc0 	bl	80095f8 <__smakebuf_r>
 8007678:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800767c:	b2be      	uxth	r6, r7
 800767e:	07b3      	lsls	r3, r6, #30
 8007680:	d00f      	beq.n	80076a2 <__srefill_r+0xe2>
 8007682:	2301      	movs	r3, #1
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <__srefill_r+0x120>)
 8007688:	4916      	ldr	r1, [pc, #88]	; (80076e4 <__srefill_r+0x124>)
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	f006 0609 	and.w	r6, r6, #9
 8007690:	f7ff f936 	bl	8006900 <_fwalk>
 8007694:	2e09      	cmp	r6, #9
 8007696:	81a7      	strh	r7, [r4, #12]
 8007698:	d103      	bne.n	80076a2 <__srefill_r+0xe2>
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f001 fb83 	bl	8008da8 <__sflush_r>
 80076a2:	6922      	ldr	r2, [r4, #16]
 80076a4:	6022      	str	r2, [r4, #0]
 80076a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076a8:	6963      	ldr	r3, [r4, #20]
 80076aa:	6a21      	ldr	r1, [r4, #32]
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b0      	blx	r6
 80076b0:	2800      	cmp	r0, #0
 80076b2:	6060      	str	r0, [r4, #4]
 80076b4:	dc0b      	bgt.n	80076ce <__srefill_r+0x10e>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	bf17      	itett	ne
 80076ba:	2200      	movne	r2, #0
 80076bc:	f043 0320 	orreq.w	r3, r3, #32
 80076c0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80076c4:	6062      	strne	r2, [r4, #4]
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ce:	2000      	movs	r0, #0
 80076d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	080099b8 	.word	0x080099b8
 80076d8:	080099d8 	.word	0x080099d8
 80076dc:	080099f8 	.word	0x080099f8
 80076e0:	08009828 	.word	0x08009828
 80076e4:	080075ad 	.word	0x080075ad

080076e8 <__sccl>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	780b      	ldrb	r3, [r1, #0]
 80076ec:	2b5e      	cmp	r3, #94	; 0x5e
 80076ee:	bf13      	iteet	ne
 80076f0:	1c4a      	addne	r2, r1, #1
 80076f2:	1c8a      	addeq	r2, r1, #2
 80076f4:	784b      	ldrbeq	r3, [r1, #1]
 80076f6:	2100      	movne	r1, #0
 80076f8:	bf08      	it	eq
 80076fa:	2101      	moveq	r1, #1
 80076fc:	1e44      	subs	r4, r0, #1
 80076fe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007702:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007706:	42ac      	cmp	r4, r5
 8007708:	d1fb      	bne.n	8007702 <__sccl+0x1a>
 800770a:	b90b      	cbnz	r3, 8007710 <__sccl+0x28>
 800770c:	1e50      	subs	r0, r2, #1
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f081 0401 	eor.w	r4, r1, #1
 8007714:	54c4      	strb	r4, [r0, r3]
 8007716:	4611      	mov	r1, r2
 8007718:	780d      	ldrb	r5, [r1, #0]
 800771a:	2d2d      	cmp	r5, #45	; 0x2d
 800771c:	f101 0201 	add.w	r2, r1, #1
 8007720:	d006      	beq.n	8007730 <__sccl+0x48>
 8007722:	2d5d      	cmp	r5, #93	; 0x5d
 8007724:	d00f      	beq.n	8007746 <__sccl+0x5e>
 8007726:	b10d      	cbz	r5, 800772c <__sccl+0x44>
 8007728:	462b      	mov	r3, r5
 800772a:	e7f3      	b.n	8007714 <__sccl+0x2c>
 800772c:	4608      	mov	r0, r1
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	784e      	ldrb	r6, [r1, #1]
 8007732:	2e5d      	cmp	r6, #93	; 0x5d
 8007734:	d0f8      	beq.n	8007728 <__sccl+0x40>
 8007736:	42b3      	cmp	r3, r6
 8007738:	dcf6      	bgt.n	8007728 <__sccl+0x40>
 800773a:	3102      	adds	r1, #2
 800773c:	3301      	adds	r3, #1
 800773e:	429e      	cmp	r6, r3
 8007740:	54c4      	strb	r4, [r0, r3]
 8007742:	dcfb      	bgt.n	800773c <__sccl+0x54>
 8007744:	e7e8      	b.n	8007718 <__sccl+0x30>
 8007746:	4610      	mov	r0, r2
 8007748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800774c <nanf>:
 800774c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007754 <nanf+0x8>
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	7fc00000 	.word	0x7fc00000

08007758 <sprintf>:
 8007758:	b40e      	push	{r1, r2, r3}
 800775a:	b500      	push	{lr}
 800775c:	b09c      	sub	sp, #112	; 0x70
 800775e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007762:	ab1d      	add	r3, sp, #116	; 0x74
 8007764:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007768:	9002      	str	r0, [sp, #8]
 800776a:	9006      	str	r0, [sp, #24]
 800776c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007770:	480a      	ldr	r0, [pc, #40]	; (800779c <sprintf+0x44>)
 8007772:	9104      	str	r1, [sp, #16]
 8007774:	9107      	str	r1, [sp, #28]
 8007776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	a902      	add	r1, sp, #8
 8007788:	f7fc fad6 	bl	8003d38 <_svfprintf_r>
 800778c:	9b02      	ldr	r3, [sp, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	b01c      	add	sp, #112	; 0x70
 8007794:	f85d eb04 	ldr.w	lr, [sp], #4
 8007798:	b003      	add	sp, #12
 800779a:	4770      	bx	lr
 800779c:	200000f8 	.word	0x200000f8

080077a0 <__sread>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	f001 ff62 	bl	8009670 <_read_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	bfab      	itete	ge
 80077b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077b2:	89a3      	ldrhlt	r3, [r4, #12]
 80077b4:	181b      	addge	r3, r3, r0
 80077b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ba:	bfac      	ite	ge
 80077bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80077be:	81a3      	strhlt	r3, [r4, #12]
 80077c0:	bd10      	pop	{r4, pc}

080077c2 <__swrite>:
 80077c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c6:	461f      	mov	r7, r3
 80077c8:	898b      	ldrh	r3, [r1, #12]
 80077ca:	05db      	lsls	r3, r3, #23
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	4616      	mov	r6, r2
 80077d2:	d505      	bpl.n	80077e0 <__swrite+0x1e>
 80077d4:	2302      	movs	r3, #2
 80077d6:	2200      	movs	r2, #0
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	f001 fece 	bl	800957c <_lseek_r>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077f6:	f001 b9c7 	b.w	8008b88 <_write_r>

080077fa <__sseek>:
 80077fa:	b510      	push	{r4, lr}
 80077fc:	460c      	mov	r4, r1
 80077fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007802:	f001 febb 	bl	800957c <_lseek_r>
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	bf15      	itete	ne
 800780c:	6560      	strne	r0, [r4, #84]	; 0x54
 800780e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007816:	81a3      	strheq	r3, [r4, #12]
 8007818:	bf18      	it	ne
 800781a:	81a3      	strhne	r3, [r4, #12]
 800781c:	bd10      	pop	{r4, pc}

0800781e <__sclose>:
 800781e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007822:	f001 ba5f 	b.w	8008ce4 <_close_r>

08007826 <sulp>:
 8007826:	b570      	push	{r4, r5, r6, lr}
 8007828:	4604      	mov	r4, r0
 800782a:	460d      	mov	r5, r1
 800782c:	ec45 4b10 	vmov	d0, r4, r5
 8007830:	4616      	mov	r6, r2
 8007832:	f7ff fbe9 	bl	8007008 <__ulp>
 8007836:	ec51 0b10 	vmov	r0, r1, d0
 800783a:	b17e      	cbz	r6, 800785c <sulp+0x36>
 800783c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd09      	ble.n	800785c <sulp+0x36>
 8007848:	051b      	lsls	r3, r3, #20
 800784a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800784e:	2400      	movs	r4, #0
 8007850:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 feca 	bl	80005f0 <__aeabi_dmul>
 800785c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007860 <_strtod_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	b09d      	sub	sp, #116	; 0x74
 8007866:	2300      	movs	r3, #0
 8007868:	9002      	str	r0, [sp, #8]
 800786a:	460c      	mov	r4, r1
 800786c:	9213      	str	r2, [sp, #76]	; 0x4c
 800786e:	9318      	str	r3, [sp, #96]	; 0x60
 8007870:	f04f 0a00 	mov.w	sl, #0
 8007874:	f04f 0b00 	mov.w	fp, #0
 8007878:	9117      	str	r1, [sp, #92]	; 0x5c
 800787a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	2a0d      	cmp	r2, #13
 8007880:	d805      	bhi.n	800788e <_strtod_r+0x2e>
 8007882:	2a09      	cmp	r2, #9
 8007884:	d213      	bcs.n	80078ae <_strtod_r+0x4e>
 8007886:	2a00      	cmp	r2, #0
 8007888:	f000 81ac 	beq.w	8007be4 <_strtod_r+0x384>
 800788c:	e012      	b.n	80078b4 <_strtod_r+0x54>
 800788e:	2a2b      	cmp	r2, #43	; 0x2b
 8007890:	d004      	beq.n	800789c <_strtod_r+0x3c>
 8007892:	2a2d      	cmp	r2, #45	; 0x2d
 8007894:	d004      	beq.n	80078a0 <_strtod_r+0x40>
 8007896:	2a20      	cmp	r2, #32
 8007898:	d10c      	bne.n	80078b4 <_strtod_r+0x54>
 800789a:	e008      	b.n	80078ae <_strtod_r+0x4e>
 800789c:	2200      	movs	r2, #0
 800789e:	e000      	b.n	80078a2 <_strtod_r+0x42>
 80078a0:	2201      	movs	r2, #1
 80078a2:	920c      	str	r2, [sp, #48]	; 0x30
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	b92b      	cbnz	r3, 80078b8 <_strtod_r+0x58>
 80078ac:	e19a      	b.n	8007be4 <_strtod_r+0x384>
 80078ae:	3301      	adds	r3, #1
 80078b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80078b2:	e7e2      	b.n	800787a <_strtod_r+0x1a>
 80078b4:	2300      	movs	r3, #0
 80078b6:	930c      	str	r3, [sp, #48]	; 0x30
 80078b8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80078ba:	782b      	ldrb	r3, [r5, #0]
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d15c      	bne.n	800797a <_strtod_r+0x11a>
 80078c0:	786b      	ldrb	r3, [r5, #1]
 80078c2:	2b58      	cmp	r3, #88	; 0x58
 80078c4:	d001      	beq.n	80078ca <_strtod_r+0x6a>
 80078c6:	2b78      	cmp	r3, #120	; 0x78
 80078c8:	d14c      	bne.n	8007964 <_strtod_r+0x104>
 80078ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	ab18      	add	r3, sp, #96	; 0x60
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4aa9      	ldr	r2, [pc, #676]	; (8007b78 <_strtod_r+0x318>)
 80078d4:	9802      	ldr	r0, [sp, #8]
 80078d6:	ab19      	add	r3, sp, #100	; 0x64
 80078d8:	a917      	add	r1, sp, #92	; 0x5c
 80078da:	f001 fb7c 	bl	8008fd6 <__gethex>
 80078de:	f010 0607 	ands.w	r6, r0, #7
 80078e2:	4604      	mov	r4, r0
 80078e4:	f000 8587 	beq.w	80083f6 <_strtod_r+0xb96>
 80078e8:	2e06      	cmp	r6, #6
 80078ea:	d105      	bne.n	80078f8 <_strtod_r+0x98>
 80078ec:	3501      	adds	r5, #1
 80078ee:	2300      	movs	r3, #0
 80078f0:	9517      	str	r5, [sp, #92]	; 0x5c
 80078f2:	930c      	str	r3, [sp, #48]	; 0x30
 80078f4:	f000 bd7f 	b.w	80083f6 <_strtod_r+0xb96>
 80078f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078fa:	b13a      	cbz	r2, 800790c <_strtod_r+0xac>
 80078fc:	2135      	movs	r1, #53	; 0x35
 80078fe:	a81a      	add	r0, sp, #104	; 0x68
 8007900:	f7ff fc6f 	bl	80071e2 <__copybits>
 8007904:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007906:	9802      	ldr	r0, [sp, #8]
 8007908:	f7ff f8ed 	bl	8006ae6 <_Bfree>
 800790c:	2e06      	cmp	r6, #6
 800790e:	d822      	bhi.n	8007956 <_strtod_r+0xf6>
 8007910:	e8df f006 	tbb	[pc, r6]
 8007914:	18080d04 	.word	0x18080d04
 8007918:	0d1d      	.short	0x0d1d
 800791a:	04          	.byte	0x04
 800791b:	00          	.byte	0x00
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	46da      	mov	sl, fp
 8007922:	e018      	b.n	8007956 <_strtod_r+0xf6>
 8007924:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007928:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800792c:	e013      	b.n	8007956 <_strtod_r+0xf6>
 800792e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007930:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007932:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007936:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800793a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800793e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007942:	e008      	b.n	8007956 <_strtod_r+0xf6>
 8007944:	f8df b234 	ldr.w	fp, [pc, #564]	; 8007b7c <_strtod_r+0x31c>
 8007948:	f04f 0a00 	mov.w	sl, #0
 800794c:	e003      	b.n	8007956 <_strtod_r+0xf6>
 800794e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007952:	f04f 3aff 	mov.w	sl, #4294967295
 8007956:	0721      	lsls	r1, r4, #28
 8007958:	f140 854d 	bpl.w	80083f6 <_strtod_r+0xb96>
 800795c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007960:	f000 bd49 	b.w	80083f6 <_strtod_r+0xb96>
 8007964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	9217      	str	r2, [sp, #92]	; 0x5c
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d0f9      	beq.n	8007964 <_strtod_r+0x104>
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 8540 	beq.w	80083f6 <_strtod_r+0xb96>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <_strtod_r+0x11c>
 800797a:	2300      	movs	r3, #0
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	9306      	str	r3, [sp, #24]
 8007982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	f8cd 8014 	str.w	r8, [sp, #20]
 800798a:	f8cd 8010 	str.w	r8, [sp, #16]
 800798e:	220a      	movs	r2, #10
 8007990:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007992:	782e      	ldrb	r6, [r5, #0]
 8007994:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007998:	b2d9      	uxtb	r1, r3
 800799a:	2909      	cmp	r1, #9
 800799c:	d80e      	bhi.n	80079bc <_strtod_r+0x15c>
 800799e:	9904      	ldr	r1, [sp, #16]
 80079a0:	2908      	cmp	r1, #8
 80079a2:	bfdd      	ittte	le
 80079a4:	9905      	ldrle	r1, [sp, #20]
 80079a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80079aa:	9305      	strle	r3, [sp, #20]
 80079ac:	fb02 3808 	mlagt	r8, r2, r8, r3
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	3501      	adds	r5, #1
 80079b4:	3301      	adds	r3, #1
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	9517      	str	r5, [sp, #92]	; 0x5c
 80079ba:	e7e9      	b.n	8007990 <_strtod_r+0x130>
 80079bc:	9802      	ldr	r0, [sp, #8]
 80079be:	f7fe fff1 	bl	80069a4 <_localeconv_r>
 80079c2:	6807      	ldr	r7, [r0, #0]
 80079c4:	9802      	ldr	r0, [sp, #8]
 80079c6:	f7fe ffed 	bl	80069a4 <_localeconv_r>
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	f7f8 fc00 	bl	80001d0 <strlen>
 80079d0:	4639      	mov	r1, r7
 80079d2:	4602      	mov	r2, r0
 80079d4:	4628      	mov	r0, r5
 80079d6:	f001 fe5d 	bl	8009694 <strncmp>
 80079da:	4607      	mov	r7, r0
 80079dc:	b128      	cbz	r0, 80079ea <_strtod_r+0x18a>
 80079de:	2000      	movs	r0, #0
 80079e0:	4633      	mov	r3, r6
 80079e2:	9d04      	ldr	r5, [sp, #16]
 80079e4:	4602      	mov	r2, r0
 80079e6:	4601      	mov	r1, r0
 80079e8:	e057      	b.n	8007a9a <_strtod_r+0x23a>
 80079ea:	9802      	ldr	r0, [sp, #8]
 80079ec:	f7fe ffda 	bl	80069a4 <_localeconv_r>
 80079f0:	6800      	ldr	r0, [r0, #0]
 80079f2:	f7f8 fbed 	bl	80001d0 <strlen>
 80079f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079f8:	181a      	adds	r2, r3, r0
 80079fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80079fc:	9a04      	ldr	r2, [sp, #16]
 80079fe:	5c1b      	ldrb	r3, [r3, r0]
 8007a00:	2a00      	cmp	r2, #0
 8007a02:	d142      	bne.n	8007a8a <_strtod_r+0x22a>
 8007a04:	4610      	mov	r0, r2
 8007a06:	2b30      	cmp	r3, #48	; 0x30
 8007a08:	d105      	bne.n	8007a16 <_strtod_r+0x1b6>
 8007a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a10:	3001      	adds	r0, #1
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	e7f7      	b.n	8007a06 <_strtod_r+0x1a6>
 8007a16:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007a1a:	2a08      	cmp	r2, #8
 8007a1c:	d843      	bhi.n	8007aa6 <_strtod_r+0x246>
 8007a1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a20:	9207      	str	r2, [sp, #28]
 8007a22:	4602      	mov	r2, r0
 8007a24:	2000      	movs	r0, #0
 8007a26:	4605      	mov	r5, r0
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	f100 0101 	add.w	r1, r0, #1
 8007a2e:	d026      	beq.n	8007a7e <_strtod_r+0x21e>
 8007a30:	440a      	add	r2, r1
 8007a32:	eb05 0c00 	add.w	ip, r5, r0
 8007a36:	4629      	mov	r1, r5
 8007a38:	260a      	movs	r6, #10
 8007a3a:	4561      	cmp	r1, ip
 8007a3c:	d00e      	beq.n	8007a5c <_strtod_r+0x1fc>
 8007a3e:	3101      	adds	r1, #1
 8007a40:	f101 3eff 	add.w	lr, r1, #4294967295
 8007a44:	f1be 0f08 	cmp.w	lr, #8
 8007a48:	dc03      	bgt.n	8007a52 <_strtod_r+0x1f2>
 8007a4a:	9f05      	ldr	r7, [sp, #20]
 8007a4c:	4377      	muls	r7, r6
 8007a4e:	9705      	str	r7, [sp, #20]
 8007a50:	e7f3      	b.n	8007a3a <_strtod_r+0x1da>
 8007a52:	2910      	cmp	r1, #16
 8007a54:	bfd8      	it	le
 8007a56:	fb06 f808 	mulle.w	r8, r6, r8
 8007a5a:	e7ee      	b.n	8007a3a <_strtod_r+0x1da>
 8007a5c:	4428      	add	r0, r5
 8007a5e:	2808      	cmp	r0, #8
 8007a60:	f100 0501 	add.w	r5, r0, #1
 8007a64:	dc05      	bgt.n	8007a72 <_strtod_r+0x212>
 8007a66:	9805      	ldr	r0, [sp, #20]
 8007a68:	210a      	movs	r1, #10
 8007a6a:	fb01 3300 	mla	r3, r1, r0, r3
 8007a6e:	9305      	str	r3, [sp, #20]
 8007a70:	e004      	b.n	8007a7c <_strtod_r+0x21c>
 8007a72:	2d10      	cmp	r5, #16
 8007a74:	bfdc      	itt	le
 8007a76:	210a      	movle	r1, #10
 8007a78:	fb01 3808 	mlale	r8, r1, r8, r3
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a80:	1c58      	adds	r0, r3, #1
 8007a82:	9017      	str	r0, [sp, #92]	; 0x5c
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	4608      	mov	r0, r1
 8007a88:	e002      	b.n	8007a90 <_strtod_r+0x230>
 8007a8a:	9d04      	ldr	r5, [sp, #16]
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	463a      	mov	r2, r7
 8007a90:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007a94:	2909      	cmp	r1, #9
 8007a96:	d9c7      	bls.n	8007a28 <_strtod_r+0x1c8>
 8007a98:	2101      	movs	r1, #1
 8007a9a:	2b65      	cmp	r3, #101	; 0x65
 8007a9c:	d001      	beq.n	8007aa2 <_strtod_r+0x242>
 8007a9e:	2b45      	cmp	r3, #69	; 0x45
 8007aa0:	d151      	bne.n	8007b46 <_strtod_r+0x2e6>
 8007aa2:	b96d      	cbnz	r5, 8007ac0 <_strtod_r+0x260>
 8007aa4:	e004      	b.n	8007ab0 <_strtod_r+0x250>
 8007aa6:	2b65      	cmp	r3, #101	; 0x65
 8007aa8:	f040 84b3 	bne.w	8008412 <_strtod_r+0xbb2>
 8007aac:	2200      	movs	r2, #0
 8007aae:	2101      	movs	r1, #1
 8007ab0:	b928      	cbnz	r0, 8007abe <_strtod_r+0x25e>
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8095 	beq.w	8007be4 <_strtod_r+0x384>
 8007aba:	4605      	mov	r5, r0
 8007abc:	e000      	b.n	8007ac0 <_strtod_r+0x260>
 8007abe:	2500      	movs	r5, #0
 8007ac0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007ac2:	1c63      	adds	r3, r4, #1
 8007ac4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ac6:	7863      	ldrb	r3, [r4, #1]
 8007ac8:	2b2b      	cmp	r3, #43	; 0x2b
 8007aca:	d006      	beq.n	8007ada <_strtod_r+0x27a>
 8007acc:	2b2d      	cmp	r3, #45	; 0x2d
 8007ace:	d002      	beq.n	8007ad6 <_strtod_r+0x276>
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	9603      	str	r6, [sp, #12]
 8007ad4:	e006      	b.n	8007ae4 <_strtod_r+0x284>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <_strtod_r+0x27c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	9303      	str	r3, [sp, #12]
 8007ade:	1ca3      	adds	r3, r4, #2
 8007ae0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ae2:	78a3      	ldrb	r3, [r4, #2]
 8007ae4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007ae8:	2e09      	cmp	r6, #9
 8007aea:	d82b      	bhi.n	8007b44 <_strtod_r+0x2e4>
 8007aec:	2b30      	cmp	r3, #48	; 0x30
 8007aee:	d104      	bne.n	8007afa <_strtod_r+0x29a>
 8007af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007af2:	1c5e      	adds	r6, r3, #1
 8007af4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	e7f8      	b.n	8007aec <_strtod_r+0x28c>
 8007afa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8007afe:	2e08      	cmp	r6, #8
 8007b00:	d821      	bhi.n	8007b46 <_strtod_r+0x2e6>
 8007b02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007b06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b08:	f04f 0c0a 	mov.w	ip, #10
 8007b0c:	461f      	mov	r7, r3
 8007b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b10:	1c5e      	adds	r6, r3, #1
 8007b12:	9617      	str	r6, [sp, #92]	; 0x5c
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8007b1a:	f1b9 0f09 	cmp.w	r9, #9
 8007b1e:	d804      	bhi.n	8007b2a <_strtod_r+0x2ca>
 8007b20:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8007b24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b28:	e7f1      	b.n	8007b0e <_strtod_r+0x2ae>
 8007b2a:	1bf6      	subs	r6, r6, r7
 8007b2c:	2e08      	cmp	r6, #8
 8007b2e:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8007b32:	dc02      	bgt.n	8007b3a <_strtod_r+0x2da>
 8007b34:	45f1      	cmp	r9, lr
 8007b36:	bfa8      	it	ge
 8007b38:	46f1      	movge	r9, lr
 8007b3a:	9e03      	ldr	r6, [sp, #12]
 8007b3c:	b12e      	cbz	r6, 8007b4a <_strtod_r+0x2ea>
 8007b3e:	f1c9 0900 	rsb	r9, r9, #0
 8007b42:	e002      	b.n	8007b4a <_strtod_r+0x2ea>
 8007b44:	9417      	str	r4, [sp, #92]	; 0x5c
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	d153      	bne.n	8007bf6 <_strtod_r+0x396>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8451 	bne.w	80083f6 <_strtod_r+0xb96>
 8007b54:	9a06      	ldr	r2, [sp, #24]
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	f040 844d 	bne.w	80083f6 <_strtod_r+0xb96>
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d141      	bne.n	8007be4 <_strtod_r+0x384>
 8007b60:	2b4e      	cmp	r3, #78	; 0x4e
 8007b62:	d020      	beq.n	8007ba6 <_strtod_r+0x346>
 8007b64:	dc02      	bgt.n	8007b6c <_strtod_r+0x30c>
 8007b66:	2b49      	cmp	r3, #73	; 0x49
 8007b68:	d00a      	beq.n	8007b80 <_strtod_r+0x320>
 8007b6a:	e03b      	b.n	8007be4 <_strtod_r+0x384>
 8007b6c:	2b69      	cmp	r3, #105	; 0x69
 8007b6e:	d007      	beq.n	8007b80 <_strtod_r+0x320>
 8007b70:	2b6e      	cmp	r3, #110	; 0x6e
 8007b72:	d018      	beq.n	8007ba6 <_strtod_r+0x346>
 8007b74:	e036      	b.n	8007be4 <_strtod_r+0x384>
 8007b76:	bf00      	nop
 8007b78:	08009b1c 	.word	0x08009b1c
 8007b7c:	7ff00000 	.word	0x7ff00000
 8007b80:	49a8      	ldr	r1, [pc, #672]	; (8007e24 <_strtod_r+0x5c4>)
 8007b82:	a817      	add	r0, sp, #92	; 0x5c
 8007b84:	f001 fc58 	bl	8009438 <__match>
 8007b88:	b360      	cbz	r0, 8007be4 <_strtod_r+0x384>
 8007b8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b8c:	49a6      	ldr	r1, [pc, #664]	; (8007e28 <_strtod_r+0x5c8>)
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	a817      	add	r0, sp, #92	; 0x5c
 8007b92:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b94:	f001 fc50 	bl	8009438 <__match>
 8007b98:	b910      	cbnz	r0, 8007ba0 <_strtod_r+0x340>
 8007b9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ba0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8007e44 <_strtod_r+0x5e4>
 8007ba4:	e01a      	b.n	8007bdc <_strtod_r+0x37c>
 8007ba6:	49a1      	ldr	r1, [pc, #644]	; (8007e2c <_strtod_r+0x5cc>)
 8007ba8:	a817      	add	r0, sp, #92	; 0x5c
 8007baa:	f001 fc45 	bl	8009438 <__match>
 8007bae:	b1c8      	cbz	r0, 8007be4 <_strtod_r+0x384>
 8007bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b28      	cmp	r3, #40	; 0x28
 8007bb6:	d10f      	bne.n	8007bd8 <_strtod_r+0x378>
 8007bb8:	aa1a      	add	r2, sp, #104	; 0x68
 8007bba:	499d      	ldr	r1, [pc, #628]	; (8007e30 <_strtod_r+0x5d0>)
 8007bbc:	a817      	add	r0, sp, #92	; 0x5c
 8007bbe:	f001 fc4e 	bl	800945e <__hexnan>
 8007bc2:	2805      	cmp	r0, #5
 8007bc4:	d108      	bne.n	8007bd8 <_strtod_r+0x378>
 8007bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007bcc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007bd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007bd4:	f000 bc0f 	b.w	80083f6 <_strtod_r+0xb96>
 8007bd8:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007e48 <_strtod_r+0x5e8>
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	f000 bc09 	b.w	80083f6 <_strtod_r+0xb96>
 8007be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be6:	9417      	str	r4, [sp, #92]	; 0x5c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 840f 	beq.w	800840c <_strtod_r+0xbac>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf2:	f000 bc02 	b.w	80083fa <_strtod_r+0xb9a>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	9805      	ldr	r0, [sp, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf08      	it	eq
 8007bfe:	462b      	moveq	r3, r5
 8007c00:	2d10      	cmp	r5, #16
 8007c02:	462c      	mov	r4, r5
 8007c04:	ebc2 0909 	rsb	r9, r2, r9
 8007c08:	bfa8      	it	ge
 8007c0a:	2410      	movge	r4, #16
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	f7f8 fc79 	bl	8000504 <__aeabi_ui2d>
 8007c12:	2c09      	cmp	r4, #9
 8007c14:	4682      	mov	sl, r0
 8007c16:	468b      	mov	fp, r1
 8007c18:	dd13      	ble.n	8007c42 <_strtod_r+0x3e2>
 8007c1a:	4b86      	ldr	r3, [pc, #536]	; (8007e34 <_strtod_r+0x5d4>)
 8007c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c24:	f7f8 fce4 	bl	80005f0 <__aeabi_dmul>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	f7f8 fc69 	bl	8000504 <__aeabi_ui2d>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 fb27 	bl	800028c <__adddf3>
 8007c3e:	4682      	mov	sl, r0
 8007c40:	468b      	mov	fp, r1
 8007c42:	2d0f      	cmp	r5, #15
 8007c44:	dc36      	bgt.n	8007cb4 <_strtod_r+0x454>
 8007c46:	f1b9 0f00 	cmp.w	r9, #0
 8007c4a:	f000 83d4 	beq.w	80083f6 <_strtod_r+0xb96>
 8007c4e:	dd24      	ble.n	8007c9a <_strtod_r+0x43a>
 8007c50:	f1b9 0f16 	cmp.w	r9, #22
 8007c54:	dc07      	bgt.n	8007c66 <_strtod_r+0x406>
 8007c56:	4d77      	ldr	r5, [pc, #476]	; (8007e34 <_strtod_r+0x5d4>)
 8007c58:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	465b      	mov	r3, fp
 8007c60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007c64:	e014      	b.n	8007c90 <_strtod_r+0x430>
 8007c66:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007c6a:	4599      	cmp	r9, r3
 8007c6c:	dc22      	bgt.n	8007cb4 <_strtod_r+0x454>
 8007c6e:	4c71      	ldr	r4, [pc, #452]	; (8007e34 <_strtod_r+0x5d4>)
 8007c70:	f1c5 050f 	rsb	r5, r5, #15
 8007c74:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c78:	ebc5 0509 	rsb	r5, r5, r9
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	465b      	mov	r3, fp
 8007c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c84:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c88:	f7f8 fcb2 	bl	80005f0 <__aeabi_dmul>
 8007c8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c90:	f7f8 fcae 	bl	80005f0 <__aeabi_dmul>
 8007c94:	4682      	mov	sl, r0
 8007c96:	468b      	mov	fp, r1
 8007c98:	e3ad      	b.n	80083f6 <_strtod_r+0xb96>
 8007c9a:	f119 0f16 	cmn.w	r9, #22
 8007c9e:	db09      	blt.n	8007cb4 <_strtod_r+0x454>
 8007ca0:	4d64      	ldr	r5, [pc, #400]	; (8007e34 <_strtod_r+0x5d4>)
 8007ca2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8007ca6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fdc9 	bl	8000844 <__aeabi_ddiv>
 8007cb2:	e7ef      	b.n	8007c94 <_strtod_r+0x434>
 8007cb4:	1b2c      	subs	r4, r5, r4
 8007cb6:	444c      	add	r4, r9
 8007cb8:	2c00      	cmp	r4, #0
 8007cba:	dd57      	ble.n	8007d6c <_strtod_r+0x50c>
 8007cbc:	f014 010f 	ands.w	r1, r4, #15
 8007cc0:	d00a      	beq.n	8007cd8 <_strtod_r+0x478>
 8007cc2:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <_strtod_r+0x5d4>)
 8007cc4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007cc8:	4652      	mov	r2, sl
 8007cca:	465b      	mov	r3, fp
 8007ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd0:	f7f8 fc8e 	bl	80005f0 <__aeabi_dmul>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	f034 040f 	bics.w	r4, r4, #15
 8007cdc:	f000 80b8 	beq.w	8007e50 <_strtod_r+0x5f0>
 8007ce0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8007ce4:	dd0b      	ble.n	8007cfe <_strtod_r+0x49e>
 8007ce6:	2400      	movs	r4, #0
 8007ce8:	4625      	mov	r5, r4
 8007cea:	9405      	str	r4, [sp, #20]
 8007cec:	9404      	str	r4, [sp, #16]
 8007cee:	9a02      	ldr	r2, [sp, #8]
 8007cf0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8007e44 <_strtod_r+0x5e4>
 8007cf4:	2322      	movs	r3, #34	; 0x22
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f04f 0a00 	mov.w	sl, #0
 8007cfc:	e187      	b.n	800800e <_strtod_r+0x7ae>
 8007cfe:	4e4e      	ldr	r6, [pc, #312]	; (8007e38 <_strtod_r+0x5d8>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	1124      	asrs	r4, r4, #4
 8007d04:	4650      	mov	r0, sl
 8007d06:	4659      	mov	r1, fp
 8007d08:	4698      	mov	r8, r3
 8007d0a:	4637      	mov	r7, r6
 8007d0c:	2c01      	cmp	r4, #1
 8007d0e:	dd0b      	ble.n	8007d28 <_strtod_r+0x4c8>
 8007d10:	07e2      	lsls	r2, r4, #31
 8007d12:	d504      	bpl.n	8007d1e <_strtod_r+0x4be>
 8007d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d18:	f7f8 fc6a 	bl	80005f0 <__aeabi_dmul>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f108 0801 	add.w	r8, r8, #1
 8007d22:	1064      	asrs	r4, r4, #1
 8007d24:	3608      	adds	r6, #8
 8007d26:	e7f1      	b.n	8007d0c <_strtod_r+0x4ac>
 8007d28:	b10b      	cbz	r3, 8007d2e <_strtod_r+0x4ce>
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007d32:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007d36:	4652      	mov	r2, sl
 8007d38:	465b      	mov	r3, fp
 8007d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d3e:	f7f8 fc57 	bl	80005f0 <__aeabi_dmul>
 8007d42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d46:	468b      	mov	fp, r1
 8007d48:	460a      	mov	r2, r1
 8007d4a:	0d1b      	lsrs	r3, r3, #20
 8007d4c:	493b      	ldr	r1, [pc, #236]	; (8007e3c <_strtod_r+0x5dc>)
 8007d4e:	051b      	lsls	r3, r3, #20
 8007d50:	428b      	cmp	r3, r1
 8007d52:	4682      	mov	sl, r0
 8007d54:	d8c7      	bhi.n	8007ce6 <_strtod_r+0x486>
 8007d56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d5a:	428b      	cmp	r3, r1
 8007d5c:	bf86      	itte	hi
 8007d5e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 8007e4c <_strtod_r+0x5ec>
 8007d62:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d6a:	e071      	b.n	8007e50 <_strtod_r+0x5f0>
 8007d6c:	d070      	beq.n	8007e50 <_strtod_r+0x5f0>
 8007d6e:	4264      	negs	r4, r4
 8007d70:	f014 020f 	ands.w	r2, r4, #15
 8007d74:	d00a      	beq.n	8007d8c <_strtod_r+0x52c>
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <_strtod_r+0x5d4>)
 8007d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	4659      	mov	r1, fp
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fd5e 	bl	8000844 <__aeabi_ddiv>
 8007d88:	4682      	mov	sl, r0
 8007d8a:	468b      	mov	fp, r1
 8007d8c:	1124      	asrs	r4, r4, #4
 8007d8e:	d05f      	beq.n	8007e50 <_strtod_r+0x5f0>
 8007d90:	2c1f      	cmp	r4, #31
 8007d92:	dd04      	ble.n	8007d9e <_strtod_r+0x53e>
 8007d94:	2400      	movs	r4, #0
 8007d96:	4625      	mov	r5, r4
 8007d98:	9405      	str	r4, [sp, #20]
 8007d9a:	9404      	str	r4, [sp, #16]
 8007d9c:	e130      	b.n	8008000 <_strtod_r+0x7a0>
 8007d9e:	f014 0f10 	tst.w	r4, #16
 8007da2:	bf0c      	ite	eq
 8007da4:	2300      	moveq	r3, #0
 8007da6:	236a      	movne	r3, #106	; 0x6a
 8007da8:	4e25      	ldr	r6, [pc, #148]	; (8007e40 <_strtod_r+0x5e0>)
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	4650      	mov	r0, sl
 8007dae:	4659      	mov	r1, fp
 8007db0:	2300      	movs	r3, #0
 8007db2:	2c00      	cmp	r4, #0
 8007db4:	dd09      	ble.n	8007dca <_strtod_r+0x56a>
 8007db6:	07e2      	lsls	r2, r4, #31
 8007db8:	d504      	bpl.n	8007dc4 <_strtod_r+0x564>
 8007dba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dbe:	f7f8 fc17 	bl	80005f0 <__aeabi_dmul>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	1064      	asrs	r4, r4, #1
 8007dc6:	3608      	adds	r6, #8
 8007dc8:	e7f3      	b.n	8007db2 <_strtod_r+0x552>
 8007dca:	b10b      	cbz	r3, 8007dd0 <_strtod_r+0x570>
 8007dcc:	4682      	mov	sl, r0
 8007dce:	468b      	mov	fp, r1
 8007dd0:	9b03      	ldr	r3, [sp, #12]
 8007dd2:	b1eb      	cbz	r3, 8007e10 <_strtod_r+0x5b0>
 8007dd4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007dd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	4659      	mov	r1, fp
 8007de0:	dd16      	ble.n	8007e10 <_strtod_r+0x5b0>
 8007de2:	2b1f      	cmp	r3, #31
 8007de4:	dd0e      	ble.n	8007e04 <_strtod_r+0x5a4>
 8007de6:	2b34      	cmp	r3, #52	; 0x34
 8007de8:	bfde      	ittt	le
 8007dea:	3b20      	suble	r3, #32
 8007dec:	f04f 32ff 	movle.w	r2, #4294967295
 8007df0:	fa02 f303 	lslle.w	r3, r2, r3
 8007df4:	f04f 0a00 	mov.w	sl, #0
 8007df8:	bfcc      	ite	gt
 8007dfa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007dfe:	ea03 0b01 	andle.w	fp, r3, r1
 8007e02:	e005      	b.n	8007e10 <_strtod_r+0x5b0>
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4650      	mov	r0, sl
 8007e16:	4659      	mov	r1, fp
 8007e18:	f7f8 fe52 	bl	8000ac0 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1b9      	bne.n	8007d94 <_strtod_r+0x534>
 8007e20:	e018      	b.n	8007e54 <_strtod_r+0x5f4>
 8007e22:	bf00      	nop
 8007e24:	08009843 	.word	0x08009843
 8007e28:	080099ae 	.word	0x080099ae
 8007e2c:	0800984b 	.word	0x0800984b
 8007e30:	08009b30 	.word	0x08009b30
 8007e34:	08009a20 	.word	0x08009a20
 8007e38:	08009ae8 	.word	0x08009ae8
 8007e3c:	7ca00000 	.word	0x7ca00000
 8007e40:	08009b48 	.word	0x08009b48
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	fff80000 	.word	0xfff80000
 8007e4c:	7fefffff 	.word	0x7fefffff
 8007e50:	2300      	movs	r3, #0
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	9a04      	ldr	r2, [sp, #16]
 8007e5a:	9907      	ldr	r1, [sp, #28]
 8007e5c:	9802      	ldr	r0, [sp, #8]
 8007e5e:	462b      	mov	r3, r5
 8007e60:	f7fe fe93 	bl	8006b8a <__s2b>
 8007e64:	9005      	str	r0, [sp, #20]
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f af3d 	beq.w	8007ce6 <_strtod_r+0x486>
 8007e6c:	f1b9 0f00 	cmp.w	r9, #0
 8007e70:	f1c9 0300 	rsb	r3, r9, #0
 8007e74:	bfa8      	it	ge
 8007e76:	2300      	movge	r3, #0
 8007e78:	930d      	str	r3, [sp, #52]	; 0x34
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8007e80:	9312      	str	r3, [sp, #72]	; 0x48
 8007e82:	4625      	mov	r5, r4
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	9802      	ldr	r0, [sp, #8]
 8007e88:	6859      	ldr	r1, [r3, #4]
 8007e8a:	f7fe fdf7 	bl	8006a7c <_Balloc>
 8007e8e:	9004      	str	r0, [sp, #16]
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f43f af2c 	beq.w	8007cee <_strtod_r+0x48e>
 8007e96:	9b05      	ldr	r3, [sp, #20]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	3202      	adds	r2, #2
 8007e9c:	f103 010c 	add.w	r1, r3, #12
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	300c      	adds	r0, #12
 8007ea4:	f7fe fdc4 	bl	8006a30 <memcpy>
 8007ea8:	aa1a      	add	r2, sp, #104	; 0x68
 8007eaa:	a919      	add	r1, sp, #100	; 0x64
 8007eac:	ec4b ab10 	vmov	d0, sl, fp
 8007eb0:	9802      	ldr	r0, [sp, #8]
 8007eb2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007eb6:	f7ff f91c 	bl	80070f2 <__d2b>
 8007eba:	9018      	str	r0, [sp, #96]	; 0x60
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f43f af16 	beq.w	8007cee <_strtod_r+0x48e>
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	9802      	ldr	r0, [sp, #8]
 8007ec6:	f7fe feeb 	bl	8006ca0 <__i2b>
 8007eca:	4605      	mov	r5, r0
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f43f af0e 	beq.w	8007cee <_strtod_r+0x48e>
 8007ed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ed4:	9903      	ldr	r1, [sp, #12]
 8007ed6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfad      	iteet	ge
 8007edc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 8007ede:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007ee0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8007ee4:	eb02 0803 	addge.w	r8, r2, r3
 8007ee8:	bfb8      	it	lt
 8007eea:	1ad2      	sublt	r2, r2, r3
 8007eec:	eba3 0301 	sub.w	r3, r3, r1
 8007ef0:	4433      	add	r3, r6
 8007ef2:	49b5      	ldr	r1, [pc, #724]	; (80081c8 <_strtod_r+0x968>)
 8007ef4:	bfa8      	it	ge
 8007ef6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	428b      	cmp	r3, r1
 8007efc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 8007f00:	f280 808a 	bge.w	8008018 <_strtod_r+0x7b8>
 8007f04:	1ac9      	subs	r1, r1, r3
 8007f06:	291f      	cmp	r1, #31
 8007f08:	bfc8      	it	gt
 8007f0a:	4fb0      	ldrgt	r7, [pc, #704]	; (80081cc <_strtod_r+0x96c>)
 8007f0c:	f04f 0901 	mov.w	r9, #1
 8007f10:	bfd4      	ite	le
 8007f12:	fa09 f301 	lslle.w	r3, r9, r1
 8007f16:	1aff      	subgt	r7, r7, r3
 8007f18:	eba6 0601 	sub.w	r6, r6, r1
 8007f1c:	bfd9      	ittee	le
 8007f1e:	9306      	strle	r3, [sp, #24]
 8007f20:	2700      	movle	r7, #0
 8007f22:	fa09 f707 	lslgt.w	r7, r9, r7
 8007f26:	f8cd 9018 	strgt.w	r9, [sp, #24]
 8007f2a:	eb08 0906 	add.w	r9, r8, r6
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	45c8      	cmp	r8, r9
 8007f32:	4416      	add	r6, r2
 8007f34:	441e      	add	r6, r3
 8007f36:	4643      	mov	r3, r8
 8007f38:	bfa8      	it	ge
 8007f3a:	464b      	movge	r3, r9
 8007f3c:	42b3      	cmp	r3, r6
 8007f3e:	bfa8      	it	ge
 8007f40:	4633      	movge	r3, r6
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfc2      	ittt	gt
 8007f46:	ebc3 0909 	rsbgt	r9, r3, r9
 8007f4a:	1af6      	subgt	r6, r6, r3
 8007f4c:	ebc3 0808 	rsbgt	r8, r3, r8
 8007f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d164      	bne.n	8008020 <_strtod_r+0x7c0>
 8007f56:	f1b9 0f00 	cmp.w	r9, #0
 8007f5a:	dc7a      	bgt.n	8008052 <_strtod_r+0x7f2>
 8007f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f040 8081 	bne.w	8008066 <_strtod_r+0x806>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	f300 8088 	bgt.w	800807a <_strtod_r+0x81a>
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	f300 808e 	bgt.w	800808e <_strtod_r+0x82e>
 8007f72:	9a04      	ldr	r2, [sp, #16]
 8007f74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f76:	9802      	ldr	r0, [sp, #8]
 8007f78:	f7fe ffe7 	bl	8006f4a <__mdiff>
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f43f aeb5 	beq.w	8007cee <_strtod_r+0x48e>
 8007f84:	68c3      	ldr	r3, [r0, #12]
 8007f86:	9307      	str	r3, [sp, #28]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60c3      	str	r3, [r0, #12]
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7fe ffc0 	bl	8006f12 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f280 8089 	bge.w	80080aa <_strtod_r+0x84a>
 8007f98:	9b07      	ldr	r3, [sp, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 8204 	bne.w	80083a8 <_strtod_r+0xb48>
 8007fa0:	f1ba 0f00 	cmp.w	sl, #0
 8007fa4:	f040 8200 	bne.w	80083a8 <_strtod_r+0xb48>
 8007fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 81fb 	bne.w	80083a8 <_strtod_r+0xb48>
 8007fb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fb6:	0d1b      	lsrs	r3, r3, #20
 8007fb8:	051b      	lsls	r3, r3, #20
 8007fba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007fbe:	f240 81f3 	bls.w	80083a8 <_strtod_r+0xb48>
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d06c      	beq.n	80080a2 <_strtod_r+0x842>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	2201      	movs	r2, #1
 8007fcc:	9802      	ldr	r0, [sp, #8]
 8007fce:	f7fe ff4f 	bl	8006e70 <__lshift>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	f7fe ff9c 	bl	8006f12 <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f340 81e4 	ble.w	80083a8 <_strtod_r+0xb48>
 8007fe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fe4:	9a03      	ldr	r2, [sp, #12]
 8007fe6:	0d1b      	lsrs	r3, r3, #20
 8007fe8:	051b      	lsls	r3, r3, #20
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	f000 808c 	beq.w	8008108 <_strtod_r+0x8a8>
 8007ff0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ff4:	f300 8088 	bgt.w	8008108 <_strtod_r+0x8a8>
 8007ff8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8007ffc:	f300 81d6 	bgt.w	80083ac <_strtod_r+0xb4c>
 8008000:	9a02      	ldr	r2, [sp, #8]
 8008002:	2322      	movs	r3, #34	; 0x22
 8008004:	f04f 0a00 	mov.w	sl, #0
 8008008:	f04f 0b00 	mov.w	fp, #0
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	9b05      	ldr	r3, [sp, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f040 81dc 	bne.w	80083ce <_strtod_r+0xb6e>
 8008016:	e1ee      	b.n	80083f6 <_strtod_r+0xb96>
 8008018:	2301      	movs	r3, #1
 800801a:	2700      	movs	r7, #0
 800801c:	9306      	str	r3, [sp, #24]
 800801e:	e784      	b.n	8007f2a <_strtod_r+0x6ca>
 8008020:	4629      	mov	r1, r5
 8008022:	461a      	mov	r2, r3
 8008024:	9802      	ldr	r0, [sp, #8]
 8008026:	f7fe fed5 	bl	8006dd4 <__pow5mult>
 800802a:	4605      	mov	r5, r0
 800802c:	2800      	cmp	r0, #0
 800802e:	f43f ae5e 	beq.w	8007cee <_strtod_r+0x48e>
 8008032:	4601      	mov	r1, r0
 8008034:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008036:	9802      	ldr	r0, [sp, #8]
 8008038:	f7fe fe3b 	bl	8006cb2 <__multiply>
 800803c:	9007      	str	r0, [sp, #28]
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f ae55 	beq.w	8007cee <_strtod_r+0x48e>
 8008044:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	f7fe fd4d 	bl	8006ae6 <_Bfree>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	9318      	str	r3, [sp, #96]	; 0x60
 8008050:	e781      	b.n	8007f56 <_strtod_r+0x6f6>
 8008052:	464a      	mov	r2, r9
 8008054:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008056:	9802      	ldr	r0, [sp, #8]
 8008058:	f7fe ff0a 	bl	8006e70 <__lshift>
 800805c:	9018      	str	r0, [sp, #96]	; 0x60
 800805e:	2800      	cmp	r0, #0
 8008060:	f47f af7c 	bne.w	8007f5c <_strtod_r+0x6fc>
 8008064:	e643      	b.n	8007cee <_strtod_r+0x48e>
 8008066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008068:	9904      	ldr	r1, [sp, #16]
 800806a:	9802      	ldr	r0, [sp, #8]
 800806c:	f7fe feb2 	bl	8006dd4 <__pow5mult>
 8008070:	9004      	str	r0, [sp, #16]
 8008072:	2800      	cmp	r0, #0
 8008074:	f47f af76 	bne.w	8007f64 <_strtod_r+0x704>
 8008078:	e639      	b.n	8007cee <_strtod_r+0x48e>
 800807a:	4632      	mov	r2, r6
 800807c:	9904      	ldr	r1, [sp, #16]
 800807e:	9802      	ldr	r0, [sp, #8]
 8008080:	f7fe fef6 	bl	8006e70 <__lshift>
 8008084:	9004      	str	r0, [sp, #16]
 8008086:	2800      	cmp	r0, #0
 8008088:	f47f af6f 	bne.w	8007f6a <_strtod_r+0x70a>
 800808c:	e62f      	b.n	8007cee <_strtod_r+0x48e>
 800808e:	4629      	mov	r1, r5
 8008090:	4642      	mov	r2, r8
 8008092:	9802      	ldr	r0, [sp, #8]
 8008094:	f7fe feec 	bl	8006e70 <__lshift>
 8008098:	4605      	mov	r5, r0
 800809a:	2800      	cmp	r0, #0
 800809c:	f47f af69 	bne.w	8007f72 <_strtod_r+0x712>
 80080a0:	e625      	b.n	8007cee <_strtod_r+0x48e>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	dc8f      	bgt.n	8007fc8 <_strtod_r+0x768>
 80080a8:	e17e      	b.n	80083a8 <_strtod_r+0xb48>
 80080aa:	d161      	bne.n	8008170 <_strtod_r+0x910>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b2:	b322      	cbz	r2, 80080fe <_strtod_r+0x89e>
 80080b4:	4946      	ldr	r1, [pc, #280]	; (80081d0 <_strtod_r+0x970>)
 80080b6:	428b      	cmp	r3, r1
 80080b8:	465a      	mov	r2, fp
 80080ba:	d12e      	bne.n	800811a <_strtod_r+0x8ba>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4651      	mov	r1, sl
 80080c0:	b163      	cbz	r3, 80080dc <_strtod_r+0x87c>
 80080c2:	4b44      	ldr	r3, [pc, #272]	; (80081d4 <_strtod_r+0x974>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080ca:	d807      	bhi.n	80080dc <_strtod_r+0x87c>
 80080cc:	0d1b      	lsrs	r3, r3, #20
 80080ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	fa00 f303 	lsl.w	r3, r0, r3
 80080da:	e001      	b.n	80080e0 <_strtod_r+0x880>
 80080dc:	f04f 33ff 	mov.w	r3, #4294967295
 80080e0:	428b      	cmp	r3, r1
 80080e2:	d11a      	bne.n	800811a <_strtod_r+0x8ba>
 80080e4:	493c      	ldr	r1, [pc, #240]	; (80081d8 <_strtod_r+0x978>)
 80080e6:	428a      	cmp	r2, r1
 80080e8:	d102      	bne.n	80080f0 <_strtod_r+0x890>
 80080ea:	3301      	adds	r3, #1
 80080ec:	f43f adff 	beq.w	8007cee <_strtod_r+0x48e>
 80080f0:	4b38      	ldr	r3, [pc, #224]	; (80081d4 <_strtod_r+0x974>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80080f8:	f04f 0a00 	mov.w	sl, #0
 80080fc:	e154      	b.n	80083a8 <_strtod_r+0xb48>
 80080fe:	b963      	cbnz	r3, 800811a <_strtod_r+0x8ba>
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d109      	bne.n	800811a <_strtod_r+0x8ba>
 8008106:	e76b      	b.n	8007fe0 <_strtod_r+0x780>
 8008108:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800810c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008110:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008114:	f04f 3aff 	mov.w	sl, #4294967295
 8008118:	e146      	b.n	80083a8 <_strtod_r+0xb48>
 800811a:	b117      	cbz	r7, 8008122 <_strtod_r+0x8c2>
 800811c:	ea17 0f0b 	tst.w	r7, fp
 8008120:	e002      	b.n	8008128 <_strtod_r+0x8c8>
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	ea13 0f0a 	tst.w	r3, sl
 8008128:	f000 813e 	beq.w	80083a8 <_strtod_r+0xb48>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	9a03      	ldr	r2, [sp, #12]
 8008130:	4650      	mov	r0, sl
 8008132:	4659      	mov	r1, fp
 8008134:	b153      	cbz	r3, 800814c <_strtod_r+0x8ec>
 8008136:	f7ff fb76 	bl	8007826 <sulp>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008142:	f7f8 f8a3 	bl	800028c <__adddf3>
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	e12d      	b.n	80083a8 <_strtod_r+0xb48>
 800814c:	f7ff fb6b 	bl	8007826 <sulp>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008158:	f7f8 f896 	bl	8000288 <__aeabi_dsub>
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	4682      	mov	sl, r0
 8008162:	468b      	mov	fp, r1
 8008164:	f7f8 fcac 	bl	8000ac0 <__aeabi_dcmpeq>
 8008168:	2800      	cmp	r0, #0
 800816a:	f47f af49 	bne.w	8008000 <_strtod_r+0x7a0>
 800816e:	e11b      	b.n	80083a8 <_strtod_r+0xb48>
 8008170:	4629      	mov	r1, r5
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff f80b 	bl	800718e <__ratio>
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	2200      	movs	r2, #0
 800817e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008182:	ee10 0a10 	vmov	r0, s0
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fcae 	bl	8000ae8 <__aeabi_dcmple>
 800818c:	2800      	cmp	r0, #0
 800818e:	d042      	beq.n	8008216 <_strtod_r+0x9b6>
 8008190:	9b07      	ldr	r3, [sp, #28]
 8008192:	b123      	cbz	r3, 800819e <_strtod_r+0x93e>
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80081dc <_strtod_r+0x97c>
 800819c:	e011      	b.n	80081c2 <_strtod_r+0x962>
 800819e:	f1ba 0f00 	cmp.w	sl, #0
 80081a2:	d103      	bne.n	80081ac <_strtod_r+0x94c>
 80081a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a8:	b93b      	cbnz	r3, 80081ba <_strtod_r+0x95a>
 80081aa:	e01b      	b.n	80081e4 <_strtod_r+0x984>
 80081ac:	f1ba 0f01 	cmp.w	sl, #1
 80081b0:	d103      	bne.n	80081ba <_strtod_r+0x95a>
 80081b2:	f1bb 0f00 	cmp.w	fp, #0
 80081b6:	f43f af23 	beq.w	8008000 <_strtod_r+0x7a0>
 80081ba:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80081e0 <_strtod_r+0x980>
 80081be:	f04f 0800 	mov.w	r8, #0
 80081c2:	2600      	movs	r6, #0
 80081c4:	4f05      	ldr	r7, [pc, #20]	; (80081dc <_strtod_r+0x97c>)
 80081c6:	e039      	b.n	800823c <_strtod_r+0x9dc>
 80081c8:	fffffc02 	.word	0xfffffc02
 80081cc:	fffffbe2 	.word	0xfffffbe2
 80081d0:	000fffff 	.word	0x000fffff
 80081d4:	7ff00000 	.word	0x7ff00000
 80081d8:	7fefffff 	.word	0x7fefffff
 80081dc:	3ff00000 	.word	0x3ff00000
 80081e0:	bff00000 	.word	0xbff00000
 80081e4:	2200      	movs	r2, #0
 80081e6:	4b98      	ldr	r3, [pc, #608]	; (8008448 <_strtod_r+0xbe8>)
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fc72 	bl	8000ad4 <__aeabi_dcmplt>
 80081f0:	b940      	cbnz	r0, 8008204 <_strtod_r+0x9a4>
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	2200      	movs	r2, #0
 80081f8:	4b94      	ldr	r3, [pc, #592]	; (800844c <_strtod_r+0xbec>)
 80081fa:	f7f8 f9f9 	bl	80005f0 <__aeabi_dmul>
 80081fe:	4606      	mov	r6, r0
 8008200:	460f      	mov	r7, r1
 8008202:	e001      	b.n	8008208 <_strtod_r+0x9a8>
 8008204:	4f91      	ldr	r7, [pc, #580]	; (800844c <_strtod_r+0xbec>)
 8008206:	2600      	movs	r6, #0
 8008208:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800820c:	9614      	str	r6, [sp, #80]	; 0x50
 800820e:	9315      	str	r3, [sp, #84]	; 0x54
 8008210:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008214:	e012      	b.n	800823c <_strtod_r+0x9dc>
 8008216:	4b8d      	ldr	r3, [pc, #564]	; (800844c <_strtod_r+0xbec>)
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	2200      	movs	r2, #0
 800821e:	f7f8 f9e7 	bl	80005f0 <__aeabi_dmul>
 8008222:	9b07      	ldr	r3, [sp, #28]
 8008224:	4606      	mov	r6, r0
 8008226:	460f      	mov	r7, r1
 8008228:	b923      	cbnz	r3, 8008234 <_strtod_r+0x9d4>
 800822a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800822e:	900e      	str	r0, [sp, #56]	; 0x38
 8008230:	930f      	str	r3, [sp, #60]	; 0x3c
 8008232:	e001      	b.n	8008238 <_strtod_r+0x9d8>
 8008234:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8008238:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800823c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008240:	0d1b      	lsrs	r3, r3, #20
 8008242:	051b      	lsls	r3, r3, #20
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	9a06      	ldr	r2, [sp, #24]
 8008248:	4b81      	ldr	r3, [pc, #516]	; (8008450 <_strtod_r+0xbf0>)
 800824a:	429a      	cmp	r2, r3
 800824c:	d12b      	bne.n	80082a6 <_strtod_r+0xa46>
 800824e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008252:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008256:	ec4b ab10 	vmov	d0, sl, fp
 800825a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800825e:	f7fe fed3 	bl	8007008 <__ulp>
 8008262:	4640      	mov	r0, r8
 8008264:	ec53 2b10 	vmov	r2, r3, d0
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 f9c1 	bl	80005f0 <__aeabi_dmul>
 800826e:	4652      	mov	r2, sl
 8008270:	465b      	mov	r3, fp
 8008272:	f7f8 f80b 	bl	800028c <__adddf3>
 8008276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800827a:	0d1b      	lsrs	r3, r3, #20
 800827c:	4a75      	ldr	r2, [pc, #468]	; (8008454 <_strtod_r+0xbf4>)
 800827e:	051b      	lsls	r3, r3, #20
 8008280:	4293      	cmp	r3, r2
 8008282:	4682      	mov	sl, r0
 8008284:	d90c      	bls.n	80082a0 <_strtod_r+0xa40>
 8008286:	4b74      	ldr	r3, [pc, #464]	; (8008458 <_strtod_r+0xbf8>)
 8008288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800828a:	429a      	cmp	r2, r3
 800828c:	d103      	bne.n	8008296 <_strtod_r+0xa36>
 800828e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008290:	3301      	adds	r3, #1
 8008292:	f43f ad2c 	beq.w	8007cee <_strtod_r+0x48e>
 8008296:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8008458 <_strtod_r+0xbf8>
 800829a:	f04f 3aff 	mov.w	sl, #4294967295
 800829e:	e072      	b.n	8008386 <_strtod_r+0xb26>
 80082a0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 80082a4:	e038      	b.n	8008318 <_strtod_r+0xab8>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	b333      	cbz	r3, 80082f8 <_strtod_r+0xa98>
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082b0:	d822      	bhi.n	80082f8 <_strtod_r+0xa98>
 80082b2:	a35d      	add	r3, pc, #372	; (adr r3, 8008428 <_strtod_r+0xbc8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 fc14 	bl	8000ae8 <__aeabi_dcmple>
 80082c0:	b1a8      	cbz	r0, 80082ee <_strtod_r+0xa8e>
 80082c2:	4639      	mov	r1, r7
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7f8 fc6b 	bl	8000ba0 <__aeabi_d2uiz>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	bf08      	it	eq
 80082ce:	2001      	moveq	r0, #1
 80082d0:	f7f8 f918 	bl	8000504 <__aeabi_ui2d>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	b923      	cbnz	r3, 80082e6 <_strtod_r+0xa86>
 80082dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082e0:	9010      	str	r0, [sp, #64]	; 0x40
 80082e2:	9311      	str	r3, [sp, #68]	; 0x44
 80082e4:	e001      	b.n	80082ea <_strtod_r+0xa8a>
 80082e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80082ea:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80082ee:	9a06      	ldr	r2, [sp, #24]
 80082f0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 80082f4:	ebc2 0903 	rsb	r9, r2, r3
 80082f8:	ed9d 0b08 	vldr	d0, [sp, #32]
 80082fc:	f7fe fe84 	bl	8007008 <__ulp>
 8008300:	4640      	mov	r0, r8
 8008302:	ec53 2b10 	vmov	r2, r3, d0
 8008306:	4649      	mov	r1, r9
 8008308:	f7f8 f972 	bl	80005f0 <__aeabi_dmul>
 800830c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008310:	f7f7 ffbc 	bl	800028c <__adddf3>
 8008314:	4682      	mov	sl, r0
 8008316:	468b      	mov	fp, r1
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	bba3      	cbnz	r3, 8008386 <_strtod_r+0xb26>
 800831c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008320:	0d1b      	lsrs	r3, r3, #20
 8008322:	9a06      	ldr	r2, [sp, #24]
 8008324:	051b      	lsls	r3, r3, #20
 8008326:	429a      	cmp	r2, r3
 8008328:	46d8      	mov	r8, fp
 800832a:	d12c      	bne.n	8008386 <_strtod_r+0xb26>
 800832c:	4639      	mov	r1, r7
 800832e:	4630      	mov	r0, r6
 8008330:	f7f8 fc0e 	bl	8000b50 <__aeabi_d2iz>
 8008334:	f7f8 f8f6 	bl	8000524 <__aeabi_i2d>
 8008338:	460b      	mov	r3, r1
 800833a:	4602      	mov	r2, r0
 800833c:	4639      	mov	r1, r7
 800833e:	4630      	mov	r0, r6
 8008340:	f7f7 ffa2 	bl	8000288 <__aeabi_dsub>
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	4606      	mov	r6, r0
 8008348:	460f      	mov	r7, r1
 800834a:	b92b      	cbnz	r3, 8008358 <_strtod_r+0xaf8>
 800834c:	f1ba 0f00 	cmp.w	sl, #0
 8008350:	d102      	bne.n	8008358 <_strtod_r+0xaf8>
 8008352:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008356:	b183      	cbz	r3, 800837a <_strtod_r+0xb1a>
 8008358:	a335      	add	r3, pc, #212	; (adr r3, 8008430 <_strtod_r+0xbd0>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	4630      	mov	r0, r6
 8008360:	4639      	mov	r1, r7
 8008362:	f7f8 fbb7 	bl	8000ad4 <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d131      	bne.n	80083ce <_strtod_r+0xb6e>
 800836a:	a333      	add	r3, pc, #204	; (adr r3, 8008438 <_strtod_r+0xbd8>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 fbcc 	bl	8000b10 <__aeabi_dcmpgt>
 8008378:	e004      	b.n	8008384 <_strtod_r+0xb24>
 800837a:	a331      	add	r3, pc, #196	; (adr r3, 8008440 <_strtod_r+0xbe0>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f8 fba8 	bl	8000ad4 <__aeabi_dcmplt>
 8008384:	bb18      	cbnz	r0, 80083ce <_strtod_r+0xb6e>
 8008386:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008388:	9802      	ldr	r0, [sp, #8]
 800838a:	f7fe fbac 	bl	8006ae6 <_Bfree>
 800838e:	9904      	ldr	r1, [sp, #16]
 8008390:	9802      	ldr	r0, [sp, #8]
 8008392:	f7fe fba8 	bl	8006ae6 <_Bfree>
 8008396:	4629      	mov	r1, r5
 8008398:	9802      	ldr	r0, [sp, #8]
 800839a:	f7fe fba4 	bl	8006ae6 <_Bfree>
 800839e:	4621      	mov	r1, r4
 80083a0:	9802      	ldr	r0, [sp, #8]
 80083a2:	f7fe fba0 	bl	8006ae6 <_Bfree>
 80083a6:	e56d      	b.n	8007e84 <_strtod_r+0x624>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	b183      	cbz	r3, 80083ce <_strtod_r+0xb6e>
 80083ac:	4b2b      	ldr	r3, [pc, #172]	; (800845c <_strtod_r+0xbfc>)
 80083ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80083b0:	2300      	movs	r3, #0
 80083b2:	930a      	str	r3, [sp, #40]	; 0x28
 80083b4:	4650      	mov	r0, sl
 80083b6:	4659      	mov	r1, fp
 80083b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083bc:	f7f8 f918 	bl	80005f0 <__aeabi_dmul>
 80083c0:	4682      	mov	sl, r0
 80083c2:	468b      	mov	fp, r1
 80083c4:	b919      	cbnz	r1, 80083ce <_strtod_r+0xb6e>
 80083c6:	b910      	cbnz	r0, 80083ce <_strtod_r+0xb6e>
 80083c8:	9a02      	ldr	r2, [sp, #8]
 80083ca:	2322      	movs	r3, #34	; 0x22
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083d0:	9802      	ldr	r0, [sp, #8]
 80083d2:	f7fe fb88 	bl	8006ae6 <_Bfree>
 80083d6:	9904      	ldr	r1, [sp, #16]
 80083d8:	9802      	ldr	r0, [sp, #8]
 80083da:	f7fe fb84 	bl	8006ae6 <_Bfree>
 80083de:	4629      	mov	r1, r5
 80083e0:	9802      	ldr	r0, [sp, #8]
 80083e2:	f7fe fb80 	bl	8006ae6 <_Bfree>
 80083e6:	9905      	ldr	r1, [sp, #20]
 80083e8:	9802      	ldr	r0, [sp, #8]
 80083ea:	f7fe fb7c 	bl	8006ae6 <_Bfree>
 80083ee:	4621      	mov	r1, r4
 80083f0:	9802      	ldr	r0, [sp, #8]
 80083f2:	f7fe fb78 	bl	8006ae6 <_Bfree>
 80083f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083f8:	b113      	cbz	r3, 8008400 <_strtod_r+0xba0>
 80083fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008402:	b11b      	cbz	r3, 800840c <_strtod_r+0xbac>
 8008404:	4652      	mov	r2, sl
 8008406:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800840a:	e007      	b.n	800841c <_strtod_r+0xbbc>
 800840c:	4652      	mov	r2, sl
 800840e:	465b      	mov	r3, fp
 8008410:	e004      	b.n	800841c <_strtod_r+0xbbc>
 8008412:	2500      	movs	r5, #0
 8008414:	462a      	mov	r2, r5
 8008416:	2101      	movs	r1, #1
 8008418:	f7ff bb41 	b.w	8007a9e <_strtod_r+0x23e>
 800841c:	ec43 2b10 	vmov	d0, r2, r3
 8008420:	b01d      	add	sp, #116	; 0x74
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	bf00      	nop
 8008428:	ffc00000 	.word	0xffc00000
 800842c:	41dfffff 	.word	0x41dfffff
 8008430:	94a03595 	.word	0x94a03595
 8008434:	3fdfffff 	.word	0x3fdfffff
 8008438:	35afe535 	.word	0x35afe535
 800843c:	3fe00000 	.word	0x3fe00000
 8008440:	94a03595 	.word	0x94a03595
 8008444:	3fcfffff 	.word	0x3fcfffff
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	7fe00000 	.word	0x7fe00000
 8008454:	7c9fffff 	.word	0x7c9fffff
 8008458:	7fefffff 	.word	0x7fefffff
 800845c:	39500000 	.word	0x39500000

08008460 <_strtol_r>:
 8008460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	4680      	mov	r8, r0
 8008466:	4840      	ldr	r0, [pc, #256]	; (8008568 <_strtol_r+0x108>)
 8008468:	f8d0 9000 	ldr.w	r9, [r0]
 800846c:	460f      	mov	r7, r1
 800846e:	463d      	mov	r5, r7
 8008470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008474:	eb09 0004 	add.w	r0, r9, r4
 8008478:	7840      	ldrb	r0, [r0, #1]
 800847a:	f000 0008 	and.w	r0, r0, #8
 800847e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8008482:	b108      	cbz	r0, 8008488 <_strtol_r+0x28>
 8008484:	462f      	mov	r7, r5
 8008486:	e7f2      	b.n	800846e <_strtol_r+0xe>
 8008488:	2c2d      	cmp	r4, #45	; 0x2d
 800848a:	d103      	bne.n	8008494 <_strtol_r+0x34>
 800848c:	1cbd      	adds	r5, r7, #2
 800848e:	787c      	ldrb	r4, [r7, #1]
 8008490:	2601      	movs	r6, #1
 8008492:	e003      	b.n	800849c <_strtol_r+0x3c>
 8008494:	2c2b      	cmp	r4, #43	; 0x2b
 8008496:	bf04      	itt	eq
 8008498:	787c      	ldrbeq	r4, [r7, #1]
 800849a:	1cbd      	addeq	r5, r7, #2
 800849c:	b113      	cbz	r3, 80084a4 <_strtol_r+0x44>
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d10a      	bne.n	80084b8 <_strtol_r+0x58>
 80084a2:	e05b      	b.n	800855c <_strtol_r+0xfc>
 80084a4:	2c30      	cmp	r4, #48	; 0x30
 80084a6:	d157      	bne.n	8008558 <_strtol_r+0xf8>
 80084a8:	7828      	ldrb	r0, [r5, #0]
 80084aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80084ae:	2858      	cmp	r0, #88	; 0x58
 80084b0:	d14d      	bne.n	800854e <_strtol_r+0xee>
 80084b2:	786c      	ldrb	r4, [r5, #1]
 80084b4:	2310      	movs	r3, #16
 80084b6:	3502      	adds	r5, #2
 80084b8:	2e00      	cmp	r6, #0
 80084ba:	bf14      	ite	ne
 80084bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80084c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80084c4:	2700      	movs	r7, #0
 80084c6:	fbbc faf3 	udiv	sl, ip, r3
 80084ca:	4638      	mov	r0, r7
 80084cc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80084d0:	eb09 0e04 	add.w	lr, r9, r4
 80084d4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80084d8:	f01e 0f04 	tst.w	lr, #4
 80084dc:	d001      	beq.n	80084e2 <_strtol_r+0x82>
 80084de:	3c30      	subs	r4, #48	; 0x30
 80084e0:	e00b      	b.n	80084fa <_strtol_r+0x9a>
 80084e2:	f01e 0e03 	ands.w	lr, lr, #3
 80084e6:	d01b      	beq.n	8008520 <_strtol_r+0xc0>
 80084e8:	f1be 0f01 	cmp.w	lr, #1
 80084ec:	bf0c      	ite	eq
 80084ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80084f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80084f6:	ebce 0404 	rsb	r4, lr, r4
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	dd10      	ble.n	8008520 <_strtol_r+0xc0>
 80084fe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008502:	d00a      	beq.n	800851a <_strtol_r+0xba>
 8008504:	4550      	cmp	r0, sl
 8008506:	d806      	bhi.n	8008516 <_strtol_r+0xb6>
 8008508:	d101      	bne.n	800850e <_strtol_r+0xae>
 800850a:	4564      	cmp	r4, ip
 800850c:	dc03      	bgt.n	8008516 <_strtol_r+0xb6>
 800850e:	fb03 4000 	mla	r0, r3, r0, r4
 8008512:	2701      	movs	r7, #1
 8008514:	e001      	b.n	800851a <_strtol_r+0xba>
 8008516:	f04f 37ff 	mov.w	r7, #4294967295
 800851a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800851e:	e7d7      	b.n	80084d0 <_strtol_r+0x70>
 8008520:	1c7b      	adds	r3, r7, #1
 8008522:	d10c      	bne.n	800853e <_strtol_r+0xde>
 8008524:	2e00      	cmp	r6, #0
 8008526:	f04f 0322 	mov.w	r3, #34	; 0x22
 800852a:	bf14      	ite	ne
 800852c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008530:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008534:	f8c8 3000 	str.w	r3, [r8]
 8008538:	b92a      	cbnz	r2, 8008546 <_strtol_r+0xe6>
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853e:	b106      	cbz	r6, 8008542 <_strtol_r+0xe2>
 8008540:	4240      	negs	r0, r0
 8008542:	b172      	cbz	r2, 8008562 <_strtol_r+0x102>
 8008544:	b107      	cbz	r7, 8008548 <_strtol_r+0xe8>
 8008546:	1e69      	subs	r1, r5, #1
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854e:	2430      	movs	r4, #48	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1b1      	bne.n	80084b8 <_strtol_r+0x58>
 8008554:	2308      	movs	r3, #8
 8008556:	e7af      	b.n	80084b8 <_strtol_r+0x58>
 8008558:	230a      	movs	r3, #10
 800855a:	e7ad      	b.n	80084b8 <_strtol_r+0x58>
 800855c:	2c30      	cmp	r4, #48	; 0x30
 800855e:	d0a3      	beq.n	80084a8 <_strtol_r+0x48>
 8008560:	e7aa      	b.n	80084b8 <_strtol_r+0x58>
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	bf00      	nop
 8008568:	2000050c 	.word	0x2000050c

0800856c <_strtoll_r>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	461f      	mov	r7, r3
 8008572:	4b55      	ldr	r3, [pc, #340]	; (80086c8 <_strtoll_r+0x15c>)
 8008574:	b087      	sub	sp, #28
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	9005      	str	r0, [sp, #20]
 800857c:	468a      	mov	sl, r1
 800857e:	4693      	mov	fp, r2
 8008580:	460b      	mov	r3, r1
 8008582:	461d      	mov	r5, r3
 8008584:	9a03      	ldr	r2, [sp, #12]
 8008586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800858a:	4422      	add	r2, r4
 800858c:	7852      	ldrb	r2, [r2, #1]
 800858e:	f002 0208 	and.w	r2, r2, #8
 8008592:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 8008596:	b10a      	cbz	r2, 800859c <_strtoll_r+0x30>
 8008598:	462b      	mov	r3, r5
 800859a:	e7f2      	b.n	8008582 <_strtoll_r+0x16>
 800859c:	2c2d      	cmp	r4, #45	; 0x2d
 800859e:	d103      	bne.n	80085a8 <_strtoll_r+0x3c>
 80085a0:	1c9d      	adds	r5, r3, #2
 80085a2:	785c      	ldrb	r4, [r3, #1]
 80085a4:	2601      	movs	r6, #1
 80085a6:	e003      	b.n	80085b0 <_strtoll_r+0x44>
 80085a8:	2c2b      	cmp	r4, #43	; 0x2b
 80085aa:	bf04      	itt	eq
 80085ac:	785c      	ldrbeq	r4, [r3, #1]
 80085ae:	1c9d      	addeq	r5, r3, #2
 80085b0:	b117      	cbz	r7, 80085b8 <_strtoll_r+0x4c>
 80085b2:	2f10      	cmp	r7, #16
 80085b4:	d10a      	bne.n	80085cc <_strtoll_r+0x60>
 80085b6:	e07f      	b.n	80086b8 <_strtoll_r+0x14c>
 80085b8:	2c30      	cmp	r4, #48	; 0x30
 80085ba:	d17b      	bne.n	80086b4 <_strtoll_r+0x148>
 80085bc:	782b      	ldrb	r3, [r5, #0]
 80085be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085c2:	2b58      	cmp	r3, #88	; 0x58
 80085c4:	d171      	bne.n	80086aa <_strtoll_r+0x13e>
 80085c6:	786c      	ldrb	r4, [r5, #1]
 80085c8:	2710      	movs	r7, #16
 80085ca:	3502      	adds	r5, #2
 80085cc:	b926      	cbnz	r6, 80085d8 <_strtoll_r+0x6c>
 80085ce:	f04f 38ff 	mov.w	r8, #4294967295
 80085d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80085d6:	e003      	b.n	80085e0 <_strtoll_r+0x74>
 80085d8:	f04f 0800 	mov.w	r8, #0
 80085dc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80085e0:	463a      	mov	r2, r7
 80085e2:	17fb      	asrs	r3, r7, #31
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	e9cd 2300 	strd	r2, r3, [sp]
 80085ec:	f7f8 fb48 	bl	8000c80 <__aeabi_uldivmod>
 80085f0:	17fb      	asrs	r3, r7, #31
 80085f2:	9204      	str	r2, [sp, #16]
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	463a      	mov	r2, r7
 80085fa:	f7f8 fb41 	bl	8000c80 <__aeabi_uldivmod>
 80085fe:	2300      	movs	r3, #0
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	2000      	movs	r0, #0
 8008606:	2100      	movs	r1, #0
 8008608:	9a03      	ldr	r2, [sp, #12]
 800860a:	4422      	add	r2, r4
 800860c:	7852      	ldrb	r2, [r2, #1]
 800860e:	f012 0f04 	tst.w	r2, #4
 8008612:	d001      	beq.n	8008618 <_strtoll_r+0xac>
 8008614:	3c30      	subs	r4, #48	; 0x30
 8008616:	e007      	b.n	8008628 <_strtoll_r+0xbc>
 8008618:	f012 0203 	ands.w	r2, r2, #3
 800861c:	d025      	beq.n	800866a <_strtoll_r+0xfe>
 800861e:	2a01      	cmp	r2, #1
 8008620:	bf0c      	ite	eq
 8008622:	2237      	moveq	r2, #55	; 0x37
 8008624:	2257      	movne	r2, #87	; 0x57
 8008626:	1aa4      	subs	r4, r4, r2
 8008628:	42a7      	cmp	r7, r4
 800862a:	dd1e      	ble.n	800866a <_strtoll_r+0xfe>
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	d019      	beq.n	8008664 <_strtoll_r+0xf8>
 8008630:	4589      	cmp	r9, r1
 8008632:	bf08      	it	eq
 8008634:	4580      	cmpeq	r8, r0
 8008636:	d313      	bcc.n	8008660 <_strtoll_r+0xf4>
 8008638:	4549      	cmp	r1, r9
 800863a:	bf08      	it	eq
 800863c:	4540      	cmpeq	r0, r8
 800863e:	d102      	bne.n	8008646 <_strtoll_r+0xda>
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	429c      	cmp	r4, r3
 8008644:	dc0c      	bgt.n	8008660 <_strtoll_r+0xf4>
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	9a00      	ldr	r2, [sp, #0]
 800864a:	4343      	muls	r3, r0
 800864c:	fb02 3301 	mla	r3, r2, r1, r3
 8008650:	fba0 0102 	umull	r0, r1, r0, r2
 8008654:	4419      	add	r1, r3
 8008656:	1900      	adds	r0, r0, r4
 8008658:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800865c:	2301      	movs	r3, #1
 800865e:	e001      	b.n	8008664 <_strtoll_r+0xf8>
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008668:	e7ce      	b.n	8008608 <_strtoll_r+0x9c>
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	d10f      	bne.n	800868e <_strtoll_r+0x122>
 800866e:	b926      	cbnz	r6, 800867a <_strtoll_r+0x10e>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008678:	e002      	b.n	8008680 <_strtoll_r+0x114>
 800867a:	2000      	movs	r0, #0
 800867c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008680:	9a05      	ldr	r2, [sp, #20]
 8008682:	2322      	movs	r3, #34	; 0x22
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	f1bb 0f00 	cmp.w	fp, #0
 800868a:	d108      	bne.n	800869e <_strtoll_r+0x132>
 800868c:	e018      	b.n	80086c0 <_strtoll_r+0x154>
 800868e:	b116      	cbz	r6, 8008696 <_strtoll_r+0x12a>
 8008690:	4240      	negs	r0, r0
 8008692:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008696:	f1bb 0f00 	cmp.w	fp, #0
 800869a:	d011      	beq.n	80086c0 <_strtoll_r+0x154>
 800869c:	b10b      	cbz	r3, 80086a2 <_strtoll_r+0x136>
 800869e:	3d01      	subs	r5, #1
 80086a0:	e000      	b.n	80086a4 <_strtoll_r+0x138>
 80086a2:	4655      	mov	r5, sl
 80086a4:	f8cb 5000 	str.w	r5, [fp]
 80086a8:	e00a      	b.n	80086c0 <_strtoll_r+0x154>
 80086aa:	2430      	movs	r4, #48	; 0x30
 80086ac:	2f00      	cmp	r7, #0
 80086ae:	d18d      	bne.n	80085cc <_strtoll_r+0x60>
 80086b0:	2708      	movs	r7, #8
 80086b2:	e78b      	b.n	80085cc <_strtoll_r+0x60>
 80086b4:	270a      	movs	r7, #10
 80086b6:	e789      	b.n	80085cc <_strtoll_r+0x60>
 80086b8:	2c30      	cmp	r4, #48	; 0x30
 80086ba:	f43f af7f 	beq.w	80085bc <_strtoll_r+0x50>
 80086be:	e785      	b.n	80085cc <_strtoll_r+0x60>
 80086c0:	b007      	add	sp, #28
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	bf00      	nop
 80086c8:	2000050c 	.word	0x2000050c

080086cc <_strtoul_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	4680      	mov	r8, r0
 80086d2:	483c      	ldr	r0, [pc, #240]	; (80087c4 <_strtoul_r+0xf8>)
 80086d4:	f8d0 9000 	ldr.w	r9, [r0]
 80086d8:	460e      	mov	r6, r1
 80086da:	4635      	mov	r5, r6
 80086dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086e0:	eb09 0004 	add.w	r0, r9, r4
 80086e4:	7840      	ldrb	r0, [r0, #1]
 80086e6:	f000 0008 	and.w	r0, r0, #8
 80086ea:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80086ee:	b108      	cbz	r0, 80086f4 <_strtoul_r+0x28>
 80086f0:	462e      	mov	r6, r5
 80086f2:	e7f2      	b.n	80086da <_strtoul_r+0xe>
 80086f4:	2c2d      	cmp	r4, #45	; 0x2d
 80086f6:	d103      	bne.n	8008700 <_strtoul_r+0x34>
 80086f8:	1cb5      	adds	r5, r6, #2
 80086fa:	7874      	ldrb	r4, [r6, #1]
 80086fc:	2701      	movs	r7, #1
 80086fe:	e003      	b.n	8008708 <_strtoul_r+0x3c>
 8008700:	2c2b      	cmp	r4, #43	; 0x2b
 8008702:	bf04      	itt	eq
 8008704:	7874      	ldrbeq	r4, [r6, #1]
 8008706:	1cb5      	addeq	r5, r6, #2
 8008708:	b113      	cbz	r3, 8008710 <_strtoul_r+0x44>
 800870a:	2b10      	cmp	r3, #16
 800870c:	d10a      	bne.n	8008724 <_strtoul_r+0x58>
 800870e:	e053      	b.n	80087b8 <_strtoul_r+0xec>
 8008710:	2c30      	cmp	r4, #48	; 0x30
 8008712:	d14f      	bne.n	80087b4 <_strtoul_r+0xe8>
 8008714:	7828      	ldrb	r0, [r5, #0]
 8008716:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800871a:	2858      	cmp	r0, #88	; 0x58
 800871c:	d145      	bne.n	80087aa <_strtoul_r+0xde>
 800871e:	786c      	ldrb	r4, [r5, #1]
 8008720:	2310      	movs	r3, #16
 8008722:	3502      	adds	r5, #2
 8008724:	f04f 3cff 	mov.w	ip, #4294967295
 8008728:	2600      	movs	r6, #0
 800872a:	fbbc fcf3 	udiv	ip, ip, r3
 800872e:	fb03 fa0c 	mul.w	sl, r3, ip
 8008732:	ea6f 0a0a 	mvn.w	sl, sl
 8008736:	4630      	mov	r0, r6
 8008738:	eb09 0e04 	add.w	lr, r9, r4
 800873c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8008740:	f01e 0f04 	tst.w	lr, #4
 8008744:	d001      	beq.n	800874a <_strtoul_r+0x7e>
 8008746:	3c30      	subs	r4, #48	; 0x30
 8008748:	e00b      	b.n	8008762 <_strtoul_r+0x96>
 800874a:	f01e 0e03 	ands.w	lr, lr, #3
 800874e:	d01a      	beq.n	8008786 <_strtoul_r+0xba>
 8008750:	f1be 0f01 	cmp.w	lr, #1
 8008754:	bf0c      	ite	eq
 8008756:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800875a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800875e:	ebce 0404 	rsb	r4, lr, r4
 8008762:	42a3      	cmp	r3, r4
 8008764:	dd0f      	ble.n	8008786 <_strtoul_r+0xba>
 8008766:	2e00      	cmp	r6, #0
 8008768:	db08      	blt.n	800877c <_strtoul_r+0xb0>
 800876a:	4560      	cmp	r0, ip
 800876c:	d806      	bhi.n	800877c <_strtoul_r+0xb0>
 800876e:	d101      	bne.n	8008774 <_strtoul_r+0xa8>
 8008770:	4554      	cmp	r4, sl
 8008772:	dc03      	bgt.n	800877c <_strtoul_r+0xb0>
 8008774:	fb03 4000 	mla	r0, r3, r0, r4
 8008778:	2601      	movs	r6, #1
 800877a:	e001      	b.n	8008780 <_strtoul_r+0xb4>
 800877c:	f04f 36ff 	mov.w	r6, #4294967295
 8008780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008784:	e7d8      	b.n	8008738 <_strtoul_r+0x6c>
 8008786:	2e00      	cmp	r6, #0
 8008788:	da07      	bge.n	800879a <_strtoul_r+0xce>
 800878a:	2322      	movs	r3, #34	; 0x22
 800878c:	f8c8 3000 	str.w	r3, [r8]
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b92a      	cbnz	r2, 80087a2 <_strtoul_r+0xd6>
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	b107      	cbz	r7, 800879e <_strtoul_r+0xd2>
 800879c:	4240      	negs	r0, r0
 800879e:	b172      	cbz	r2, 80087be <_strtoul_r+0xf2>
 80087a0:	b106      	cbz	r6, 80087a4 <_strtoul_r+0xd8>
 80087a2:	1e69      	subs	r1, r5, #1
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	2430      	movs	r4, #48	; 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1b9      	bne.n	8008724 <_strtoul_r+0x58>
 80087b0:	2308      	movs	r3, #8
 80087b2:	e7b7      	b.n	8008724 <_strtoul_r+0x58>
 80087b4:	230a      	movs	r3, #10
 80087b6:	e7b5      	b.n	8008724 <_strtoul_r+0x58>
 80087b8:	2c30      	cmp	r4, #48	; 0x30
 80087ba:	d0ab      	beq.n	8008714 <_strtoul_r+0x48>
 80087bc:	e7b2      	b.n	8008724 <_strtoul_r+0x58>
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	bf00      	nop
 80087c4:	2000050c 	.word	0x2000050c

080087c8 <_strtoull_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	461e      	mov	r6, r3
 80087ce:	4b52      	ldr	r3, [pc, #328]	; (8008918 <_strtoull_r+0x150>)
 80087d0:	b085      	sub	sp, #20
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9302      	str	r3, [sp, #8]
 80087d6:	9003      	str	r0, [sp, #12]
 80087d8:	4688      	mov	r8, r1
 80087da:	4691      	mov	r9, r2
 80087dc:	460b      	mov	r3, r1
 80087de:	461d      	mov	r5, r3
 80087e0:	9a02      	ldr	r2, [sp, #8]
 80087e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087e6:	4422      	add	r2, r4
 80087e8:	7852      	ldrb	r2, [r2, #1]
 80087ea:	f002 0208 	and.w	r2, r2, #8
 80087ee:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 80087f2:	b10a      	cbz	r2, 80087f8 <_strtoull_r+0x30>
 80087f4:	462b      	mov	r3, r5
 80087f6:	e7f2      	b.n	80087de <_strtoull_r+0x16>
 80087f8:	2c2d      	cmp	r4, #45	; 0x2d
 80087fa:	d103      	bne.n	8008804 <_strtoull_r+0x3c>
 80087fc:	1c9d      	adds	r5, r3, #2
 80087fe:	785c      	ldrb	r4, [r3, #1]
 8008800:	2701      	movs	r7, #1
 8008802:	e003      	b.n	800880c <_strtoull_r+0x44>
 8008804:	2c2b      	cmp	r4, #43	; 0x2b
 8008806:	bf04      	itt	eq
 8008808:	785c      	ldrbeq	r4, [r3, #1]
 800880a:	1c9d      	addeq	r5, r3, #2
 800880c:	b116      	cbz	r6, 8008814 <_strtoull_r+0x4c>
 800880e:	2e10      	cmp	r6, #16
 8008810:	d10a      	bne.n	8008828 <_strtoull_r+0x60>
 8008812:	e07b      	b.n	800890c <_strtoull_r+0x144>
 8008814:	2c30      	cmp	r4, #48	; 0x30
 8008816:	d177      	bne.n	8008908 <_strtoull_r+0x140>
 8008818:	782b      	ldrb	r3, [r5, #0]
 800881a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800881e:	2b58      	cmp	r3, #88	; 0x58
 8008820:	d16d      	bne.n	80088fe <_strtoull_r+0x136>
 8008822:	786c      	ldrb	r4, [r5, #1]
 8008824:	2610      	movs	r6, #16
 8008826:	3502      	adds	r5, #2
 8008828:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800882c:	4632      	mov	r2, r6
 800882e:	465b      	mov	r3, fp
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	f04f 31ff 	mov.w	r1, #4294967295
 8008838:	f7f8 fa22 	bl	8000c80 <__aeabi_uldivmod>
 800883c:	4632      	mov	r2, r6
 800883e:	e9cd 0100 	strd	r0, r1, [sp]
 8008842:	465b      	mov	r3, fp
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	f04f 31ff 	mov.w	r1, #4294967295
 800884c:	f7f8 fa18 	bl	8000c80 <__aeabi_uldivmod>
 8008850:	46b2      	mov	sl, r6
 8008852:	4694      	mov	ip, r2
 8008854:	2300      	movs	r3, #0
 8008856:	2000      	movs	r0, #0
 8008858:	2100      	movs	r1, #0
 800885a:	9a02      	ldr	r2, [sp, #8]
 800885c:	eb02 0e04 	add.w	lr, r2, r4
 8008860:	f89e e001 	ldrb.w	lr, [lr, #1]
 8008864:	f01e 0f04 	tst.w	lr, #4
 8008868:	d001      	beq.n	800886e <_strtoull_r+0xa6>
 800886a:	3c30      	subs	r4, #48	; 0x30
 800886c:	e00b      	b.n	8008886 <_strtoull_r+0xbe>
 800886e:	f01e 0e03 	ands.w	lr, lr, #3
 8008872:	d029      	beq.n	80088c8 <_strtoull_r+0x100>
 8008874:	f1be 0f01 	cmp.w	lr, #1
 8008878:	bf0c      	ite	eq
 800887a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800887e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8008882:	ebce 0404 	rsb	r4, lr, r4
 8008886:	42a6      	cmp	r6, r4
 8008888:	dd1e      	ble.n	80088c8 <_strtoull_r+0x100>
 800888a:	2b00      	cmp	r3, #0
 800888c:	db17      	blt.n	80088be <_strtoull_r+0xf6>
 800888e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008892:	428b      	cmp	r3, r1
 8008894:	bf08      	it	eq
 8008896:	4282      	cmpeq	r2, r0
 8008898:	d311      	bcc.n	80088be <_strtoull_r+0xf6>
 800889a:	4299      	cmp	r1, r3
 800889c:	bf08      	it	eq
 800889e:	4290      	cmpeq	r0, r2
 80088a0:	d101      	bne.n	80088a6 <_strtoull_r+0xde>
 80088a2:	4564      	cmp	r4, ip
 80088a4:	dc0b      	bgt.n	80088be <_strtoull_r+0xf6>
 80088a6:	fb00 f30b 	mul.w	r3, r0, fp
 80088aa:	fb0a 3301 	mla	r3, sl, r1, r3
 80088ae:	fba0 010a 	umull	r0, r1, r0, sl
 80088b2:	4419      	add	r1, r3
 80088b4:	1900      	adds	r0, r0, r4
 80088b6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80088ba:	2301      	movs	r3, #1
 80088bc:	e001      	b.n	80088c2 <_strtoull_r+0xfa>
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
 80088c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088c6:	e7c8      	b.n	800885a <_strtoull_r+0x92>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	da0a      	bge.n	80088e2 <_strtoull_r+0x11a>
 80088cc:	9a03      	ldr	r2, [sp, #12]
 80088ce:	2322      	movs	r3, #34	; 0x22
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	f04f 30ff 	mov.w	r0, #4294967295
 80088d6:	f04f 31ff 	mov.w	r1, #4294967295
 80088da:	f1b9 0f00 	cmp.w	r9, #0
 80088de:	d108      	bne.n	80088f2 <_strtoull_r+0x12a>
 80088e0:	e017      	b.n	8008912 <_strtoull_r+0x14a>
 80088e2:	b117      	cbz	r7, 80088ea <_strtoull_r+0x122>
 80088e4:	4240      	negs	r0, r0
 80088e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	d010      	beq.n	8008912 <_strtoull_r+0x14a>
 80088f0:	b10b      	cbz	r3, 80088f6 <_strtoull_r+0x12e>
 80088f2:	3d01      	subs	r5, #1
 80088f4:	e000      	b.n	80088f8 <_strtoull_r+0x130>
 80088f6:	4645      	mov	r5, r8
 80088f8:	f8c9 5000 	str.w	r5, [r9]
 80088fc:	e009      	b.n	8008912 <_strtoull_r+0x14a>
 80088fe:	2430      	movs	r4, #48	; 0x30
 8008900:	2e00      	cmp	r6, #0
 8008902:	d191      	bne.n	8008828 <_strtoull_r+0x60>
 8008904:	2608      	movs	r6, #8
 8008906:	e78f      	b.n	8008828 <_strtoull_r+0x60>
 8008908:	260a      	movs	r6, #10
 800890a:	e78d      	b.n	8008828 <_strtoull_r+0x60>
 800890c:	2c30      	cmp	r4, #48	; 0x30
 800890e:	d083      	beq.n	8008818 <_strtoull_r+0x50>
 8008910:	e78a      	b.n	8008828 <_strtoull_r+0x60>
 8008912:	b005      	add	sp, #20
 8008914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008918:	2000050c 	.word	0x2000050c

0800891c <__ssprint_r>:
 800891c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	4693      	mov	fp, r2
 8008922:	6892      	ldr	r2, [r2, #8]
 8008924:	4681      	mov	r9, r0
 8008926:	460c      	mov	r4, r1
 8008928:	b34a      	cbz	r2, 800897e <__ssprint_r+0x62>
 800892a:	2300      	movs	r3, #0
 800892c:	f8db a000 	ldr.w	sl, [fp]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	461f      	mov	r7, r3
 8008934:	e006      	b.n	8008944 <__ssprint_r+0x28>
 8008936:	f8da 3000 	ldr.w	r3, [sl]
 800893a:	f8da 7004 	ldr.w	r7, [sl, #4]
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	f10a 0a08 	add.w	sl, sl, #8
 8008944:	2f00      	cmp	r7, #0
 8008946:	d0f6      	beq.n	8008936 <__ssprint_r+0x1a>
 8008948:	68a6      	ldr	r6, [r4, #8]
 800894a:	42b7      	cmp	r7, r6
 800894c:	d360      	bcc.n	8008a10 <__ssprint_r+0xf4>
 800894e:	89a0      	ldrh	r0, [r4, #12]
 8008950:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8008954:	d117      	bne.n	8008986 <__ssprint_r+0x6a>
 8008956:	42b7      	cmp	r7, r6
 8008958:	d35a      	bcc.n	8008a10 <__ssprint_r+0xf4>
 800895a:	4632      	mov	r2, r6
 800895c:	9901      	ldr	r1, [sp, #4]
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	f7fe f871 	bl	8006a46 <memmove>
 8008964:	68a2      	ldr	r2, [r4, #8]
 8008966:	1b92      	subs	r2, r2, r6
 8008968:	60a2      	str	r2, [r4, #8]
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	4416      	add	r6, r2
 800896e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8008972:	6026      	str	r6, [r4, #0]
 8008974:	1bd7      	subs	r7, r2, r7
 8008976:	f8cb 7008 	str.w	r7, [fp, #8]
 800897a:	2f00      	cmp	r7, #0
 800897c:	d1db      	bne.n	8008936 <__ssprint_r+0x1a>
 800897e:	2000      	movs	r0, #0
 8008980:	f8cb 0004 	str.w	r0, [fp, #4]
 8008984:	e046      	b.n	8008a14 <__ssprint_r+0xf8>
 8008986:	6825      	ldr	r5, [r4, #0]
 8008988:	6921      	ldr	r1, [r4, #16]
 800898a:	ebc1 0805 	rsb	r8, r1, r5
 800898e:	f108 0201 	add.w	r2, r8, #1
 8008992:	6965      	ldr	r5, [r4, #20]
 8008994:	443a      	add	r2, r7
 8008996:	2302      	movs	r3, #2
 8008998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800899c:	fb95 f5f3 	sdiv	r5, r5, r3
 80089a0:	4295      	cmp	r5, r2
 80089a2:	bf38      	it	cc
 80089a4:	4615      	movcc	r5, r2
 80089a6:	0543      	lsls	r3, r0, #21
 80089a8:	d510      	bpl.n	80089cc <__ssprint_r+0xb0>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4648      	mov	r0, r9
 80089ae:	f7fa fee3 	bl	8003778 <_malloc_r>
 80089b2:	4606      	mov	r6, r0
 80089b4:	b1a0      	cbz	r0, 80089e0 <__ssprint_r+0xc4>
 80089b6:	4642      	mov	r2, r8
 80089b8:	6921      	ldr	r1, [r4, #16]
 80089ba:	f7fe f839 	bl	8006a30 <memcpy>
 80089be:	89a2      	ldrh	r2, [r4, #12]
 80089c0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80089c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089c8:	81a2      	strh	r2, [r4, #12]
 80089ca:	e018      	b.n	80089fe <__ssprint_r+0xe2>
 80089cc:	462a      	mov	r2, r5
 80089ce:	4648      	mov	r0, r9
 80089d0:	f7fe fc44 	bl	800725c <_realloc_r>
 80089d4:	4606      	mov	r6, r0
 80089d6:	b990      	cbnz	r0, 80089fe <__ssprint_r+0xe2>
 80089d8:	6921      	ldr	r1, [r4, #16]
 80089da:	4648      	mov	r0, r9
 80089dc:	f7fa fde8 	bl	80035b0 <_free_r>
 80089e0:	220c      	movs	r2, #12
 80089e2:	f8c9 2000 	str.w	r2, [r9]
 80089e6:	89a2      	ldrh	r2, [r4, #12]
 80089e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ec:	81a2      	strh	r2, [r4, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8cb 2008 	str.w	r2, [fp, #8]
 80089f4:	f8cb 2004 	str.w	r2, [fp, #4]
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e00a      	b.n	8008a14 <__ssprint_r+0xf8>
 80089fe:	6126      	str	r6, [r4, #16]
 8008a00:	6165      	str	r5, [r4, #20]
 8008a02:	4446      	add	r6, r8
 8008a04:	ebc8 0505 	rsb	r5, r8, r5
 8008a08:	6026      	str	r6, [r4, #0]
 8008a0a:	60a5      	str	r5, [r4, #8]
 8008a0c:	463e      	mov	r6, r7
 8008a0e:	e7a2      	b.n	8008956 <__ssprint_r+0x3a>
 8008a10:	463e      	mov	r6, r7
 8008a12:	e7a2      	b.n	800895a <__ssprint_r+0x3e>
 8008a14:	b003      	add	sp, #12
 8008a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a1a <__submore>:
 8008a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	460c      	mov	r4, r1
 8008a20:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a26:	4299      	cmp	r1, r3
 8008a28:	d11c      	bne.n	8008a64 <__submore+0x4a>
 8008a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008a2e:	f7fa fea3 	bl	8003778 <_malloc_r>
 8008a32:	b918      	cbnz	r0, 8008a3c <__submore+0x22>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a40:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a42:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008a46:	6360      	str	r0, [r4, #52]	; 0x34
 8008a48:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008a4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a50:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008a54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a58:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008a5c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008a60:	6020      	str	r0, [r4, #0]
 8008a62:	e012      	b.n	8008a8a <__submore+0x70>
 8008a64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008a66:	0077      	lsls	r7, r6, #1
 8008a68:	463a      	mov	r2, r7
 8008a6a:	f7fe fbf7 	bl	800725c <_realloc_r>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0df      	beq.n	8008a34 <__submore+0x1a>
 8008a74:	eb00 0806 	add.w	r8, r0, r6
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	f7fd ffd7 	bl	8006a30 <memcpy>
 8008a82:	f8c4 8000 	str.w	r8, [r4]
 8008a86:	6365      	str	r5, [r4, #52]	; 0x34
 8008a88:	63a7      	str	r7, [r4, #56]	; 0x38
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a90 <_ungetc_r>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	1c4d      	adds	r5, r1, #1
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	d102      	bne.n	8008aa2 <_ungetc_r+0x12>
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa2:	b118      	cbz	r0, 8008aac <_ungetc_r+0x1c>
 8008aa4:	6983      	ldr	r3, [r0, #24]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_ungetc_r+0x1c>
 8008aa8:	f7fd fd0e 	bl	80064c8 <__sinit>
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <_ungetc_r+0xec>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <_ungetc_r+0x26>
 8008ab2:	6874      	ldr	r4, [r6, #4]
 8008ab4:	e008      	b.n	8008ac8 <_ungetc_r+0x38>
 8008ab6:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <_ungetc_r+0xf0>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d101      	bne.n	8008ac0 <_ungetc_r+0x30>
 8008abc:	68b4      	ldr	r4, [r6, #8]
 8008abe:	e003      	b.n	8008ac8 <_ungetc_r+0x38>
 8008ac0:	4b30      	ldr	r3, [pc, #192]	; (8008b84 <_ungetc_r+0xf4>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	bf08      	it	eq
 8008ac6:	68f4      	ldreq	r4, [r6, #12]
 8008ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008acc:	0498      	lsls	r0, r3, #18
 8008ace:	d406      	bmi.n	8008ade <_ungetc_r+0x4e>
 8008ad0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6662      	str	r2, [r4, #100]	; 0x64
 8008ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae2:	f023 0320 	bic.w	r3, r3, #32
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	0759      	lsls	r1, r3, #29
 8008aec:	d413      	bmi.n	8008b16 <_ungetc_r+0x86>
 8008aee:	06da      	lsls	r2, r3, #27
 8008af0:	d5d4      	bpl.n	8008a9c <_ungetc_r+0xc>
 8008af2:	071b      	lsls	r3, r3, #28
 8008af4:	d50b      	bpl.n	8008b0e <_ungetc_r+0x7e>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 f9e5 	bl	8008ec8 <_fflush_r>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1cc      	bne.n	8008a9c <_ungetc_r+0xc>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	60a0      	str	r0, [r4, #8]
 8008b06:	f023 0308 	bic.w	r3, r3, #8
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	61a0      	str	r0, [r4, #24]
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f043 0304 	orr.w	r3, r3, #4
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b18:	6862      	ldr	r2, [r4, #4]
 8008b1a:	b2fd      	uxtb	r5, r7
 8008b1c:	b18b      	cbz	r3, 8008b42 <_ungetc_r+0xb2>
 8008b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b20:	429a      	cmp	r2, r3
 8008b22:	da07      	bge.n	8008b34 <_ungetc_r+0xa4>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	1e5a      	subs	r2, r3, #1
 8008b28:	6022      	str	r2, [r4, #0]
 8008b2a:	f803 7c01 	strb.w	r7, [r3, #-1]
 8008b2e:	6863      	ldr	r3, [r4, #4]
 8008b30:	3301      	adds	r3, #1
 8008b32:	e020      	b.n	8008b76 <_ungetc_r+0xe6>
 8008b34:	4621      	mov	r1, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ff6f 	bl	8008a1a <__submore>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d0f1      	beq.n	8008b24 <_ungetc_r+0x94>
 8008b40:	e7ac      	b.n	8008a9c <_ungetc_r+0xc>
 8008b42:	6921      	ldr	r1, [r4, #16]
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	b151      	cbz	r1, 8008b5e <_ungetc_r+0xce>
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	d208      	bcs.n	8008b5e <_ungetc_r+0xce>
 8008b4c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b50:	428d      	cmp	r5, r1
 8008b52:	d104      	bne.n	8008b5e <_ungetc_r+0xce>
 8008b54:	3b01      	subs	r3, #1
 8008b56:	3201      	adds	r2, #1
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	6062      	str	r2, [r4, #4]
 8008b5c:	e00c      	b.n	8008b78 <_ungetc_r+0xe8>
 8008b5e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b64:	6363      	str	r3, [r4, #52]	; 0x34
 8008b66:	2303      	movs	r3, #3
 8008b68:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	6422      	str	r2, [r4, #64]	; 0x40
 8008b6e:	f803 7f46 	strb.w	r7, [r3, #70]!
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	2301      	movs	r3, #1
 8008b76:	6063      	str	r3, [r4, #4]
 8008b78:	4628      	mov	r0, r5
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7c:	080099b8 	.word	0x080099b8
 8008b80:	080099d8 	.word	0x080099d8
 8008b84:	080099f8 	.word	0x080099f8

08008b88 <_write_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4c07      	ldr	r4, [pc, #28]	; (8008ba8 <_write_r+0x20>)
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	6022      	str	r2, [r4, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7fa fbbc 	bl	8003314 <_write>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_write_r+0x1e>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_write_r+0x1e>
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	200006dc 	.word	0x200006dc

08008bac <__swsetup_r>:
 8008bac:	4b32      	ldr	r3, [pc, #200]	; (8008c78 <__swsetup_r+0xcc>)
 8008bae:	b570      	push	{r4, r5, r6, lr}
 8008bb0:	681d      	ldr	r5, [r3, #0]
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	b125      	cbz	r5, 8008bc2 <__swsetup_r+0x16>
 8008bb8:	69ab      	ldr	r3, [r5, #24]
 8008bba:	b913      	cbnz	r3, 8008bc2 <__swsetup_r+0x16>
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f7fd fc83 	bl	80064c8 <__sinit>
 8008bc2:	4b2e      	ldr	r3, [pc, #184]	; (8008c7c <__swsetup_r+0xd0>)
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	d101      	bne.n	8008bcc <__swsetup_r+0x20>
 8008bc8:	686c      	ldr	r4, [r5, #4]
 8008bca:	e008      	b.n	8008bde <__swsetup_r+0x32>
 8008bcc:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <__swsetup_r+0xd4>)
 8008bce:	429c      	cmp	r4, r3
 8008bd0:	d101      	bne.n	8008bd6 <__swsetup_r+0x2a>
 8008bd2:	68ac      	ldr	r4, [r5, #8]
 8008bd4:	e003      	b.n	8008bde <__swsetup_r+0x32>
 8008bd6:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <__swsetup_r+0xd8>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	bf08      	it	eq
 8008bdc:	68ec      	ldreq	r4, [r5, #12]
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	0715      	lsls	r5, r2, #28
 8008be6:	d41d      	bmi.n	8008c24 <__swsetup_r+0x78>
 8008be8:	06d0      	lsls	r0, r2, #27
 8008bea:	d402      	bmi.n	8008bf2 <__swsetup_r+0x46>
 8008bec:	2209      	movs	r2, #9
 8008bee:	6032      	str	r2, [r6, #0]
 8008bf0:	e03a      	b.n	8008c68 <__swsetup_r+0xbc>
 8008bf2:	0751      	lsls	r1, r2, #29
 8008bf4:	d512      	bpl.n	8008c1c <__swsetup_r+0x70>
 8008bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf8:	b141      	cbz	r1, 8008c0c <__swsetup_r+0x60>
 8008bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d002      	beq.n	8008c08 <__swsetup_r+0x5c>
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7fa fcd4 	bl	80035b0 <_free_r>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	2300      	movs	r3, #0
 8008c16:	6063      	str	r3, [r4, #4]
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f043 0308 	orr.w	r3, r3, #8
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	b94b      	cbnz	r3, 8008c3c <__swsetup_r+0x90>
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c32:	d003      	beq.n	8008c3c <__swsetup_r+0x90>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 fcde 	bl	80095f8 <__smakebuf_r>
 8008c3c:	89a2      	ldrh	r2, [r4, #12]
 8008c3e:	f012 0301 	ands.w	r3, r2, #1
 8008c42:	d005      	beq.n	8008c50 <__swsetup_r+0xa4>
 8008c44:	2300      	movs	r3, #0
 8008c46:	60a3      	str	r3, [r4, #8]
 8008c48:	6963      	ldr	r3, [r4, #20]
 8008c4a:	425b      	negs	r3, r3
 8008c4c:	61a3      	str	r3, [r4, #24]
 8008c4e:	e003      	b.n	8008c58 <__swsetup_r+0xac>
 8008c50:	0792      	lsls	r2, r2, #30
 8008c52:	bf58      	it	pl
 8008c54:	6963      	ldrpl	r3, [r4, #20]
 8008c56:	60a3      	str	r3, [r4, #8]
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	b95b      	cbnz	r3, 8008c74 <__swsetup_r+0xc8>
 8008c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c60:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8008c64:	b280      	uxth	r0, r0
 8008c66:	b130      	cbz	r0, 8008c76 <__swsetup_r+0xca>
 8008c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	2000      	movs	r0, #0
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	200000f8 	.word	0x200000f8
 8008c7c:	080099b8 	.word	0x080099b8
 8008c80:	080099d8 	.word	0x080099d8
 8008c84:	080099f8 	.word	0x080099f8

08008c88 <_calloc_r>:
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	4351      	muls	r1, r2
 8008c8c:	f7fa fd74 	bl	8003778 <_malloc_r>
 8008c90:	4604      	mov	r4, r0
 8008c92:	b320      	cbz	r0, 8008cde <_calloc_r+0x56>
 8008c94:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008c98:	f022 0203 	bic.w	r2, r2, #3
 8008c9c:	3a04      	subs	r2, #4
 8008c9e:	2a24      	cmp	r2, #36	; 0x24
 8008ca0:	d81a      	bhi.n	8008cd8 <_calloc_r+0x50>
 8008ca2:	2a13      	cmp	r2, #19
 8008ca4:	d912      	bls.n	8008ccc <_calloc_r+0x44>
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	2a1b      	cmp	r2, #27
 8008caa:	6001      	str	r1, [r0, #0]
 8008cac:	6041      	str	r1, [r0, #4]
 8008cae:	d802      	bhi.n	8008cb6 <_calloc_r+0x2e>
 8008cb0:	f100 0308 	add.w	r3, r0, #8
 8008cb4:	e00b      	b.n	8008cce <_calloc_r+0x46>
 8008cb6:	2a24      	cmp	r2, #36	; 0x24
 8008cb8:	6081      	str	r1, [r0, #8]
 8008cba:	60c1      	str	r1, [r0, #12]
 8008cbc:	bf11      	iteee	ne
 8008cbe:	f100 0310 	addne.w	r3, r0, #16
 8008cc2:	6101      	streq	r1, [r0, #16]
 8008cc4:	f100 0318 	addeq.w	r3, r0, #24
 8008cc8:	6141      	streq	r1, [r0, #20]
 8008cca:	e000      	b.n	8008cce <_calloc_r+0x46>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	609a      	str	r2, [r3, #8]
 8008cd6:	e002      	b.n	8008cde <_calloc_r+0x56>
 8008cd8:	2100      	movs	r1, #0
 8008cda:	f7fa ff6d 	bl	8003bb8 <memset>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	bd10      	pop	{r4, pc}
	...

08008ce4 <_close_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4c06      	ldr	r4, [pc, #24]	; (8008d00 <_close_r+0x1c>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4605      	mov	r5, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	f7fa fb48 	bl	8003384 <_close>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_close_r+0x1a>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_close_r+0x1a>
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	200006dc 	.word	0x200006dc

08008d04 <_fclose_r>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	b909      	cbnz	r1, 8008d10 <_fclose_r+0xc>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	b118      	cbz	r0, 8008d1a <_fclose_r+0x16>
 8008d12:	6983      	ldr	r3, [r0, #24]
 8008d14:	b90b      	cbnz	r3, 8008d1a <_fclose_r+0x16>
 8008d16:	f7fd fbd7 	bl	80064c8 <__sinit>
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <_fclose_r+0x98>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	d101      	bne.n	8008d24 <_fclose_r+0x20>
 8008d20:	686c      	ldr	r4, [r5, #4]
 8008d22:	e008      	b.n	8008d36 <_fclose_r+0x32>
 8008d24:	4b1e      	ldr	r3, [pc, #120]	; (8008da0 <_fclose_r+0x9c>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d101      	bne.n	8008d2e <_fclose_r+0x2a>
 8008d2a:	68ac      	ldr	r4, [r5, #8]
 8008d2c:	e003      	b.n	8008d36 <_fclose_r+0x32>
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <_fclose_r+0xa0>)
 8008d30:	429c      	cmp	r4, r3
 8008d32:	bf08      	it	eq
 8008d34:	68ec      	ldreq	r4, [r5, #12]
 8008d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0e6      	beq.n	8008d0c <_fclose_r+0x8>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 f831 	bl	8008da8 <__sflush_r>
 8008d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b133      	cbz	r3, 8008d5a <_fclose_r+0x56>
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	4628      	mov	r0, r5
 8008d50:	4798      	blx	r3
 8008d52:	2800      	cmp	r0, #0
 8008d54:	bfb8      	it	lt
 8008d56:	f04f 36ff 	movlt.w	r6, #4294967295
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	061b      	lsls	r3, r3, #24
 8008d5e:	d503      	bpl.n	8008d68 <_fclose_r+0x64>
 8008d60:	6921      	ldr	r1, [r4, #16]
 8008d62:	4628      	mov	r0, r5
 8008d64:	f7fa fc24 	bl	80035b0 <_free_r>
 8008d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d6a:	b141      	cbz	r1, 8008d7e <_fclose_r+0x7a>
 8008d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d70:	4299      	cmp	r1, r3
 8008d72:	d002      	beq.n	8008d7a <_fclose_r+0x76>
 8008d74:	4628      	mov	r0, r5
 8008d76:	f7fa fc1b 	bl	80035b0 <_free_r>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8008d7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d80:	b121      	cbz	r1, 8008d8c <_fclose_r+0x88>
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7fa fc14 	bl	80035b0 <_free_r>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	64a3      	str	r3, [r4, #72]	; 0x48
 8008d8c:	f7fd fc0c 	bl	80065a8 <__sfp_lock_acquire>
 8008d90:	2300      	movs	r3, #0
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	f7fd fc09 	bl	80065aa <__sfp_lock_release>
 8008d98:	4630      	mov	r0, r6
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	080099b8 	.word	0x080099b8
 8008da0:	080099d8 	.word	0x080099d8
 8008da4:	080099f8 	.word	0x080099f8

08008da8 <__sflush_r>:
 8008da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dac:	b293      	uxth	r3, r2
 8008dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db2:	4605      	mov	r5, r0
 8008db4:	0718      	lsls	r0, r3, #28
 8008db6:	460c      	mov	r4, r1
 8008db8:	d460      	bmi.n	8008e7c <__sflush_r+0xd4>
 8008dba:	684b      	ldr	r3, [r1, #4]
 8008dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	818a      	strh	r2, [r1, #12]
 8008dc4:	dc02      	bgt.n	8008dcc <__sflush_r+0x24>
 8008dc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd17      	ble.n	8008dfc <__sflush_r+0x54>
 8008dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dce:	b1ae      	cbz	r6, 8008dfc <__sflush_r+0x54>
 8008dd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	b292      	uxth	r2, r2
 8008dd8:	682f      	ldr	r7, [r5, #0]
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	b10a      	cbz	r2, 8008de2 <__sflush_r+0x3a>
 8008dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008de0:	e015      	b.n	8008e0e <__sflush_r+0x66>
 8008de2:	6a21      	ldr	r1, [r4, #32]
 8008de4:	2301      	movs	r3, #1
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b0      	blx	r6
 8008dea:	1c41      	adds	r1, r0, #1
 8008dec:	d10f      	bne.n	8008e0e <__sflush_r+0x66>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b16b      	cbz	r3, 8008e0e <__sflush_r+0x66>
 8008df2:	2b1d      	cmp	r3, #29
 8008df4:	d001      	beq.n	8008dfa <__sflush_r+0x52>
 8008df6:	2b16      	cmp	r3, #22
 8008df8:	d103      	bne.n	8008e02 <__sflush_r+0x5a>
 8008dfa:	602f      	str	r7, [r5, #0]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	075a      	lsls	r2, r3, #29
 8008e12:	d505      	bpl.n	8008e20 <__sflush_r+0x78>
 8008e14:	6863      	ldr	r3, [r4, #4]
 8008e16:	1ac0      	subs	r0, r0, r3
 8008e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e1a:	b10b      	cbz	r3, 8008e20 <__sflush_r+0x78>
 8008e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e1e:	1ac0      	subs	r0, r0, r3
 8008e20:	2300      	movs	r3, #0
 8008e22:	4602      	mov	r2, r0
 8008e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e26:	6a21      	ldr	r1, [r4, #32]
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b0      	blx	r6
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	d106      	bne.n	8008e40 <__sflush_r+0x98>
 8008e32:	6829      	ldr	r1, [r5, #0]
 8008e34:	291d      	cmp	r1, #29
 8008e36:	d83e      	bhi.n	8008eb6 <__sflush_r+0x10e>
 8008e38:	4a22      	ldr	r2, [pc, #136]	; (8008ec4 <__sflush_r+0x11c>)
 8008e3a:	40ca      	lsrs	r2, r1
 8008e3c:	07d6      	lsls	r6, r2, #31
 8008e3e:	d53a      	bpl.n	8008eb6 <__sflush_r+0x10e>
 8008e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e44:	b21b      	sxth	r3, r3
 8008e46:	2200      	movs	r2, #0
 8008e48:	6062      	str	r2, [r4, #4]
 8008e4a:	04d9      	lsls	r1, r3, #19
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	d504      	bpl.n	8008e5e <__sflush_r+0xb6>
 8008e54:	1c42      	adds	r2, r0, #1
 8008e56:	d101      	bne.n	8008e5c <__sflush_r+0xb4>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b903      	cbnz	r3, 8008e5e <__sflush_r+0xb6>
 8008e5c:	6560      	str	r0, [r4, #84]	; 0x54
 8008e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e60:	602f      	str	r7, [r5, #0]
 8008e62:	2900      	cmp	r1, #0
 8008e64:	d0ca      	beq.n	8008dfc <__sflush_r+0x54>
 8008e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e6a:	4299      	cmp	r1, r3
 8008e6c:	d002      	beq.n	8008e74 <__sflush_r+0xcc>
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f7fa fb9e 	bl	80035b0 <_free_r>
 8008e74:	2000      	movs	r0, #0
 8008e76:	6360      	str	r0, [r4, #52]	; 0x34
 8008e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7c:	690f      	ldr	r7, [r1, #16]
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	d0bc      	beq.n	8008dfc <__sflush_r+0x54>
 8008e82:	079b      	lsls	r3, r3, #30
 8008e84:	680e      	ldr	r6, [r1, #0]
 8008e86:	bf08      	it	eq
 8008e88:	694b      	ldreq	r3, [r1, #20]
 8008e8a:	600f      	str	r7, [r1, #0]
 8008e8c:	bf18      	it	ne
 8008e8e:	2300      	movne	r3, #0
 8008e90:	ebc7 0806 	rsb	r8, r7, r6
 8008e94:	608b      	str	r3, [r1, #8]
 8008e96:	e002      	b.n	8008e9e <__sflush_r+0xf6>
 8008e98:	4407      	add	r7, r0
 8008e9a:	ebc0 0808 	rsb	r8, r0, r8
 8008e9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ea2:	ddab      	ble.n	8008dfc <__sflush_r+0x54>
 8008ea4:	4643      	mov	r3, r8
 8008ea6:	463a      	mov	r2, r7
 8008ea8:	6a21      	ldr	r1, [r4, #32]
 8008eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	dcf1      	bgt.n	8008e98 <__sflush_r+0xf0>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	20400001 	.word	0x20400001

08008ec8 <_fflush_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	690b      	ldr	r3, [r1, #16]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	b1db      	cbz	r3, 8008f0a <_fflush_r+0x42>
 8008ed2:	b118      	cbz	r0, 8008edc <_fflush_r+0x14>
 8008ed4:	6983      	ldr	r3, [r0, #24]
 8008ed6:	b90b      	cbnz	r3, 8008edc <_fflush_r+0x14>
 8008ed8:	f7fd faf6 	bl	80064c8 <__sinit>
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <_fflush_r+0x48>)
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d101      	bne.n	8008ee6 <_fflush_r+0x1e>
 8008ee2:	686c      	ldr	r4, [r5, #4]
 8008ee4:	e008      	b.n	8008ef8 <_fflush_r+0x30>
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <_fflush_r+0x4c>)
 8008ee8:	429c      	cmp	r4, r3
 8008eea:	d101      	bne.n	8008ef0 <_fflush_r+0x28>
 8008eec:	68ac      	ldr	r4, [r5, #8]
 8008eee:	e003      	b.n	8008ef8 <_fflush_r+0x30>
 8008ef0:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <_fflush_r+0x50>)
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	bf08      	it	eq
 8008ef6:	68ec      	ldreq	r4, [r5, #12]
 8008ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efc:	b12b      	cbz	r3, 8008f0a <_fflush_r+0x42>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4628      	mov	r0, r5
 8008f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f06:	f7ff bf4f 	b.w	8008da8 <__sflush_r>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	bf00      	nop
 8008f10:	080099b8 	.word	0x080099b8
 8008f14:	080099d8 	.word	0x080099d8
 8008f18:	080099f8 	.word	0x080099f8

08008f1c <fflush>:
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	b920      	cbnz	r0, 8008f2a <fflush+0xe>
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <fflush+0x18>)
 8008f22:	4905      	ldr	r1, [pc, #20]	; (8008f38 <fflush+0x1c>)
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f7fd bd07 	b.w	8006938 <_fwalk_reent>
 8008f2a:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <fflush+0x20>)
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f7ff bfcb 	b.w	8008ec8 <_fflush_r>
 8008f32:	bf00      	nop
 8008f34:	08009828 	.word	0x08009828
 8008f38:	08008ec9 	.word	0x08008ec9
 8008f3c:	200000f8 	.word	0x200000f8

08008f40 <rshift>:
 8008f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f42:	6906      	ldr	r6, [r0, #16]
 8008f44:	114b      	asrs	r3, r1, #5
 8008f46:	42b3      	cmp	r3, r6
 8008f48:	f100 0514 	add.w	r5, r0, #20
 8008f4c:	da27      	bge.n	8008f9e <rshift+0x5e>
 8008f4e:	f011 011f 	ands.w	r1, r1, #31
 8008f52:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8008f56:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008f5a:	d101      	bne.n	8008f60 <rshift+0x20>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	e016      	b.n	8008f8e <rshift+0x4e>
 8008f60:	1d14      	adds	r4, r2, #4
 8008f62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8008f66:	f1c1 0e20 	rsb	lr, r1, #32
 8008f6a:	40ca      	lsrs	r2, r1
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	42b4      	cmp	r4, r6
 8008f70:	d209      	bcs.n	8008f86 <rshift+0x46>
 8008f72:	6827      	ldr	r7, [r4, #0]
 8008f74:	fa07 f70e 	lsl.w	r7, r7, lr
 8008f78:	433a      	orrs	r2, r7
 8008f7a:	f843 2b04 	str.w	r2, [r3], #4
 8008f7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f82:	40ca      	lsrs	r2, r1
 8008f84:	e7f3      	b.n	8008f6e <rshift+0x2e>
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	b152      	cbz	r2, 8008fa0 <rshift+0x60>
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	e008      	b.n	8008fa0 <rshift+0x60>
 8008f8e:	42b2      	cmp	r2, r6
 8008f90:	460b      	mov	r3, r1
 8008f92:	d205      	bcs.n	8008fa0 <rshift+0x60>
 8008f94:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f98:	f841 3b04 	str.w	r3, [r1], #4
 8008f9c:	e7f7      	b.n	8008f8e <rshift+0x4e>
 8008f9e:	462b      	mov	r3, r5
 8008fa0:	1b5b      	subs	r3, r3, r5
 8008fa2:	109b      	asrs	r3, r3, #2
 8008fa4:	6103      	str	r3, [r0, #16]
 8008fa6:	b903      	cbnz	r3, 8008faa <rshift+0x6a>
 8008fa8:	6143      	str	r3, [r0, #20]
 8008faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fac <__hexdig_fun>:
 8008fac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fb0:	2b09      	cmp	r3, #9
 8008fb2:	d801      	bhi.n	8008fb8 <__hexdig_fun+0xc>
 8008fb4:	3820      	subs	r0, #32
 8008fb6:	e00a      	b.n	8008fce <__hexdig_fun+0x22>
 8008fb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fbc:	2b05      	cmp	r3, #5
 8008fbe:	d801      	bhi.n	8008fc4 <__hexdig_fun+0x18>
 8008fc0:	3847      	subs	r0, #71	; 0x47
 8008fc2:	e004      	b.n	8008fce <__hexdig_fun+0x22>
 8008fc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fc8:	2b05      	cmp	r3, #5
 8008fca:	d802      	bhi.n	8008fd2 <__hexdig_fun+0x26>
 8008fcc:	3827      	subs	r0, #39	; 0x27
 8008fce:	b2c0      	uxtb	r0, r0
 8008fd0:	4770      	bx	lr
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	4770      	bx	lr

08008fd6 <__gethex>:
 8008fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	b08b      	sub	sp, #44	; 0x2c
 8008fdc:	468a      	mov	sl, r1
 8008fde:	4690      	mov	r8, r2
 8008fe0:	9306      	str	r3, [sp, #24]
 8008fe2:	9002      	str	r0, [sp, #8]
 8008fe4:	f7fd fcde 	bl	80069a4 <_localeconv_r>
 8008fe8:	6803      	ldr	r3, [r0, #0]
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7f7 f8ef 	bl	80001d0 <strlen>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	9001      	str	r0, [sp, #4]
 8008ff6:	4403      	add	r3, r0
 8008ff8:	f04f 0b00 	mov.w	fp, #0
 8008ffc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	f8da 3000 	ldr.w	r3, [sl]
 8009006:	3302      	adds	r3, #2
 8009008:	461f      	mov	r7, r3
 800900a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800900e:	2830      	cmp	r0, #48	; 0x30
 8009010:	d102      	bne.n	8009018 <__gethex+0x42>
 8009012:	f10b 0b01 	add.w	fp, fp, #1
 8009016:	e7f7      	b.n	8009008 <__gethex+0x32>
 8009018:	f7ff ffc8 	bl	8008fac <__hexdig_fun>
 800901c:	4604      	mov	r4, r0
 800901e:	b9e0      	cbnz	r0, 800905a <__gethex+0x84>
 8009020:	9a01      	ldr	r2, [sp, #4]
 8009022:	9903      	ldr	r1, [sp, #12]
 8009024:	4638      	mov	r0, r7
 8009026:	f000 fb35 	bl	8009694 <strncmp>
 800902a:	2800      	cmp	r0, #0
 800902c:	d134      	bne.n	8009098 <__gethex+0xc2>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	5cf8      	ldrb	r0, [r7, r3]
 8009032:	18fe      	adds	r6, r7, r3
 8009034:	f7ff ffba 	bl	8008fac <__hexdig_fun>
 8009038:	b380      	cbz	r0, 800909c <__gethex+0xc6>
 800903a:	4633      	mov	r3, r6
 800903c:	7818      	ldrb	r0, [r3, #0]
 800903e:	2830      	cmp	r0, #48	; 0x30
 8009040:	461f      	mov	r7, r3
 8009042:	f103 0301 	add.w	r3, r3, #1
 8009046:	d0f9      	beq.n	800903c <__gethex+0x66>
 8009048:	f7ff ffb0 	bl	8008fac <__hexdig_fun>
 800904c:	fab0 f580 	clz	r5, r0
 8009050:	096d      	lsrs	r5, r5, #5
 8009052:	4634      	mov	r4, r6
 8009054:	f04f 0b01 	mov.w	fp, #1
 8009058:	e001      	b.n	800905e <__gethex+0x88>
 800905a:	2500      	movs	r5, #0
 800905c:	462c      	mov	r4, r5
 800905e:	463a      	mov	r2, r7
 8009060:	4616      	mov	r6, r2
 8009062:	3201      	adds	r2, #1
 8009064:	7830      	ldrb	r0, [r6, #0]
 8009066:	f7ff ffa1 	bl	8008fac <__hexdig_fun>
 800906a:	2800      	cmp	r0, #0
 800906c:	d1f8      	bne.n	8009060 <__gethex+0x8a>
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	9903      	ldr	r1, [sp, #12]
 8009072:	4630      	mov	r0, r6
 8009074:	f000 fb0e 	bl	8009694 <strncmp>
 8009078:	b950      	cbnz	r0, 8009090 <__gethex+0xba>
 800907a:	b954      	cbnz	r4, 8009092 <__gethex+0xbc>
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	18f4      	adds	r4, r6, r3
 8009080:	4622      	mov	r2, r4
 8009082:	4616      	mov	r6, r2
 8009084:	3201      	adds	r2, #1
 8009086:	7830      	ldrb	r0, [r6, #0]
 8009088:	f7ff ff90 	bl	8008fac <__hexdig_fun>
 800908c:	2800      	cmp	r0, #0
 800908e:	d1f8      	bne.n	8009082 <__gethex+0xac>
 8009090:	b134      	cbz	r4, 80090a0 <__gethex+0xca>
 8009092:	1ba4      	subs	r4, r4, r6
 8009094:	00a4      	lsls	r4, r4, #2
 8009096:	e003      	b.n	80090a0 <__gethex+0xca>
 8009098:	463e      	mov	r6, r7
 800909a:	e000      	b.n	800909e <__gethex+0xc8>
 800909c:	4604      	mov	r4, r0
 800909e:	2501      	movs	r5, #1
 80090a0:	7833      	ldrb	r3, [r6, #0]
 80090a2:	2b50      	cmp	r3, #80	; 0x50
 80090a4:	d001      	beq.n	80090aa <__gethex+0xd4>
 80090a6:	2b70      	cmp	r3, #112	; 0x70
 80090a8:	d12a      	bne.n	8009100 <__gethex+0x12a>
 80090aa:	7873      	ldrb	r3, [r6, #1]
 80090ac:	2b2b      	cmp	r3, #43	; 0x2b
 80090ae:	d008      	beq.n	80090c2 <__gethex+0xec>
 80090b0:	2b2d      	cmp	r3, #45	; 0x2d
 80090b2:	d003      	beq.n	80090bc <__gethex+0xe6>
 80090b4:	1c71      	adds	r1, r6, #1
 80090b6:	f04f 0900 	mov.w	r9, #0
 80090ba:	e005      	b.n	80090c8 <__gethex+0xf2>
 80090bc:	f04f 0901 	mov.w	r9, #1
 80090c0:	e001      	b.n	80090c6 <__gethex+0xf0>
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	1cb1      	adds	r1, r6, #2
 80090c8:	7808      	ldrb	r0, [r1, #0]
 80090ca:	f7ff ff6f 	bl	8008fac <__hexdig_fun>
 80090ce:	1e43      	subs	r3, r0, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b18      	cmp	r3, #24
 80090d4:	d814      	bhi.n	8009100 <__gethex+0x12a>
 80090d6:	f1a0 0210 	sub.w	r2, r0, #16
 80090da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090de:	f7ff ff65 	bl	8008fac <__hexdig_fun>
 80090e2:	1e43      	subs	r3, r0, #1
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b18      	cmp	r3, #24
 80090e8:	d804      	bhi.n	80090f4 <__gethex+0x11e>
 80090ea:	230a      	movs	r3, #10
 80090ec:	fb03 0202 	mla	r2, r3, r2, r0
 80090f0:	3a10      	subs	r2, #16
 80090f2:	e7f2      	b.n	80090da <__gethex+0x104>
 80090f4:	f1b9 0f00 	cmp.w	r9, #0
 80090f8:	d000      	beq.n	80090fc <__gethex+0x126>
 80090fa:	4252      	negs	r2, r2
 80090fc:	4414      	add	r4, r2
 80090fe:	e000      	b.n	8009102 <__gethex+0x12c>
 8009100:	4631      	mov	r1, r6
 8009102:	f8ca 1000 	str.w	r1, [sl]
 8009106:	b12d      	cbz	r5, 8009114 <__gethex+0x13e>
 8009108:	f1bb 0f00 	cmp.w	fp, #0
 800910c:	bf14      	ite	ne
 800910e:	2000      	movne	r0, #0
 8009110:	2006      	moveq	r0, #6
 8009112:	e17c      	b.n	800940e <__gethex+0x438>
 8009114:	1bf3      	subs	r3, r6, r7
 8009116:	3b01      	subs	r3, #1
 8009118:	4629      	mov	r1, r5
 800911a:	2b07      	cmp	r3, #7
 800911c:	dd02      	ble.n	8009124 <__gethex+0x14e>
 800911e:	3101      	adds	r1, #1
 8009120:	105b      	asrs	r3, r3, #1
 8009122:	e7fa      	b.n	800911a <__gethex+0x144>
 8009124:	9802      	ldr	r0, [sp, #8]
 8009126:	f7fd fca9 	bl	8006a7c <_Balloc>
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	f100 0a14 	add.w	sl, r0, #20
 8009130:	f04f 0900 	mov.w	r9, #0
 8009134:	f1c3 0301 	rsb	r3, r3, #1
 8009138:	4605      	mov	r5, r0
 800913a:	f8cd a010 	str.w	sl, [sp, #16]
 800913e:	46cb      	mov	fp, r9
 8009140:	9308      	str	r3, [sp, #32]
 8009142:	42b7      	cmp	r7, r6
 8009144:	d22f      	bcs.n	80091a6 <__gethex+0x1d0>
 8009146:	1e73      	subs	r3, r6, #1
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	9a07      	ldr	r2, [sp, #28]
 800914c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <__gethex+0x196>
 8009154:	f1bb 0f20 	cmp.w	fp, #32
 8009158:	d116      	bne.n	8009188 <__gethex+0x1b2>
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	f8c3 9000 	str.w	r9, [r3]
 8009160:	3304      	adds	r3, #4
 8009162:	f04f 0900 	mov.w	r9, #0
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	46cb      	mov	fp, r9
 800916a:	e00d      	b.n	8009188 <__gethex+0x1b2>
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	9a08      	ldr	r2, [sp, #32]
 8009170:	4413      	add	r3, r2
 8009172:	429f      	cmp	r7, r3
 8009174:	d8ee      	bhi.n	8009154 <__gethex+0x17e>
 8009176:	4618      	mov	r0, r3
 8009178:	9a01      	ldr	r2, [sp, #4]
 800917a:	9903      	ldr	r1, [sp, #12]
 800917c:	9309      	str	r3, [sp, #36]	; 0x24
 800917e:	f000 fa89 	bl	8009694 <strncmp>
 8009182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009184:	b168      	cbz	r0, 80091a2 <__gethex+0x1cc>
 8009186:	e7e5      	b.n	8009154 <__gethex+0x17e>
 8009188:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800918c:	f7ff ff0e 	bl	8008fac <__hexdig_fun>
 8009190:	f000 000f 	and.w	r0, r0, #15
 8009194:	fa00 f00b 	lsl.w	r0, r0, fp
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	ea49 0900 	orr.w	r9, r9, r0
 800919e:	f10b 0b04 	add.w	fp, fp, #4
 80091a2:	461e      	mov	r6, r3
 80091a4:	e7cd      	b.n	8009142 <__gethex+0x16c>
 80091a6:	9804      	ldr	r0, [sp, #16]
 80091a8:	f840 9b04 	str.w	r9, [r0], #4
 80091ac:	ebca 0000 	rsb	r0, sl, r0
 80091b0:	1080      	asrs	r0, r0, #2
 80091b2:	6128      	str	r0, [r5, #16]
 80091b4:	0147      	lsls	r7, r0, #5
 80091b6:	4648      	mov	r0, r9
 80091b8:	f7fd fd25 	bl	8006c06 <__hi0bits>
 80091bc:	f8d8 6000 	ldr.w	r6, [r8]
 80091c0:	1a38      	subs	r0, r7, r0
 80091c2:	42b0      	cmp	r0, r6
 80091c4:	dd26      	ble.n	8009214 <__gethex+0x23e>
 80091c6:	1b87      	subs	r7, r0, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7fe f823 	bl	8007216 <__any_on>
 80091d0:	b1c8      	cbz	r0, 8009206 <__gethex+0x230>
 80091d2:	1e7b      	subs	r3, r7, #1
 80091d4:	1159      	asrs	r1, r3, #5
 80091d6:	f003 021f 	and.w	r2, r3, #31
 80091da:	f04f 0901 	mov.w	r9, #1
 80091de:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80091e2:	fa09 f202 	lsl.w	r2, r9, r2
 80091e6:	420a      	tst	r2, r1
 80091e8:	d00e      	beq.n	8009208 <__gethex+0x232>
 80091ea:	454b      	cmp	r3, r9
 80091ec:	dc02      	bgt.n	80091f4 <__gethex+0x21e>
 80091ee:	f04f 0902 	mov.w	r9, #2
 80091f2:	e009      	b.n	8009208 <__gethex+0x232>
 80091f4:	1eb9      	subs	r1, r7, #2
 80091f6:	4628      	mov	r0, r5
 80091f8:	f7fe f80d 	bl	8007216 <__any_on>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0f6      	beq.n	80091ee <__gethex+0x218>
 8009200:	f04f 0903 	mov.w	r9, #3
 8009204:	e000      	b.n	8009208 <__gethex+0x232>
 8009206:	4681      	mov	r9, r0
 8009208:	4639      	mov	r1, r7
 800920a:	4628      	mov	r0, r5
 800920c:	f7ff fe98 	bl	8008f40 <rshift>
 8009210:	443c      	add	r4, r7
 8009212:	e00c      	b.n	800922e <__gethex+0x258>
 8009214:	da09      	bge.n	800922a <__gethex+0x254>
 8009216:	1a37      	subs	r7, r6, r0
 8009218:	4629      	mov	r1, r5
 800921a:	463a      	mov	r2, r7
 800921c:	9802      	ldr	r0, [sp, #8]
 800921e:	f7fd fe27 	bl	8006e70 <__lshift>
 8009222:	1be4      	subs	r4, r4, r7
 8009224:	4605      	mov	r5, r0
 8009226:	f100 0a14 	add.w	sl, r0, #20
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009232:	429c      	cmp	r4, r3
 8009234:	dd08      	ble.n	8009248 <__gethex+0x272>
 8009236:	9802      	ldr	r0, [sp, #8]
 8009238:	4629      	mov	r1, r5
 800923a:	f7fd fc54 	bl	8006ae6 <_Bfree>
 800923e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009240:	2300      	movs	r3, #0
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	20a3      	movs	r0, #163	; 0xa3
 8009246:	e0e2      	b.n	800940e <__gethex+0x438>
 8009248:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800924c:	4284      	cmp	r4, r0
 800924e:	da53      	bge.n	80092f8 <__gethex+0x322>
 8009250:	1b04      	subs	r4, r0, r4
 8009252:	42a6      	cmp	r6, r4
 8009254:	dc2e      	bgt.n	80092b4 <__gethex+0x2de>
 8009256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d01a      	beq.n	8009294 <__gethex+0x2be>
 800925e:	2b03      	cmp	r3, #3
 8009260:	d01c      	beq.n	800929c <__gethex+0x2c6>
 8009262:	2b01      	cmp	r3, #1
 8009264:	d11d      	bne.n	80092a2 <__gethex+0x2cc>
 8009266:	42a6      	cmp	r6, r4
 8009268:	d11b      	bne.n	80092a2 <__gethex+0x2cc>
 800926a:	2e01      	cmp	r6, #1
 800926c:	dc0b      	bgt.n	8009286 <__gethex+0x2b0>
 800926e:	9a06      	ldr	r2, [sp, #24]
 8009270:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	2301      	movs	r3, #1
 8009278:	612b      	str	r3, [r5, #16]
 800927a:	f8ca 3000 	str.w	r3, [sl]
 800927e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009280:	2062      	movs	r0, #98	; 0x62
 8009282:	601d      	str	r5, [r3, #0]
 8009284:	e0c3      	b.n	800940e <__gethex+0x438>
 8009286:	1e71      	subs	r1, r6, #1
 8009288:	4628      	mov	r0, r5
 800928a:	f7fd ffc4 	bl	8007216 <__any_on>
 800928e:	2800      	cmp	r0, #0
 8009290:	d1ed      	bne.n	800926e <__gethex+0x298>
 8009292:	e006      	b.n	80092a2 <__gethex+0x2cc>
 8009294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0e9      	beq.n	800926e <__gethex+0x298>
 800929a:	e002      	b.n	80092a2 <__gethex+0x2cc>
 800929c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <__gethex+0x298>
 80092a2:	9802      	ldr	r0, [sp, #8]
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7fd fc1e 	bl	8006ae6 <_Bfree>
 80092aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ac:	2300      	movs	r3, #0
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	2050      	movs	r0, #80	; 0x50
 80092b2:	e0ac      	b.n	800940e <__gethex+0x438>
 80092b4:	1e67      	subs	r7, r4, #1
 80092b6:	f1b9 0f00 	cmp.w	r9, #0
 80092ba:	d106      	bne.n	80092ca <__gethex+0x2f4>
 80092bc:	b13f      	cbz	r7, 80092ce <__gethex+0x2f8>
 80092be:	4639      	mov	r1, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7fd ffa8 	bl	8007216 <__any_on>
 80092c6:	4681      	mov	r9, r0
 80092c8:	e001      	b.n	80092ce <__gethex+0x2f8>
 80092ca:	f04f 0901 	mov.w	r9, #1
 80092ce:	117a      	asrs	r2, r7, #5
 80092d0:	2301      	movs	r3, #1
 80092d2:	f007 071f 	and.w	r7, r7, #31
 80092d6:	fa03 f707 	lsl.w	r7, r3, r7
 80092da:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80092de:	4621      	mov	r1, r4
 80092e0:	421f      	tst	r7, r3
 80092e2:	4628      	mov	r0, r5
 80092e4:	bf18      	it	ne
 80092e6:	f049 0902 	orrne.w	r9, r9, #2
 80092ea:	1b36      	subs	r6, r6, r4
 80092ec:	f7ff fe28 	bl	8008f40 <rshift>
 80092f0:	2702      	movs	r7, #2
 80092f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80092f6:	e000      	b.n	80092fa <__gethex+0x324>
 80092f8:	2701      	movs	r7, #1
 80092fa:	f1b9 0f00 	cmp.w	r9, #0
 80092fe:	f000 8081 	beq.w	8009404 <__gethex+0x42e>
 8009302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d00e      	beq.n	8009328 <__gethex+0x352>
 800930a:	2b03      	cmp	r3, #3
 800930c:	d010      	beq.n	8009330 <__gethex+0x35a>
 800930e:	2b01      	cmp	r3, #1
 8009310:	d176      	bne.n	8009400 <__gethex+0x42a>
 8009312:	f019 0f02 	tst.w	r9, #2
 8009316:	d073      	beq.n	8009400 <__gethex+0x42a>
 8009318:	f8da 0000 	ldr.w	r0, [sl]
 800931c:	ea49 0900 	orr.w	r9, r9, r0
 8009320:	f019 0f01 	tst.w	r9, #1
 8009324:	d107      	bne.n	8009336 <__gethex+0x360>
 8009326:	e06b      	b.n	8009400 <__gethex+0x42a>
 8009328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800932a:	f1c3 0301 	rsb	r3, r3, #1
 800932e:	9315      	str	r3, [sp, #84]	; 0x54
 8009330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009332:	2b00      	cmp	r3, #0
 8009334:	d064      	beq.n	8009400 <__gethex+0x42a>
 8009336:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800933a:	f105 0314 	add.w	r3, r5, #20
 800933e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8009342:	eb03 0109 	add.w	r1, r3, r9
 8009346:	2000      	movs	r0, #0
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800934e:	d002      	beq.n	8009356 <__gethex+0x380>
 8009350:	3201      	adds	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e020      	b.n	8009398 <__gethex+0x3c2>
 8009356:	f843 0b04 	str.w	r0, [r3], #4
 800935a:	4299      	cmp	r1, r3
 800935c:	d8f4      	bhi.n	8009348 <__gethex+0x372>
 800935e:	68ab      	ldr	r3, [r5, #8]
 8009360:	459a      	cmp	sl, r3
 8009362:	db12      	blt.n	800938a <__gethex+0x3b4>
 8009364:	6869      	ldr	r1, [r5, #4]
 8009366:	9802      	ldr	r0, [sp, #8]
 8009368:	3101      	adds	r1, #1
 800936a:	f7fd fb87 	bl	8006a7c <_Balloc>
 800936e:	692a      	ldr	r2, [r5, #16]
 8009370:	3202      	adds	r2, #2
 8009372:	f105 010c 	add.w	r1, r5, #12
 8009376:	4683      	mov	fp, r0
 8009378:	0092      	lsls	r2, r2, #2
 800937a:	300c      	adds	r0, #12
 800937c:	f7fd fb58 	bl	8006a30 <memcpy>
 8009380:	4629      	mov	r1, r5
 8009382:	9802      	ldr	r0, [sp, #8]
 8009384:	f7fd fbaf 	bl	8006ae6 <_Bfree>
 8009388:	465d      	mov	r5, fp
 800938a:	692b      	ldr	r3, [r5, #16]
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009392:	612a      	str	r2, [r5, #16]
 8009394:	2201      	movs	r2, #1
 8009396:	615a      	str	r2, [r3, #20]
 8009398:	2f02      	cmp	r7, #2
 800939a:	f105 0214 	add.w	r2, r5, #20
 800939e:	d111      	bne.n	80093c4 <__gethex+0x3ee>
 80093a0:	f8d8 3000 	ldr.w	r3, [r8]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	429e      	cmp	r6, r3
 80093a8:	d127      	bne.n	80093fa <__gethex+0x424>
 80093aa:	1171      	asrs	r1, r6, #5
 80093ac:	2301      	movs	r3, #1
 80093ae:	f006 061f 	and.w	r6, r6, #31
 80093b2:	fa03 f606 	lsl.w	r6, r3, r6
 80093b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093ba:	421e      	tst	r6, r3
 80093bc:	bf0c      	ite	eq
 80093be:	2702      	moveq	r7, #2
 80093c0:	2701      	movne	r7, #1
 80093c2:	e01a      	b.n	80093fa <__gethex+0x424>
 80093c4:	692b      	ldr	r3, [r5, #16]
 80093c6:	459a      	cmp	sl, r3
 80093c8:	da0a      	bge.n	80093e0 <__gethex+0x40a>
 80093ca:	2101      	movs	r1, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff fdb7 	bl	8008f40 <rshift>
 80093d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093d6:	3401      	adds	r4, #1
 80093d8:	429c      	cmp	r4, r3
 80093da:	f73f af2c 	bgt.w	8009236 <__gethex+0x260>
 80093de:	e00b      	b.n	80093f8 <__gethex+0x422>
 80093e0:	f016 061f 	ands.w	r6, r6, #31
 80093e4:	d008      	beq.n	80093f8 <__gethex+0x422>
 80093e6:	4491      	add	r9, r2
 80093e8:	f1c6 0620 	rsb	r6, r6, #32
 80093ec:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80093f0:	f7fd fc09 	bl	8006c06 <__hi0bits>
 80093f4:	42b0      	cmp	r0, r6
 80093f6:	dbe8      	blt.n	80093ca <__gethex+0x3f4>
 80093f8:	2701      	movs	r7, #1
 80093fa:	f047 0720 	orr.w	r7, r7, #32
 80093fe:	e001      	b.n	8009404 <__gethex+0x42e>
 8009400:	f047 0710 	orr.w	r7, r7, #16
 8009404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009406:	601d      	str	r5, [r3, #0]
 8009408:	9b06      	ldr	r3, [sp, #24]
 800940a:	4638      	mov	r0, r7
 800940c:	601c      	str	r4, [r3, #0]
 800940e:	b00b      	add	sp, #44	; 0x2c
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009414 <L_shift>:
 8009414:	f1c2 0208 	rsb	r2, r2, #8
 8009418:	0092      	lsls	r2, r2, #2
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	f1c2 0620 	rsb	r6, r2, #32
 8009420:	6843      	ldr	r3, [r0, #4]
 8009422:	6805      	ldr	r5, [r0, #0]
 8009424:	fa03 f406 	lsl.w	r4, r3, r6
 8009428:	432c      	orrs	r4, r5
 800942a:	40d3      	lsrs	r3, r2
 800942c:	6004      	str	r4, [r0, #0]
 800942e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009432:	4288      	cmp	r0, r1
 8009434:	d3f4      	bcc.n	8009420 <L_shift+0xc>
 8009436:	bd70      	pop	{r4, r5, r6, pc}

08009438 <__match>:
 8009438:	b530      	push	{r4, r5, lr}
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009440:	3301      	adds	r3, #1
 8009442:	b14c      	cbz	r4, 8009458 <__match+0x20>
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800944a:	2d19      	cmp	r5, #25
 800944c:	bf98      	it	ls
 800944e:	3220      	addls	r2, #32
 8009450:	42a2      	cmp	r2, r4
 8009452:	d0f3      	beq.n	800943c <__match+0x4>
 8009454:	2000      	movs	r0, #0
 8009456:	bd30      	pop	{r4, r5, pc}
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	2001      	movs	r0, #1
 800945c:	bd30      	pop	{r4, r5, pc}

0800945e <__hexnan>:
 800945e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009462:	680b      	ldr	r3, [r1, #0]
 8009464:	f8d0 b000 	ldr.w	fp, [r0]
 8009468:	115e      	asrs	r6, r3, #5
 800946a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800946e:	f013 031f 	ands.w	r3, r3, #31
 8009472:	b085      	sub	sp, #20
 8009474:	bf18      	it	ne
 8009476:	3604      	addne	r6, #4
 8009478:	1f35      	subs	r5, r6, #4
 800947a:	4617      	mov	r7, r2
 800947c:	2200      	movs	r2, #0
 800947e:	4682      	mov	sl, r0
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	f846 2c04 	str.w	r2, [r6, #-4]
 8009486:	46a8      	mov	r8, r5
 8009488:	462c      	mov	r4, r5
 800948a:	9200      	str	r2, [sp, #0]
 800948c:	4691      	mov	r9, r2
 800948e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8009492:	2900      	cmp	r1, #0
 8009494:	d03c      	beq.n	8009510 <__hexnan+0xb2>
 8009496:	4608      	mov	r0, r1
 8009498:	9203      	str	r2, [sp, #12]
 800949a:	9102      	str	r1, [sp, #8]
 800949c:	f7ff fd86 	bl	8008fac <__hexdig_fun>
 80094a0:	9a03      	ldr	r2, [sp, #12]
 80094a2:	bb00      	cbnz	r0, 80094e6 <__hexnan+0x88>
 80094a4:	9902      	ldr	r1, [sp, #8]
 80094a6:	2920      	cmp	r1, #32
 80094a8:	d816      	bhi.n	80094d8 <__hexnan+0x7a>
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	4599      	cmp	r9, r3
 80094ae:	ddee      	ble.n	800948e <__hexnan+0x30>
 80094b0:	4544      	cmp	r4, r8
 80094b2:	d205      	bcs.n	80094c0 <__hexnan+0x62>
 80094b4:	2a07      	cmp	r2, #7
 80094b6:	dc03      	bgt.n	80094c0 <__hexnan+0x62>
 80094b8:	4641      	mov	r1, r8
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ffaa 	bl	8009414 <L_shift>
 80094c0:	42bc      	cmp	r4, r7
 80094c2:	d923      	bls.n	800950c <__hexnan+0xae>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f1a4 0804 	sub.w	r8, r4, #4
 80094ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80094ce:	f8cd 9000 	str.w	r9, [sp]
 80094d2:	4644      	mov	r4, r8
 80094d4:	461a      	mov	r2, r3
 80094d6:	e7da      	b.n	800948e <__hexnan+0x30>
 80094d8:	2929      	cmp	r1, #41	; 0x29
 80094da:	d148      	bne.n	800956e <__hexnan+0x110>
 80094dc:	f10b 0301 	add.w	r3, fp, #1
 80094e0:	f8ca 3000 	str.w	r3, [sl]
 80094e4:	e014      	b.n	8009510 <__hexnan+0xb2>
 80094e6:	3201      	adds	r2, #1
 80094e8:	2a08      	cmp	r2, #8
 80094ea:	f109 0901 	add.w	r9, r9, #1
 80094ee:	dd06      	ble.n	80094fe <__hexnan+0xa0>
 80094f0:	42bc      	cmp	r4, r7
 80094f2:	d9cc      	bls.n	800948e <__hexnan+0x30>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	3c04      	subs	r4, #4
 80094fe:	6821      	ldr	r1, [r4, #0]
 8009500:	f000 000f 	and.w	r0, r0, #15
 8009504:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8009508:	6020      	str	r0, [r4, #0]
 800950a:	e7c0      	b.n	800948e <__hexnan+0x30>
 800950c:	2208      	movs	r2, #8
 800950e:	e7be      	b.n	800948e <__hexnan+0x30>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	d02b      	beq.n	800956e <__hexnan+0x110>
 8009516:	4544      	cmp	r4, r8
 8009518:	d205      	bcs.n	8009526 <__hexnan+0xc8>
 800951a:	2a07      	cmp	r2, #7
 800951c:	dc03      	bgt.n	8009526 <__hexnan+0xc8>
 800951e:	4641      	mov	r1, r8
 8009520:	4620      	mov	r0, r4
 8009522:	f7ff ff77 	bl	8009414 <L_shift>
 8009526:	42bc      	cmp	r4, r7
 8009528:	d90c      	bls.n	8009544 <__hexnan+0xe6>
 800952a:	463b      	mov	r3, r7
 800952c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009530:	f843 2b04 	str.w	r2, [r3], #4
 8009534:	42a5      	cmp	r5, r4
 8009536:	d2f9      	bcs.n	800952c <__hexnan+0xce>
 8009538:	2200      	movs	r2, #0
 800953a:	f843 2b04 	str.w	r2, [r3], #4
 800953e:	429d      	cmp	r5, r3
 8009540:	d2fb      	bcs.n	800953a <__hexnan+0xdc>
 8009542:	e00b      	b.n	800955c <__hexnan+0xfe>
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	b14b      	cbz	r3, 800955c <__hexnan+0xfe>
 8009548:	f1c3 0220 	rsb	r2, r3, #32
 800954c:	f04f 33ff 	mov.w	r3, #4294967295
 8009550:	40d3      	lsrs	r3, r2
 8009552:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009556:	4013      	ands	r3, r2
 8009558:	f846 3c04 	str.w	r3, [r6, #-4]
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b943      	cbnz	r3, 8009572 <__hexnan+0x114>
 8009560:	42bd      	cmp	r5, r7
 8009562:	d102      	bne.n	800956a <__hexnan+0x10c>
 8009564:	2301      	movs	r3, #1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	e003      	b.n	8009572 <__hexnan+0x114>
 800956a:	3d04      	subs	r5, #4
 800956c:	e7f6      	b.n	800955c <__hexnan+0xfe>
 800956e:	2004      	movs	r0, #4
 8009570:	e000      	b.n	8009574 <__hexnan+0x116>
 8009572:	2005      	movs	r0, #5
 8009574:	b005      	add	sp, #20
 8009576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800957c <_lseek_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4c07      	ldr	r4, [pc, #28]	; (800959c <_lseek_r+0x20>)
 8009580:	4605      	mov	r5, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	6022      	str	r2, [r4, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f9 ff12 	bl	80033b4 <_lseek>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_lseek_r+0x1e>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b103      	cbz	r3, 800959a <_lseek_r+0x1e>
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200006dc 	.word	0x200006dc

080095a0 <__swhatbuf_r>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	460e      	mov	r6, r1
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	b090      	sub	sp, #64	; 0x40
 80095ac:	4614      	mov	r4, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	da0a      	bge.n	80095c8 <__swhatbuf_r+0x28>
 80095b2:	89b3      	ldrh	r3, [r6, #12]
 80095b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b8:	2200      	movs	r2, #0
 80095ba:	b298      	uxth	r0, r3
 80095bc:	602a      	str	r2, [r5, #0]
 80095be:	b1b0      	cbz	r0, 80095ee <__swhatbuf_r+0x4e>
 80095c0:	2340      	movs	r3, #64	; 0x40
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	4610      	mov	r0, r2
 80095c6:	e015      	b.n	80095f4 <__swhatbuf_r+0x54>
 80095c8:	aa01      	add	r2, sp, #4
 80095ca:	f000 f879 	bl	80096c0 <_fstat_r>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	dbef      	blt.n	80095b2 <__swhatbuf_r+0x12>
 80095d2:	9a02      	ldr	r2, [sp, #8]
 80095d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095dc:	425a      	negs	r2, r3
 80095de:	415a      	adcs	r2, r3
 80095e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	e002      	b.n	80095f4 <__swhatbuf_r+0x54>
 80095ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	b010      	add	sp, #64	; 0x40
 80095f6:	bd70      	pop	{r4, r5, r6, pc}

080095f8 <__smakebuf_r>:
 80095f8:	898b      	ldrh	r3, [r1, #12]
 80095fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095fc:	079e      	lsls	r6, r3, #30
 80095fe:	4605      	mov	r5, r0
 8009600:	460c      	mov	r4, r1
 8009602:	d410      	bmi.n	8009626 <__smakebuf_r+0x2e>
 8009604:	ab01      	add	r3, sp, #4
 8009606:	466a      	mov	r2, sp
 8009608:	f7ff ffca 	bl	80095a0 <__swhatbuf_r>
 800960c:	9900      	ldr	r1, [sp, #0]
 800960e:	4606      	mov	r6, r0
 8009610:	4628      	mov	r0, r5
 8009612:	f7fa f8b1 	bl	8003778 <_malloc_r>
 8009616:	b968      	cbnz	r0, 8009634 <__smakebuf_r+0x3c>
 8009618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800961c:	059a      	lsls	r2, r3, #22
 800961e:	d422      	bmi.n	8009666 <__smakebuf_r+0x6e>
 8009620:	f043 0302 	orr.w	r3, r3, #2
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	2301      	movs	r3, #1
 8009630:	6163      	str	r3, [r4, #20]
 8009632:	e018      	b.n	8009666 <__smakebuf_r+0x6e>
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <__smakebuf_r+0x74>)
 8009636:	62ab      	str	r3, [r5, #40]	; 0x28
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	6020      	str	r0, [r4, #0]
 800963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	9b00      	ldr	r3, [sp, #0]
 8009644:	6163      	str	r3, [r4, #20]
 8009646:	9b01      	ldr	r3, [sp, #4]
 8009648:	6120      	str	r0, [r4, #16]
 800964a:	b14b      	cbz	r3, 8009660 <__smakebuf_r+0x68>
 800964c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009650:	4628      	mov	r0, r5
 8009652:	f000 f847 	bl	80096e4 <_isatty_r>
 8009656:	b118      	cbz	r0, 8009660 <__smakebuf_r+0x68>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	89a0      	ldrh	r0, [r4, #12]
 8009662:	4330      	orrs	r0, r6
 8009664:	81a0      	strh	r0, [r4, #12]
 8009666:	b002      	add	sp, #8
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	bf00      	nop
 800966c:	08006449 	.word	0x08006449

08009670 <_read_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4c07      	ldr	r4, [pc, #28]	; (8009690 <_read_r+0x20>)
 8009674:	4605      	mov	r5, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f9 fea0 	bl	80033c4 <_read>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_read_r+0x1e>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	b103      	cbz	r3, 800968e <_read_r+0x1e>
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200006dc 	.word	0x200006dc

08009694 <strncmp>:
 8009694:	b530      	push	{r4, r5, lr}
 8009696:	b182      	cbz	r2, 80096ba <strncmp+0x26>
 8009698:	1e45      	subs	r5, r0, #1
 800969a:	3901      	subs	r1, #1
 800969c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80096a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	d106      	bne.n	80096b6 <strncmp+0x22>
 80096a8:	43ec      	mvns	r4, r5
 80096aa:	4414      	add	r4, r2
 80096ac:	42e0      	cmn	r0, r4
 80096ae:	d001      	beq.n	80096b4 <strncmp+0x20>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f3      	bne.n	800969c <strncmp+0x8>
 80096b4:	461c      	mov	r4, r3
 80096b6:	1b18      	subs	r0, r3, r4
 80096b8:	bd30      	pop	{r4, r5, pc}
 80096ba:	4610      	mov	r0, r2
 80096bc:	bd30      	pop	{r4, r5, pc}
	...

080096c0 <_fstat_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4c07      	ldr	r4, [pc, #28]	; (80096e0 <_fstat_r+0x20>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4605      	mov	r5, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	f7f9 fe61 	bl	8003394 <_fstat>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_fstat_r+0x1c>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_fstat_r+0x1c>
 80096da:	602b      	str	r3, [r5, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	200006dc 	.word	0x200006dc

080096e4 <_isatty_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4c06      	ldr	r4, [pc, #24]	; (8009700 <_isatty_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4605      	mov	r5, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	f7f9 fe58 	bl	80033a4 <_isatty>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_isatty_r+0x1a>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_isatty_r+0x1a>
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200006dc 	.word	0x200006dc

08009704 <_init>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr

08009710 <_fini>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr
