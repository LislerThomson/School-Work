
TempRGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08008a70  08008a70  00018a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08008e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000188  20000674  080094ac  00020674  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007fc  080094ac  000207fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001afa3  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f6d  00000000  00000000  0003b647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000093e9  00000000  00000000  0003e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c58  00000000  00000000  000479a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010a8  00000000  00000000  000485f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006f2a  00000000  00000000  000496a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000052dc  00000000  00000000  000505ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000558a6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003514  00000000  00000000  00055924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a54 	.word	0x08008a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	08008a54 	.word	0x08008a54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_InitTick+0x24>)
{
 8000f54:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f60:	f000 fc5a 	bl	8001818 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4621      	mov	r1, r4
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 fc14 	bl	8001798 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_Init>:
{
 8000f78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fbfa 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffe5 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000f86:	f002 fda3 	bl	8003ad0 <HAL_MspInit>
}
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd08      	pop	{r3, pc}
	...

08000f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f90:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <HAL_IncTick+0xc>)
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200006c8 	.word	0x200006c8

08000fa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <HAL_GetTick+0x8>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200006c8 	.word	0x200006c8

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff6 	bl	8000fa0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000fb6:	4605      	mov	r5, r0
  {
    wait++;
 8000fb8:	bf18      	it	ne
 8000fba:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	1b40      	subs	r0, r0, r5
 8000fc2:	4284      	cmp	r4, r0
 8000fc4:	d8fa      	bhi.n	8000fbc <HAL_Delay+0x10>
  {
  }
}
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}

08000fc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fc8:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000fce:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000fd2:	fab6 f386 	clz	r3, r6
 8000fd6:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000fda:	40de      	lsrs	r6, r3
 8000fdc:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000fde:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000fe2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000fe6:	fa93 f5a3 	rbit	r5, r3
 8000fea:	fab5 f585 	clz	r5, r5
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	2407      	movs	r4, #7
 8000ff4:	fa21 f505 	lsr.w	r5, r1, r5
 8000ff8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001004:	40d9      	lsrs	r1, r3
 8001006:	ea24 0405 	bic.w	r4, r4, r5
 800100a:	fa02 f101 	lsl.w	r1, r2, r1
 800100e:	4321      	orrs	r1, r4
 8001010:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001014:	bd70      	pop	{r4, r5, r6, pc}
	...

08001018 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101e:	4604      	mov	r4, r0
 8001020:	2800      	cmp	r0, #0
 8001022:	f000 80b2 	beq.w	800118a <HAL_ADC_Init+0x172>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001028:	b925      	cbnz	r5, 8001034 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102a:	f002 fd97 	bl	8003b5c <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102e:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001030:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8001034:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800103a:	bf41      	itttt	mi
 800103c:	689a      	ldrmi	r2, [r3, #8]
 800103e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8001042:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8001046:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8001048:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 800104a:	00d1      	lsls	r1, r2, #3
 800104c:	d574      	bpl.n	8001138 <HAL_ADC_Init+0x120>
 800104e:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	f140 8088 	bpl.w	8001166 <HAL_ADC_Init+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001056:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001058:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800105a:	06d5      	lsls	r5, r2, #27
 800105c:	f100 8091 	bmi.w	8001182 <HAL_ADC_Init+0x16a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001060:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001062:	0751      	lsls	r1, r2, #29
 8001064:	f100 808d 	bmi.w	8001182 <HAL_ADC_Init+0x16a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800106a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800106e:	f042 0202 	orr.w	r2, r2, #2
 8001072:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	2a01      	cmp	r2, #1
 800107c:	f040 8087 	bne.w	800118e <HAL_ADC_Init+0x176>
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	07d2      	lsls	r2, r2, #31
 8001084:	f140 8083 	bpl.w	800118e <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001088:	68e5      	ldr	r5, [r4, #12]
 800108a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800108c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800108e:	432a      	orrs	r2, r5
 8001090:	68a5      	ldr	r5, [r4, #8]
 8001092:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001094:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001096:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001098:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800109c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010a0:	bf02      	ittt	eq
 80010a2:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 80010a4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80010a8:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80010ae:	b121      	cbz	r1, 80010ba <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80010b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b2:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010b6:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b8:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80010ba:	68dd      	ldr	r5, [r3, #12]
 80010bc:	4938      	ldr	r1, [pc, #224]	; (80011a0 <HAL_ADC_Init+0x188>)
 80010be:	4029      	ands	r1, r5
 80010c0:	430a      	orrs	r2, r1
 80010c2:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	f012 0f0c 	tst.w	r2, #12
 80010ca:	d11e      	bne.n	800110a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010cc:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80010ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80010d0:	69a5      	ldr	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80010d2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010d4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 80010d8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80010dc:	f021 0102 	bic.w	r1, r1, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 80010e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d147      	bne.n	800117a <HAL_ADC_Init+0x162>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010ea:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80010ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ee:	6919      	ldr	r1, [r3, #16]
 80010f0:	432a      	orrs	r2, r5
 80010f2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	432a      	orrs	r2, r5
 80010fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80010fc:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001100:	432a      	orrs	r2, r5
 8001102:	f021 0104 	bic.w	r1, r1, #4
 8001106:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001108:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800110a:	6922      	ldr	r2, [r4, #16]
 800110c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800110e:	bf05      	ittet	eq
 8001110:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001112:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001114:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001116:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800111a:	bf06      	itte	eq
 800111c:	f021 010f 	biceq.w	r1, r1, #15
 8001120:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001122:	f022 020f 	bicne.w	r2, r2, #15
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001134:	b003      	add	sp, #12
 8001136:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001138:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800113a:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HAL_ADC_Init+0x18c>)
 800113c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8001140:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001144:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_ADC_Init+0x190>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001152:	220a      	movs	r2, #10
 8001154:	434a      	muls	r2, r1
      wait_loop_index--;
 8001156:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8001158:	9a01      	ldr	r2, [sp, #4]
 800115a:	2a00      	cmp	r2, #0
 800115c:	f43f af77 	beq.w	800104e <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8001160:	9a01      	ldr	r2, [sp, #4]
 8001162:	3a01      	subs	r2, #1
 8001164:	e7f7      	b.n	8001156 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001166:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001168:	f042 0210 	orr.w	r2, r2, #16
 800116c:	65a2      	str	r2, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	e76e      	b.n	8001058 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	e7c2      	b.n	8001108 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e7d2      	b.n	8001134 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118e:	4907      	ldr	r1, [pc, #28]	; (80011ac <HAL_ADC_Init+0x194>)
 8001190:	6865      	ldr	r5, [r4, #4]
 8001192:	688a      	ldr	r2, [r1, #8]
 8001194:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001198:	432a      	orrs	r2, r5
 800119a:	608a      	str	r2, [r1, #8]
 800119c:	e774      	b.n	8001088 <HAL_ADC_Init+0x70>
 800119e:	bf00      	nop
 80011a0:	fff0c007 	.word	0xfff0c007
 80011a4:	001e8480 	.word	0x001e8480
 80011a8:	20000000 	.word	0x20000000
 80011ac:	50040300 	.word	0x50040300

080011b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011b2:	6945      	ldr	r5, [r0, #20]
 80011b4:	2d08      	cmp	r5, #8
{
 80011b6:	4604      	mov	r4, r0
 80011b8:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011ba:	d00a      	beq.n	80011d2 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 80011bc:	6803      	ldr	r3, [r0, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	07dd      	lsls	r5, r3, #31
 80011c2:	d505      	bpl.n	80011d0 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80011d0:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011d2:	f7ff fee5 	bl	8000fa0 <HAL_GetTick>
 80011d6:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4215      	tst	r5, r2
 80011de:	d01d      	beq.n	800121c <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e6:	65a2      	str	r2, [r4, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80011ee:	d10f      	bne.n	8001210 <HAL_ADC_PollForConversion+0x60>
 80011f0:	69e2      	ldr	r2, [r4, #28]
 80011f2:	b96a      	cbnz	r2, 8001210 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	0711      	lsls	r1, r2, #28
 80011f8:	d50a      	bpl.n	8001210 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001200:	65a2      	str	r2, [r4, #88]	; 0x58
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001202:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001204:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001206:	bf5e      	ittt	pl
 8001208:	6da2      	ldrpl	r2, [r4, #88]	; 0x58
 800120a:	f042 0201 	orrpl.w	r2, r2, #1
 800120e:	65a2      	strpl	r2, [r4, #88]	; 0x58
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001210:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001212:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001214:	d114      	bne.n	8001240 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8001216:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001218:	2000      	movs	r0, #0
}
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800121c:	1c70      	adds	r0, r6, #1
 800121e:	d0dc      	beq.n	80011da <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001220:	b946      	cbnz	r6, 8001234 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001230:	2003      	movs	r0, #3
 8001232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001234:	f7ff feb4 	bl	8000fa0 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	4286      	cmp	r6, r0
 800123c:	d2cc      	bcs.n	80011d8 <HAL_ADC_PollForConversion+0x28>
 800123e:	e7f0      	b.n	8001222 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001240:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8001244:	d1e8      	bne.n	8001218 <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800124c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001250:	4770      	bx	lr
	...

08001254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800125e:	2b01      	cmp	r3, #1
{
 8001260:	4605      	mov	r5, r0
 8001262:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8001264:	f000 818d 	beq.w	8001582 <HAL_ADC_ConfigChannel+0x32e>
 8001268:	2301      	movs	r3, #1
 800126a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126e:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001270:	6882      	ldr	r2, [r0, #8]
 8001272:	0757      	lsls	r7, r2, #29
 8001274:	f100 817f 	bmi.w	8001576 <HAL_ADC_ConfigChannel+0x322>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001278:	684b      	ldr	r3, [r1, #4]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d808      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 800127e:	3b02      	subs	r3, #2
 8001280:	2b03      	cmp	r3, #3
 8001282:	d85c      	bhi.n	800133e <HAL_ADC_ConfigChannel+0xea>
 8001284:	e8df f003 	tbb	[pc, r3]
 8001288:	58565402 	.word	0x58565402
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800128c:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800128e:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001290:	6861      	ldr	r1, [r4, #4]
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	f401 7640 	and.w	r6, r1, #768	; 0x300
 80012a2:	40de      	lsrs	r6, r3
 80012a4:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80012a8:	f001 011f 	and.w	r1, r1, #31
 80012ac:	231f      	movs	r3, #31
 80012ae:	fa03 f201 	lsl.w	r2, r3, r1
 80012b2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80012b6:	ea23 0302 	bic.w	r3, r3, r2
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80012c0:	408a      	lsls	r2, r1
 80012c2:	4313      	orrs	r3, r2
 80012c4:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012c8:	6883      	ldr	r3, [r0, #8]
 80012ca:	f013 0f0c 	tst.w	r3, #12
 80012ce:	d11e      	bne.n	800130e <HAL_ADC_ConfigChannel+0xba>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012d0:	68a2      	ldr	r2, [r4, #8]
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	f7ff fe78 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012d8:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012da:	f8d5 e000 	ldr.w	lr, [r5]
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012e4:	2e04      	cmp	r6, #4
 80012e6:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 80012ea:	d02a      	beq.n	8001342 <HAL_ADC_ConfigChannel+0xee>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012ec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80012f0:	0048      	lsls	r0, r1, #1
 80012f2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80012f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80012f8:	4081      	lsls	r1, r0
 80012fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012fe:	4319      	orrs	r1, r3
 8001300:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001304:	4bc6      	ldr	r3, [pc, #792]	; (8001620 <HAL_ADC_ConfigChannel+0x3cc>)
 8001306:	4003      	ands	r3, r0
 8001308:	4319      	orrs	r1, r3
 800130a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800130e:	6828      	ldr	r0, [r5, #0]
 8001310:	6883      	ldr	r3, [r0, #8]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	f040 8135 	bne.w	8001586 <HAL_ADC_ConfigChannel+0x332>
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	07de      	lsls	r6, r3, #31
 8001320:	f140 8131 	bpl.w	8001586 <HAL_ADC_ConfigChannel+0x332>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001326:	2300      	movs	r3, #0
 8001328:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 800132c:	b003      	add	sp, #12
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001330:	2312      	movs	r3, #18
 8001332:	e7ac      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001334:	2318      	movs	r3, #24
 8001336:	e7aa      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133c:	e7a7      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800133e:	2306      	movs	r3, #6
 8001340:	e7a5      	b.n	800128e <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001342:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001346:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800134a:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800134e:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8001352:	2800      	cmp	r0, #0
 8001354:	d13a      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x178>
 8001356:	f3c3 6084 	ubfx	r0, r3, #26, #5
 800135a:	4287      	cmp	r7, r0
 800135c:	f040 814c 	bne.w	80015f8 <HAL_ADC_ConfigChannel+0x3a4>
  MODIFY_REG(*preg,
 8001360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001364:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001368:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800136a:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 800136e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001372:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001376:	bb9f      	cbnz	r7, 80013e0 <HAL_ADC_ConfigChannel+0x18c>
 8001378:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800137c:	4283      	cmp	r3, r0
 800137e:	f040 8140 	bne.w	8001602 <HAL_ADC_ConfigChannel+0x3ae>
  MODIFY_REG(*preg,
 8001382:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001386:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001388:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800138a:	6891      	ldr	r1, [r2, #8]
 800138c:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001390:	f102 0608 	add.w	r6, r2, #8
 8001394:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001398:	bb77      	cbnz	r7, 80013f8 <HAL_ADC_ConfigChannel+0x1a4>
 800139a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800139e:	4298      	cmp	r0, r3
 80013a0:	f040 8136 	bne.w	8001610 <HAL_ADC_ConfigChannel+0x3bc>
  MODIFY_REG(*preg,
 80013a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013a8:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013aa:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ac:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b0:	68d2      	ldr	r2, [r2, #12]
 80013b2:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80013b6:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80013ba:	bb4e      	cbnz	r6, 8001410 <HAL_ADC_ConfigChannel+0x1bc>
 80013bc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013c0:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 80013c2:	bf04      	itt	eq
 80013c4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80013c8:	6002      	streq	r2, [r0, #0]
 80013ca:	e7a0      	b.n	800130e <HAL_ADC_ConfigChannel+0xba>
 80013cc:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013d0:	fab0 f080 	clz	r0, r0
 80013d4:	4287      	cmp	r7, r0
 80013d6:	d0c3      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x10c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013dc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	4283      	cmp	r3, r0
 80013ea:	d0ca      	beq.n	8001382 <HAL_ADC_ConfigChannel+0x12e>
 80013ec:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ee:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f0:	f102 0608 	add.w	r6, r2, #8
 80013f4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	4283      	cmp	r3, r0
 8001402:	d0cf      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x150>
 8001404:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001408:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	e7d2      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x16c>
 800141a:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	3201      	adds	r2, #1
 8001424:	2a09      	cmp	r2, #9
 8001426:	d859      	bhi.n	80014dc <HAL_ADC_ConfigChannel+0x288>
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	3201      	adds	r2, #1
 8001432:	0692      	lsls	r2, r2, #26
 8001434:	fa93 f1a3 	rbit	r1, r3
 8001438:	fab1 f181 	clz	r1, r1
 800143c:	1c4e      	adds	r6, r1, #1
 800143e:	2101      	movs	r1, #1
 8001440:	40b1      	lsls	r1, r6
 8001442:	e001      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1f4>
 8001444:	fa01 f10e 	lsl.w	r1, r1, lr
 8001448:	430a      	orrs	r2, r1
 800144a:	2f00      	cmp	r7, #0
 800144c:	d140      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x27c>
 800144e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001458:	0509      	lsls	r1, r1, #20
 800145a:	4311      	orrs	r1, r2
 800145c:	68a2      	ldr	r2, [r4, #8]
 800145e:	f7ff fdb3 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001462:	6822      	ldr	r2, [r4, #0]
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_ADC_ConfigChannel+0x3d0>)
 8001466:	429a      	cmp	r2, r3
 8001468:	d14b      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x2ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146a:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001472:	f47f af57 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	6898      	ldr	r0, [r3, #8]
 800147a:	f000 0003 	and.w	r0, r0, #3
 800147e:	2801      	cmp	r0, #1
 8001480:	d103      	bne.n	800148a <HAL_ADC_ConfigChannel+0x236>
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	07c9      	lsls	r1, r1, #31
 8001486:	f100 80b2 	bmi.w	80015ee <HAL_ADC_ConfigChannel+0x39a>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148a:	4966      	ldr	r1, [pc, #408]	; (8001624 <HAL_ADC_ConfigChannel+0x3d0>)
 800148c:	428a      	cmp	r2, r1
 800148e:	d149      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x2d0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001490:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f47f af46 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 8001498:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800149c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80014a8:	430b      	orrs	r3, r1
 80014aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_ADC_ConfigChannel+0x3dc>)
 80014b4:	4a5f      	ldr	r2, [pc, #380]	; (8001634 <HAL_ADC_ConfigChannel+0x3e0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014bc:	2378      	movs	r3, #120	; 0x78
 80014be:	4353      	muls	r3, r2
                wait_loop_index--;
 80014c0:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f43f af2d 	beq.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
                wait_loop_index--;
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	e7f7      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x26c>
 80014d0:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014d4:	fab1 f181 	clz	r1, r1
 80014d8:	3101      	adds	r1, #1
 80014da:	e7bb      	b.n	8001454 <HAL_ADC_ConfigChannel+0x200>
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	3201      	adds	r2, #1
 80014e6:	0696      	lsls	r6, r2, #26
 80014e8:	fa93 f1a3 	rbit	r1, r3
 80014ec:	fab1 f181 	clz	r1, r1
 80014f0:	1c4a      	adds	r2, r1, #1
 80014f2:	2101      	movs	r1, #1
 80014f4:	4091      	lsls	r1, r2
 80014f6:	e06c      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x37e>
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	e06d      	b.n	80015de <HAL_ADC_ConfigChannel+0x38a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_ADC_ConfigChannel+0x3e4>)
 8001504:	429a      	cmp	r2, r3
 8001506:	d104      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x2be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800150a:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800150c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001510:	e7af      	b.n	8001472 <HAL_ADC_ConfigChannel+0x21e>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_ADC_ConfigChannel+0x3e8>)
 8001514:	429a      	cmp	r2, r3
 8001516:	f47f af05 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_ADC_ConfigChannel+0x3d4>)
 800151c:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800151e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001522:	e7a6      	b.n	8001472 <HAL_ADC_ConfigChannel+0x21e>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001524:	4944      	ldr	r1, [pc, #272]	; (8001638 <HAL_ADC_ConfigChannel+0x3e4>)
 8001526:	428a      	cmp	r2, r1
 8001528:	d111      	bne.n	800154e <HAL_ADC_ConfigChannel+0x2fa>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f47f aef9 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
 8001532:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001536:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800153a:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800153e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001542:	430b      	orrs	r3, r1
 8001544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001548:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 800154c:	e6ea      	b.n	8001324 <HAL_ADC_ConfigChannel+0xd0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800154e:	493b      	ldr	r1, [pc, #236]	; (800163c <HAL_ADC_ConfigChannel+0x3e8>)
 8001550:	428a      	cmp	r2, r1
 8001552:	f47f aee7 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001556:	4a35      	ldr	r2, [pc, #212]	; (800162c <HAL_ADC_ConfigChannel+0x3d8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f47f aee3 	bne.w	8001324 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800155e:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001562:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001566:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800156a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800156e:	430b      	orrs	r3, r1
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001574:	e7e8      	b.n	8001548 <HAL_ADC_ConfigChannel+0x2f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001576:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001578:	f042 0220 	orr.w	r2, r2, #32
 800157c:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800157e:	4618      	mov	r0, r3
 8001580:	e6d1      	b.n	8001326 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_LOCK(hadc);
 8001582:	2002      	movs	r0, #2
 8001584:	e6d2      	b.n	800132c <HAL_ADC_ConfigChannel+0xd8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001586:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_ADC_ConfigChannel+0x3ec>)
 800158a:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	f001 0e20 	and.w	lr, r1, #32
 8001594:	fa02 f20e 	lsl.w	r2, r2, lr
 8001598:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800159c:	4072      	eors	r2, r6
 800159e:	403a      	ands	r2, r7
 80015a0:	4072      	eors	r2, r6
 80015a2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_ADC_ConfigChannel+0x3f0>)
 80015a8:	4291      	cmp	r1, r2
 80015aa:	f47f af5a 	bne.w	8001462 <HAL_ADC_ConfigChannel+0x20e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015ae:	2f00      	cmp	r7, #0
 80015b0:	f47f af33 	bne.w	800141a <HAL_ADC_ConfigChannel+0x1c6>
 80015b4:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015b8:	f101 0e01 	add.w	lr, r1, #1
 80015bc:	f1be 0f09 	cmp.w	lr, #9
 80015c0:	f04f 0101 	mov.w	r1, #1
 80015c4:	ea4f 628e 	mov.w	r2, lr, lsl #26
 80015c8:	f67f af3c 	bls.w	8001444 <HAL_ADC_ConfigChannel+0x1f0>
 80015cc:	4616      	mov	r6, r2
 80015ce:	fa01 f10e 	lsl.w	r1, r1, lr
 80015d2:	ea41 0206 	orr.w	r2, r1, r6
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d18e      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x2a4>
 80015da:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80015de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015e2:	f1a3 011b 	sub.w	r1, r3, #27
 80015e6:	0509      	lsls	r1, r1, #20
 80015e8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80015ec:	e735      	b.n	800145a <HAL_ADC_ConfigChannel+0x206>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	65ab      	str	r3, [r5, #88]	; 0x58
 80015f6:	e696      	b.n	8001326 <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001600:	e6ba      	b.n	8001378 <HAL_ADC_ConfigChannel+0x124>
 8001602:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001604:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	f102 0608 	add.w	r6, r2, #8
 800160a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800160e:	e6c4      	b.n	800139a <HAL_ADC_ConfigChannel+0x146>
 8001610:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001614:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800161c:	e6ce      	b.n	80013bc <HAL_ADC_ConfigChannel+0x168>
 800161e:	bf00      	nop
 8001620:	03fff000 	.word	0x03fff000
 8001624:	c7520000 	.word	0xc7520000
 8001628:	50040300 	.word	0x50040300
 800162c:	50040000 	.word	0x50040000
 8001630:	20000000 	.word	0x20000000
 8001634:	001e8480 	.word	0x001e8480
 8001638:	cb840000 	.word	0xcb840000
 800163c:	80000001 	.word	0x80000001
 8001640:	0007ffff 	.word	0x0007ffff
 8001644:	407f0000 	.word	0x407f0000

08001648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001648:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800164a:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164c:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 800164e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b01      	cmp	r3, #1
{
 8001658:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800165a:	d108      	bne.n	800166e <ADC_Enable+0x26>
 800165c:	6813      	ldr	r3, [r2, #0]
 800165e:	07d8      	lsls	r0, r3, #31
 8001660:	d505      	bpl.n	800166e <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
}
 8001664:	b002      	add	sp, #8
 8001666:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	e012      	b.n	8001694 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800166e:	6891      	ldr	r1, [r2, #8]
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <ADC_Enable+0x94>)
 8001672:	4219      	tst	r1, r3
 8001674:	d127      	bne.n	80016c6 <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 8001676:	6893      	ldr	r3, [r2, #8]
 8001678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <ADC_Enable+0x98>)
 8001688:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <ADC_Enable+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001690:	230a      	movs	r3, #10
 8001692:	4353      	muls	r3, r2
      wait_loop_index--;
 8001694:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e5      	bne.n	8001668 <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 800169c:	f7ff fc80 	bl	8000fa0 <HAL_GetTick>
 80016a0:	4e11      	ldr	r6, [pc, #68]	; (80016e8 <ADC_Enable+0xa0>)
 80016a2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	07db      	lsls	r3, r3, #31
 80016aa:	d4da      	bmi.n	8001662 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80016ac:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80016ae:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80016b0:	bf5f      	itttt	pl
 80016b2:	6893      	ldrpl	r3, [r2, #8]
 80016b4:	4033      	andpl	r3, r6
 80016b6:	f043 0301 	orrpl.w	r3, r3, #1
 80016ba:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016bc:	f7ff fc70 	bl	8000fa0 <HAL_GetTick>
 80016c0:	1b40      	subs	r0, r0, r5
 80016c2:	2802      	cmp	r0, #2
 80016c4:	d9ee      	bls.n	80016a4 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
 80016d8:	e7c4      	b.n	8001664 <ADC_Enable+0x1c>
 80016da:	bf00      	nop
 80016dc:	8000003f 	.word	0x8000003f
 80016e0:	20000000 	.word	0x20000000
 80016e4:	001e8480 	.word	0x001e8480
 80016e8:	7fffffc0 	.word	0x7fffffc0

080016ec <HAL_ADC_Start>:
{
 80016ec:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ee:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80016f0:	689d      	ldr	r5, [r3, #8]
 80016f2:	f015 0504 	ands.w	r5, r5, #4
{
 80016f6:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016f8:	d13a      	bne.n	8001770 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 80016fa:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d036      	beq.n	8001770 <HAL_ADC_Start+0x84>
 8001702:	2301      	movs	r3, #1
 8001704:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8001708:	f7ff ff9e 	bl	8001648 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800170c:	2800      	cmp	r0, #0
 800170e:	d12c      	bne.n	800176a <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001712:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	65a3      	str	r3, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001726:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800172a:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172c:	bf48      	it	mi
 800172e:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001730:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001732:	bf52      	itee	pl
 8001734:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001736:	f023 0306 	bicmi.w	r3, r3, #6
 800173a:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800173c:	231c      	movs	r3, #28
 800173e:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001740:	2300      	movs	r3, #0
 8001742:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001746:	68d3      	ldr	r3, [r2, #12]
 8001748:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800174a:	bf41      	itttt	mi
 800174c:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
 800174e:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001752:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001756:	65a3      	strmi	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8001758:	6893      	ldr	r3, [r2, #8]
 800175a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6093      	str	r3, [r2, #8]
 8001768:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 800176a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800176e:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8001770:	2002      	movs	r0, #2
}
 8001772:	bd38      	pop	{r3, r4, r5, pc}

08001774 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001776:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001778:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001784:	0200      	lsls	r0, r0, #8
 8001786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800178e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001790:	60d3      	str	r3, [r2, #12]
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b530      	push	{r4, r5, lr}
 800179c:	68dc      	ldr	r4, [r3, #12]
 800179e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	bf28      	it	cs
 80017ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 0501 	mov.w	r5, #1
 80017b4:	fa05 f303 	lsl.w	r3, r5, r3
 80017b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017bc:	bf8c      	ite	hi
 80017be:	3c03      	subhi	r4, #3
 80017c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c2:	4019      	ands	r1, r3
 80017c4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c6:	fa05 f404 	lsl.w	r4, r5, r4
 80017ca:	3c01      	subs	r4, #1
 80017cc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80017ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	ea42 0201 	orr.w	r2, r2, r1
 80017d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	bfaf      	iteee	ge
 80017da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	f000 000f 	andlt.w	r0, r0, #15
 80017e2:	4b06      	ldrlt	r3, [pc, #24]	; (80017fc <HAL_NVIC_SetPriority+0x64>)
 80017e4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	bfa5      	ittet	ge
 80017e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80017ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017f4:	bd30      	pop	{r4, r5, pc}
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	e000ed14 	.word	0xe000ed14

08001800 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001800:	0942      	lsrs	r2, r0, #5
 8001802:	2301      	movs	r3, #1
 8001804:	f000 001f 	and.w	r0, r0, #31
 8001808:	fa03 f000 	lsl.w	r0, r3, r0
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_NVIC_EnableIRQ+0x14>)
 800180e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100

08001818 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	3801      	subs	r0, #1
 800181a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800181e:	d20a      	bcs.n	8001836 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	21f0      	movs	r1, #240	; 0xf0
 8001828:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001846:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001848:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800184a:	bf0c      	ite	eq
 800184c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001850:	f022 0204 	bicne.w	r2, r2, #4
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4770      	bx	lr
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800185c:	4770      	bx	lr

0800185e <HAL_SYSTICK_IRQHandler>:
{
 800185e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001860:	f7ff fffc 	bl	800185c <HAL_SYSTICK_Callback>
 8001864:	bd08      	pop	{r3, pc}
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800186c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800186e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80019cc <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001874:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001876:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001878:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 800187c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800187e:	9c01      	ldr	r4, [sp, #4]
 8001880:	40dc      	lsrs	r4, r3
 8001882:	d102      	bne.n	800188a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8001884:	b005      	add	sp, #20
 8001886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800188a:	2401      	movs	r4, #1
 800188c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001890:	9c01      	ldr	r4, [sp, #4]
 8001892:	ea14 050a 	ands.w	r5, r4, sl
 8001896:	f000 808f 	beq.w	80019b8 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189a:	684c      	ldr	r4, [r1, #4]
 800189c:	f024 0b10 	bic.w	fp, r4, #16
 80018a0:	f1bb 0f02 	cmp.w	fp, #2
 80018a4:	d111      	bne.n	80018ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80018a6:	08df      	lsrs	r7, r3, #3
 80018a8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018ac:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80018b0:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018b6:	fa09 fc0e 	lsl.w	ip, r9, lr
 80018ba:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018be:	690e      	ldr	r6, [r1, #16]
 80018c0:	fa06 f60e 	lsl.w	r6, r6, lr
 80018c4:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80018c8:	623e      	str	r6, [r7, #32]
 80018ca:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018ce:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80018d0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018d2:	fa07 f70c 	lsl.w	r7, r7, ip
 80018d6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018dc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018de:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ea:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80018ee:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	d811      	bhi.n	8001916 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80018f2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80018f4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80018f8:	68ce      	ldr	r6, [r1, #12]
 80018fa:	fa06 fe0c 	lsl.w	lr, r6, ip
 80018fe:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001902:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001904:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800190a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800190e:	409e      	lsls	r6, r3
 8001910:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001914:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001916:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001918:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800191a:	688e      	ldr	r6, [r1, #8]
 800191c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001920:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001922:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001924:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	d547      	bpl.n	80019b8 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800192c:	f046 0601 	orr.w	r6, r6, #1
 8001930:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8001934:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001938:	f023 0703 	bic.w	r7, r3, #3
 800193c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001940:	f006 0601 	and.w	r6, r6, #1
 8001944:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001948:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800194a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001950:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001952:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001956:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800195a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800195e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001962:	d02b      	beq.n	80019bc <HAL_GPIO_Init+0x154>
 8001964:	4e18      	ldr	r6, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x160>)
 8001966:	42b0      	cmp	r0, r6
 8001968:	d02a      	beq.n	80019c0 <HAL_GPIO_Init+0x158>
 800196a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800196e:	42b0      	cmp	r0, r6
 8001970:	bf14      	ite	ne
 8001972:	2607      	movne	r6, #7
 8001974:	2602      	moveq	r6, #2
 8001976:	fa06 f60e 	lsl.w	r6, r6, lr
 800197a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800197e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001980:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001982:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001984:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001988:	bf0c      	ite	eq
 800198a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800198c:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800198e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001990:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001992:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001996:	bf0c      	ite	eq
 8001998:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800199a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800199c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800199e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80019a4:	bf0c      	ite	eq
 80019a6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80019a8:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80019aa:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80019ac:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80019b0:	bf54      	ite	pl
 80019b2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80019b4:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80019b6:	60d6      	str	r6, [r2, #12]
    position++;
 80019b8:	3301      	adds	r3, #1
 80019ba:	e760      	b.n	800187e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80019bc:	2600      	movs	r6, #0
 80019be:	e7da      	b.n	8001976 <HAL_GPIO_Init+0x10e>
 80019c0:	2601      	movs	r6, #1
 80019c2:	e7d8      	b.n	8001976 <HAL_GPIO_Init+0x10e>
 80019c4:	40010400 	.word	0x40010400
 80019c8:	48000400 	.word	0x48000400
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	b10a      	cbz	r2, 80019d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	6181      	str	r1, [r0, #24]
 80019d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d6:	6281      	str	r1, [r0, #40]	; 0x28
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_PWREx_GetVoltageRange+0xc>)
 80019de:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80019e0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ee:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f8:	d11a      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80019fe:	d013      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a00:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001a02:	4912      	ldr	r1, [pc, #72]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	fbb2 f1f1 	udiv	r1, r2, r1
 8001a16:	2232      	movs	r2, #50	; 0x32
 8001a18:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001a1a:	b112      	cbz	r2, 8001a22 <HAL_PWREx_ControlVoltageScaling+0x36>
 8001a1c:	6959      	ldr	r1, [r3, #20]
 8001a1e:	0549      	lsls	r1, r1, #21
 8001a20:	d404      	bmi.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	055b      	lsls	r3, r3, #21
 8001a26:	d40d      	bmi.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001a28:	2000      	movs	r0, #0
 8001a2a:	4770      	bx	lr
        wait_loop_index--;
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	e7f4      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a30:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a34:	bf1f      	itttt	ne
 8001a36:	681a      	ldrne	r2, [r3, #0]
 8001a38:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001a3c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001a40:	601a      	strne	r2, [r3, #0]
 8001a42:	e7f1      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001a44:	2003      	movs	r0, #3
}  
 8001a46:	4770      	bx	lr
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	000f4240 	.word	0x000f4240
 8001a50:	20000000 	.word	0x20000000

08001a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a56:	4d1e      	ldr	r5, [pc, #120]	; (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001a58:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a5a:	00da      	lsls	r2, r3, #3
{
 8001a5c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a5e:	d518      	bpl.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a60:	f7ff ffbc 	bl	80019dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001a68:	d123      	bne.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a6a:	2c80      	cmp	r4, #128	; 0x80
 8001a6c:	d929      	bls.n	8001ac2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a6e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a70:	bf8c      	ite	hi
 8001a72:	2002      	movhi	r0, #2
 8001a74:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001a88:	1a18      	subs	r0, r3, r0
 8001a8a:	bf18      	it	ne
 8001a8c:	2001      	movne	r0, #1
 8001a8e:	b003      	add	sp, #12
 8001a90:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	65ab      	str	r3, [r5, #88]	; 0x58
 8001a9a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001aa4:	f7ff ff9a 	bl	80019dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	65ab      	str	r3, [r5, #88]	; 0x58
 8001ab0:	e7d8      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001ab2:	2c80      	cmp	r4, #128	; 0x80
 8001ab4:	d807      	bhi.n	8001ac6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001ab6:	d008      	beq.n	8001aca <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001ab8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001abc:	4258      	negs	r0, r3
 8001abe:	4158      	adcs	r0, r3
 8001ac0:	e7d9      	b.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e7d7      	b.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	e7d5      	b.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aca:	2002      	movs	r0, #2
 8001acc:	e7d3      	b.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	f012 0f0c 	tst.w	r2, #12
{
 8001ae0:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001ae2:	d009      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001aea:	2a0c      	cmp	r2, #12
 8001aec:	d12d      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d128      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001af8:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001afa:	4928      	ldr	r1, [pc, #160]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001afc:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001afe:	bf55      	itete	pl
 8001b00:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b04:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b06:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b0a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001b12:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001b14:	f011 0f0c 	tst.w	r1, #12
 8001b18:	bf0c      	ite	eq
 8001b1a:	4610      	moveq	r0, r2
 8001b1c:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	f001 010c 	and.w	r1, r1, #12
 8001b24:	290c      	cmp	r1, #12
 8001b26:	d130      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b28:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b2a:	68d8      	ldr	r0, [r3, #12]
 8001b2c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001b30:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b32:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d019      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x96>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d026      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b3e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b42:	68d8      	ldr	r0, [r3, #12]
 8001b44:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001b48:	e017      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	f002 020c 	and.w	r2, r2, #12
 8001b50:	2a04      	cmp	r2, #4
 8001b52:	d007      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	f002 020c 	and.w	r2, r2, #12
 8001b5a:	2a08      	cmp	r2, #8
 8001b5c:	d104      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001b5e:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001b60:	2200      	movs	r2, #0
 8001b62:	e7dc      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b66:	e7fb      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001b68:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	e7d7      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b72:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b76:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001b80:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b82:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b84:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001b86:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b8a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b90:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001b94:	e7ef      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x9e>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08008b04 	.word	0x08008b04
 8001ba0:	007a1200 	.word	0x007a1200
 8001ba4:	00f42400 	.word	0x00f42400

08001ba8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ba8:	6803      	ldr	r3, [r0, #0]
{
 8001baa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001bae:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb0:	06d8      	lsls	r0, r3, #27
 8001bb2:	d539      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001bb4:	4cab      	ldr	r4, [pc, #684]	; (8001e64 <HAL_RCC_OscConfig+0x2bc>)
 8001bb6:	68a3      	ldr	r3, [r4, #8]
 8001bb8:	f013 0f0c 	tst.w	r3, #12
 8001bbc:	d162      	bne.n	8001c84 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0799      	lsls	r1, r3, #30
 8001bc2:	d503      	bpl.n	8001bcc <HAL_RCC_OscConfig+0x24>
 8001bc4:	69ab      	ldr	r3, [r5, #24]
 8001bc6:	b90b      	cbnz	r3, 8001bcc <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e07f      	b.n	8001ccc <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	6a28      	ldr	r0, [r5, #32]
 8001bd0:	071a      	lsls	r2, r3, #28
 8001bd2:	bf56      	itet	pl
 8001bd4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001bd8:	6823      	ldrmi	r3, [r4, #0]
 8001bda:	091b      	lsrpl	r3, r3, #4
 8001bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be0:	4283      	cmp	r3, r0
 8001be2:	d23a      	bcs.n	8001c5a <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be4:	f7ff ff36 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d1ed      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	6a2a      	ldr	r2, [r5, #32]
 8001bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c00:	6863      	ldr	r3, [r4, #4]
 8001c02:	69ea      	ldr	r2, [r5, #28]
 8001c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c0c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0e:	f7ff ff63 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001c12:	68a3      	ldr	r3, [r4, #8]
 8001c14:	4a94      	ldr	r2, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x2c0>)
 8001c16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	40d8      	lsrs	r0, r3
 8001c1e:	4b93      	ldr	r3, [pc, #588]	; (8001e6c <HAL_RCC_OscConfig+0x2c4>)
 8001c20:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff f994 	bl	8000f50 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	07d8      	lsls	r0, r3, #31
 8001c2c:	d461      	bmi.n	8001cf2 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	0799      	lsls	r1, r3, #30
 8001c32:	f100 80a9 	bmi.w	8001d88 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	682b      	ldr	r3, [r5, #0]
 8001c38:	071a      	lsls	r2, r3, #28
 8001c3a:	f100 80e7 	bmi.w	8001e0c <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	f100 8115 	bmi.w	8001e70 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	069a      	lsls	r2, r3, #26
 8001c4a:	f100 817c 	bmi.w	8001f46 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	f040 81a3 	bne.w	8001f9c <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8001c56:	2000      	movs	r0, #0
 8001c58:	e038      	b.n	8001ccc <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6023      	str	r3, [r4, #0]
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c68:	4303      	orrs	r3, r0
 8001c6a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	69ea      	ldr	r2, [r5, #28]
 8001c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c78:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7a:	f7ff feeb 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d0c5      	beq.n	8001c0e <HAL_RCC_OscConfig+0x66>
 8001c82:	e7a1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c84:	69ab      	ldr	r3, [r5, #24]
 8001c86:	b323      	cbz	r3, 8001cd2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c90:	f7ff f986 	bl	8000fa0 <HAL_GetTick>
 8001c94:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	079b      	lsls	r3, r3, #30
 8001c9a:	d511      	bpl.n	8001cc0 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	6a2a      	ldr	r2, [r5, #32]
 8001ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cac:	4313      	orrs	r3, r2
 8001cae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb0:	6863      	ldr	r3, [r4, #4]
 8001cb2:	69ea      	ldr	r2, [r5, #28]
 8001cb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cbc:	6063      	str	r3, [r4, #4]
 8001cbe:	e7b3      	b.n	8001c28 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f96e 	bl	8000fa0 <HAL_GetTick>
 8001cc4:	1b80      	subs	r0, r0, r6
 8001cc6:	2802      	cmp	r0, #2
 8001cc8:	d9e5      	bls.n	8001c96 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8001cca:	2003      	movs	r0, #3
}
 8001ccc:	b002      	add	sp, #8
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cda:	f7ff f961 	bl	8000fa0 <HAL_GetTick>
 8001cde:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	079f      	lsls	r7, r3, #30
 8001ce4:	d5a0      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f95b 	bl	8000fa0 <HAL_GetTick>
 8001cea:	1b80      	subs	r0, r0, r6
 8001cec:	2802      	cmp	r0, #2
 8001cee:	d9f7      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x138>
 8001cf0:	e7eb      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001cf2:	4c5c      	ldr	r4, [pc, #368]	; (8001e64 <HAL_RCC_OscConfig+0x2bc>)
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cfe:	68a3      	ldr	r3, [r4, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d08:	68e3      	ldr	r3, [r4, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	039a      	lsls	r2, r3, #14
 8001d16:	d58a      	bpl.n	8001c2e <HAL_RCC_OscConfig+0x86>
 8001d18:	686b      	ldr	r3, [r5, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d187      	bne.n	8001c2e <HAL_RCC_OscConfig+0x86>
 8001d1e:	e753      	b.n	8001bc8 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	686b      	ldr	r3, [r5, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d26:	d110      	bne.n	8001d4a <HAL_RCC_OscConfig+0x1a2>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d30:	f7ff f936 	bl	8000fa0 <HAL_GetTick>
 8001d34:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	039b      	lsls	r3, r3, #14
 8001d3a:	f53f af78 	bmi.w	8001c2e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7ff f92f 	bl	8000fa0 <HAL_GetTick>
 8001d42:	1b80      	subs	r0, r0, r6
 8001d44:	2864      	cmp	r0, #100	; 0x64
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x18e>
 8001d48:	e7bf      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4e:	d104      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1b2>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	e7e6      	b.n	8001d28 <HAL_RCC_OscConfig+0x180>
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d60:	6022      	str	r2, [r4, #0]
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d68:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f917 	bl	8000fa0 <HAL_GetTick>
 8001d72:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	039f      	lsls	r7, r3, #14
 8001d78:	f57f af59 	bpl.w	8001c2e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff f910 	bl	8000fa0 <HAL_GetTick>
 8001d80:	1b80      	subs	r0, r0, r6
 8001d82:	2864      	cmp	r0, #100	; 0x64
 8001d84:	d9f6      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1cc>
 8001d86:	e7a0      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001d88:	4c36      	ldr	r4, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x2bc>)
 8001d8a:	68a3      	ldr	r3, [r4, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d009      	beq.n	8001da8 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d94:	68a3      	ldr	r3, [r4, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d113      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9e:	68e3      	ldr	r3, [r4, #12]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d10e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	055e      	lsls	r6, r3, #21
 8001dac:	d503      	bpl.n	8001db6 <HAL_RCC_OscConfig+0x20e>
 8001dae:	68eb      	ldr	r3, [r5, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f43f af09 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	6863      	ldr	r3, [r4, #4]
 8001db8:	692a      	ldr	r2, [r5, #16]
 8001dba:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001dbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dc2:	6063      	str	r3, [r4, #4]
 8001dc4:	e737      	b.n	8001c36 <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	68eb      	ldr	r3, [r5, #12]
 8001dc8:	b17b      	cbz	r3, 8001dea <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f8e5 	bl	8000fa0 <HAL_GetTick>
 8001dd6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	0558      	lsls	r0, r3, #21
 8001ddc:	d4eb      	bmi.n	8001db6 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f8df 	bl	8000fa0 <HAL_GetTick>
 8001de2:	1b80      	subs	r0, r0, r6
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f7      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x230>
 8001de8:	e76f      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001df2:	f7ff f8d5 	bl	8000fa0 <HAL_GetTick>
 8001df6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	0559      	lsls	r1, r3, #21
 8001dfc:	f57f af1b 	bpl.w	8001c36 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff f8ce 	bl	8000fa0 <HAL_GetTick>
 8001e04:	1b80      	subs	r0, r0, r6
 8001e06:	2802      	cmp	r0, #2
 8001e08:	d9f6      	bls.n	8001df8 <HAL_RCC_OscConfig+0x250>
 8001e0a:	e75e      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0c:	696b      	ldr	r3, [r5, #20]
 8001e0e:	4c15      	ldr	r4, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x2bc>)
 8001e10:	b19b      	cbz	r3, 8001e3a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8001e12:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f8bf 	bl	8000fa0 <HAL_GetTick>
 8001e22:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001e24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e28:	079f      	lsls	r7, r3, #30
 8001e2a:	f53f af08 	bmi.w	8001c3e <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f8b7 	bl	8000fa0 <HAL_GetTick>
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d9f5      	bls.n	8001e24 <HAL_RCC_OscConfig+0x27c>
 8001e38:	e747      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e46:	f7ff f8ab 	bl	8000fa0 <HAL_GetTick>
 8001e4a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001e4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e50:	0798      	lsls	r0, r3, #30
 8001e52:	f57f aef4 	bpl.w	8001c3e <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff f8a3 	bl	8000fa0 <HAL_GetTick>
 8001e5a:	1b80      	subs	r0, r0, r6
 8001e5c:	2802      	cmp	r0, #2
 8001e5e:	d9f5      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2a4>
 8001e60:	e733      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08008aea 	.word	0x08008aea
 8001e6c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e70:	4c79      	ldr	r4, [pc, #484]	; (8002058 <HAL_RCC_OscConfig+0x4b0>)
 8001e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e74:	00d9      	lsls	r1, r3, #3
 8001e76:	d427      	bmi.n	8001ec8 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e8a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8c:	4e73      	ldr	r6, [pc, #460]	; (800205c <HAL_RCC_OscConfig+0x4b4>)
 8001e8e:	6833      	ldr	r3, [r6, #0]
 8001e90:	05da      	lsls	r2, r3, #23
 8001e92:	d51b      	bpl.n	8001ecc <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	68ab      	ldr	r3, [r5, #8]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d129      	bne.n	8001eee <HAL_RCC_OscConfig+0x346>
 8001e9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f87b 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001eae:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001eb0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001eb4:	0798      	lsls	r0, r3, #30
 8001eb6:	d540      	bpl.n	8001f3a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001eb8:	2f00      	cmp	r7, #0
 8001eba:	f43f aec4 	beq.w	8001c46 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ec6:	e6be      	b.n	8001c46 <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2700      	movs	r7, #0
 8001eca:	e7df      	b.n	8001e8c <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	6833      	ldr	r3, [r6, #0]
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f864 	bl	8000fa0 <HAL_GetTick>
 8001ed8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eda:	6833      	ldr	r3, [r6, #0]
 8001edc:	05db      	lsls	r3, r3, #23
 8001ede:	d4d9      	bmi.n	8001e94 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7ff f85e 	bl	8000fa0 <HAL_GetTick>
 8001ee4:	eba0 0008 	sub.w	r0, r0, r8
 8001ee8:	2802      	cmp	r0, #2
 8001eea:	d9f6      	bls.n	8001eda <HAL_RCC_OscConfig+0x332>
 8001eec:	e6ed      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x358>
 8001ef2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001efe:	e7cc      	b.n	8001e9a <HAL_RCC_OscConfig+0x2f2>
 8001f00:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001f0c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f10:	f022 0204 	bic.w	r2, r2, #4
 8001f14:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1c4      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f840 	bl	8000fa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f24:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001f26:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f2a:	0799      	lsls	r1, r3, #30
 8001f2c:	d5c4      	bpl.n	8001eb8 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff f837 	bl	8000fa0 <HAL_GetTick>
 8001f32:	1b80      	subs	r0, r0, r6
 8001f34:	4540      	cmp	r0, r8
 8001f36:	d9f6      	bls.n	8001f26 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e6c7      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f831 	bl	8000fa0 <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	4540      	cmp	r0, r8
 8001f42:	d9b5      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x308>
 8001f44:	e6c1      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f48:	4c43      	ldr	r4, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x4b0>)
 8001f4a:	b19b      	cbz	r3, 8001f74 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8001f4c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001f58:	f7ff f822 	bl	8000fa0 <HAL_GetTick>
 8001f5c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001f5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001f62:	079b      	lsls	r3, r3, #30
 8001f64:	f53f ae73 	bmi.w	8001c4e <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f68:	f7ff f81a 	bl	8000fa0 <HAL_GetTick>
 8001f6c:	1b80      	subs	r0, r0, r6
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	d9f5      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3b6>
 8001f72:	e6aa      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001f74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001f80:	f7ff f80e 	bl	8000fa0 <HAL_GetTick>
 8001f84:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001f86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001f8a:	079f      	lsls	r7, r3, #30
 8001f8c:	f57f ae5f 	bpl.w	8001c4e <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f90:	f7ff f806 	bl	8000fa0 <HAL_GetTick>
 8001f94:	1b80      	subs	r0, r0, r6
 8001f96:	2802      	cmp	r0, #2
 8001f98:	d9f5      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3de>
 8001f9a:	e696      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9c:	4c2e      	ldr	r4, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x4b0>)
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	f43f ae0f 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001faa:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fac:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fb4:	d136      	bne.n	8002024 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fff3 	bl	8000fa0 <HAL_GetTick>
 8001fba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	0198      	lsls	r0, r3, #6
 8001fc0:	d42a      	bmi.n	8002018 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fc6:	06db      	lsls	r3, r3, #27
 8001fc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fcc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001fd8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001fda:	0852      	lsrs	r2, r2, #1
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001fe2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fe4:	0852      	lsrs	r2, r2, #1
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001fec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff6:	68e3      	ldr	r3, [r4, #12]
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ffcf 	bl	8000fa0 <HAL_GetTick>
 8002002:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	0199      	lsls	r1, r3, #6
 8002008:	f53f ae25 	bmi.w	8001c56 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe ffc8 	bl	8000fa0 <HAL_GetTick>
 8002010:	1b40      	subs	r0, r0, r5
 8002012:	2802      	cmp	r0, #2
 8002014:	d9f6      	bls.n	8002004 <HAL_RCC_OscConfig+0x45c>
 8002016:	e658      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe ffc2 	bl	8000fa0 <HAL_GetTick>
 800201c:	1b80      	subs	r0, r0, r6
 800201e:	2802      	cmp	r0, #2
 8002020:	d9cc      	bls.n	8001fbc <HAL_RCC_OscConfig+0x414>
 8002022:	e652      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002028:	bf5e      	ittt	pl
 800202a:	68e3      	ldrpl	r3, [r4, #12]
 800202c:	f023 0303 	bicpl.w	r3, r3, #3
 8002030:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002032:	68e3      	ldr	r3, [r4, #12]
 8002034:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800203e:	f7fe ffaf 	bl	8000fa0 <HAL_GetTick>
 8002042:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	f57f ae05 	bpl.w	8001c56 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ffa8 	bl	8000fa0 <HAL_GetTick>
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	2802      	cmp	r0, #2
 8002054:	d9f6      	bls.n	8002044 <HAL_RCC_OscConfig+0x49c>
 8002056:	e638      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002060:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_RCC_ClockConfig+0x15c>)
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	428b      	cmp	r3, r1
{
 800206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002072:	d32b      	bcc.n	80020cc <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	07d9      	lsls	r1, r3, #31
 8002078:	d435      	bmi.n	80020e6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207a:	6829      	ldr	r1, [r5, #0]
 800207c:	078a      	lsls	r2, r1, #30
 800207e:	f100 8083 	bmi.w	8002188 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002082:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <HAL_RCC_ClockConfig+0x15c>)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	429e      	cmp	r6, r3
 800208c:	f0c0 8084 	bcc.w	8002198 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	f011 0f04 	tst.w	r1, #4
 8002094:	4c4a      	ldr	r4, [pc, #296]	; (80021c0 <HAL_RCC_ClockConfig+0x160>)
 8002096:	f040 808a 	bne.w	80021ae <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	070b      	lsls	r3, r1, #28
 800209c:	d506      	bpl.n	80020ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	692a      	ldr	r2, [r5, #16]
 80020a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020aa:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ac:	f7ff fd14 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 80020b0:	68a3      	ldr	r3, [r4, #8]
 80020b2:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <HAL_RCC_ClockConfig+0x164>)
 80020b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	40d8      	lsrs	r0, r3
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_RCC_ClockConfig+0x168>)
 80020be:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7fe ff45 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 80020c6:	2000      	movs	r0, #0
}
 80020c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f023 0307 	bic.w	r3, r3, #7
 80020d2:	430b      	orrs	r3, r1
 80020d4:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4299      	cmp	r1, r3
 80020de:	d0c9      	beq.n	8002074 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	686a      	ldr	r2, [r5, #4]
 80020e8:	4c35      	ldr	r4, [pc, #212]	; (80021c0 <HAL_RCC_ClockConfig+0x160>)
 80020ea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020ec:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	d11c      	bne.n	800212a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020f4:	d0f4      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	68a3      	ldr	r3, [r4, #8]
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002100:	f7fe ff4e 	bl	8000fa0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002104:	686b      	ldr	r3, [r5, #4]
 8002106:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8002108:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	d118      	bne.n	8002142 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002110:	68a3      	ldr	r3, [r4, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d0af      	beq.n	800207a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe ff41 	bl	8000fa0 <HAL_GetTick>
 800211e:	1bc0      	subs	r0, r0, r7
 8002120:	4540      	cmp	r0, r8
 8002122:	d9f5      	bls.n	8002110 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8002124:	2003      	movs	r0, #3
 8002126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	2a02      	cmp	r2, #2
 800212c:	d102      	bne.n	8002134 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800212e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002132:	e7df      	b.n	80020f4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002134:	b912      	cbnz	r2, 800213c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002136:	f013 0f02 	tst.w	r3, #2
 800213a:	e7db      	b.n	80020f4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800213c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002140:	e7d8      	b.n	80020f4 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	2b02      	cmp	r3, #2
 8002144:	d10a      	bne.n	800215c <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d094      	beq.n	800207a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe ff26 	bl	8000fa0 <HAL_GetTick>
 8002154:	1bc0      	subs	r0, r0, r7
 8002156:	4540      	cmp	r0, r8
 8002158:	d9f5      	bls.n	8002146 <HAL_RCC_ClockConfig+0xe6>
 800215a:	e7e3      	b.n	8002124 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800215c:	b973      	cbnz	r3, 800217c <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800215e:	68a3      	ldr	r3, [r4, #8]
 8002160:	f013 0f0c 	tst.w	r3, #12
 8002164:	d089      	beq.n	800207a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe ff1b 	bl	8000fa0 <HAL_GetTick>
 800216a:	1bc0      	subs	r0, r0, r7
 800216c:	4540      	cmp	r0, r8
 800216e:	d9f6      	bls.n	800215e <HAL_RCC_ClockConfig+0xfe>
 8002170:	e7d8      	b.n	8002124 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7fe ff15 	bl	8000fa0 <HAL_GetTick>
 8002176:	1bc0      	subs	r0, r0, r7
 8002178:	4540      	cmp	r0, r8
 800217a:	d8d3      	bhi.n	8002124 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1f5      	bne.n	8002172 <HAL_RCC_ClockConfig+0x112>
 8002186:	e778      	b.n	800207a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_ClockConfig+0x160>)
 800218a:	68a8      	ldr	r0, [r5, #8]
 800218c:	6893      	ldr	r3, [r2, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4303      	orrs	r3, r0
 8002194:	6093      	str	r3, [r2, #8]
 8002196:	e774      	b.n	8002082 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	f023 0307 	bic.w	r3, r3, #7
 800219e:	4333      	orrs	r3, r6
 80021a0:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	429e      	cmp	r6, r3
 80021aa:	d199      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x80>
 80021ac:	e770      	b.n	8002090 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ae:	68a3      	ldr	r3, [r4, #8]
 80021b0:	68ea      	ldr	r2, [r5, #12]
 80021b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60a3      	str	r3, [r4, #8]
 80021ba:	e76e      	b.n	800209a <HAL_RCC_ClockConfig+0x3a>
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08008aea 	.word	0x08008aea
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_RCC_GetHCLKFreq>:
}
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021e6:	6810      	ldr	r0, [r2, #0]
}
 80021e8:	40d8      	lsrs	r0, r3
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08008afa 	.word	0x08008afa
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_GetPCLK2Freq+0x14>)
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002206:	6810      	ldr	r0, [r2, #0]
}
 8002208:	40d8      	lsrs	r0, r3
 800220a:	4770      	bx	lr
 800220c:	40021000 	.word	0x40021000
 8002210:	08008afa 	.word	0x08008afa
 8002214:	20000000 	.word	0x20000000

08002218 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800221a:	4b44      	ldr	r3, [pc, #272]	; (800232c <RCCEx_PLLSAI1_Config+0x114>)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	f012 0f03 	tst.w	r2, #3
{
 8002222:	4605      	mov	r5, r0
 8002224:	460e      	mov	r6, r1
 8002226:	461c      	mov	r4, r3
 8002228:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800222a:	d039      	beq.n	80022a0 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	4282      	cmp	r2, r0
 8002234:	d14b      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8002236:	2a00      	cmp	r2, #0
 8002238:	d049      	beq.n	80022ce <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800223a:	68db      	ldr	r3, [r3, #12]
       ||
 800223c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800223e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002242:	3301      	adds	r3, #1
       ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d142      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800224e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe fea6 	bl	8000fa0 <HAL_GetTick>
 8002254:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	011a      	lsls	r2, r3, #4
 800225a:	d441      	bmi.n	80022e0 <RCCEx_PLLSAI1_Config+0xc8>
 800225c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800225e:	2e00      	cmp	r6, #0
 8002260:	d045      	beq.n	80022ee <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002262:	2e01      	cmp	r6, #1
 8002264:	d14f      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002266:	6922      	ldr	r2, [r4, #16]
 8002268:	6928      	ldr	r0, [r5, #16]
 800226a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800226e:	0840      	lsrs	r0, r0, #1
 8002270:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002274:	3801      	subs	r0, #1
 8002276:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800227a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800227e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002286:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fe8a 	bl	8000fa0 <HAL_GetTick>
 800228c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	d545      	bpl.n	8002320 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002294:	6923      	ldr	r3, [r4, #16]
 8002296:	69aa      	ldr	r2, [r5, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	6123      	str	r3, [r4, #16]
 800229c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80022a0:	2802      	cmp	r0, #2
 80022a2:	d010      	beq.n	80022c6 <RCCEx_PLLSAI1_Config+0xae>
 80022a4:	2803      	cmp	r0, #3
 80022a6:	d014      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0xba>
 80022a8:	2801      	cmp	r0, #1
 80022aa:	d110      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	079f      	lsls	r7, r3, #30
 80022b0:	d5f5      	bpl.n	800229e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b2:	68e3      	ldr	r3, [r4, #12]
 80022b4:	686a      	ldr	r2, [r5, #4]
 80022b6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80022ba:	3a01      	subs	r2, #1
 80022bc:	4318      	orrs	r0, r3
 80022be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80022c2:	60e0      	str	r0, [r4, #12]
 80022c4:	e7c0      	b.n	8002248 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022cc:	d1f1      	bne.n	80022b2 <RCCEx_PLLSAI1_Config+0x9a>
 80022ce:	2001      	movs	r0, #1
 80022d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	0391      	lsls	r1, r2, #14
 80022d6:	d4ec      	bmi.n	80022b2 <RCCEx_PLLSAI1_Config+0x9a>
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80022de:	e7f5      	b.n	80022cc <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e0:	f7fe fe5e 	bl	8000fa0 <HAL_GetTick>
 80022e4:	1bc0      	subs	r0, r0, r7
 80022e6:	2802      	cmp	r0, #2
 80022e8:	d9b5      	bls.n	8002256 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80022ea:	2003      	movs	r0, #3
 80022ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022ee:	6922      	ldr	r2, [r4, #16]
 80022f0:	68e9      	ldr	r1, [r5, #12]
 80022f2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80022f6:	06c9      	lsls	r1, r1, #27
 80022f8:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80022fc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002300:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002302:	6123      	str	r3, [r4, #16]
 8002304:	e7bc      	b.n	8002280 <RCCEx_PLLSAI1_Config+0x68>
 8002306:	6923      	ldr	r3, [r4, #16]
 8002308:	6968      	ldr	r0, [r5, #20]
 800230a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800230e:	0840      	lsrs	r0, r0, #1
 8002310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002314:	3801      	subs	r0, #1
 8002316:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800231a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800231e:	e7f0      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002320:	f7fe fe3e 	bl	8000fa0 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	2802      	cmp	r0, #2
 8002328:	d9b1      	bls.n	800228e <RCCEx_PLLSAI1_Config+0x76>
 800232a:	e7de      	b.n	80022ea <RCCEx_PLLSAI1_Config+0xd2>
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002334:	6805      	ldr	r5, [r0, #0]
 8002336:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800233a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800233c:	d00e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800233e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002340:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002344:	d05b      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002346:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800234a:	d05d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800234c:	2900      	cmp	r1, #0
 800234e:	d166      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002350:	3004      	adds	r0, #4
 8002352:	f7ff ff61 	bl	8002218 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002356:	4605      	mov	r5, r0
 8002358:	2800      	cmp	r0, #0
 800235a:	d055      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	039e      	lsls	r6, r3, #14
 8002360:	d56d      	bpl.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4e92      	ldr	r6, [pc, #584]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002364:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002366:	00d8      	lsls	r0, r3, #3
 8002368:	d45b      	bmi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	65b3      	str	r3, [r6, #88]	; 0x58
 8002372:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800237c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80025b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002382:	f8d8 3000 	ldr.w	r3, [r8]
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800238e:	f7fe fe07 	bl	8000fa0 <HAL_GetTick>
 8002392:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002394:	f8d8 3000 	ldr.w	r3, [r8]
 8002398:	05d9      	lsls	r1, r3, #23
 800239a:	d544      	bpl.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 800239c:	2d00      	cmp	r5, #0
 800239e:	d149      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023a0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80023a8:	d014      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d011      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80023b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023bc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023cc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80023d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023d4:	07da      	lsls	r2, r3, #31
 80023d6:	d509      	bpl.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80023d8:	f7fe fde2 	bl	8000fa0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80023e2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80023e6:	079b      	lsls	r3, r3, #30
 80023e8:	f140 80c2 	bpl.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80023f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80023fc:	e01a      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023fe:	4a6b      	ldr	r2, [pc, #428]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002400:	68d3      	ldr	r3, [r2, #12]
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800240a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800240c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002410:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002414:	430b      	orrs	r3, r1
 8002416:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800241a:	2500      	movs	r5, #0
 800241c:	e79e      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 800241e:	2501      	movs	r5, #1
 8002420:	e79c      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2700      	movs	r7, #0
 8002424:	e7ab      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fdbb 	bl	8000fa0 <HAL_GetTick>
 800242a:	eba0 0009 	sub.w	r0, r0, r9
 800242e:	2802      	cmp	r0, #2
 8002430:	d9b0      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8002432:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002434:	b11f      	cbz	r7, 800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	07df      	lsls	r7, r3, #31
 8002442:	d508      	bpl.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002444:	4959      	ldr	r1, [pc, #356]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002446:	6a20      	ldr	r0, [r4, #32]
 8002448:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800244c:	f022 0203 	bic.w	r2, r2, #3
 8002450:	4302      	orrs	r2, r0
 8002452:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002456:	079e      	lsls	r6, r3, #30
 8002458:	d508      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245a:	4954      	ldr	r1, [pc, #336]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800245c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800245e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002462:	f022 020c 	bic.w	r2, r2, #12
 8002466:	4302      	orrs	r2, r0
 8002468:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800246c:	0698      	lsls	r0, r3, #26
 800246e:	d508      	bpl.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002470:	494e      	ldr	r1, [pc, #312]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002472:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002474:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800247c:	4302      	orrs	r2, r0
 800247e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002482:	0599      	lsls	r1, r3, #22
 8002484:	d508      	bpl.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002486:	4949      	ldr	r1, [pc, #292]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002488:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800248a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800248e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002492:	4302      	orrs	r2, r0
 8002494:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002498:	055a      	lsls	r2, r3, #21
 800249a:	d508      	bpl.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800249c:	4943      	ldr	r1, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800249e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024a8:	4302      	orrs	r2, r0
 80024aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ae:	065f      	lsls	r7, r3, #25
 80024b0:	d508      	bpl.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b2:	493e      	ldr	r1, [pc, #248]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024be:	4302      	orrs	r2, r0
 80024c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c4:	05de      	lsls	r6, r3, #23
 80024c6:	d508      	bpl.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024c8:	4938      	ldr	r1, [pc, #224]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80024cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80024d4:	4302      	orrs	r2, r0
 80024d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024da:	0498      	lsls	r0, r3, #18
 80024dc:	d50f      	bpl.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024de:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80024e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024ea:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024f4:	d144      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f6:	68d3      	ldr	r3, [r2, #12]
 80024f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	0359      	lsls	r1, r3, #13
 8002502:	d50f      	bpl.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002506:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002508:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800250c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002510:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002512:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251a:	d13c      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	68d3      	ldr	r3, [r2, #12]
 800251e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002522:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	045a      	lsls	r2, r3, #17
 8002528:	d512      	bpl.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800252a:	4920      	ldr	r1, [pc, #128]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800252c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800252e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002532:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002536:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002538:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002540:	d106      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002542:	2102      	movs	r1, #2
 8002544:	1d20      	adds	r0, r4, #4
 8002546:	f7ff fe67 	bl	8002218 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800254a:	2800      	cmp	r0, #0
 800254c:	bf18      	it	ne
 800254e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	d508      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002558:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800255a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800255e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002562:	430b      	orrs	r3, r1
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002568:	4628      	mov	r0, r5
 800256a:	b003      	add	sp, #12
 800256c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe fd16 	bl	8000fa0 <HAL_GetTick>
 8002574:	eba0 0008 	sub.w	r0, r0, r8
 8002578:	4548      	cmp	r0, r9
 800257a:	f67f af32 	bls.w	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800257e:	e758      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002580:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002584:	d1bb      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002586:	2101      	movs	r1, #1
 8002588:	1d20      	adds	r0, r4, #4
 800258a:	f7ff fe45 	bl	8002218 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800258e:	2800      	cmp	r0, #0
 8002590:	bf18      	it	ne
 8002592:	4605      	movne	r5, r0
 8002594:	e7b3      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002596:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800259a:	d1c3      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800259c:	2101      	movs	r1, #1
 800259e:	1d20      	adds	r0, r4, #4
 80025a0:	f7ff fe3a 	bl	8002218 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	bf18      	it	ne
 80025a8:	4605      	movne	r5, r0
 80025aa:	e7bb      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000

080025b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b4:	6a03      	ldr	r3, [r0, #32]
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025bc:	6a03      	ldr	r3, [r0, #32]
{
 80025be:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80025ce:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80025d2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80025d6:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d8:	4c12      	ldr	r4, [pc, #72]	; (8002624 <TIM_OC1_SetConfig+0x70>)
 80025da:	42a0      	cmp	r0, r4
 80025dc:	d006      	beq.n	80025ec <TIM_OC1_SetConfig+0x38>
 80025de:	4e12      	ldr	r6, [pc, #72]	; (8002628 <TIM_OC1_SetConfig+0x74>)
 80025e0:	42b0      	cmp	r0, r6
 80025e2:	d003      	beq.n	80025ec <TIM_OC1_SetConfig+0x38>
 80025e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80025e8:	42b0      	cmp	r0, r6
 80025ea:	d114      	bne.n	8002616 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ec:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80025ee:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80025f2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025f4:	42a0      	cmp	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80025f6:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025fa:	d006      	beq.n	800260a <TIM_OC1_SetConfig+0x56>
 80025fc:	4c0a      	ldr	r4, [pc, #40]	; (8002628 <TIM_OC1_SetConfig+0x74>)
 80025fe:	42a0      	cmp	r0, r4
 8002600:	d003      	beq.n	800260a <TIM_OC1_SetConfig+0x56>
 8002602:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002606:	42a0      	cmp	r0, r4
 8002608:	d105      	bne.n	8002616 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800260a:	694c      	ldr	r4, [r1, #20]
 800260c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800260e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002612:	4334      	orrs	r4, r6
 8002614:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002616:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002618:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800261a:	684a      	ldr	r2, [r1, #4]
 800261c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	6203      	str	r3, [r0, #32]
 8002620:	bd70      	pop	{r4, r5, r6, pc}
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40014000 	.word	0x40014000

0800262c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800262c:	6a03      	ldr	r3, [r0, #32]
 800262e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002632:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002634:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002636:	6842      	ldr	r2, [r0, #4]
{
 8002638:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800263a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800263e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002642:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002646:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002648:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800264a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
 800264e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002652:	4d0f      	ldr	r5, [pc, #60]	; (8002690 <TIM_OC3_SetConfig+0x64>)
 8002654:	42a8      	cmp	r0, r5
 8002656:	d10e      	bne.n	8002676 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002658:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800265a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800265e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002666:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002668:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800266a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800266e:	4335      	orrs	r5, r6
 8002670:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002674:	e005      	b.n	8002682 <TIM_OC3_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002676:	4d07      	ldr	r5, [pc, #28]	; (8002694 <TIM_OC3_SetConfig+0x68>)
 8002678:	42a8      	cmp	r0, r5
 800267a:	d0f4      	beq.n	8002666 <TIM_OC3_SetConfig+0x3a>
 800267c:	4d06      	ldr	r5, [pc, #24]	; (8002698 <TIM_OC3_SetConfig+0x6c>)
 800267e:	42a8      	cmp	r0, r5
 8002680:	d0f1      	beq.n	8002666 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002682:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002684:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002686:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002688:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268a:	6203      	str	r3, [r0, #32]
}
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	bf00      	nop
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400

0800269c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800269c:	6a03      	ldr	r3, [r0, #32]
 800269e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a4:	6a02      	ldr	r2, [r0, #32]
{
 80026a6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026aa:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80026ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80026b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80026ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80026bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
 80026c0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	4d0a      	ldr	r5, [pc, #40]	; (80026f0 <TIM_OC4_SetConfig+0x54>)
 80026c6:	42a8      	cmp	r0, r5
 80026c8:	d007      	beq.n	80026da <TIM_OC4_SetConfig+0x3e>
 80026ca:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d003      	beq.n	80026da <TIM_OC4_SetConfig+0x3e>
 80026d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026d6:	42a8      	cmp	r0, r5
 80026d8:	d104      	bne.n	80026e4 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80026da:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026dc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80026e0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e8:	684b      	ldr	r3, [r1, #4]
 80026ea:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ec:	6202      	str	r2, [r0, #32]
 80026ee:	bd30      	pop	{r4, r5, pc}
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026f4:	6a03      	ldr	r3, [r0, #32]
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fc:	6a02      	ldr	r2, [r0, #32]
{
 80026fe:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002702:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002704:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800270e:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002710:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002712:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16);
 8002716:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800271a:	4d0b      	ldr	r5, [pc, #44]	; (8002748 <TIM_OC5_SetConfig+0x54>)
 800271c:	42a8      	cmp	r0, r5
 800271e:	d007      	beq.n	8002730 <TIM_OC5_SetConfig+0x3c>
 8002720:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002724:	42a8      	cmp	r0, r5
 8002726:	d003      	beq.n	8002730 <TIM_OC5_SetConfig+0x3c>
 8002728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800272c:	42a8      	cmp	r0, r5
 800272e:	d104      	bne.n	800273a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002730:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002732:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002736:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800273c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800273e:	684b      	ldr	r3, [r1, #4]
 8002740:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002742:	6202      	str	r2, [r0, #32]
 8002744:	bd30      	pop	{r4, r5, pc}
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00

0800274c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800274c:	6a03      	ldr	r3, [r0, #32]
 800274e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002752:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002754:	6a02      	ldr	r2, [r0, #32]
{
 8002756:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002758:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800275a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800275c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800275e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002766:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800276a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800276c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002770:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002774:	4d0a      	ldr	r5, [pc, #40]	; (80027a0 <TIM_OC6_SetConfig+0x54>)
 8002776:	42a8      	cmp	r0, r5
 8002778:	d007      	beq.n	800278a <TIM_OC6_SetConfig+0x3e>
 800277a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800277e:	42a8      	cmp	r0, r5
 8002780:	d003      	beq.n	800278a <TIM_OC6_SetConfig+0x3e>
 8002782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002786:	42a8      	cmp	r0, r5
 8002788:	d104      	bne.n	8002794 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800278a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800278c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002790:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002794:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002796:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002798:	684b      	ldr	r3, [r1, #4]
 800279a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279c:	6202      	str	r2, [r0, #32]
 800279e:	bd30      	pop	{r4, r5, pc}
 80027a0:	40012c00 	.word	0x40012c00

080027a4 <HAL_TIM_PWM_MspInit>:
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_PeriodElapsedCallback>:
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80027a8:	4770      	bx	lr

080027aa <HAL_TIM_IC_CaptureCallback>:
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80027ac:	4770      	bx	lr

080027ae <HAL_TIM_TriggerCallback>:
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	0791      	lsls	r1, r2, #30
{
 80027b6:	b510      	push	{r4, lr}
 80027b8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ba:	d50e      	bpl.n	80027da <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	0792      	lsls	r2, r2, #30
 80027c0:	d50b      	bpl.n	80027da <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c2:	f06f 0202 	mvn.w	r2, #2
 80027c6:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80027c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80027cc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ce:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80027d0:	d077      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	f7ff ffea 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	2300      	movs	r3, #0
 80027d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	0750      	lsls	r0, r2, #29
 80027e0:	d510      	bpl.n	8002804 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	0751      	lsls	r1, r2, #29
 80027e6:	d50d      	bpl.n	8002804 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80027ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80027f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80027f8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80027fa:	d068      	beq.n	80028ce <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80027fc:	f7ff ffd5 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002800:	2300      	movs	r3, #0
 8002802:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	0712      	lsls	r2, r2, #28
 800280a:	d50f      	bpl.n	800282c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	0710      	lsls	r0, r2, #28
 8002810:	d50c      	bpl.n	800282c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002812:	f06f 0208 	mvn.w	r2, #8
 8002816:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002818:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800281c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002820:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002822:	d05a      	beq.n	80028da <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002824:	f7ff ffc1 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002828:	2300      	movs	r3, #0
 800282a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	06d2      	lsls	r2, r2, #27
 8002832:	d510      	bpl.n	8002856 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	06d0      	lsls	r0, r2, #27
 8002838:	d50d      	bpl.n	8002856 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800283a:	f06f 0210 	mvn.w	r2, #16
 800283e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002840:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002842:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002844:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002848:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800284c:	d04b      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	f7ff ffac 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	2300      	movs	r3, #0
 8002854:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	07d1      	lsls	r1, r2, #31
 800285c:	d508      	bpl.n	8002870 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	07d2      	lsls	r2, r2, #31
 8002862:	d505      	bpl.n	8002870 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff9b 	bl	80027a6 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	0610      	lsls	r0, r2, #24
 8002876:	d508      	bpl.n	800288a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	0611      	lsls	r1, r2, #24
 800287c:	d505      	bpl.n	800288a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800287e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002882:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fae2 	bl	8002e4e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	0652      	lsls	r2, r2, #25
 8002890:	d508      	bpl.n	80028a4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	0650      	lsls	r0, r2, #25
 8002896:	d505      	bpl.n	80028a4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800289c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ff85 	bl	80027ae <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	0691      	lsls	r1, r2, #26
 80028aa:	d522      	bpl.n	80028f2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	0692      	lsls	r2, r2, #26
 80028b0:	d51f      	bpl.n	80028f2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80028b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80028be:	f000 bac5 	b.w	8002e4c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	f7ff ff71 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff70 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
 80028cc:	e783      	b.n	80027d6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	f7ff ff6b 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff ff6a 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
 80028d8:	e792      	b.n	8002800 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	f7ff ff65 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff ff64 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
 80028e4:	e7a0      	b.n	8002828 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	f7ff ff5f 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff ff5e 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
 80028f0:	e7af      	b.n	8002852 <HAL_TIM_IRQHandler+0xa2>
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80028f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	4290      	cmp	r0, r2
{
 80028fa:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028fc:	d002      	beq.n	8002904 <TIM_Base_SetConfig+0x10>
 80028fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002902:	d109      	bne.n	8002918 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8002904:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800290c:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002910:	d009      	beq.n	8002926 <TIM_Base_SetConfig+0x32>
 8002912:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002916:	d006      	beq.n	8002926 <TIM_Base_SetConfig+0x32>
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <TIM_Base_SetConfig+0x70>)
 800291a:	4290      	cmp	r0, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x32>
 800291e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002922:	4290      	cmp	r0, r2
 8002924:	d103      	bne.n	800292e <TIM_Base_SetConfig+0x3a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800292e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002934:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002936:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002938:	688b      	ldr	r3, [r1, #8]
 800293a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800293c:	680b      	ldr	r3, [r1, #0]
 800293e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <TIM_Base_SetConfig+0x6c>)
 8002942:	4298      	cmp	r0, r3
 8002944:	d007      	beq.n	8002956 <TIM_Base_SetConfig+0x62>
 8002946:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800294a:	4298      	cmp	r0, r3
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0x62>
 800294e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002952:	4298      	cmp	r0, r3
 8002954:	d101      	bne.n	800295a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8002956:	690b      	ldr	r3, [r1, #16]
 8002958:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800295a:	2301      	movs	r3, #1
 800295c:	6143      	str	r3, [r0, #20]
 800295e:	bd10      	pop	{r4, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40014000 	.word	0x40014000

08002968 <HAL_TIM_Base_Init>:
{
 8002968:	b510      	push	{r4, lr}
  if(htim == NULL)
 800296a:	4604      	mov	r4, r0
 800296c:	b1a0      	cbz	r0, 8002998 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800296e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002976:	b91b      	cbnz	r3, 8002980 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002978:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800297c:	f001 f910 	bl	8003ba0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002980:	2302      	movs	r3, #2
 8002982:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002986:	6820      	ldr	r0, [r4, #0]
 8002988:	1d21      	adds	r1, r4, #4
 800298a:	f7ff ffb3 	bl	80028f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800298e:	2301      	movs	r3, #1
 8002990:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002994:	2000      	movs	r0, #0
 8002996:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
}
 800299a:	bd10      	pop	{r4, pc}

0800299c <HAL_TIM_PWM_Init>:
{
 800299c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800299e:	4604      	mov	r4, r0
 80029a0:	b1a0      	cbz	r0, 80029cc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80029a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029aa:	b91b      	cbnz	r3, 80029b4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80029ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80029b0:	f7ff fef8 	bl	80027a4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	6820      	ldr	r0, [r4, #0]
 80029bc:	1d21      	adds	r1, r4, #4
 80029be:	f7ff ff99 	bl	80028f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
 80029ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
}
 80029ce:	bd10      	pop	{r4, pc}

080029d0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d0:	6a03      	ldr	r3, [r0, #32]
 80029d2:	f023 0310 	bic.w	r3, r3, #16
 80029d6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80029d8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80029da:	6842      	ldr	r2, [r0, #4]
{
 80029dc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80029de:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80029e6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80029ea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 80029ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80029f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
 80029f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029f8:	4d0e      	ldr	r5, [pc, #56]	; (8002a34 <TIM_OC2_SetConfig+0x64>)
 80029fa:	42a8      	cmp	r0, r5
 80029fc:	d10e      	bne.n	8002a1c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80029fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002a04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002a0c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002a0e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002a14:	4335      	orrs	r5, r6
 8002a16:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002a1a:	e005      	b.n	8002a28 <TIM_OC2_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1c:	4d06      	ldr	r5, [pc, #24]	; (8002a38 <TIM_OC2_SetConfig+0x68>)
 8002a1e:	42a8      	cmp	r0, r5
 8002a20:	d0f4      	beq.n	8002a0c <TIM_OC2_SetConfig+0x3c>
 8002a22:	4d06      	ldr	r5, [pc, #24]	; (8002a3c <TIM_OC2_SetConfig+0x6c>)
 8002a24:	42a8      	cmp	r0, r5
 8002a26:	d0f1      	beq.n	8002a0c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8002a28:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a2a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a2c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a2e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002a30:	6203      	str	r3, [r0, #32]
}
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40014400 	.word	0x40014400

08002a40 <HAL_TIM_PWM_ConfigChannel>:
{
 8002a40:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
{
 8002a48:	4604      	mov	r4, r0
 8002a4a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002a4e:	d010      	beq.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a50:	2301      	movs	r3, #1
  switch (Channel)
 8002a52:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002a54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002a5c:	d043      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 8002a5e:	d809      	bhi.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002a60:	b1fa      	cbz	r2, 8002aa2 <HAL_TIM_PWM_ConfigChannel+0x62>
 8002a62:	2a04      	cmp	r2, #4
 8002a64:	d02e      	beq.n	8002ac4 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8002a66:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002a68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002a74:	2a10      	cmp	r2, #16
 8002a76:	d047      	beq.n	8002b08 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8002a78:	2a14      	cmp	r2, #20
 8002a7a:	d056      	beq.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0xea>
 8002a7c:	2a0c      	cmp	r2, #12
 8002a7e:	d1f2      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	f7ff fe0b 	bl	800269c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a86:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002a88:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aa0:	e030      	b.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	f7ff fd86 	bl	80025b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aa8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aaa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002ac0:	619a      	str	r2, [r3, #24]
    break;
 8002ac2:	e7d0      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ac4:	6820      	ldr	r0, [r4, #0]
 8002ac6:	f7ff ff83 	bl	80029d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002acc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ae4:	e7ec      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	f7ff fda0 	bl	800262c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	f022 0204 	bic.w	r2, r2, #4
 8002afe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002b04:	61da      	str	r2, [r3, #28]
    break;
 8002b06:	e7ae      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f7ff fdf3 	bl	80026f4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b0e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b14:	f042 0208 	orr.w	r2, r2, #8
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1c:	f022 0204 	bic.w	r2, r2, #4
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b24:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002b28:	e79d      	b.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	f7ff fe0e 	bl	800274c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002b32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b4a:	e7ec      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0xe6>

08002b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b4c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002b4e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002b50:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002b56:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002b5a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5c:	6083      	str	r3, [r0, #8]
 8002b5e:	bd10      	pop	{r4, pc}

08002b60 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
{
 8002b66:	b570      	push	{r4, r5, r6, lr}
 8002b68:	4604      	mov	r4, r0
 8002b6a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002b76:	2301      	movs	r3, #1
 8002b78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7e:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <HAL_TIM_ConfigClockSource+0x168>)
 8002b80:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002b82:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b84:	680b      	ldr	r3, [r1, #0]
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d075      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x116>
 8002b8a:	d818      	bhi.n	8002bbe <HAL_TIM_ConfigClockSource+0x5e>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	f000 808f 	beq.w	8002cb0 <HAL_TIM_ConfigClockSource+0x150>
 8002b92:	d809      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x48>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8085 	beq.w	8002ca4 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002b9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ba2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	f000 8087 	beq.w	8002cbc <HAL_TIM_ConfigClockSource+0x15c>
 8002bae:	2b30      	cmp	r3, #48	; 0x30
 8002bb0:	d1f3      	bne.n	8002b9a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8002bb2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bb8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002bbc:	e033      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002bbe:	2b70      	cmp	r3, #112	; 0x70
 8002bc0:	d033      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xca>
 8002bc2:	d81b      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x9c>
 8002bc4:	2b50      	cmp	r3, #80	; 0x50
 8002bc6:	d03f      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xe8>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d1e6      	bne.n	8002b9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bcc:	684d      	ldr	r5, [r1, #4]
 8002bce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd0:	6a01      	ldr	r1, [r0, #32]
 8002bd2:	f021 0110 	bic.w	r1, r1, #16
 8002bd6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002bda:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bdc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002be4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002be8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002bec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bee:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002bf0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bf6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002bfa:	e014      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_ConfigClockSource+0xbc>
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c06:	d1c8      	bne.n	8002b9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	68cb      	ldr	r3, [r1, #12]
 8002c0a:	684a      	ldr	r2, [r1, #4]
 8002c0c:	6889      	ldr	r1, [r1, #8]
 8002c0e:	f7ff ff9d 	bl	8002b4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	6893      	ldr	r3, [r2, #8]
 8002c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1a:	e013      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c1c:	6883      	ldr	r3, [r0, #8]
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002c26:	6083      	str	r3, [r0, #8]
 8002c28:	e7b7      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	68cb      	ldr	r3, [r1, #12]
 8002c2c:	684a      	ldr	r2, [r1, #4]
 8002c2e:	6889      	ldr	r1, [r1, #8]
 8002c30:	f7ff ff8c 	bl	8002b4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c34:	6822      	ldr	r2, [r4, #0]
 8002c36:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	6093      	str	r3, [r2, #8]
    break;
 8002c46:	e7a8      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c48:	684a      	ldr	r2, [r1, #4]
 8002c4a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c4c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4e:	6a05      	ldr	r5, [r0, #32]
 8002c50:	f025 0501 	bic.w	r5, r5, #1
 8002c54:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c58:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002c60:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c64:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c66:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c68:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002c6a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c70:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002c74:	e7d7      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	684a      	ldr	r2, [r1, #4]
 8002c78:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7c:	6a05      	ldr	r5, [r0, #32]
 8002c7e:	f025 0501 	bic.w	r5, r5, #1
 8002c82:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002c8e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c92:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c96:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002c98:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c9e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002ca2:	e7c0      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002ca4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002caa:	f043 0307 	orr.w	r3, r3, #7
 8002cae:	e7ba      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002cb0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cb6:	f043 0317 	orr.w	r3, r3, #23
 8002cba:	e7b4      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002cbc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cc2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002cc6:	e7ae      	b.n	8002c26 <HAL_TIM_ConfigClockSource+0xc6>
 8002cc8:	fffe0088 	.word	0xfffe0088

08002ccc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ccc:	6a03      	ldr	r3, [r0, #32]
{
 8002cce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002cd0:	2401      	movs	r4, #1
 8002cd2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002cd4:	ea23 0304 	bic.w	r3, r3, r4
 8002cd8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cda:	6a03      	ldr	r3, [r0, #32]
 8002cdc:	408a      	lsls	r2, r1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	6202      	str	r2, [r0, #32]
 8002ce2:	bd10      	pop	{r4, pc}

08002ce4 <HAL_TIM_PWM_Start>:
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	f7ff ffee 	bl	8002ccc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_TIM_PWM_Start+0x38>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_TIM_PWM_Start+0x24>
 8002cf8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <HAL_TIM_PWM_Start+0x24>
 8002d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <HAL_TIM_PWM_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8002d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
}
 8002d18:	2000      	movs	r0, #0
 8002d1a:	bd10      	pop	{r4, pc}
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <HAL_TIM_PWM_Stop>:
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6800      	ldr	r0, [r0, #0]
 8002d28:	f7ff ffd0 	bl	8002ccc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_TIM_PWM_Stop+0x68>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_TIM_PWM_Stop+0x24>
 8002d34:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <HAL_TIM_PWM_Stop+0x24>
 8002d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10d      	bne.n	8002d60 <HAL_TIM_PWM_Stop+0x40>
    __HAL_TIM_MOE_DISABLE(htim);
 8002d44:	6a19      	ldr	r1, [r3, #32]
 8002d46:	f241 1211 	movw	r2, #4369	; 0x1111
 8002d4a:	4211      	tst	r1, r2
 8002d4c:	d108      	bne.n	8002d60 <HAL_TIM_PWM_Stop+0x40>
 8002d4e:	6a19      	ldr	r1, [r3, #32]
 8002d50:	f240 4244 	movw	r2, #1092	; 0x444
 8002d54:	4211      	tst	r1, r2
 8002d56:	bf02      	ittt	eq
 8002d58:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002d5a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8002d5e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002d60:	6a19      	ldr	r1, [r3, #32]
 8002d62:	f241 1211 	movw	r2, #4369	; 0x1111
 8002d66:	4211      	tst	r1, r2
 8002d68:	d108      	bne.n	8002d7c <HAL_TIM_PWM_Stop+0x5c>
 8002d6a:	6a19      	ldr	r1, [r3, #32]
 8002d6c:	f240 4244 	movw	r2, #1092	; 0x444
 8002d70:	4211      	tst	r1, r2
 8002d72:	d103      	bne.n	8002d7c <HAL_TIM_PWM_Stop+0x5c>
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002d82:	2000      	movs	r0, #0
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00

08002d8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
{
 8002d92:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002d94:	d018      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d96:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d98:	4d0c      	ldr	r5, [pc, #48]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002d9a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d9e:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002da0:	bf02      	ittt	eq
 8002da2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002da4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002da8:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002daa:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dac:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002db4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dba:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002dbc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002dbe:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002dc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002dc8:	2002      	movs	r0, #2
}
 8002dca:	bd30      	pop	{r4, r5, pc}
 8002dcc:	40012c00 	.word	0x40012c00

08002dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
{
 8002dd6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002dd8:	d034      	beq.n	8002e44 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dda:	68cb      	ldr	r3, [r1, #12]
 8002ddc:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002dde:	4c1a      	ldr	r4, [pc, #104]	; (8002e48 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002de6:	684a      	ldr	r2, [r1, #4]
 8002de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dee:	680a      	ldr	r2, [r1, #0]
 8002df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002df6:	690a      	ldr	r2, [r1, #16]
 8002df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002dfe:	694a      	ldr	r2, [r1, #20]
 8002e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e06:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002e0e:	698a      	ldr	r2, [r1, #24]
 8002e10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e18:	6802      	ldr	r2, [r0, #0]
 8002e1a:	42a2      	cmp	r2, r4
 8002e1c:	d10c      	bne.n	8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002e1e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002e20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e24:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e28:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e2a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e30:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002e36:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002e44:	2002      	movs	r0, #2
}
 8002e46:	bd10      	pop	{r4, pc}
 8002e48:	40012c00 	.word	0x40012c00

08002e4c <HAL_TIMEx_CommutationCallback>:
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	4770      	bx	lr

08002e50 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8002e50:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e52:	69c1      	ldr	r1, [r0, #28]
{
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e58:	6883      	ldr	r3, [r0, #8]
 8002e5a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e5c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e5e:	4303      	orrs	r3, r0
 8002e60:	6960      	ldr	r0, [r4, #20]
 8002e62:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e64:	4882      	ldr	r0, [pc, #520]	; (8003070 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e66:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	4028      	ands	r0, r5
 8002e6a:	4303      	orrs	r3, r0
 8002e6c:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6e:	6853      	ldr	r3, [r2, #4]
 8002e70:	68e0      	ldr	r0, [r4, #12]
 8002e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e76:	4303      	orrs	r3, r0
 8002e78:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e7a:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e7c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e7e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e80:	bf1c      	itt	ne
 8002e82:	6a23      	ldrne	r3, [r4, #32]
 8002e84:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e86:	6893      	ldr	r3, [r2, #8]
 8002e88:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e8c:	4303      	orrs	r3, r0
 8002e8e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e90:	4b79      	ldr	r3, [pc, #484]	; (8003078 <UART_SetConfig+0x228>)
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d114      	bne.n	8002ec0 <UART_SetConfig+0x70>
 8002e96:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002e9a:	4a78      	ldr	r2, [pc, #480]	; (800307c <UART_SetConfig+0x22c>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
 8002eaa:	f040 80aa 	bne.w	8003002 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d820      	bhi.n	8002ef4 <UART_SetConfig+0xa4>
 8002eb2:	e8df f003 	tbb	[pc, r3]
 8002eb6:	8f77      	.short	0x8f77
 8002eb8:	1f9b1f92 	.word	0x1f9b1f92
 8002ebc:	1f1f      	.short	0x1f1f
 8002ebe:	9e          	.byte	0x9e
 8002ebf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <UART_SetConfig+0x230>)
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d107      	bne.n	8002ed6 <UART_SetConfig+0x86>
 8002ec6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002eca:	4a6e      	ldr	r2, [pc, #440]	; (8003084 <UART_SetConfig+0x234>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	e7e6      	b.n	8002ea4 <UART_SetConfig+0x54>
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <UART_SetConfig+0x224>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 80c2 	bne.w	8003062 <UART_SetConfig+0x212>
 8002ede:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002ee2:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002ee6:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002eea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002eee:	d02a      	beq.n	8002f46 <UART_SetConfig+0xf6>
 8002ef0:	d806      	bhi.n	8002f00 <UART_SetConfig+0xb0>
 8002ef2:	b315      	cbz	r5, 8002f3a <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002ef4:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002efa:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8002efc:	4610      	mov	r0, r2
 8002efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f00:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002f04:	d006      	beq.n	8002f14 <UART_SetConfig+0xc4>
 8002f06:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002f0a:	d1f3      	bne.n	8002ef4 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f10:	2508      	movs	r5, #8
 8002f12:	e001      	b.n	8002f18 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f14:	485c      	ldr	r0, [pc, #368]	; (8003088 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f16:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8002f18:	6862      	ldr	r2, [r4, #4]
 8002f1a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	d8e8      	bhi.n	8002ef4 <UART_SetConfig+0xa4>
 8002f22:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f26:	d8e5      	bhi.n	8002ef4 <UART_SetConfig+0xa4>
        switch (clocksource)
 8002f28:	2d08      	cmp	r5, #8
 8002f2a:	d838      	bhi.n	8002f9e <UART_SetConfig+0x14e>
 8002f2c:	e8df f005 	tbb	[pc, r5]
 8002f30:	3726370f 	.word	0x3726370f
 8002f34:	3737372e 	.word	0x3737372e
 8002f38:	31          	.byte	0x31
 8002f39:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7ff f94d 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d1ea      	bne.n	8002f18 <UART_SetConfig+0xc8>
 8002f42:	4602      	mov	r2, r0
 8002f44:	e7d7      	b.n	8002ef6 <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f46:	f7fe fdc7 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
      break;
 8002f4a:	2504      	movs	r5, #4
 8002f4c:	e7f7      	b.n	8002f3e <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f4e:	f7ff f943 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f58:	0856      	lsrs	r6, r2, #1
 8002f5a:	2700      	movs	r7, #0
 8002f5c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002f60:	2300      	movs	r3, #0
 8002f62:	4630      	mov	r0, r6
 8002f64:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f66:	f7fd fe6b 	bl	8000c40 <__aeabi_uldivmod>
          break;
 8002f6a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <UART_SetConfig+0x23c>)
 8002f6e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002f72:	4299      	cmp	r1, r3
 8002f74:	d8be      	bhi.n	8002ef4 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	60d8      	str	r0, [r3, #12]
 8002f7a:	e7bc      	b.n	8002ef6 <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002f7c:	4844      	ldr	r0, [pc, #272]	; (8003090 <UART_SetConfig+0x240>)
 8002f7e:	0855      	lsrs	r5, r2, #1
 8002f80:	2300      	movs	r3, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f86:	f141 0100 	adc.w	r1, r1, #0
 8002f8a:	e7ec      	b.n	8002f66 <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f8c:	f7fe fda4 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8002f90:	e7df      	b.n	8002f52 <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f92:	0850      	lsrs	r0, r2, #1
 8002f94:	2100      	movs	r1, #0
 8002f96:	2300      	movs	r3, #0
 8002f98:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002f9c:	e7f3      	b.n	8002f86 <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 8002f9e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e7e3      	b.n	8002f6c <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fa4:	f7ff f918 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fa8:	6861      	ldr	r1, [r4, #4]
 8002faa:	084a      	lsrs	r2, r1, #1
 8002fac:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002fb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb8:	f1a3 0010 	sub.w	r0, r3, #16
 8002fbc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002fc0:	4288      	cmp	r0, r1
 8002fc2:	d897      	bhi.n	8002ef4 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002fc4:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002fc8:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fca:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60c3      	str	r3, [r0, #12]
 8002fd2:	e790      	b.n	8002ef6 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fd4:	f7ff f910 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8002fd8:	e7e6      	b.n	8002fa8 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fda:	6860      	ldr	r0, [r4, #4]
 8002fdc:	0843      	lsrs	r3, r0, #1
 8002fde:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002fe2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fe6:	fbb3 f3f0 	udiv	r3, r3, r0
 8002fea:	e7e3      	b.n	8002fb4 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fec:	f7fe fd74 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8002ff0:	e7da      	b.n	8002fa8 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ff2:	6860      	ldr	r0, [r4, #4]
 8002ff4:	0843      	lsrs	r3, r0, #1
 8002ff6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002ffa:	e7f4      	b.n	8002fe6 <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8002ffc:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e7da      	b.n	8002fb8 <UART_SetConfig+0x168>
    switch (clocksource)
 8003002:	2b08      	cmp	r3, #8
 8003004:	d830      	bhi.n	8003068 <UART_SetConfig+0x218>
 8003006:	e8df f003 	tbb	[pc, r3]
 800300a:	1805      	.short	0x1805
 800300c:	2f242f1b 	.word	0x2f242f1b
 8003010:	2f2f      	.short	0x2f2f
 8003012:	27          	.byte	0x27
 8003013:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003014:	f7ff f8e0 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003018:	6862      	ldr	r2, [r4, #4]
 800301a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800301e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003022:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003026:	f1a3 0010 	sub.w	r0, r3, #16
 800302a:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800302e:	4288      	cmp	r0, r1
 8003030:	f63f af60 	bhi.w	8002ef4 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	60cb      	str	r3, [r1, #12]
 8003038:	e75d      	b.n	8002ef6 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800303a:	f7ff f8dd 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 800303e:	e7eb      	b.n	8003018 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003040:	6860      	ldr	r0, [r4, #4]
 8003042:	0843      	lsrs	r3, r0, #1
 8003044:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003048:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800304c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003050:	e7e7      	b.n	8003022 <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003052:	f7fe fd41 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8003056:	e7df      	b.n	8003018 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003058:	6860      	ldr	r0, [r4, #4]
 800305a:	0843      	lsrs	r3, r0, #1
 800305c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003060:	e7f4      	b.n	800304c <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003062:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003066:	d0c9      	beq.n	8002ffc <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 8003068:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800306a:	2300      	movs	r3, #0
 800306c:	e7db      	b.n	8003026 <UART_SetConfig+0x1d6>
 800306e:	bf00      	nop
 8003070:	efff69f3 	.word	0xefff69f3
 8003074:	40008000 	.word	0x40008000
 8003078:	40013800 	.word	0x40013800
 800307c:	08008a70 	.word	0x08008a70
 8003080:	40004400 	.word	0x40004400
 8003084:	08008a74 	.word	0x08008a74
 8003088:	00f42400 	.word	0x00f42400
 800308c:	000ffcff 	.word	0x000ffcff
 8003090:	f4240000 	.word	0xf4240000

08003094 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003094:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003096:	07da      	lsls	r2, r3, #31
{
 8003098:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309a:	d506      	bpl.n	80030aa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800309c:	6801      	ldr	r1, [r0, #0]
 800309e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80030a0:	684a      	ldr	r2, [r1, #4]
 80030a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80030a6:	4322      	orrs	r2, r4
 80030a8:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030aa:	079c      	lsls	r4, r3, #30
 80030ac:	d506      	bpl.n	80030bc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ae:	6801      	ldr	r1, [r0, #0]
 80030b0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030b2:	684a      	ldr	r2, [r1, #4]
 80030b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030b8:	4322      	orrs	r2, r4
 80030ba:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030bc:	0759      	lsls	r1, r3, #29
 80030be:	d506      	bpl.n	80030ce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030c0:	6801      	ldr	r1, [r0, #0]
 80030c2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030c4:	684a      	ldr	r2, [r1, #4]
 80030c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ca:	4322      	orrs	r2, r4
 80030cc:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ce:	071a      	lsls	r2, r3, #28
 80030d0:	d506      	bpl.n	80030e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030d2:	6801      	ldr	r1, [r0, #0]
 80030d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030d6:	684a      	ldr	r2, [r1, #4]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030dc:	4322      	orrs	r2, r4
 80030de:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030e0:	06dc      	lsls	r4, r3, #27
 80030e2:	d506      	bpl.n	80030f2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e4:	6801      	ldr	r1, [r0, #0]
 80030e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ee:	4322      	orrs	r2, r4
 80030f0:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030f2:	0699      	lsls	r1, r3, #26
 80030f4:	d506      	bpl.n	8003104 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030f6:	6801      	ldr	r1, [r0, #0]
 80030f8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030fa:	688a      	ldr	r2, [r1, #8]
 80030fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003100:	4322      	orrs	r2, r4
 8003102:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003104:	065a      	lsls	r2, r3, #25
 8003106:	d50f      	bpl.n	8003128 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800310c:	684a      	ldr	r2, [r1, #4]
 800310e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003112:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003114:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003118:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	d105      	bne.n	8003128 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800311c:	684a      	ldr	r2, [r1, #4]
 800311e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003120:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003124:	4322      	orrs	r2, r4
 8003126:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	d506      	bpl.n	800313a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800312c:	6802      	ldr	r2, [r0, #0]
 800312e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003130:	6853      	ldr	r3, [r2, #4]
 8003132:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003136:	430b      	orrs	r3, r1
 8003138:	6053      	str	r3, [r2, #4]
 800313a:	bd10      	pop	{r4, pc}

0800313c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003140:	9d06      	ldr	r5, [sp, #24]
 8003142:	4604      	mov	r4, r0
 8003144:	460f      	mov	r7, r1
 8003146:	4616      	mov	r6, r2
 8003148:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	69ca      	ldr	r2, [r1, #28]
 800314e:	ea37 0302 	bics.w	r3, r7, r2
 8003152:	bf0c      	ite	eq
 8003154:	2201      	moveq	r2, #1
 8003156:	2200      	movne	r2, #0
 8003158:	42b2      	cmp	r2, r6
 800315a:	d002      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800315c:	2000      	movs	r0, #0
}
 800315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003162:	1c6b      	adds	r3, r5, #1
 8003164:	d0f2      	beq.n	800314c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003166:	b99d      	cbnz	r5, 8003190 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003170:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800317a:	2320      	movs	r3, #32
 800317c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003180:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003184:	2300      	movs	r3, #0
 8003186:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800318a:	2003      	movs	r0, #3
 800318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003190:	f7fd ff06 	bl	8000fa0 <HAL_GetTick>
 8003194:	eba0 0008 	sub.w	r0, r0, r8
 8003198:	4285      	cmp	r5, r0
 800319a:	d2d6      	bcs.n	800314a <UART_WaitOnFlagUntilTimeout+0xe>
 800319c:	e7e4      	b.n	8003168 <UART_WaitOnFlagUntilTimeout+0x2c>

0800319e <HAL_UART_Transmit>:
{
 800319e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80031a2:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80031a4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80031a8:	2b20      	cmp	r3, #32
{
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80031b0:	d14a      	bne.n	8003248 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 80031b2:	2900      	cmp	r1, #0
 80031b4:	d046      	beq.n	8003244 <HAL_UART_Transmit+0xa6>
 80031b6:	2a00      	cmp	r2, #0
 80031b8:	d044      	beq.n	8003244 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80031ba:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d042      	beq.n	8003248 <HAL_UART_Transmit+0xaa>
 80031c2:	2301      	movs	r3, #1
 80031c4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031cc:	2321      	movs	r3, #33	; 0x21
 80031ce:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80031d2:	f7fd fee5 	bl	8000fa0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80031d6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80031da:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80031dc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80031e0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e4:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 80031e6:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e8:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 80031ea:	b952      	cbnz	r2, 8003202 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	4620      	mov	r0, r4
 80031f0:	f7ff ffa4 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 80031f4:	b958      	cbnz	r0, 800320e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80031f6:	2320      	movs	r3, #32
 80031f8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80031fc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003200:	e006      	b.n	8003210 <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	2200      	movs	r2, #0
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff ff98 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 800320c:	b118      	cbz	r0, 8003216 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800320e:	2003      	movs	r0, #3
}
 8003210:	b002      	add	sp, #8
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	68a3      	ldr	r3, [r4, #8]
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	d10d      	bne.n	800323c <HAL_UART_Transmit+0x9e>
 8003220:	6923      	ldr	r3, [r4, #16]
 8003222:	b95b      	cbnz	r3, 800323c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003224:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800322e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003232:	3b01      	subs	r3, #1
 8003234:	b29b      	uxth	r3, r3
 8003236:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800323a:	e7d1      	b.n	80031e0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800323c:	782b      	ldrb	r3, [r5, #0]
 800323e:	8513      	strh	r3, [r2, #40]	; 0x28
 8003240:	3501      	adds	r5, #1
 8003242:	e7f4      	b.n	800322e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003244:	2001      	movs	r0, #1
 8003246:	e7e3      	b.n	8003210 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003248:	2002      	movs	r0, #2
 800324a:	e7e1      	b.n	8003210 <HAL_UART_Transmit+0x72>

0800324c <HAL_UART_Receive>:
{
 800324c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003250:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8003252:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8003256:	2b20      	cmp	r3, #32
{
 8003258:	4604      	mov	r4, r0
 800325a:	460d      	mov	r5, r1
 800325c:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800325e:	d160      	bne.n	8003322 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8003260:	2900      	cmp	r1, #0
 8003262:	d05c      	beq.n	800331e <HAL_UART_Receive+0xd2>
 8003264:	2a00      	cmp	r2, #0
 8003266:	d05a      	beq.n	800331e <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8003268:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800326c:	2b01      	cmp	r3, #1
 800326e:	d058      	beq.n	8003322 <HAL_UART_Receive+0xd6>
 8003270:	2301      	movs	r3, #1
 8003272:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327a:	2322      	movs	r3, #34	; 0x22
 800327c:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8003280:	f7fd fe8e 	bl	8000fa0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003284:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8003286:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800328e:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8003290:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003294:	d115      	bne.n	80032c2 <HAL_UART_Receive+0x76>
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	b98b      	cbnz	r3, 80032be <HAL_UART_Receive+0x72>
 800329a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800329e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80032a2:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80032a6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80032aa:	b280      	uxth	r0, r0
 80032ac:	b9b8      	cbnz	r0, 80032de <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80032ae:	2320      	movs	r3, #32
 80032b0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 80032b4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80032b8:	b002      	add	sp, #8
 80032ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80032be:	23ff      	movs	r3, #255	; 0xff
 80032c0:	e7ed      	b.n	800329e <HAL_UART_Receive+0x52>
 80032c2:	b923      	cbnz	r3, 80032ce <HAL_UART_Receive+0x82>
 80032c4:	6923      	ldr	r3, [r4, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f9      	beq.n	80032be <HAL_UART_Receive+0x72>
 80032ca:	237f      	movs	r3, #127	; 0x7f
 80032cc:	e7e7      	b.n	800329e <HAL_UART_Receive+0x52>
 80032ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d2:	d1e6      	bne.n	80032a2 <HAL_UART_Receive+0x56>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f7      	beq.n	80032ca <HAL_UART_Receive+0x7e>
 80032da:	233f      	movs	r3, #63	; 0x3f
 80032dc:	e7df      	b.n	800329e <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	f8cd 8000 	str.w	r8, [sp]
 80032e2:	463b      	mov	r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	2120      	movs	r1, #32
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff27 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 80032ee:	b9d0      	cbnz	r0, 8003326 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	68a3      	ldr	r3, [r4, #8]
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	d10c      	bne.n	8003314 <HAL_UART_Receive+0xc8>
 80032fa:	6922      	ldr	r2, [r4, #16]
 80032fc:	b952      	cbnz	r2, 8003314 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80032fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003300:	4033      	ands	r3, r6
 8003302:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003306:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800330a:	3b01      	subs	r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8003312:	e7c8      	b.n	80032a6 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003314:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003316:	4033      	ands	r3, r6
 8003318:	702b      	strb	r3, [r5, #0]
 800331a:	3501      	adds	r5, #1
 800331c:	e7f3      	b.n	8003306 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	e7ca      	b.n	80032b8 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8003322:	2002      	movs	r0, #2
 8003324:	e7c8      	b.n	80032b8 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8003326:	2003      	movs	r0, #3
 8003328:	e7c6      	b.n	80032b8 <HAL_UART_Receive+0x6c>

0800332a <UART_CheckIdleState>:
{
 800332a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800332c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	2600      	movs	r6, #0
 8003330:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003332:	f7fd fe35 	bl	8000fa0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800333c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333e:	d417      	bmi.n	8003370 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	075b      	lsls	r3, r3, #29
 8003346:	d50a      	bpl.n	800335e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	462b      	mov	r3, r5
 8003352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fef0 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 800335c:	b9a0      	cbnz	r0, 8003388 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800335e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003360:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003362:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003366:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800336a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800336e:	e00c      	b.n	800338a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4632      	mov	r2, r6
 8003378:	4603      	mov	r3, r0
 800337a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff fedc 	bl	800313c <UART_WaitOnFlagUntilTimeout>
 8003384:	2800      	cmp	r0, #0
 8003386:	d0db      	beq.n	8003340 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003388:	2003      	movs	r0, #3
}
 800338a:	b002      	add	sp, #8
 800338c:	bd70      	pop	{r4, r5, r6, pc}

0800338e <HAL_UART_Init>:
{
 800338e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003390:	4604      	mov	r4, r0
 8003392:	b360      	cbz	r0, 80033ee <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003394:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003398:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800339c:	b91b      	cbnz	r3, 80033a6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800339e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80033a2:	f000 fc35 	bl	8003c10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80033a6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	2324      	movs	r3, #36	; 0x24
 80033aa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff fd4a 	bl	8002e50 <UART_SetConfig>
 80033bc:	2801      	cmp	r0, #1
 80033be:	d016      	beq.n	80033ee <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033c2:	b113      	cbz	r3, 80033ca <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff fe65 	bl	8003094 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80033e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80033e4:	601a      	str	r2, [r3, #0]
}
 80033e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80033ea:	f7ff bf9e 	b.w	800332a <UART_CheckIdleState>
}
 80033ee:	2001      	movs	r0, #1
 80033f0:	bd10      	pop	{r4, pc}

080033f2 <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80033f2:	2201      	movs	r2, #1
 80033f4:	f7fe baec 	b.w	80019d0 <HAL_GPIO_WritePin>

080033f8 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80033f8:	2200      	movs	r2, #0
 80033fa:	f7fe bae9 	b.w	80019d0 <HAL_GPIO_WritePin>
	...

08003400 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8003400:	b510      	push	{r4, lr}
 8003402:	4604      	mov	r4, r0
	if (data & 0x10) {
 8003404:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8003406:	f04f 0110 	mov.w	r1, #16
 800340a:	481a      	ldr	r0, [pc, #104]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
 800340c:	d525      	bpl.n	800345a <hd44780_wr_hi_nibble+0x5a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800340e:	f7ff fff0 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8003412:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003414:	f04f 0120 	mov.w	r1, #32
 8003418:	4816      	ldr	r0, [pc, #88]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
 800341a:	d521      	bpl.n	8003460 <hd44780_wr_hi_nibble+0x60>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800341c:	f7ff ffe9 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8003420:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003422:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003426:	4813      	ldr	r0, [pc, #76]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
 8003428:	d51d      	bpl.n	8003466 <hd44780_wr_hi_nibble+0x66>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800342a:	f7ff ffe2 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 800342e:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003430:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003434:	480f      	ldr	r0, [pc, #60]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x80) {
 8003436:	d519      	bpl.n	800346c <hd44780_wr_hi_nibble+0x6c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003438:	f7ff ffdb 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
	}

	/* set the EN signal */
	hd44780_EN_On();
 800343c:	2201      	movs	r2, #1
 800343e:	2102      	movs	r1, #2
 8003440:	480c      	ldr	r0, [pc, #48]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
 8003442:	f7fe fac5 	bl	80019d0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8003446:	2002      	movs	r0, #2
 8003448:	f7fd fdb0 	bl	8000fac <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800344c:	2200      	movs	r2, #0
 800344e:	2102      	movs	r1, #2
 8003450:	4808      	ldr	r0, [pc, #32]	; (8003474 <hd44780_wr_hi_nibble+0x74>)
}
 8003452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_EN_Off();
 8003456:	f7fe babb 	b.w	80019d0 <HAL_GPIO_WritePin>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800345a:	f7ff ffcd 	bl	80033f8 <GPIO_ResetBits>
 800345e:	e7d8      	b.n	8003412 <hd44780_wr_hi_nibble+0x12>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003460:	f7ff ffca 	bl	80033f8 <GPIO_ResetBits>
 8003464:	e7dc      	b.n	8003420 <hd44780_wr_hi_nibble+0x20>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003466:	f7ff ffc7 	bl	80033f8 <GPIO_ResetBits>
 800346a:	e7e0      	b.n	800342e <hd44780_wr_hi_nibble+0x2e>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800346c:	f7ff ffc4 	bl	80033f8 <GPIO_ResetBits>
 8003470:	e7e4      	b.n	800343c <hd44780_wr_hi_nibble+0x3c>
 8003472:	bf00      	nop
 8003474:	48000400 	.word	0x48000400

08003478 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8003478:	b510      	push	{r4, lr}
 800347a:	4604      	mov	r4, r0
	if (data & 0x01) {
 800347c:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800347e:	f04f 0110 	mov.w	r1, #16
 8003482:	481a      	ldr	r0, [pc, #104]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
 8003484:	d525      	bpl.n	80034d2 <hd44780_wr_lo_nibble+0x5a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8003486:	f7ff ffb4 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 800348a:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800348c:	f04f 0120 	mov.w	r1, #32
 8003490:	4816      	ldr	r0, [pc, #88]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
 8003492:	d521      	bpl.n	80034d8 <hd44780_wr_lo_nibble+0x60>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003494:	f7ff ffad 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 8003498:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800349a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800349e:	4813      	ldr	r0, [pc, #76]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
 80034a0:	d51d      	bpl.n	80034de <hd44780_wr_lo_nibble+0x66>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80034a2:	f7ff ffa6 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 80034a6:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80034a8:	f04f 0180 	mov.w	r1, #128	; 0x80
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x08) {
 80034ae:	d519      	bpl.n	80034e4 <hd44780_wr_lo_nibble+0x6c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80034b0:	f7ff ff9f 	bl	80033f2 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
	}

	/* set the EN signal */
	hd44780_EN_On();
 80034b4:	2201      	movs	r2, #1
 80034b6:	2102      	movs	r1, #2
 80034b8:	480c      	ldr	r0, [pc, #48]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
 80034ba:	f7fe fa89 	bl	80019d0 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80034be:	2002      	movs	r0, #2
 80034c0:	f7fd fd74 	bl	8000fac <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80034c4:	2200      	movs	r2, #0
 80034c6:	2102      	movs	r1, #2
 80034c8:	4808      	ldr	r0, [pc, #32]	; (80034ec <hd44780_wr_lo_nibble+0x74>)
}
 80034ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_EN_Off();
 80034ce:	f7fe ba7f 	b.w	80019d0 <HAL_GPIO_WritePin>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80034d2:	f7ff ff91 	bl	80033f8 <GPIO_ResetBits>
 80034d6:	e7d8      	b.n	800348a <hd44780_wr_lo_nibble+0x12>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80034d8:	f7ff ff8e 	bl	80033f8 <GPIO_ResetBits>
 80034dc:	e7dc      	b.n	8003498 <hd44780_wr_lo_nibble+0x20>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80034de:	f7ff ff8b 	bl	80033f8 <GPIO_ResetBits>
 80034e2:	e7e0      	b.n	80034a6 <hd44780_wr_lo_nibble+0x2e>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80034e4:	f7ff ff88 	bl	80033f8 <GPIO_ResetBits>
 80034e8:	e7e4      	b.n	80034b4 <hd44780_wr_lo_nibble+0x3c>
 80034ea:	bf00      	nop
 80034ec:	48000400 	.word	0x48000400

080034f0 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80034f0:	b510      	push	{r4, lr}
 80034f2:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80034f4:	f7ff ff84 	bl	8003400 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 80034f8:	4620      	mov	r0, r4
}
 80034fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_wr_lo_nibble(data);
 80034fe:	f7ff bfbb 	b.w	8003478 <hd44780_wr_lo_nibble>
	...

08003504 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8003504:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8003506:	2200      	movs	r2, #0
void hd44780_wr_cmd(unsigned char cmd) {
 8003508:	4604      	mov	r4, r0
	hd44780_RS_Off();
 800350a:	2101      	movs	r1, #1
 800350c:	4803      	ldr	r0, [pc, #12]	; (800351c <hd44780_wr_cmd+0x18>)
 800350e:	f7fe fa5f 	bl	80019d0 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8003512:	4620      	mov	r0, r4
}
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
 8003518:	f7ff bfea 	b.w	80034f0 <hd44780_write>
 800351c:	48000400 	.word	0x48000400

08003520 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8003520:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8003522:	2201      	movs	r2, #1
void hd44780_wr_data(unsigned char data) {
 8003524:	4604      	mov	r4, r0
	hd44780_RS_On();
 8003526:	4611      	mov	r1, r2
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <hd44780_wr_data+0x18>)
 800352a:	f7fe fa51 	bl	80019d0 <HAL_GPIO_WritePin>
	hd44780_write(data);
 800352e:	4620      	mov	r0, r4
}
 8003530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(data);
 8003534:	f7ff bfdc 	b.w	80034f0 <hd44780_write>
 8003538:	48000400 	.word	0x48000400

0800353c <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HD44780_Init+0xa8>)
void HD44780_Init(void) {
 800353e:	b570      	push	{r4, r5, r6, lr}
	__GPIOB_CLK_ENABLE()
 8003540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8003542:	4d29      	ldr	r5, [pc, #164]	; (80035e8 <HD44780_Init+0xac>)
	__GPIOB_CLK_ENABLE()
 8003544:	f042 0202 	orr.w	r2, r2, #2
 8003548:	64da      	str	r2, [r3, #76]	; 0x4c
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
void HD44780_Init(void) {
 800354c:	b086      	sub	sp, #24
	__GPIOB_CLK_ENABLE()
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	2401      	movs	r4, #1
	__GPIOB_CLK_ENABLE()
 8003556:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003558:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800355a:	23f0      	movs	r3, #240	; 0xf0
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800355c:	2603      	movs	r6, #3
	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800355e:	a901      	add	r1, sp, #4
 8003560:	4628      	mov	r0, r5
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8003562:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8003564:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8003566:	9604      	str	r6, [sp, #16]
	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8003568:	f7fe f97e 	bl	8001868 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800356c:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800356e:	a901      	add	r1, sp, #4
 8003570:	4628      	mov	r0, r5
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8003572:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003574:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8003576:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8003578:	9604      	str	r6, [sp, #16]
	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800357a:	f7fe f975 	bl	8001868 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 800357e:	4628      	mov	r0, r5
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	f7fe fa24 	bl	80019d0 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8003588:	4621      	mov	r1, r4
 800358a:	4628      	mov	r0, r5
 800358c:	2200      	movs	r2, #0
 800358e:	f7fe fa1f 	bl	80019d0 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8003592:	2200      	movs	r2, #0
 8003594:	2108      	movs	r1, #8
 8003596:	4628      	mov	r0, r5
 8003598:	f7fe fa1a 	bl	80019d0 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 800359c:	2010      	movs	r0, #16
 800359e:	f7fd fd05 	bl	8000fac <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80035a2:	2030      	movs	r0, #48	; 0x30
 80035a4:	f7ff ff2c 	bl	8003400 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80035a8:	2005      	movs	r0, #5
 80035aa:	f7fd fcff 	bl	8000fac <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80035ae:	2030      	movs	r0, #48	; 0x30
 80035b0:	f7ff ff26 	bl	8003400 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7fd fcf9 	bl	8000fac <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80035ba:	2030      	movs	r0, #48	; 0x30
 80035bc:	f7ff ff20 	bl	8003400 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80035c0:	2020      	movs	r0, #32
 80035c2:	f7ff ff1d 	bl	8003400 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80035c6:	2028      	movs	r0, #40	; 0x28
 80035c8:	f7ff ff9c 	bl	8003504 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 80035cc:	200c      	movs	r0, #12
 80035ce:	f7ff ff99 	bl	8003504 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff ff96 	bl	8003504 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 80035d8:	2006      	movs	r0, #6
 80035da:	f7ff ff93 	bl	8003504 <hd44780_wr_cmd>

}
 80035de:	b006      	add	sp, #24
 80035e0:	bd70      	pop	{r4, r5, r6, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	48000400 	.word	0x48000400

080035ec <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 80035ec:	2901      	cmp	r1, #1
 80035ee:	bf88      	it	hi
 80035f0:	2100      	movhi	r1, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HD44780_GotoXY+0x18>)
 80035f4:	5c5b      	ldrb	r3, [r3, r1]
		x = 0;
 80035f6:	280f      	cmp	r0, #15
 80035f8:	bf88      	it	hi
 80035fa:	2000      	movhi	r0, #0
	hd44780_wr_cmd(x + copy_y);
 80035fc:	4418      	add	r0, r3
 80035fe:	b2c0      	uxtb	r0, r0
 8003600:	f7ff bf80 	b.w	8003504 <hd44780_wr_cmd>
 8003604:	08008a81 	.word	0x08008a81

08003608 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8003608:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 800360a:	2300      	movs	r3, #0
void HD44780_PutStr(char *str) {
 800360c:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 800360e:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8003610:	9b01      	ldr	r3, [sp, #4]
	hd44780_wr_data(c & 0xff);
 8003612:	5ce0      	ldrb	r0, [r4, r3]
 8003614:	f7ff ff84 	bl	8003520 <hd44780_wr_data>
		i++;
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	3301      	adds	r3, #1
 800361c:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 800361e:	9b01      	ldr	r3, [sp, #4]
 8003620:	5ce3      	ldrb	r3, [r4, r3]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f4      	bne.n	8003610 <HD44780_PutStr+0x8>
}
 8003626:	b002      	add	sp, #8
 8003628:	bd10      	pop	{r4, pc}
	...

0800362c <getADCConvertedValue>:
 *
 * RETURNS       :
 *  			   uhADCxConvertedValue : ADC converted Value.
 *************************************************************************/
volatile uint16_t getADCConvertedValue(ADC_HandleTypeDef* hadc1)
{
 800362c:	b513      	push	{r0, r1, r4, lr}
	 __IO uint16_t uhADCxConvertedValue = 0; //_IO is a macro
 800362e:	2300      	movs	r3, #0
{
 8003630:	4604      	mov	r4, r0
	 __IO uint16_t uhADCxConvertedValue = 0; //_IO is a macro
 8003632:	f8ad 3006 	strh.w	r3, [sp, #6]

	if (HAL_ADC_Start(&*hadc1) != HAL_OK)
 8003636:	f7fe f859 	bl	80016ec <HAL_ADC_Start>
 800363a:	b110      	cbz	r0, 8003642 <getADCConvertedValue+0x16>
	{
		/* Start Conversation Error */
		printf("HAL_ADC_Start Error\r\n");
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <getADCConvertedValue+0x40>)
 800363e:	f000 fc5f 	bl	8003f00 <puts>
	}

	if (HAL_ADC_PollForConversion(&*hadc1, 10) != HAL_OK)
 8003642:	210a      	movs	r1, #10
 8003644:	4620      	mov	r0, r4
 8003646:	f7fd fdb3 	bl	80011b0 <HAL_ADC_PollForConversion>
 800364a:	b138      	cbz	r0, 800365c <getADCConvertedValue+0x30>
	{
		printf("HAL_ADC_PollForConversion Error\r\n");
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <getADCConvertedValue+0x44>)
 800364e:	f000 fc57 	bl	8003f00 <puts>
		/* ADC conversion completed */
		/*##-5- Get the converted value of regular channel  ########################*/
		uhADCxConvertedValue = HAL_ADC_GetValue(&*hadc1);
	}

	return uhADCxConvertedValue;
 8003652:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8003656:	b280      	uxth	r0, r0
 8003658:	b002      	add	sp, #8
 800365a:	bd10      	pop	{r4, pc}
		uhADCxConvertedValue = HAL_ADC_GetValue(&*hadc1);
 800365c:	4620      	mov	r0, r4
 800365e:	f7fd fdf5 	bl	800124c <HAL_ADC_GetValue>
 8003662:	b280      	uxth	r0, r0
 8003664:	f8ad 0006 	strh.w	r0, [sp, #6]
 8003668:	e7f3      	b.n	8003652 <getADCConvertedValue+0x26>
 800366a:	bf00      	nop
 800366c:	08008a85 	.word	0x08008a85
 8003670:	08008a9a 	.word	0x08008a9a

08003674 <setRGBColorForTim1Ch1toCh3>:
 *  			   blue  : from 0 to 255
 * RETURNS       :
 *                 none
 *************************************************************************/
void setRGBColorForTim1Ch1toCh3(uint8_t red, uint8_t green, uint8_t blue)
{
 8003674:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003676:	4c28      	ldr	r4, [pc, #160]	; (8003718 <setRGBColorForTim1Ch1toCh3+0xa4>)
{
 8003678:	ed2d 8b04 	vpush	{d8-d9}
 800367c:	ee09 0a10 	vmov	s18, r0
 8003680:	ee08 1a90 	vmov	s17, r1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003684:	4620      	mov	r0, r4
 8003686:	2100      	movs	r1, #0
{
 8003688:	ee08 2a10 	vmov	s16, r2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800368c:	f7ff fb48 	bl	8002d20 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003690:	2104      	movs	r1, #4
 8003692:	4620      	mov	r0, r4
 8003694:	f7ff fb44 	bl	8002d20 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003698:	2108      	movs	r1, #8
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff fb40 	bl	8002d20 <HAL_TIM_PWM_Stop>
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800371c <setRGBColorForTim1Ch1toCh3+0xa8>
 80036a4:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003720 <setRGBColorForTim1Ch1toCh3+0xac>
	float newValueInSecRange =
 80036a8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003724 <setRGBColorForTim1Ch1toCh3+0xb0>

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, convertRange(red, 0, 255, 0, 9090));
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	eeb8 9a49 	vcvt.f32.u32	s18, s18
	// this macro sets the Capture/compare register of timer 1 channel 1 with value from convertRange()
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, convertRange(green, 0, 255, 0, 9090));
 80036b2:	eef8 8a68 	vcvt.f32.u32	s17, s17
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036b6:	ee29 9a27 	vmul.f32	s18, s18, s15
	// this macro sets the Capture/compare register of timer 1 channel 2 with value from convertRange()
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, convertRange(blue, 0, 255, 0, 9090));
 80036ba:	eeb8 8a48 	vcvt.f32.u32	s16, s16
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036be:	ee89 7a06 	vdiv.f32	s14, s18, s12
	// this macro sets the Capture/compare register of timer 1 channel 3 with value from convertRange()

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80036c2:	2100      	movs	r1, #0
 80036c4:	4620      	mov	r0, r4
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036c6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	float newValueInSecRange =
 80036ca:	ee37 7a26 	vadd.f32	s14, s14, s13
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036ce:	ee28 8a27 	vmul.f32	s16, s16, s15
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, convertRange(red, 0, 255, 0, 9090));
 80036d2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036d6:	eec8 7a06 	vdiv.f32	s15, s16, s12
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, convertRange(red, 0, 255, 0, 9090));
 80036da:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80036de:	ee88 7a86 	vdiv.f32	s14, s17, s12
	float newValueInSecRange =
 80036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e6:	ee37 7a26 	vadd.f32	s14, s14, s13
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, convertRange(blue, 0, 255, 0, 9090));
 80036ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, convertRange(green, 0, 255, 0, 9090));
 80036ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80036f2:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, convertRange(blue, 0, 255, 0, 9090));
 80036f6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80036fa:	f7ff faf3 	bl	8002ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80036fe:	2104      	movs	r1, #4
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff faef 	bl	8002ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
}
 8003706:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800370a:	4620      	mov	r0, r4
 800370c:	2108      	movs	r1, #8
}
 800370e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003712:	f7ff bae7 	b.w	8002ce4 <HAL_TIM_PWM_Start>
 8003716:	bf00      	nop
 8003718:	20000734 	.word	0x20000734
 800371c:	460e0800 	.word	0x460e0800
 8003720:	437f0000 	.word	0x437f0000
 8003724:	00000000 	.word	0x00000000

08003728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	b0ad      	sub	sp, #180	; 0xb4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800372c:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800372e:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003730:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003732:	2610      	movs	r6, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003734:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003736:	2707      	movs	r7, #7
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003738:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800373a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800373c:	9606      	str	r6, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800373e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003740:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003742:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003744:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003746:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003748:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800374a:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800374c:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800374e:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003750:	f7fe fa2a 	bl	8001ba8 <HAL_RCC_OscConfig>
 8003754:	b100      	cbz	r0, 8003758 <SystemClock_Config+0x30>
 8003756:	e7fe      	b.n	8003756 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003758:	230f      	movs	r3, #15
 800375a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800375c:	2303      	movs	r3, #3
 800375e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003760:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003762:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003764:	f44f 63e0 	mov.w	r3, #1792	; 0x700

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003768:	4621      	mov	r1, r4
 800376a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800376c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800376e:	f7fe fc77 	bl	8002060 <HAL_RCC_ClockConfig>
 8003772:	b100      	cbz	r0, 8003776 <SystemClock_Config+0x4e>
 8003774:	e7fe      	b.n	8003774 <SystemClock_Config+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8003776:	f244 0302 	movw	r3, #16386	; 0x4002
 800377a:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800377c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003780:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003782:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003784:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800378a:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800378c:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800378e:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003790:	971b      	str	r7, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003792:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003794:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003796:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003798:	f7fe fdca 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 800379c:	b100      	cbz	r0, 80037a0 <SystemClock_Config+0x78>
 800379e:	e7fe      	b.n	800379e <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80037a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037a4:	f7fe f922 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 80037a8:	4604      	mov	r4, r0
 80037aa:	b100      	cbz	r0, 80037ae <SystemClock_Config+0x86>
 80037ac:	e7fe      	b.n	80037ac <SystemClock_Config+0x84>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80037ae:	f7fe fd0d 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80037b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80037ba:	f7fe f82d 	bl	8001818 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80037be:	2004      	movs	r0, #4
 80037c0:	f7fe f840 	bl	8001844 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80037c4:	4622      	mov	r2, r4
 80037c6:	4621      	mov	r1, r4
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f7fd ffe4 	bl	8001798 <HAL_NVIC_SetPriority>
}
 80037d0:	b02d      	add	sp, #180	; 0xb4
 80037d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d4:	0000      	movs	r0, r0
	...

080037d8 <main>:
{
 80037d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037dc:	ed2d 8b02 	vpush	{d8}
 80037e0:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80037e2:	f7fd fbc9 	bl	8000f78 <HAL_Init>
  SystemClock_Config();
 80037e6:	f7ff ff9f 	bl	8003728 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	4ba9      	ldr	r3, [pc, #676]	; (8003a90 <main+0x2b8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80037ec:	48a9      	ldr	r0, [pc, #676]	; (8003a94 <main+0x2bc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f0:	f042 0204 	orr.w	r2, r2, #4
 80037f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80037f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f8:	f002 0204 	and.w	r2, r2, #4
 80037fc:	9202      	str	r2, [sp, #8]
 80037fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	64da      	str	r2, [r3, #76]	; 0x4c
 8003808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380a:	f002 0201 	and.w	r2, r2, #1
 800380e:	9203      	str	r2, [sp, #12]
 8003810:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003814:	f042 0202 	orr.w	r2, r2, #2
 8003818:	64da      	str	r2, [r3, #76]	; 0x4c
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003820:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003824:	2108      	movs	r1, #8

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003828:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800382a:	2508      	movs	r5, #8
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800382c:	f7fe f8d0 	bl	80019d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003832:	4898      	ldr	r0, [pc, #608]	; (8003a94 <main+0x2bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003834:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003836:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003838:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383c:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	f7fe f813 	bl	8001868 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8003842:	4895      	ldr	r0, [pc, #596]	; (8003a98 <main+0x2c0>)
  huart2.Init.BaudRate = 9600;
 8003844:	4a95      	ldr	r2, [pc, #596]	; (8003a9c <main+0x2c4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003846:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8003848:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800384c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003850:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003852:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003854:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003856:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003858:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800385a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800385c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800385e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003860:	f7ff fd95 	bl	800338e <HAL_UART_Init>
 8003864:	b100      	cbz	r0, 8003868 <main+0x90>
 8003866:	e7fe      	b.n	8003866 <main+0x8e>
  htim1.Instance = TIM1;
 8003868:	4c8d      	ldr	r4, [pc, #564]	; (8003aa0 <main+0x2c8>)
 800386a:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <main+0x2cc>)
 800386c:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 800386e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003870:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 9090;
 8003872:	f242 3382 	movw	r3, #9090	; 0x2382
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003876:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003878:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800387c:	4620      	mov	r0, r4
  htim1.Init.Period = 9090;
 800387e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003880:	f7ff f872 	bl	8002968 <HAL_TIM_Base_Init>
 8003884:	b100      	cbz	r0, 8003888 <main+0xb0>
 8003886:	e7fe      	b.n	8003886 <main+0xae>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003888:	a91e      	add	r1, sp, #120	; 0x78
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff f964 	bl	8002b60 <HAL_TIM_ConfigClockSource>
 8003898:	b100      	cbz	r0, 800389c <main+0xc4>
 800389a:	e7fe      	b.n	800389a <main+0xc2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff f87d 	bl	800299c <HAL_TIM_PWM_Init>
 80038a2:	b100      	cbz	r0, 80038a6 <main+0xce>
 80038a4:	e7fe      	b.n	80038a4 <main+0xcc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a6:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038a8:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038aa:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038ac:	a905      	add	r1, sp, #20
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff fa6c 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 80038b4:	4602      	mov	r2, r0
 80038b6:	b100      	cbz	r0, 80038ba <main+0xe2>
 80038b8:	e7fe      	b.n	80038b8 <main+0xe0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ba:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80038bc:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038be:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038c0:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c2:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038c4:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038c6:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c8:	a90c      	add	r1, sp, #48	; 0x30
 80038ca:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038cc:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ce:	f7ff f8b7 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 80038d2:	b100      	cbz	r0, 80038d6 <main+0xfe>
 80038d4:	e7fe      	b.n	80038d4 <main+0xfc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038d6:	2204      	movs	r2, #4
 80038d8:	a90c      	add	r1, sp, #48	; 0x30
 80038da:	4620      	mov	r0, r4
 80038dc:	f7ff f8b0 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 80038e0:	b100      	cbz	r0, 80038e4 <main+0x10c>
 80038e2:	e7fe      	b.n	80038e2 <main+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038e4:	462a      	mov	r2, r5
 80038e6:	a90c      	add	r1, sp, #48	; 0x30
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff f8a9 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 80038ee:	b100      	cbz	r0, 80038f2 <main+0x11a>
 80038f0:	e7fe      	b.n	80038f0 <main+0x118>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038f6:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038f8:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038fa:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 80038fc:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038fe:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003900:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003902:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003904:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 800390a:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800390c:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800390e:	a913      	add	r1, sp, #76	; 0x4c
 8003910:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003912:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003914:	f7ff fa5c 	bl	8002dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003918:	4605      	mov	r5, r0
 800391a:	b100      	cbz	r0, 800391e <main+0x146>
 800391c:	e7fe      	b.n	800391c <main+0x144>
  HAL_TIM_MspPostInit(&htim1);
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f95c 	bl	8003bdc <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 8003924:	4860      	ldr	r0, [pc, #384]	; (8003aa8 <main+0x2d0>)
 8003926:	4b61      	ldr	r3, [pc, #388]	; (8003aac <main+0x2d4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003928:	6085      	str	r5, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800392a:	e880 0028 	stmia.w	r0, {r3, r5}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800392e:	2304      	movs	r3, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003930:	60c5      	str	r5, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003932:	6105      	str	r5, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003934:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003936:	6185      	str	r5, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003938:	61c5      	str	r5, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 800393a:	6206      	str	r6, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800393c:	6245      	str	r5, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 800393e:	6286      	str	r6, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003940:	62c5      	str	r5, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003942:	6305      	str	r5, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003944:	6345      	str	r5, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003946:	6385      	str	r5, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003948:	63c5      	str	r5, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800394a:	f7fd fb65 	bl	8001018 <HAL_ADC_Init>
 800394e:	b100      	cbz	r0, 8003952 <main+0x17a>
 8003950:	e7fe      	b.n	8003950 <main+0x178>
  sConfig.Channel = ADC_CHANNEL_5;
 8003952:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <main+0x2d8>)
 8003954:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003956:	227f      	movs	r2, #127	; 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003958:	2306      	movs	r3, #6
 800395a:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800395c:	9216      	str	r2, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800395e:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003960:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003962:	a913      	add	r1, sp, #76	; 0x4c
 8003964:	4850      	ldr	r0, [pc, #320]	; (8003aa8 <main+0x2d0>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003966:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003968:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Offset = 0;
 800396a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800396c:	f7fd fc72 	bl	8001254 <HAL_ADC_ConfigChannel>
 8003970:	b100      	cbz	r0, 8003974 <main+0x19c>
 8003972:	e7fe      	b.n	8003972 <main+0x19a>
   HD44780_Init(); //LCD initialization
 8003974:	f7ff fde2 	bl	800353c <HD44780_Init>
 		tempInCelsius = ((correspondingVoltADC) - 0.5)/0.01;    // to temperature
 8003978:	f20f 190c 	addw	r9, pc, #268	; 0x10c
 800397c:	e9d9 8900 	ldrd	r8, r9, [r9]
 		ADCConvertedValue = getADCConvertedValue(&hadc1);
 8003980:	4d49      	ldr	r5, [pc, #292]	; (8003aa8 <main+0x2d0>)
 		tempInCelsius = ((correspondingVoltADC) - 0.5)/0.01;    // to temperature
 8003982:	4f4c      	ldr	r7, [pc, #304]	; (8003ab4 <main+0x2dc>)
 8003984:	2600      	movs	r6, #0
 		char stringTemperature[4] = {0};
 8003986:	2400      	movs	r4, #0
 		ADCConvertedValue = getADCConvertedValue(&hadc1);
 8003988:	4628      	mov	r0, r5
 		char stringTemperature[4] = {0};
 800398a:	9413      	str	r4, [sp, #76]	; 0x4c
 		ADCConvertedValue = getADCConvertedValue(&hadc1);
 800398c:	f7ff fe4e 	bl	800362c <getADCConvertedValue>
 		printf("ADC 12bit Value: %i\r\n", ADCConvertedValue);
 8003990:	4601      	mov	r1, r0
 		ADCConvertedValue = getADCConvertedValue(&hadc1);
 8003992:	9001      	str	r0, [sp, #4]
 		printf("ADC 12bit Value: %i\r\n", ADCConvertedValue);
 8003994:	4848      	ldr	r0, [pc, #288]	; (8003ab8 <main+0x2e0>)
 8003996:	f000 fa3b 	bl	8003e10 <printf>
 		correspondingVoltADC = convertRange(ADCConvertedValue,0,4095,0,3.3); //to voltage
 800399a:	eddd 7a01 	vldr	s15, [sp, #4]
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 800399e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003abc <main+0x2e4>
 80039a2:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003ac0 <main+0x2e8>
 		correspondingVoltADC = convertRange(ADCConvertedValue,0,4095,0,3.3); //to voltage
 80039a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039aa:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
			(val - minOfRange1) * (maxOfRange2 - minOfRange2) / (maxOfRange1 - minOfRange1) + minOfRange2;
 80039ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 		tempInCelsius = ((correspondingVoltADC) - 0.5)/0.01;    // to temperature
 80039b6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003ac4 <main+0x2ec>
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	ee17 0a90 	vmov	r0, s15
 80039c2:	f7fc fdc1 	bl	8000548 <__aeabi_f2d>
 80039c6:	4632      	mov	r2, r6
 80039c8:	463b      	mov	r3, r7
 80039ca:	f7fc fc5d 	bl	8000288 <__aeabi_dsub>
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	f7fc ff37 	bl	8000844 <__aeabi_ddiv>
 80039d6:	f7fd f8e3 	bl	8000ba0 <__aeabi_d2f>
 80039da:	ee08 0a10 	vmov	s16, r0
 		HD44780_GotoXY(10,0); // this sets the cursor on column 11 row 1
 80039de:	4621      	mov	r1, r4
 80039e0:	200a      	movs	r0, #10
 80039e2:	f7ff fe03 	bl	80035ec <HD44780_GotoXY>
 		sprintf(stringTemperature, "%.1f C", tempInCelsius);
 80039e6:	ee18 0a10 	vmov	r0, s16
 80039ea:	f7fc fdad 	bl	8000548 <__aeabi_f2d>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	a813      	add	r0, sp, #76	; 0x4c
 80039f4:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <main+0x2f0>)
 80039f6:	f000 fa8b 	bl	8003f10 <sprintf>
 		HD44780_PutStr(stringTemperature);
 80039fa:	a813      	add	r0, sp, #76	; 0x4c
 80039fc:	f7ff fe04 	bl	8003608 <HD44780_PutStr>
 		HAL_Delay(500);
 8003a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a04:	f7fd fad2 	bl	8000fac <HAL_Delay>
 		if(tempInCelsius >= -15 && tempInCelsius <= 5)
 8003a08:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
 8003a0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	db09      	blt.n	8003a2a <main+0x252>
 8003a16:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d804      	bhi.n	8003a2a <main+0x252>
 					setRGBColorForTim1Ch1toCh3(0,0,255); 		//BLUE
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	4621      	mov	r1, r4
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff fe25 	bl	8003674 <setRGBColorForTim1Ch1toCh3>
 		if(tempInCelsius > 5 && tempInCelsius <= 15)
 8003a2a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a32:	eef2 8a0e 	vmov.f32	s17, #46	; 0x41700000  15.0
 8003a36:	dd09      	ble.n	8003a4c <main+0x274>
 8003a38:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	d804      	bhi.n	8003a4c <main+0x274>
 					setRGBColorForTim1Ch1toCh3(255,50,0); 	//YELLOW
 8003a42:	2200      	movs	r2, #0
 8003a44:	2132      	movs	r1, #50	; 0x32
 8003a46:	20ff      	movs	r0, #255	; 0xff
 8003a48:	f7ff fe14 	bl	8003674 <setRGBColorForTim1Ch1toCh3>
 		if(tempInCelsius > 15 && tempInCelsius <= 25)
 8003a4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	eef3 8a09 	vmov.f32	s17, #57	; 0x41c80000  25.0
 8003a58:	dd09      	ble.n	8003a6e <main+0x296>
 8003a5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	d804      	bhi.n	8003a6e <main+0x296>
 					setRGBColorForTim1Ch1toCh3(165,10,0); 	//ORANGE
 8003a64:	2200      	movs	r2, #0
 8003a66:	210a      	movs	r1, #10
 8003a68:	20a5      	movs	r0, #165	; 0xa5
 8003a6a:	f7ff fe03 	bl	8003674 <setRGBColorForTim1Ch1toCh3>
 		if(tempInCelsius > 25)
 8003a6e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a76:	dd86      	ble.n	8003986 <main+0x1ae>
 					setRGBColorForTim1Ch1toCh3(255,0,0); 		//RED
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	20ff      	movs	r0, #255	; 0xff
 8003a7e:	f7ff fdf9 	bl	8003674 <setRGBColorForTim1Ch1toCh3>
 	{
 8003a82:	e780      	b.n	8003986 <main+0x1ae>
 8003a84:	f3af 8000 	nop.w
 8003a88:	47ae147b 	.word	0x47ae147b
 8003a8c:	3f847ae1 	.word	0x3f847ae1
 8003a90:	40021000 	.word	0x40021000
 8003a94:	48000400 	.word	0x48000400
 8003a98:	20000774 	.word	0x20000774
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	20000734 	.word	0x20000734
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	200006cc 	.word	0x200006cc
 8003aac:	50040000 	.word	0x50040000
 8003ab0:	14f00020 	.word	0x14f00020
 8003ab4:	3fe00000 	.word	0x3fe00000
 8003ab8:	08008abb 	.word	0x08008abb
 8003abc:	40533333 	.word	0x40533333
 8003ac0:	457ff000 	.word	0x457ff000
 8003ac4:	00000000 	.word	0x00000000
 8003ac8:	08008ad1 	.word	0x08008ad1

08003acc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003acc:	e7fe      	b.n	8003acc <_Error_Handler>
	...

08003ad0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_MspInit+0x88>)
{
 8003ad2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60
 8003adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ade:	f002 0201 	and.w	r2, r2, #1
 8003ae2:	9200      	str	r2, [sp, #0]
 8003ae4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ae8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aec:	659a      	str	r2, [r3, #88]	; 0x58
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afa:	f7fd fe3b 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	4611      	mov	r1, r2
 8003b02:	f06f 000b 	mvn.w	r0, #11
 8003b06:	f7fd fe47 	bl	8001798 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	f06f 000a 	mvn.w	r0, #10
 8003b12:	f7fd fe41 	bl	8001798 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f06f 0009 	mvn.w	r0, #9
 8003b1e:	f7fd fe3b 	bl	8001798 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	4611      	mov	r1, r2
 8003b26:	f06f 0004 	mvn.w	r0, #4
 8003b2a:	f7fd fe35 	bl	8001798 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4611      	mov	r1, r2
 8003b32:	f06f 0003 	mvn.w	r0, #3
 8003b36:	f7fd fe2f 	bl	8001798 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	f06f 0001 	mvn.w	r0, #1
 8003b42:	f7fd fe29 	bl	8001798 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	f7fd fe23 	bl	8001798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b52:	b003      	add	sp, #12
 8003b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_ADC_MspInit+0x40>)
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d117      	bne.n	8003b96 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b66:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003b6a:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b76:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b82:	2301      	movs	r3, #1
 8003b84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b86:	230b      	movs	r3, #11
 8003b88:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f7fd fe69 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b96:	b007      	add	sp, #28
 8003b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b9c:	50040000 	.word	0x50040000

08003ba0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_TIM_Base_MspInit+0x38>)
 8003ba4:	6802      	ldr	r2, [r0, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d112      	bne.n	8003bd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003baa:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003bae:	201a      	movs	r0, #26
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003bc2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bc4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003bc6:	f7fd fde7 	bl	8001798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003bca:	201a      	movs	r0, #26
 8003bcc:	f7fd fe18 	bl	8001800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bd0:	b003      	add	sp, #12
 8003bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003bde:	6802      	ldr	r2, [r0, #0]
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_TIM_MspPostInit+0x30>)
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_MspPostInit+0x28>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = BLUE_LED_PIN_Pin|GREEN_LED_PIN_Pin|RED_LED_PIN_Pin;
 8003be6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003bea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bf8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bfe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f7fd fe32 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c04:	b007      	add	sp, #28
 8003c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c0a:	bf00      	nop
 8003c0c:	40012c00 	.word	0x40012c00

08003c10 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c10:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003c12:	6802      	ldr	r2, [r0, #0]
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_UART_MspInit+0x5c>)
 8003c16:	429a      	cmp	r2, r3
{
 8003c18:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8003c1a:	d125      	bne.n	8003c68 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c1c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c20:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c28:	659a      	str	r2, [r3, #88]	; 0x58
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003c36:	2304      	movs	r3, #4
 8003c38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c3c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003c40:	a901      	add	r1, sp, #4
 8003c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c48:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003c4c:	f7fd fe0c 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	a901      	add	r1, sp, #4
 8003c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c62:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	f7fd fe00 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	40004400 	.word	0x40004400

08003c70 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c72:	f7fd f98d 	bl	8000f90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003c7a:	f7fd bdf0 	b.w	800185e <HAL_SYSTICK_IRQHandler>
	...

08003c80 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c80:	4801      	ldr	r0, [pc, #4]	; (8003c88 <TIM1_TRG_COM_IRQHandler+0x8>)
 8003c82:	f7fe bd95 	b.w	80027b0 <HAL_TIM_IRQHandler>
 8003c86:	bf00      	nop
 8003c88:	20000734 	.word	0x20000734

08003c8c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003c8c:	b510      	push	{r4, lr}
	/* the write code implemented here is used by puts and printf */
		 HAL_StatusTypeDef result = HAL_OK;
		 result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8003c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8003c92:	4614      	mov	r4, r2
		 result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8003c94:	4806      	ldr	r0, [pc, #24]	; (8003cb0 <_write+0x24>)
 8003c96:	b292      	uxth	r2, r2
 8003c98:	f7ff fa81 	bl	800319e <HAL_UART_Transmit>
		 if((result == HAL_ERROR) | (result == HAL_BUSY))
 8003c9c:	3801      	subs	r0, #1
 8003c9e:	b2c0      	uxtb	r0, r0
 8003ca0:	2801      	cmp	r0, #1
 8003ca2:	d803      	bhi.n	8003cac <_write+0x20>
		 {
			 Error_Handler();
 8003ca4:	2158      	movs	r1, #88	; 0x58
 8003ca6:	4803      	ldr	r0, [pc, #12]	; (8003cb4 <_write+0x28>)
 8003ca8:	f7ff ff10 	bl	8003acc <_Error_Handler>
		 }
		 return len;
}
 8003cac:	4620      	mov	r0, r4
 8003cae:	bd10      	pop	{r4, pc}
 8003cb0:	20000774 	.word	0x20000774
 8003cb4:	08008ad8 	.word	0x08008ad8

08003cb8 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <_sbrk+0x14>)
 8003cba:	6819      	ldr	r1, [r3, #0]
{
 8003cbc:	4602      	mov	r2, r0
	if (heap_end == 0) {
 8003cbe:	b909      	cbnz	r1, 8003cc4 <_sbrk+0xc>
		heap_end = & end;
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <_sbrk+0x18>)
 8003cc2:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003cc4:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8003cc6:	4402      	add	r2, r0
 8003cc8:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8003cca:	4770      	bx	lr
 8003ccc:	20000690 	.word	0x20000690
 8003cd0:	200007fc 	.word	0x200007fc

08003cd4 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <_close+0xc>)
 8003cd6:	2258      	movs	r2, #88	; 0x58
 8003cd8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003cda:	f04f 30ff 	mov.w	r0, #4294967295
 8003cde:	4770      	bx	lr
 8003ce0:	200007ec 	.word	0x200007ec

08003ce4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <_fstat+0xc>)
 8003ce6:	2258      	movs	r2, #88	; 0x58
 8003ce8:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	4770      	bx	lr
 8003cf0:	200007ec 	.word	0x200007ec

08003cf4 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <_isatty+0xc>)
 8003cf6:	2258      	movs	r2, #88	; 0x58
 8003cf8:	601a      	str	r2, [r3, #0]
	return 0;
}
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	200007ec 	.word	0x200007ec

08003d04 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003d04:	4b02      	ldr	r3, [pc, #8]	; (8003d10 <_lseek+0xc>)
 8003d06:	2258      	movs	r2, #88	; 0x58
 8003d08:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	4770      	bx	lr
 8003d10:	200007ec 	.word	0x200007ec

08003d14 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003d14:	b508      	push	{r3, lr}
	/*HAL_UART_Receive will not exit until 1 char is not received
		 * because HAL_MAX_DELAY is being used
		 */
		HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8003d16:	2201      	movs	r2, #1
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <_read+0x14>)
 8003d1e:	f7ff fa95 	bl	800324c <HAL_UART_Receive>
		return 1; //because we're only going to get and return one char at a time.
}
 8003d22:	2001      	movs	r0, #1
 8003d24:	bd08      	pop	{r3, pc}
 8003d26:	bf00      	nop
 8003d28:	20000774 	.word	0x20000774

08003d2c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d2c:	490f      	ldr	r1, [pc, #60]	; (8003d6c <SystemInit+0x40>)
 8003d2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003d32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <SystemInit+0x44>)
 8003d3c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003d3e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003d46:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003d4e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003d52:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d60:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d62:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00
 8003d70:	40021000 	.word	0x40021000

08003d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d7a:	e003      	b.n	8003d84 <LoopCopyDataInit>

08003d7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d82:	3104      	adds	r1, #4

08003d84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d84:	480b      	ldr	r0, [pc, #44]	; (8003db4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d8c:	d3f6      	bcc.n	8003d7c <CopyDataInit>
	ldr	r2, =_sbss
 8003d8e:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d90:	e002      	b.n	8003d98 <LoopFillZerobss>

08003d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d94:	f842 3b04 	str.w	r3, [r2], #4

08003d98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <LoopForever+0x16>)
	cmp	r2, r3
 8003d9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d9c:	d3f9      	bcc.n	8003d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d9e:	f7ff ffc5 	bl	8003d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003da2:	f000 f811 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003da6:	f7ff fd17 	bl	80037d8 <main>

08003daa <LoopForever>:

LoopForever:
    b LoopForever
 8003daa:	e7fe      	b.n	8003daa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003dac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003db0:	08008e38 	.word	0x08008e38
	ldr	r0, =_sdata
 8003db4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003db8:	20000674 	.word	0x20000674
	ldr	r2, =_sbss
 8003dbc:	20000674 	.word	0x20000674
	ldr	r3, = _ebss
 8003dc0:	200007fc 	.word	0x200007fc

08003dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dc4:	e7fe      	b.n	8003dc4 <ADC1_IRQHandler>
	...

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4e0d      	ldr	r6, [pc, #52]	; (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1ba4      	subs	r4, r4, r6
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	42a5      	cmp	r5, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4e0b      	ldr	r6, [pc, #44]	; (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	; (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f004 fe3a 	bl	8008a54 <_init>
 8003de0:	1ba4      	subs	r4, r4, r6
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2500      	movs	r5, #0
 8003de6:	42a5      	cmp	r5, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003df0:	4798      	blx	r3
 8003df2:	3501      	adds	r5, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dfa:	4798      	blx	r3
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08008e30 	.word	0x08008e30
 8003e04:	08008e30 	.word	0x08008e30
 8003e08:	08008e30 	.word	0x08008e30
 8003e0c:	08008e34 	.word	0x08008e34

08003e10 <printf>:
 8003e10:	b40f      	push	{r0, r1, r2, r3}
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <printf+0x2c>)
 8003e14:	b513      	push	{r0, r1, r4, lr}
 8003e16:	681c      	ldr	r4, [r3, #0]
 8003e18:	b124      	cbz	r4, 8003e24 <printf+0x14>
 8003e1a:	69a3      	ldr	r3, [r4, #24]
 8003e1c:	b913      	cbnz	r3, 8003e24 <printf+0x14>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f003 f8da 	bl	8006fd8 <__sinit>
 8003e24:	ab05      	add	r3, sp, #20
 8003e26:	9a04      	ldr	r2, [sp, #16]
 8003e28:	68a1      	ldr	r1, [r4, #8]
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f001 f867 	bl	8004f00 <_vfprintf_r>
 8003e32:	b002      	add	sp, #8
 8003e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e38:	b004      	add	sp, #16
 8003e3a:	4770      	bx	lr
 8003e3c:	20000004 	.word	0x20000004

08003e40 <_puts_r>:
 8003e40:	b530      	push	{r4, r5, lr}
 8003e42:	4605      	mov	r5, r0
 8003e44:	b089      	sub	sp, #36	; 0x24
 8003e46:	4608      	mov	r0, r1
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f7fc f9c1 	bl	80001d0 <strlen>
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <_puts_r+0xb0>)
 8003e50:	9306      	str	r3, [sp, #24]
 8003e52:	2301      	movs	r3, #1
 8003e54:	9005      	str	r0, [sp, #20]
 8003e56:	9307      	str	r3, [sp, #28]
 8003e58:	4418      	add	r0, r3
 8003e5a:	ab04      	add	r3, sp, #16
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2302      	movs	r3, #2
 8003e60:	9404      	str	r4, [sp, #16]
 8003e62:	9003      	str	r0, [sp, #12]
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	b125      	cbz	r5, 8003e72 <_puts_r+0x32>
 8003e68:	69ab      	ldr	r3, [r5, #24]
 8003e6a:	b913      	cbnz	r3, 8003e72 <_puts_r+0x32>
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f003 f8b3 	bl	8006fd8 <__sinit>
 8003e72:	69ab      	ldr	r3, [r5, #24]
 8003e74:	68ac      	ldr	r4, [r5, #8]
 8003e76:	b913      	cbnz	r3, 8003e7e <_puts_r+0x3e>
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f003 f8ad 	bl	8006fd8 <__sinit>
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <_puts_r+0xb4>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	d12a      	bne.n	8003eda <_puts_r+0x9a>
 8003e84:	686c      	ldr	r4, [r5, #4]
 8003e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e88:	07db      	lsls	r3, r3, #31
 8003e8a:	d405      	bmi.n	8003e98 <_puts_r+0x58>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	0598      	lsls	r0, r3, #22
 8003e90:	d402      	bmi.n	8003e98 <_puts_r+0x58>
 8003e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e94:	f003 fbae 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8003e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9c:	0499      	lsls	r1, r3, #18
 8003e9e:	d406      	bmi.n	8003eae <_puts_r+0x6e>
 8003ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ea4:	81a3      	strh	r3, [r4, #12]
 8003ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eac:	6663      	str	r3, [r4, #100]	; 0x64
 8003eae:	4628      	mov	r0, r5
 8003eb0:	aa01      	add	r2, sp, #4
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f003 fa22 	bl	80072fc <__sfvwrite_r>
 8003eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	f04f 35ff 	movne.w	r5, #4294967295
 8003ec2:	250a      	moveq	r5, #10
 8003ec4:	07da      	lsls	r2, r3, #31
 8003ec6:	d405      	bmi.n	8003ed4 <_puts_r+0x94>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	059b      	lsls	r3, r3, #22
 8003ecc:	d402      	bmi.n	8003ed4 <_puts_r+0x94>
 8003ece:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ed0:	f003 fb91 	bl	80075f6 <__retarget_lock_release_recursive>
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	b009      	add	sp, #36	; 0x24
 8003ed8:	bd30      	pop	{r4, r5, pc}
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <_puts_r+0xb8>)
 8003edc:	429c      	cmp	r4, r3
 8003ede:	d101      	bne.n	8003ee4 <_puts_r+0xa4>
 8003ee0:	68ac      	ldr	r4, [r5, #8]
 8003ee2:	e7d0      	b.n	8003e86 <_puts_r+0x46>
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <_puts_r+0xbc>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	bf08      	it	eq
 8003eea:	68ec      	ldreq	r4, [r5, #12]
 8003eec:	e7cb      	b.n	8003e86 <_puts_r+0x46>
 8003eee:	bf00      	nop
 8003ef0:	08008acf 	.word	0x08008acf
 8003ef4:	08008bd8 	.word	0x08008bd8
 8003ef8:	08008bf8 	.word	0x08008bf8
 8003efc:	08008bb8 	.word	0x08008bb8

08003f00 <puts>:
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <puts+0xc>)
 8003f02:	4601      	mov	r1, r0
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f7ff bf9b 	b.w	8003e40 <_puts_r>
 8003f0a:	bf00      	nop
 8003f0c:	20000004 	.word	0x20000004

08003f10 <sprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	b500      	push	{lr}
 8003f14:	b09c      	sub	sp, #112	; 0x70
 8003f16:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f1c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003f20:	9002      	str	r0, [sp, #8]
 8003f22:	9006      	str	r0, [sp, #24]
 8003f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f28:	480a      	ldr	r0, [pc, #40]	; (8003f54 <sprintf+0x44>)
 8003f2a:	9104      	str	r1, [sp, #16]
 8003f2c:	9107      	str	r1, [sp, #28]
 8003f2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f36:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	a902      	add	r1, sp, #8
 8003f40:	f000 f80a 	bl	8003f58 <_svfprintf_r>
 8003f44:	9b02      	ldr	r3, [sp, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	b01c      	add	sp, #112	; 0x70
 8003f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f50:	b003      	add	sp, #12
 8003f52:	4770      	bx	lr
 8003f54:	20000004 	.word	0x20000004

08003f58 <_svfprintf_r>:
 8003f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	b0bd      	sub	sp, #244	; 0xf4
 8003f5e:	468a      	mov	sl, r1
 8003f60:	4615      	mov	r5, r2
 8003f62:	461f      	mov	r7, r3
 8003f64:	4683      	mov	fp, r0
 8003f66:	f003 fb35 	bl	80075d4 <_localeconv_r>
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc f92e 	bl	80001d0 <strlen>
 8003f74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003f78:	9008      	str	r0, [sp, #32]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	d518      	bpl.n	8003fb0 <_svfprintf_r+0x58>
 8003f7e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003f82:	b9ab      	cbnz	r3, 8003fb0 <_svfprintf_r+0x58>
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	4658      	mov	r0, fp
 8003f88:	f003 fbaa 	bl	80076e0 <_malloc_r>
 8003f8c:	f8ca 0000 	str.w	r0, [sl]
 8003f90:	f8ca 0010 	str.w	r0, [sl, #16]
 8003f94:	b948      	cbnz	r0, 8003faa <_svfprintf_r+0x52>
 8003f96:	230c      	movs	r3, #12
 8003f98:	f8cb 3000 	str.w	r3, [fp]
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fa4:	b03d      	add	sp, #244	; 0xf4
 8003fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	f8ca 3014 	str.w	r3, [sl, #20]
 8003fb0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004218 <_svfprintf_r+0x2c0>
 8003fb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fbc:	941f      	str	r4, [sp, #124]	; 0x7c
 8003fbe:	9321      	str	r3, [sp, #132]	; 0x84
 8003fc0:	9320      	str	r3, [sp, #128]	; 0x80
 8003fc2:	9505      	str	r5, [sp, #20]
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	9311      	str	r3, [sp, #68]	; 0x44
 8003fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8003fca:	9309      	str	r3, [sp, #36]	; 0x24
 8003fcc:	9d05      	ldr	r5, [sp, #20]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd4:	b112      	cbz	r2, 8003fdc <_svfprintf_r+0x84>
 8003fd6:	2a25      	cmp	r2, #37	; 0x25
 8003fd8:	f040 8083 	bne.w	80040e2 <_svfprintf_r+0x18a>
 8003fdc:	9b05      	ldr	r3, [sp, #20]
 8003fde:	1aee      	subs	r6, r5, r3
 8003fe0:	d00d      	beq.n	8003ffe <_svfprintf_r+0xa6>
 8003fe2:	e884 0048 	stmia.w	r4, {r3, r6}
 8003fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe8:	4433      	add	r3, r6
 8003fea:	9321      	str	r3, [sp, #132]	; 0x84
 8003fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fee:	3301      	adds	r3, #1
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	9320      	str	r3, [sp, #128]	; 0x80
 8003ff4:	dc77      	bgt.n	80040e6 <_svfprintf_r+0x18e>
 8003ff6:	3408      	adds	r4, #8
 8003ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffa:	4433      	add	r3, r6
 8003ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffe:	782b      	ldrb	r3, [r5, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8729 	beq.w	8004e58 <_svfprintf_r+0xf00>
 8004006:	2300      	movs	r3, #0
 8004008:	1c69      	adds	r1, r5, #1
 800400a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800400e:	461a      	mov	r2, r3
 8004010:	f04f 39ff 	mov.w	r9, #4294967295
 8004014:	930a      	str	r3, [sp, #40]	; 0x28
 8004016:	461d      	mov	r5, r3
 8004018:	200a      	movs	r0, #10
 800401a:	1c4e      	adds	r6, r1, #1
 800401c:	7809      	ldrb	r1, [r1, #0]
 800401e:	9605      	str	r6, [sp, #20]
 8004020:	9102      	str	r1, [sp, #8]
 8004022:	9902      	ldr	r1, [sp, #8]
 8004024:	3920      	subs	r1, #32
 8004026:	2958      	cmp	r1, #88	; 0x58
 8004028:	f200 8418 	bhi.w	800485c <_svfprintf_r+0x904>
 800402c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004030:	041600a6 	.word	0x041600a6
 8004034:	00ab0416 	.word	0x00ab0416
 8004038:	04160416 	.word	0x04160416
 800403c:	04160416 	.word	0x04160416
 8004040:	04160416 	.word	0x04160416
 8004044:	006500ae 	.word	0x006500ae
 8004048:	00b70416 	.word	0x00b70416
 800404c:	041600ba 	.word	0x041600ba
 8004050:	00da00d7 	.word	0x00da00d7
 8004054:	00da00da 	.word	0x00da00da
 8004058:	00da00da 	.word	0x00da00da
 800405c:	00da00da 	.word	0x00da00da
 8004060:	00da00da 	.word	0x00da00da
 8004064:	04160416 	.word	0x04160416
 8004068:	04160416 	.word	0x04160416
 800406c:	04160416 	.word	0x04160416
 8004070:	04160416 	.word	0x04160416
 8004074:	04160416 	.word	0x04160416
 8004078:	012b0115 	.word	0x012b0115
 800407c:	012b0416 	.word	0x012b0416
 8004080:	04160416 	.word	0x04160416
 8004084:	04160416 	.word	0x04160416
 8004088:	041600ed 	.word	0x041600ed
 800408c:	03400416 	.word	0x03400416
 8004090:	04160416 	.word	0x04160416
 8004094:	04160416 	.word	0x04160416
 8004098:	03a80416 	.word	0x03a80416
 800409c:	04160416 	.word	0x04160416
 80040a0:	04160086 	.word	0x04160086
 80040a4:	04160416 	.word	0x04160416
 80040a8:	04160416 	.word	0x04160416
 80040ac:	04160416 	.word	0x04160416
 80040b0:	04160416 	.word	0x04160416
 80040b4:	01070416 	.word	0x01070416
 80040b8:	012b006b 	.word	0x012b006b
 80040bc:	012b012b 	.word	0x012b012b
 80040c0:	006b00f0 	.word	0x006b00f0
 80040c4:	04160416 	.word	0x04160416
 80040c8:	041600fa 	.word	0x041600fa
 80040cc:	03420322 	.word	0x03420322
 80040d0:	01010376 	.word	0x01010376
 80040d4:	03870416 	.word	0x03870416
 80040d8:	03aa0416 	.word	0x03aa0416
 80040dc:	04160416 	.word	0x04160416
 80040e0:	03c2      	.short	0x03c2
 80040e2:	461d      	mov	r5, r3
 80040e4:	e773      	b.n	8003fce <_svfprintf_r+0x76>
 80040e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80040e8:	4651      	mov	r1, sl
 80040ea:	4658      	mov	r0, fp
 80040ec:	f004 f9e3 	bl	80084b6 <__ssprint_r>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f040 8692 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80040f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040f8:	e77e      	b.n	8003ff8 <_svfprintf_r+0xa0>
 80040fa:	2301      	movs	r3, #1
 80040fc:	222b      	movs	r2, #43	; 0x2b
 80040fe:	9905      	ldr	r1, [sp, #20]
 8004100:	e78b      	b.n	800401a <_svfprintf_r+0xc2>
 8004102:	460f      	mov	r7, r1
 8004104:	e7fb      	b.n	80040fe <_svfprintf_r+0x1a6>
 8004106:	b10b      	cbz	r3, 800410c <_svfprintf_r+0x1b4>
 8004108:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800410c:	06ae      	lsls	r6, r5, #26
 800410e:	f140 80aa 	bpl.w	8004266 <_svfprintf_r+0x30e>
 8004112:	3707      	adds	r7, #7
 8004114:	f027 0707 	bic.w	r7, r7, #7
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004120:	9304      	str	r3, [sp, #16]
 8004122:	2e00      	cmp	r6, #0
 8004124:	f177 0300 	sbcs.w	r3, r7, #0
 8004128:	da06      	bge.n	8004138 <_svfprintf_r+0x1e0>
 800412a:	4276      	negs	r6, r6
 800412c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004130:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004134:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004138:	2301      	movs	r3, #1
 800413a:	e2ca      	b.n	80046d2 <_svfprintf_r+0x77a>
 800413c:	b10b      	cbz	r3, 8004142 <_svfprintf_r+0x1ea>
 800413e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <_svfprintf_r+0x2c8>)
 8004144:	9311      	str	r3, [sp, #68]	; 0x44
 8004146:	06ab      	lsls	r3, r5, #26
 8004148:	f140 8339 	bpl.w	80047be <_svfprintf_r+0x866>
 800414c:	3707      	adds	r7, #7
 800414e:	f027 0707 	bic.w	r7, r7, #7
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	e9d7 6700 	ldrd	r6, r7, [r7]
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	07e8      	lsls	r0, r5, #31
 800415e:	d50b      	bpl.n	8004178 <_svfprintf_r+0x220>
 8004160:	ea56 0307 	orrs.w	r3, r6, r7
 8004164:	d008      	beq.n	8004178 <_svfprintf_r+0x220>
 8004166:	2330      	movs	r3, #48	; 0x30
 8004168:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800416c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004170:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004174:	f045 0502 	orr.w	r5, r5, #2
 8004178:	2302      	movs	r3, #2
 800417a:	e2a7      	b.n	80046cc <_svfprintf_r+0x774>
 800417c:	2a00      	cmp	r2, #0
 800417e:	d1be      	bne.n	80040fe <_svfprintf_r+0x1a6>
 8004180:	2301      	movs	r3, #1
 8004182:	2220      	movs	r2, #32
 8004184:	e7bb      	b.n	80040fe <_svfprintf_r+0x1a6>
 8004186:	f045 0501 	orr.w	r5, r5, #1
 800418a:	e7b8      	b.n	80040fe <_svfprintf_r+0x1a6>
 800418c:	683e      	ldr	r6, [r7, #0]
 800418e:	960a      	str	r6, [sp, #40]	; 0x28
 8004190:	2e00      	cmp	r6, #0
 8004192:	f107 0104 	add.w	r1, r7, #4
 8004196:	dab4      	bge.n	8004102 <_svfprintf_r+0x1aa>
 8004198:	4276      	negs	r6, r6
 800419a:	960a      	str	r6, [sp, #40]	; 0x28
 800419c:	460f      	mov	r7, r1
 800419e:	f045 0504 	orr.w	r5, r5, #4
 80041a2:	e7ac      	b.n	80040fe <_svfprintf_r+0x1a6>
 80041a4:	9905      	ldr	r1, [sp, #20]
 80041a6:	1c4e      	adds	r6, r1, #1
 80041a8:	7809      	ldrb	r1, [r1, #0]
 80041aa:	9102      	str	r1, [sp, #8]
 80041ac:	292a      	cmp	r1, #42	; 0x2a
 80041ae:	d010      	beq.n	80041d2 <_svfprintf_r+0x27a>
 80041b0:	f04f 0900 	mov.w	r9, #0
 80041b4:	9605      	str	r6, [sp, #20]
 80041b6:	9902      	ldr	r1, [sp, #8]
 80041b8:	3930      	subs	r1, #48	; 0x30
 80041ba:	2909      	cmp	r1, #9
 80041bc:	f63f af31 	bhi.w	8004022 <_svfprintf_r+0xca>
 80041c0:	fb00 1909 	mla	r9, r0, r9, r1
 80041c4:	9905      	ldr	r1, [sp, #20]
 80041c6:	460e      	mov	r6, r1
 80041c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80041cc:	9102      	str	r1, [sp, #8]
 80041ce:	9605      	str	r6, [sp, #20]
 80041d0:	e7f1      	b.n	80041b6 <_svfprintf_r+0x25e>
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	9605      	str	r6, [sp, #20]
 80041d6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80041da:	3704      	adds	r7, #4
 80041dc:	e78f      	b.n	80040fe <_svfprintf_r+0x1a6>
 80041de:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80041e2:	e78c      	b.n	80040fe <_svfprintf_r+0x1a6>
 80041e4:	2100      	movs	r1, #0
 80041e6:	910a      	str	r1, [sp, #40]	; 0x28
 80041e8:	9902      	ldr	r1, [sp, #8]
 80041ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80041ec:	3930      	subs	r1, #48	; 0x30
 80041ee:	fb00 1106 	mla	r1, r0, r6, r1
 80041f2:	910a      	str	r1, [sp, #40]	; 0x28
 80041f4:	9905      	ldr	r1, [sp, #20]
 80041f6:	460e      	mov	r6, r1
 80041f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80041fc:	9102      	str	r1, [sp, #8]
 80041fe:	9902      	ldr	r1, [sp, #8]
 8004200:	9605      	str	r6, [sp, #20]
 8004202:	3930      	subs	r1, #48	; 0x30
 8004204:	2909      	cmp	r1, #9
 8004206:	d9ef      	bls.n	80041e8 <_svfprintf_r+0x290>
 8004208:	e70b      	b.n	8004022 <_svfprintf_r+0xca>
 800420a:	f045 0508 	orr.w	r5, r5, #8
 800420e:	e776      	b.n	80040fe <_svfprintf_r+0x1a6>
 8004210:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004214:	e773      	b.n	80040fe <_svfprintf_r+0x1a6>
 8004216:	bf00      	nop
	...
 8004220:	08008b44 	.word	0x08008b44
 8004224:	9905      	ldr	r1, [sp, #20]
 8004226:	7809      	ldrb	r1, [r1, #0]
 8004228:	296c      	cmp	r1, #108	; 0x6c
 800422a:	d105      	bne.n	8004238 <_svfprintf_r+0x2e0>
 800422c:	9905      	ldr	r1, [sp, #20]
 800422e:	3101      	adds	r1, #1
 8004230:	9105      	str	r1, [sp, #20]
 8004232:	f045 0520 	orr.w	r5, r5, #32
 8004236:	e762      	b.n	80040fe <_svfprintf_r+0x1a6>
 8004238:	f045 0510 	orr.w	r5, r5, #16
 800423c:	e75f      	b.n	80040fe <_svfprintf_r+0x1a6>
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	2600      	movs	r6, #0
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800424a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800424e:	f04f 0901 	mov.w	r9, #1
 8004252:	4637      	mov	r7, r6
 8004254:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004258:	e11b      	b.n	8004492 <_svfprintf_r+0x53a>
 800425a:	b10b      	cbz	r3, 8004260 <_svfprintf_r+0x308>
 800425c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004260:	f045 0510 	orr.w	r5, r5, #16
 8004264:	e752      	b.n	800410c <_svfprintf_r+0x1b4>
 8004266:	f015 0f10 	tst.w	r5, #16
 800426a:	f107 0304 	add.w	r3, r7, #4
 800426e:	d003      	beq.n	8004278 <_svfprintf_r+0x320>
 8004270:	683e      	ldr	r6, [r7, #0]
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	17f7      	asrs	r7, r6, #31
 8004276:	e754      	b.n	8004122 <_svfprintf_r+0x1ca>
 8004278:	683e      	ldr	r6, [r7, #0]
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004280:	bf18      	it	ne
 8004282:	b236      	sxthne	r6, r6
 8004284:	e7f6      	b.n	8004274 <_svfprintf_r+0x31c>
 8004286:	b10b      	cbz	r3, 800428c <_svfprintf_r+0x334>
 8004288:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800428c:	3707      	adds	r7, #7
 800428e:	f027 0707 	bic.w	r7, r7, #7
 8004292:	f107 0308 	add.w	r3, r7, #8
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	ed97 7b00 	vldr	d7, [r7]
 800429c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042a0:	9b06      	ldr	r3, [sp, #24]
 80042a2:	9312      	str	r3, [sp, #72]	; 0x48
 80042a4:	9b07      	ldr	r3, [sp, #28]
 80042a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <_svfprintf_r+0x484>)
 80042b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80042b6:	f7fc fc35 	bl	8000b24 <__aeabi_dcmpun>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f040 85d5 	bne.w	8004e6a <_svfprintf_r+0xf12>
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	4b45      	ldr	r3, [pc, #276]	; (80043dc <_svfprintf_r+0x484>)
 80042c6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80042ca:	f7fc fc0d 	bl	8000ae8 <__aeabi_dcmple>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f040 85cb 	bne.w	8004e6a <_svfprintf_r+0xf12>
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042dc:	f7fc fbfa 	bl	8000ad4 <__aeabi_dcmplt>
 80042e0:	b110      	cbz	r0, 80042e8 <_svfprintf_r+0x390>
 80042e2:	232d      	movs	r3, #45	; 0x2d
 80042e4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <_svfprintf_r+0x488>)
 80042ea:	4a3e      	ldr	r2, [pc, #248]	; (80043e4 <_svfprintf_r+0x48c>)
 80042ec:	9902      	ldr	r1, [sp, #8]
 80042ee:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80042f2:	2947      	cmp	r1, #71	; 0x47
 80042f4:	bfcc      	ite	gt
 80042f6:	4690      	movgt	r8, r2
 80042f8:	4698      	movle	r8, r3
 80042fa:	f04f 0903 	mov.w	r9, #3
 80042fe:	2600      	movs	r6, #0
 8004300:	4637      	mov	r7, r6
 8004302:	e0c6      	b.n	8004492 <_svfprintf_r+0x53a>
 8004304:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004308:	d022      	beq.n	8004350 <_svfprintf_r+0x3f8>
 800430a:	9b02      	ldr	r3, [sp, #8]
 800430c:	f023 0320 	bic.w	r3, r3, #32
 8004310:	2b47      	cmp	r3, #71	; 0x47
 8004312:	d104      	bne.n	800431e <_svfprintf_r+0x3c6>
 8004314:	f1b9 0f00 	cmp.w	r9, #0
 8004318:	bf08      	it	eq
 800431a:	f04f 0901 	moveq.w	r9, #1
 800431e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004322:	930c      	str	r3, [sp, #48]	; 0x30
 8004324:	9b07      	ldr	r3, [sp, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da15      	bge.n	8004356 <_svfprintf_r+0x3fe>
 800432a:	9b06      	ldr	r3, [sp, #24]
 800432c:	930e      	str	r3, [sp, #56]	; 0x38
 800432e:	9b07      	ldr	r3, [sp, #28]
 8004330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004334:	930f      	str	r3, [sp, #60]	; 0x3c
 8004336:	232d      	movs	r3, #45	; 0x2d
 8004338:	930b      	str	r3, [sp, #44]	; 0x2c
 800433a:	9b02      	ldr	r3, [sp, #8]
 800433c:	f023 0720 	bic.w	r7, r3, #32
 8004340:	2f46      	cmp	r7, #70	; 0x46
 8004342:	d00e      	beq.n	8004362 <_svfprintf_r+0x40a>
 8004344:	2f45      	cmp	r7, #69	; 0x45
 8004346:	d146      	bne.n	80043d6 <_svfprintf_r+0x47e>
 8004348:	f109 0601 	add.w	r6, r9, #1
 800434c:	2102      	movs	r1, #2
 800434e:	e00a      	b.n	8004366 <_svfprintf_r+0x40e>
 8004350:	f04f 0906 	mov.w	r9, #6
 8004354:	e7e3      	b.n	800431e <_svfprintf_r+0x3c6>
 8004356:	ed9d 7b06 	vldr	d7, [sp, #24]
 800435a:	2300      	movs	r3, #0
 800435c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004360:	e7ea      	b.n	8004338 <_svfprintf_r+0x3e0>
 8004362:	464e      	mov	r6, r9
 8004364:	2103      	movs	r1, #3
 8004366:	ab1d      	add	r3, sp, #116	; 0x74
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	ab1a      	add	r3, sp, #104	; 0x68
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4632      	mov	r2, r6
 8004370:	ab19      	add	r3, sp, #100	; 0x64
 8004372:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004376:	4658      	mov	r0, fp
 8004378:	f001 ff3a 	bl	80061f0 <_dtoa_r>
 800437c:	2f47      	cmp	r7, #71	; 0x47
 800437e:	4680      	mov	r8, r0
 8004380:	d102      	bne.n	8004388 <_svfprintf_r+0x430>
 8004382:	07e8      	lsls	r0, r5, #31
 8004384:	f140 857e 	bpl.w	8004e84 <_svfprintf_r+0xf2c>
 8004388:	eb08 0306 	add.w	r3, r8, r6
 800438c:	2f46      	cmp	r7, #70	; 0x46
 800438e:	9303      	str	r3, [sp, #12]
 8004390:	d111      	bne.n	80043b6 <_svfprintf_r+0x45e>
 8004392:	f898 3000 	ldrb.w	r3, [r8]
 8004396:	2b30      	cmp	r3, #48	; 0x30
 8004398:	d109      	bne.n	80043ae <_svfprintf_r+0x456>
 800439a:	2200      	movs	r2, #0
 800439c:	2300      	movs	r3, #0
 800439e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043a2:	f7fc fb8d 	bl	8000ac0 <__aeabi_dcmpeq>
 80043a6:	b910      	cbnz	r0, 80043ae <_svfprintf_r+0x456>
 80043a8:	f1c6 0601 	rsb	r6, r6, #1
 80043ac:	9619      	str	r6, [sp, #100]	; 0x64
 80043ae:	9a03      	ldr	r2, [sp, #12]
 80043b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043b2:	441a      	add	r2, r3
 80043b4:	9203      	str	r2, [sp, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2300      	movs	r3, #0
 80043ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043be:	f7fc fb7f 	bl	8000ac0 <__aeabi_dcmpeq>
 80043c2:	b988      	cbnz	r0, 80043e8 <_svfprintf_r+0x490>
 80043c4:	2230      	movs	r2, #48	; 0x30
 80043c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043c8:	9903      	ldr	r1, [sp, #12]
 80043ca:	4299      	cmp	r1, r3
 80043cc:	d90e      	bls.n	80043ec <_svfprintf_r+0x494>
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	911d      	str	r1, [sp, #116]	; 0x74
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e7f7      	b.n	80043c6 <_svfprintf_r+0x46e>
 80043d6:	464e      	mov	r6, r9
 80043d8:	e7b8      	b.n	800434c <_svfprintf_r+0x3f4>
 80043da:	bf00      	nop
 80043dc:	7fefffff 	.word	0x7fefffff
 80043e0:	08008b34 	.word	0x08008b34
 80043e4:	08008b38 	.word	0x08008b38
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	931d      	str	r3, [sp, #116]	; 0x74
 80043ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043ee:	2f47      	cmp	r7, #71	; 0x47
 80043f0:	eba3 0308 	sub.w	r3, r3, r8
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	f040 80fa 	bne.w	80045ee <_svfprintf_r+0x696>
 80043fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043fc:	1cd9      	adds	r1, r3, #3
 80043fe:	db02      	blt.n	8004406 <_svfprintf_r+0x4ae>
 8004400:	4599      	cmp	r9, r3
 8004402:	f280 8120 	bge.w	8004646 <_svfprintf_r+0x6ee>
 8004406:	9b02      	ldr	r3, [sp, #8]
 8004408:	3b02      	subs	r3, #2
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800440e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004412:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8004416:	1e53      	subs	r3, r2, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	9319      	str	r3, [sp, #100]	; 0x64
 800441c:	bfb6      	itet	lt
 800441e:	f1c2 0301 	rsblt	r3, r2, #1
 8004422:	222b      	movge	r2, #43	; 0x2b
 8004424:	222d      	movlt	r2, #45	; 0x2d
 8004426:	2b09      	cmp	r3, #9
 8004428:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800442c:	f340 80fb 	ble.w	8004626 <_svfprintf_r+0x6ce>
 8004430:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004434:	260a      	movs	r6, #10
 8004436:	fb93 f0f6 	sdiv	r0, r3, r6
 800443a:	fb06 3310 	mls	r3, r6, r0, r3
 800443e:	3330      	adds	r3, #48	; 0x30
 8004440:	2809      	cmp	r0, #9
 8004442:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004446:	f102 31ff 	add.w	r1, r2, #4294967295
 800444a:	4603      	mov	r3, r0
 800444c:	f300 80e4 	bgt.w	8004618 <_svfprintf_r+0x6c0>
 8004450:	3330      	adds	r3, #48	; 0x30
 8004452:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004456:	3a02      	subs	r2, #2
 8004458:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800445c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004460:	4282      	cmp	r2, r0
 8004462:	4619      	mov	r1, r3
 8004464:	f0c0 80da 	bcc.w	800461c <_svfprintf_r+0x6c4>
 8004468:	9a03      	ldr	r2, [sp, #12]
 800446a:	ab1b      	add	r3, sp, #108	; 0x6c
 800446c:	1acb      	subs	r3, r1, r3
 800446e:	2a01      	cmp	r2, #1
 8004470:	9310      	str	r3, [sp, #64]	; 0x40
 8004472:	eb03 0902 	add.w	r9, r3, r2
 8004476:	dc02      	bgt.n	800447e <_svfprintf_r+0x526>
 8004478:	f015 0701 	ands.w	r7, r5, #1
 800447c:	d002      	beq.n	8004484 <_svfprintf_r+0x52c>
 800447e:	9b08      	ldr	r3, [sp, #32]
 8004480:	2700      	movs	r7, #0
 8004482:	4499      	add	r9, r3
 8004484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004486:	b113      	cbz	r3, 800448e <_svfprintf_r+0x536>
 8004488:	232d      	movs	r3, #45	; 0x2d
 800448a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800448e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004490:	2600      	movs	r6, #0
 8004492:	454e      	cmp	r6, r9
 8004494:	4633      	mov	r3, r6
 8004496:	bfb8      	it	lt
 8004498:	464b      	movlt	r3, r9
 800449a:	930b      	str	r3, [sp, #44]	; 0x2c
 800449c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80044a0:	b113      	cbz	r3, 80044a8 <_svfprintf_r+0x550>
 80044a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044a4:	3301      	adds	r3, #1
 80044a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a8:	f015 0302 	ands.w	r3, r5, #2
 80044ac:	9314      	str	r3, [sp, #80]	; 0x50
 80044ae:	bf1e      	ittt	ne
 80044b0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80044b2:	3302      	addne	r3, #2
 80044b4:	930b      	strne	r3, [sp, #44]	; 0x2c
 80044b6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80044ba:	9315      	str	r3, [sp, #84]	; 0x54
 80044bc:	d118      	bne.n	80044f0 <_svfprintf_r+0x598>
 80044be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	930c      	str	r3, [sp, #48]	; 0x30
 80044c8:	dd12      	ble.n	80044f0 <_svfprintf_r+0x598>
 80044ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	4ba9      	ldr	r3, [pc, #676]	; (8004774 <_svfprintf_r+0x81c>)
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	f300 81d5 	bgt.w	8004880 <_svfprintf_r+0x928>
 80044d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044de:	4413      	add	r3, r2
 80044e0:	9321      	str	r3, [sp, #132]	; 0x84
 80044e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044e4:	3301      	adds	r3, #1
 80044e6:	2b07      	cmp	r3, #7
 80044e8:	9320      	str	r3, [sp, #128]	; 0x80
 80044ea:	f300 81e2 	bgt.w	80048b2 <_svfprintf_r+0x95a>
 80044ee:	3408      	adds	r4, #8
 80044f0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80044f4:	b173      	cbz	r3, 8004514 <_svfprintf_r+0x5bc>
 80044f6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	2301      	movs	r3, #1
 80044fe:	6063      	str	r3, [r4, #4]
 8004500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004502:	3301      	adds	r3, #1
 8004504:	9321      	str	r3, [sp, #132]	; 0x84
 8004506:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004508:	3301      	adds	r3, #1
 800450a:	2b07      	cmp	r3, #7
 800450c:	9320      	str	r3, [sp, #128]	; 0x80
 800450e:	f300 81da 	bgt.w	80048c6 <_svfprintf_r+0x96e>
 8004512:	3408      	adds	r4, #8
 8004514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004516:	b16b      	cbz	r3, 8004534 <_svfprintf_r+0x5dc>
 8004518:	ab18      	add	r3, sp, #96	; 0x60
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	2302      	movs	r3, #2
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004522:	3302      	adds	r3, #2
 8004524:	9321      	str	r3, [sp, #132]	; 0x84
 8004526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004528:	3301      	adds	r3, #1
 800452a:	2b07      	cmp	r3, #7
 800452c:	9320      	str	r3, [sp, #128]	; 0x80
 800452e:	f300 81d4 	bgt.w	80048da <_svfprintf_r+0x982>
 8004532:	3408      	adds	r4, #8
 8004534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d114      	bne.n	8004564 <_svfprintf_r+0x60c>
 800453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	dd0f      	ble.n	8004564 <_svfprintf_r+0x60c>
 8004544:	4a8c      	ldr	r2, [pc, #560]	; (8004778 <_svfprintf_r+0x820>)
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	2b10      	cmp	r3, #16
 800454a:	f300 81d0 	bgt.w	80048ee <_svfprintf_r+0x996>
 800454e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	4413      	add	r3, r2
 8004554:	9321      	str	r3, [sp, #132]	; 0x84
 8004556:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004558:	3301      	adds	r3, #1
 800455a:	2b07      	cmp	r3, #7
 800455c:	9320      	str	r3, [sp, #128]	; 0x80
 800455e:	f300 81df 	bgt.w	8004920 <_svfprintf_r+0x9c8>
 8004562:	3408      	adds	r4, #8
 8004564:	eba6 0609 	sub.w	r6, r6, r9
 8004568:	2e00      	cmp	r6, #0
 800456a:	dd0f      	ble.n	800458c <_svfprintf_r+0x634>
 800456c:	4b82      	ldr	r3, [pc, #520]	; (8004778 <_svfprintf_r+0x820>)
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	2e10      	cmp	r6, #16
 8004572:	f300 81df 	bgt.w	8004934 <_svfprintf_r+0x9dc>
 8004576:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004578:	9821      	ldr	r0, [sp, #132]	; 0x84
 800457a:	6066      	str	r6, [r4, #4]
 800457c:	3301      	adds	r3, #1
 800457e:	4406      	add	r6, r0
 8004580:	2b07      	cmp	r3, #7
 8004582:	9621      	str	r6, [sp, #132]	; 0x84
 8004584:	9320      	str	r3, [sp, #128]	; 0x80
 8004586:	f300 81ec 	bgt.w	8004962 <_svfprintf_r+0xa0a>
 800458a:	3408      	adds	r4, #8
 800458c:	05eb      	lsls	r3, r5, #23
 800458e:	f100 81f2 	bmi.w	8004976 <_svfprintf_r+0xa1e>
 8004592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004594:	e884 0300 	stmia.w	r4, {r8, r9}
 8004598:	444b      	add	r3, r9
 800459a:	9321      	str	r3, [sp, #132]	; 0x84
 800459c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800459e:	3301      	adds	r3, #1
 80045a0:	2b07      	cmp	r3, #7
 80045a2:	9320      	str	r3, [sp, #128]	; 0x80
 80045a4:	f340 8419 	ble.w	8004dda <_svfprintf_r+0xe82>
 80045a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80045aa:	4651      	mov	r1, sl
 80045ac:	4658      	mov	r0, fp
 80045ae:	f003 ff82 	bl	80084b6 <__ssprint_r>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	f040 8431 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80045b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80045ba:	076b      	lsls	r3, r5, #29
 80045bc:	f100 8410 	bmi.w	8004de0 <_svfprintf_r+0xe88>
 80045c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045c6:	428a      	cmp	r2, r1
 80045c8:	bfac      	ite	ge
 80045ca:	189b      	addge	r3, r3, r2
 80045cc:	185b      	addlt	r3, r3, r1
 80045ce:	9309      	str	r3, [sp, #36]	; 0x24
 80045d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045d2:	b13b      	cbz	r3, 80045e4 <_svfprintf_r+0x68c>
 80045d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d6:	4651      	mov	r1, sl
 80045d8:	4658      	mov	r0, fp
 80045da:	f003 ff6c 	bl	80084b6 <__ssprint_r>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f040 841b 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80045e4:	2300      	movs	r3, #0
 80045e6:	9320      	str	r3, [sp, #128]	; 0x80
 80045e8:	9f04      	ldr	r7, [sp, #16]
 80045ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80045ec:	e4ee      	b.n	8003fcc <_svfprintf_r+0x74>
 80045ee:	9b02      	ldr	r3, [sp, #8]
 80045f0:	2b65      	cmp	r3, #101	; 0x65
 80045f2:	f77f af0b 	ble.w	800440c <_svfprintf_r+0x4b4>
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	2b66      	cmp	r3, #102	; 0x66
 80045fa:	d124      	bne.n	8004646 <_svfprintf_r+0x6ee>
 80045fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dd19      	ble.n	8004636 <_svfprintf_r+0x6de>
 8004602:	f1b9 0f00 	cmp.w	r9, #0
 8004606:	d101      	bne.n	800460c <_svfprintf_r+0x6b4>
 8004608:	07ea      	lsls	r2, r5, #31
 800460a:	d502      	bpl.n	8004612 <_svfprintf_r+0x6ba>
 800460c:	9a08      	ldr	r2, [sp, #32]
 800460e:	4413      	add	r3, r2
 8004610:	444b      	add	r3, r9
 8004612:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004614:	4699      	mov	r9, r3
 8004616:	e735      	b.n	8004484 <_svfprintf_r+0x52c>
 8004618:	460a      	mov	r2, r1
 800461a:	e70c      	b.n	8004436 <_svfprintf_r+0x4de>
 800461c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004620:	f803 1b01 	strb.w	r1, [r3], #1
 8004624:	e71c      	b.n	8004460 <_svfprintf_r+0x508>
 8004626:	2230      	movs	r2, #48	; 0x30
 8004628:	4413      	add	r3, r2
 800462a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800462e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004632:	a91c      	add	r1, sp, #112	; 0x70
 8004634:	e718      	b.n	8004468 <_svfprintf_r+0x510>
 8004636:	f1b9 0f00 	cmp.w	r9, #0
 800463a:	d101      	bne.n	8004640 <_svfprintf_r+0x6e8>
 800463c:	07eb      	lsls	r3, r5, #31
 800463e:	d515      	bpl.n	800466c <_svfprintf_r+0x714>
 8004640:	9b08      	ldr	r3, [sp, #32]
 8004642:	3301      	adds	r3, #1
 8004644:	e7e4      	b.n	8004610 <_svfprintf_r+0x6b8>
 8004646:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	429a      	cmp	r2, r3
 800464c:	db06      	blt.n	800465c <_svfprintf_r+0x704>
 800464e:	07ef      	lsls	r7, r5, #31
 8004650:	d50e      	bpl.n	8004670 <_svfprintf_r+0x718>
 8004652:	9b08      	ldr	r3, [sp, #32]
 8004654:	4413      	add	r3, r2
 8004656:	2267      	movs	r2, #103	; 0x67
 8004658:	9202      	str	r2, [sp, #8]
 800465a:	e7da      	b.n	8004612 <_svfprintf_r+0x6ba>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	9908      	ldr	r1, [sp, #32]
 8004660:	2a00      	cmp	r2, #0
 8004662:	440b      	add	r3, r1
 8004664:	dcf7      	bgt.n	8004656 <_svfprintf_r+0x6fe>
 8004666:	f1c2 0201 	rsb	r2, r2, #1
 800466a:	e7f3      	b.n	8004654 <_svfprintf_r+0x6fc>
 800466c:	2301      	movs	r3, #1
 800466e:	e7d0      	b.n	8004612 <_svfprintf_r+0x6ba>
 8004670:	4613      	mov	r3, r2
 8004672:	e7f0      	b.n	8004656 <_svfprintf_r+0x6fe>
 8004674:	b10b      	cbz	r3, 800467a <_svfprintf_r+0x722>
 8004676:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800467a:	f015 0f20 	tst.w	r5, #32
 800467e:	f107 0304 	add.w	r3, r7, #4
 8004682:	d008      	beq.n	8004696 <_svfprintf_r+0x73e>
 8004684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	17ce      	asrs	r6, r1, #31
 800468a:	4608      	mov	r0, r1
 800468c:	4631      	mov	r1, r6
 800468e:	e9c2 0100 	strd	r0, r1, [r2]
 8004692:	461f      	mov	r7, r3
 8004694:	e49a      	b.n	8003fcc <_svfprintf_r+0x74>
 8004696:	06ee      	lsls	r6, r5, #27
 8004698:	d503      	bpl.n	80046a2 <_svfprintf_r+0x74a>
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800469e:	6011      	str	r1, [r2, #0]
 80046a0:	e7f7      	b.n	8004692 <_svfprintf_r+0x73a>
 80046a2:	0668      	lsls	r0, r5, #25
 80046a4:	d5f9      	bpl.n	800469a <_svfprintf_r+0x742>
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80046ac:	8011      	strh	r1, [r2, #0]
 80046ae:	e7f0      	b.n	8004692 <_svfprintf_r+0x73a>
 80046b0:	f045 0510 	orr.w	r5, r5, #16
 80046b4:	f015 0320 	ands.w	r3, r5, #32
 80046b8:	d022      	beq.n	8004700 <_svfprintf_r+0x7a8>
 80046ba:	3707      	adds	r7, #7
 80046bc:	f027 0707 	bic.w	r7, r7, #7
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	2300      	movs	r3, #0
 80046cc:	2200      	movs	r2, #0
 80046ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80046d2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80046d6:	f000 83db 	beq.w	8004e90 <_svfprintf_r+0xf38>
 80046da:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80046de:	920b      	str	r2, [sp, #44]	; 0x2c
 80046e0:	ea56 0207 	orrs.w	r2, r6, r7
 80046e4:	f040 83d9 	bne.w	8004e9a <_svfprintf_r+0xf42>
 80046e8:	f1b9 0f00 	cmp.w	r9, #0
 80046ec:	f000 80aa 	beq.w	8004844 <_svfprintf_r+0x8ec>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d076      	beq.n	80047e2 <_svfprintf_r+0x88a>
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	f000 8091 	beq.w	800481c <_svfprintf_r+0x8c4>
 80046fa:	2600      	movs	r6, #0
 80046fc:	2700      	movs	r7, #0
 80046fe:	e3d2      	b.n	8004ea6 <_svfprintf_r+0xf4e>
 8004700:	1d3a      	adds	r2, r7, #4
 8004702:	f015 0110 	ands.w	r1, r5, #16
 8004706:	9204      	str	r2, [sp, #16]
 8004708:	d002      	beq.n	8004710 <_svfprintf_r+0x7b8>
 800470a:	683e      	ldr	r6, [r7, #0]
 800470c:	2700      	movs	r7, #0
 800470e:	e7dd      	b.n	80046cc <_svfprintf_r+0x774>
 8004710:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004714:	d0f9      	beq.n	800470a <_svfprintf_r+0x7b2>
 8004716:	883e      	ldrh	r6, [r7, #0]
 8004718:	2700      	movs	r7, #0
 800471a:	e7d6      	b.n	80046ca <_svfprintf_r+0x772>
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	2330      	movs	r3, #48	; 0x30
 8004722:	2278      	movs	r2, #120	; 0x78
 8004724:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <_svfprintf_r+0x824>)
 800472a:	683e      	ldr	r6, [r7, #0]
 800472c:	9311      	str	r3, [sp, #68]	; 0x44
 800472e:	2700      	movs	r7, #0
 8004730:	f045 0502 	orr.w	r5, r5, #2
 8004734:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004738:	2302      	movs	r3, #2
 800473a:	9202      	str	r2, [sp, #8]
 800473c:	e7c6      	b.n	80046cc <_svfprintf_r+0x774>
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2600      	movs	r6, #0
 8004742:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	f8d7 8000 	ldr.w	r8, [r7]
 800474c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004750:	d00a      	beq.n	8004768 <_svfprintf_r+0x810>
 8004752:	464a      	mov	r2, r9
 8004754:	4631      	mov	r1, r6
 8004756:	4640      	mov	r0, r8
 8004758:	f7fb fd42 	bl	80001e0 <memchr>
 800475c:	2800      	cmp	r0, #0
 800475e:	f000 808d 	beq.w	800487c <_svfprintf_r+0x924>
 8004762:	eba0 0908 	sub.w	r9, r0, r8
 8004766:	e5cb      	b.n	8004300 <_svfprintf_r+0x3a8>
 8004768:	4640      	mov	r0, r8
 800476a:	f7fb fd31 	bl	80001d0 <strlen>
 800476e:	4681      	mov	r9, r0
 8004770:	e5c6      	b.n	8004300 <_svfprintf_r+0x3a8>
 8004772:	bf00      	nop
 8004774:	08008b68 	.word	0x08008b68
 8004778:	08008b78 	.word	0x08008b78
 800477c:	08008b55 	.word	0x08008b55
 8004780:	f045 0510 	orr.w	r5, r5, #16
 8004784:	06a9      	lsls	r1, r5, #26
 8004786:	d509      	bpl.n	800479c <_svfprintf_r+0x844>
 8004788:	3707      	adds	r7, #7
 800478a:	f027 0707 	bic.w	r7, r7, #7
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	e797      	b.n	80046cc <_svfprintf_r+0x774>
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	f015 0f10 	tst.w	r5, #16
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	d001      	beq.n	80047aa <_svfprintf_r+0x852>
 80047a6:	683e      	ldr	r6, [r7, #0]
 80047a8:	e002      	b.n	80047b0 <_svfprintf_r+0x858>
 80047aa:	066a      	lsls	r2, r5, #25
 80047ac:	d5fb      	bpl.n	80047a6 <_svfprintf_r+0x84e>
 80047ae:	883e      	ldrh	r6, [r7, #0]
 80047b0:	2700      	movs	r7, #0
 80047b2:	e7f1      	b.n	8004798 <_svfprintf_r+0x840>
 80047b4:	b10b      	cbz	r3, 80047ba <_svfprintf_r+0x862>
 80047b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80047ba:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <_svfprintf_r+0xaf0>)
 80047bc:	e4c2      	b.n	8004144 <_svfprintf_r+0x1ec>
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	f015 0f10 	tst.w	r5, #16
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	d001      	beq.n	80047cc <_svfprintf_r+0x874>
 80047c8:	683e      	ldr	r6, [r7, #0]
 80047ca:	e002      	b.n	80047d2 <_svfprintf_r+0x87a>
 80047cc:	066e      	lsls	r6, r5, #25
 80047ce:	d5fb      	bpl.n	80047c8 <_svfprintf_r+0x870>
 80047d0:	883e      	ldrh	r6, [r7, #0]
 80047d2:	2700      	movs	r7, #0
 80047d4:	e4c2      	b.n	800415c <_svfprintf_r+0x204>
 80047d6:	4643      	mov	r3, r8
 80047d8:	e366      	b.n	8004ea8 <_svfprintf_r+0xf50>
 80047da:	2f00      	cmp	r7, #0
 80047dc:	bf08      	it	eq
 80047de:	2e0a      	cmpeq	r6, #10
 80047e0:	d205      	bcs.n	80047ee <_svfprintf_r+0x896>
 80047e2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80047e6:	3630      	adds	r6, #48	; 0x30
 80047e8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80047ec:	e377      	b.n	8004ede <_svfprintf_r+0xf86>
 80047ee:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80047f2:	4630      	mov	r0, r6
 80047f4:	4639      	mov	r1, r7
 80047f6:	220a      	movs	r2, #10
 80047f8:	2300      	movs	r3, #0
 80047fa:	f7fc fa21 	bl	8000c40 <__aeabi_uldivmod>
 80047fe:	3230      	adds	r2, #48	; 0x30
 8004800:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004804:	2300      	movs	r3, #0
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	220a      	movs	r2, #10
 800480c:	f7fc fa18 	bl	8000c40 <__aeabi_uldivmod>
 8004810:	4606      	mov	r6, r0
 8004812:	460f      	mov	r7, r1
 8004814:	ea56 0307 	orrs.w	r3, r6, r7
 8004818:	d1eb      	bne.n	80047f2 <_svfprintf_r+0x89a>
 800481a:	e360      	b.n	8004ede <_svfprintf_r+0xf86>
 800481c:	2600      	movs	r6, #0
 800481e:	2700      	movs	r7, #0
 8004820:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004824:	f006 030f 	and.w	r3, r6, #15
 8004828:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004830:	0933      	lsrs	r3, r6, #4
 8004832:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004836:	093a      	lsrs	r2, r7, #4
 8004838:	461e      	mov	r6, r3
 800483a:	4617      	mov	r7, r2
 800483c:	ea56 0307 	orrs.w	r3, r6, r7
 8004840:	d1f0      	bne.n	8004824 <_svfprintf_r+0x8cc>
 8004842:	e34c      	b.n	8004ede <_svfprintf_r+0xf86>
 8004844:	b93b      	cbnz	r3, 8004856 <_svfprintf_r+0x8fe>
 8004846:	07ea      	lsls	r2, r5, #31
 8004848:	d505      	bpl.n	8004856 <_svfprintf_r+0x8fe>
 800484a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800484e:	2330      	movs	r3, #48	; 0x30
 8004850:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004854:	e343      	b.n	8004ede <_svfprintf_r+0xf86>
 8004856:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800485a:	e340      	b.n	8004ede <_svfprintf_r+0xf86>
 800485c:	b10b      	cbz	r3, 8004862 <_svfprintf_r+0x90a>
 800485e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004862:	9b02      	ldr	r3, [sp, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 82f7 	beq.w	8004e58 <_svfprintf_r+0xf00>
 800486a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800486e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004872:	2600      	movs	r6, #0
 8004874:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004878:	9704      	str	r7, [sp, #16]
 800487a:	e4e8      	b.n	800424e <_svfprintf_r+0x2f6>
 800487c:	4606      	mov	r6, r0
 800487e:	e53f      	b.n	8004300 <_svfprintf_r+0x3a8>
 8004880:	2310      	movs	r3, #16
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004886:	3310      	adds	r3, #16
 8004888:	9321      	str	r3, [sp, #132]	; 0x84
 800488a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800488c:	3301      	adds	r3, #1
 800488e:	2b07      	cmp	r3, #7
 8004890:	9320      	str	r3, [sp, #128]	; 0x80
 8004892:	dc04      	bgt.n	800489e <_svfprintf_r+0x946>
 8004894:	3408      	adds	r4, #8
 8004896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004898:	3b10      	subs	r3, #16
 800489a:	930c      	str	r3, [sp, #48]	; 0x30
 800489c:	e615      	b.n	80044ca <_svfprintf_r+0x572>
 800489e:	aa1f      	add	r2, sp, #124	; 0x7c
 80048a0:	4651      	mov	r1, sl
 80048a2:	4658      	mov	r0, fp
 80048a4:	f003 fe07 	bl	80084b6 <__ssprint_r>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	f040 82b6 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80048ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80048b0:	e7f1      	b.n	8004896 <_svfprintf_r+0x93e>
 80048b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80048b4:	4651      	mov	r1, sl
 80048b6:	4658      	mov	r0, fp
 80048b8:	f003 fdfd 	bl	80084b6 <__ssprint_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	f040 82ac 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80048c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80048c4:	e614      	b.n	80044f0 <_svfprintf_r+0x598>
 80048c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80048c8:	4651      	mov	r1, sl
 80048ca:	4658      	mov	r0, fp
 80048cc:	f003 fdf3 	bl	80084b6 <__ssprint_r>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f040 82a2 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80048d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80048d8:	e61c      	b.n	8004514 <_svfprintf_r+0x5bc>
 80048da:	aa1f      	add	r2, sp, #124	; 0x7c
 80048dc:	4651      	mov	r1, sl
 80048de:	4658      	mov	r0, fp
 80048e0:	f003 fde9 	bl	80084b6 <__ssprint_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f040 8298 	bne.w	8004e1a <_svfprintf_r+0xec2>
 80048ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80048ec:	e622      	b.n	8004534 <_svfprintf_r+0x5dc>
 80048ee:	2210      	movs	r2, #16
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048f4:	3210      	adds	r2, #16
 80048f6:	9221      	str	r2, [sp, #132]	; 0x84
 80048f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048fa:	3201      	adds	r2, #1
 80048fc:	2a07      	cmp	r2, #7
 80048fe:	9220      	str	r2, [sp, #128]	; 0x80
 8004900:	dc02      	bgt.n	8004908 <_svfprintf_r+0x9b0>
 8004902:	3408      	adds	r4, #8
 8004904:	3b10      	subs	r3, #16
 8004906:	e61d      	b.n	8004544 <_svfprintf_r+0x5ec>
 8004908:	aa1f      	add	r2, sp, #124	; 0x7c
 800490a:	4651      	mov	r1, sl
 800490c:	4658      	mov	r0, fp
 800490e:	930c      	str	r3, [sp, #48]	; 0x30
 8004910:	f003 fdd1 	bl	80084b6 <__ssprint_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	f040 8280 	bne.w	8004e1a <_svfprintf_r+0xec2>
 800491a:	ac2c      	add	r4, sp, #176	; 0xb0
 800491c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800491e:	e7f1      	b.n	8004904 <_svfprintf_r+0x9ac>
 8004920:	aa1f      	add	r2, sp, #124	; 0x7c
 8004922:	4651      	mov	r1, sl
 8004924:	4658      	mov	r0, fp
 8004926:	f003 fdc6 	bl	80084b6 <__ssprint_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	f040 8275 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004930:	ac2c      	add	r4, sp, #176	; 0xb0
 8004932:	e617      	b.n	8004564 <_svfprintf_r+0x60c>
 8004934:	2310      	movs	r3, #16
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800493a:	3310      	adds	r3, #16
 800493c:	9321      	str	r3, [sp, #132]	; 0x84
 800493e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004940:	3301      	adds	r3, #1
 8004942:	2b07      	cmp	r3, #7
 8004944:	9320      	str	r3, [sp, #128]	; 0x80
 8004946:	dc02      	bgt.n	800494e <_svfprintf_r+0x9f6>
 8004948:	3408      	adds	r4, #8
 800494a:	3e10      	subs	r6, #16
 800494c:	e60e      	b.n	800456c <_svfprintf_r+0x614>
 800494e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004950:	4651      	mov	r1, sl
 8004952:	4658      	mov	r0, fp
 8004954:	f003 fdaf 	bl	80084b6 <__ssprint_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	f040 825e 	bne.w	8004e1a <_svfprintf_r+0xec2>
 800495e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004960:	e7f3      	b.n	800494a <_svfprintf_r+0x9f2>
 8004962:	aa1f      	add	r2, sp, #124	; 0x7c
 8004964:	4651      	mov	r1, sl
 8004966:	4658      	mov	r0, fp
 8004968:	f003 fda5 	bl	80084b6 <__ssprint_r>
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 8254 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004972:	ac2c      	add	r4, sp, #176	; 0xb0
 8004974:	e60a      	b.n	800458c <_svfprintf_r+0x634>
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	2b65      	cmp	r3, #101	; 0x65
 800497a:	f340 81a9 	ble.w	8004cd0 <_svfprintf_r+0xd78>
 800497e:	2200      	movs	r2, #0
 8004980:	2300      	movs	r3, #0
 8004982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004986:	f7fc f89b 	bl	8000ac0 <__aeabi_dcmpeq>
 800498a:	2800      	cmp	r0, #0
 800498c:	d062      	beq.n	8004a54 <_svfprintf_r+0xafc>
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <_svfprintf_r+0xaf4>)
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	2301      	movs	r3, #1
 8004994:	6063      	str	r3, [r4, #4]
 8004996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004998:	3301      	adds	r3, #1
 800499a:	9321      	str	r3, [sp, #132]	; 0x84
 800499c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800499e:	3301      	adds	r3, #1
 80049a0:	2b07      	cmp	r3, #7
 80049a2:	9320      	str	r3, [sp, #128]	; 0x80
 80049a4:	dc25      	bgt.n	80049f2 <_svfprintf_r+0xa9a>
 80049a6:	3408      	adds	r4, #8
 80049a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049aa:	9a03      	ldr	r2, [sp, #12]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	db02      	blt.n	80049b6 <_svfprintf_r+0xa5e>
 80049b0:	07ee      	lsls	r6, r5, #31
 80049b2:	f57f ae02 	bpl.w	80045ba <_svfprintf_r+0x662>
 80049b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	9b08      	ldr	r3, [sp, #32]
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	9a08      	ldr	r2, [sp, #32]
 80049c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049c2:	4413      	add	r3, r2
 80049c4:	9321      	str	r3, [sp, #132]	; 0x84
 80049c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049c8:	3301      	adds	r3, #1
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	9320      	str	r3, [sp, #128]	; 0x80
 80049ce:	dc1a      	bgt.n	8004a06 <_svfprintf_r+0xaae>
 80049d0:	3408      	adds	r4, #8
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1e5e      	subs	r6, r3, #1
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	f77f adef 	ble.w	80045ba <_svfprintf_r+0x662>
 80049dc:	4f1c      	ldr	r7, [pc, #112]	; (8004a50 <_svfprintf_r+0xaf8>)
 80049de:	f04f 0810 	mov.w	r8, #16
 80049e2:	2e10      	cmp	r6, #16
 80049e4:	6027      	str	r7, [r4, #0]
 80049e6:	dc18      	bgt.n	8004a1a <_svfprintf_r+0xac2>
 80049e8:	6066      	str	r6, [r4, #4]
 80049ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ec:	441e      	add	r6, r3
 80049ee:	9621      	str	r6, [sp, #132]	; 0x84
 80049f0:	e5d4      	b.n	800459c <_svfprintf_r+0x644>
 80049f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80049f4:	4651      	mov	r1, sl
 80049f6:	4658      	mov	r0, fp
 80049f8:	f003 fd5d 	bl	80084b6 <__ssprint_r>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f040 820c 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004a02:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a04:	e7d0      	b.n	80049a8 <_svfprintf_r+0xa50>
 8004a06:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a08:	4651      	mov	r1, sl
 8004a0a:	4658      	mov	r0, fp
 8004a0c:	f003 fd53 	bl	80084b6 <__ssprint_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f040 8202 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004a16:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a18:	e7db      	b.n	80049d2 <_svfprintf_r+0xa7a>
 8004a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a1c:	f8c4 8004 	str.w	r8, [r4, #4]
 8004a20:	3310      	adds	r3, #16
 8004a22:	9321      	str	r3, [sp, #132]	; 0x84
 8004a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a26:	3301      	adds	r3, #1
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8004a2c:	dc02      	bgt.n	8004a34 <_svfprintf_r+0xadc>
 8004a2e:	3408      	adds	r4, #8
 8004a30:	3e10      	subs	r6, #16
 8004a32:	e7d6      	b.n	80049e2 <_svfprintf_r+0xa8a>
 8004a34:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a36:	4651      	mov	r1, sl
 8004a38:	4658      	mov	r0, fp
 8004a3a:	f003 fd3c 	bl	80084b6 <__ssprint_r>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f040 81eb 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004a44:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a46:	e7f3      	b.n	8004a30 <_svfprintf_r+0xad8>
 8004a48:	08008b55 	.word	0x08008b55
 8004a4c:	08008b66 	.word	0x08008b66
 8004a50:	08008b78 	.word	0x08008b78
 8004a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dc7a      	bgt.n	8004b50 <_svfprintf_r+0xbf8>
 8004a5a:	4b9b      	ldr	r3, [pc, #620]	; (8004cc8 <_svfprintf_r+0xd70>)
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a64:	3301      	adds	r3, #1
 8004a66:	9321      	str	r3, [sp, #132]	; 0x84
 8004a68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	2b07      	cmp	r3, #7
 8004a6e:	9320      	str	r3, [sp, #128]	; 0x80
 8004a70:	dc44      	bgt.n	8004afc <_svfprintf_r+0xba4>
 8004a72:	3408      	adds	r4, #8
 8004a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a76:	b923      	cbnz	r3, 8004a82 <_svfprintf_r+0xb2a>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	b913      	cbnz	r3, 8004a82 <_svfprintf_r+0xb2a>
 8004a7c:	07e8      	lsls	r0, r5, #31
 8004a7e:	f57f ad9c 	bpl.w	80045ba <_svfprintf_r+0x662>
 8004a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	9b08      	ldr	r3, [sp, #32]
 8004a88:	6063      	str	r3, [r4, #4]
 8004a8a:	9a08      	ldr	r2, [sp, #32]
 8004a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a8e:	4413      	add	r3, r2
 8004a90:	9321      	str	r3, [sp, #132]	; 0x84
 8004a92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a94:	3301      	adds	r3, #1
 8004a96:	2b07      	cmp	r3, #7
 8004a98:	9320      	str	r3, [sp, #128]	; 0x80
 8004a9a:	dc39      	bgt.n	8004b10 <_svfprintf_r+0xbb8>
 8004a9c:	f104 0308 	add.w	r3, r4, #8
 8004aa0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	da19      	bge.n	8004ada <_svfprintf_r+0xb82>
 8004aa6:	4f89      	ldr	r7, [pc, #548]	; (8004ccc <_svfprintf_r+0xd74>)
 8004aa8:	4276      	negs	r6, r6
 8004aaa:	2410      	movs	r4, #16
 8004aac:	2e10      	cmp	r6, #16
 8004aae:	601f      	str	r7, [r3, #0]
 8004ab0:	dc38      	bgt.n	8004b24 <_svfprintf_r+0xbcc>
 8004ab2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ab4:	605e      	str	r6, [r3, #4]
 8004ab6:	4416      	add	r6, r2
 8004ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004aba:	9621      	str	r6, [sp, #132]	; 0x84
 8004abc:	3201      	adds	r2, #1
 8004abe:	2a07      	cmp	r2, #7
 8004ac0:	f103 0308 	add.w	r3, r3, #8
 8004ac4:	9220      	str	r2, [sp, #128]	; 0x80
 8004ac6:	dd08      	ble.n	8004ada <_svfprintf_r+0xb82>
 8004ac8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004aca:	4651      	mov	r1, sl
 8004acc:	4658      	mov	r0, fp
 8004ace:	f003 fcf2 	bl	80084b6 <__ssprint_r>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f040 81a1 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004ad8:	ab2c      	add	r3, sp, #176	; 0xb0
 8004ada:	9a03      	ldr	r2, [sp, #12]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	9903      	ldr	r1, [sp, #12]
 8004ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ae2:	f8c3 8000 	str.w	r8, [r3]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	9221      	str	r2, [sp, #132]	; 0x84
 8004aea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004aec:	3201      	adds	r2, #1
 8004aee:	2a07      	cmp	r2, #7
 8004af0:	9220      	str	r2, [sp, #128]	; 0x80
 8004af2:	f73f ad59 	bgt.w	80045a8 <_svfprintf_r+0x650>
 8004af6:	f103 0408 	add.w	r4, r3, #8
 8004afa:	e55e      	b.n	80045ba <_svfprintf_r+0x662>
 8004afc:	aa1f      	add	r2, sp, #124	; 0x7c
 8004afe:	4651      	mov	r1, sl
 8004b00:	4658      	mov	r0, fp
 8004b02:	f003 fcd8 	bl	80084b6 <__ssprint_r>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f040 8187 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004b0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b0e:	e7b1      	b.n	8004a74 <_svfprintf_r+0xb1c>
 8004b10:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b12:	4651      	mov	r1, sl
 8004b14:	4658      	mov	r0, fp
 8004b16:	f003 fcce 	bl	80084b6 <__ssprint_r>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f040 817d 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004b20:	ab2c      	add	r3, sp, #176	; 0xb0
 8004b22:	e7bd      	b.n	8004aa0 <_svfprintf_r+0xb48>
 8004b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b26:	605c      	str	r4, [r3, #4]
 8004b28:	3210      	adds	r2, #16
 8004b2a:	9221      	str	r2, [sp, #132]	; 0x84
 8004b2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b2e:	3201      	adds	r2, #1
 8004b30:	2a07      	cmp	r2, #7
 8004b32:	9220      	str	r2, [sp, #128]	; 0x80
 8004b34:	dc02      	bgt.n	8004b3c <_svfprintf_r+0xbe4>
 8004b36:	3308      	adds	r3, #8
 8004b38:	3e10      	subs	r6, #16
 8004b3a:	e7b7      	b.n	8004aac <_svfprintf_r+0xb54>
 8004b3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b3e:	4651      	mov	r1, sl
 8004b40:	4658      	mov	r0, fp
 8004b42:	f003 fcb8 	bl	80084b6 <__ssprint_r>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f040 8167 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004b4c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004b4e:	e7f3      	b.n	8004b38 <_svfprintf_r+0xbe0>
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	42bb      	cmp	r3, r7
 8004b54:	bfa8      	it	ge
 8004b56:	463b      	movge	r3, r7
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	461e      	mov	r6, r3
 8004b5c:	dd0b      	ble.n	8004b76 <_svfprintf_r+0xc1e>
 8004b5e:	6063      	str	r3, [r4, #4]
 8004b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b62:	f8c4 8000 	str.w	r8, [r4]
 8004b66:	4433      	add	r3, r6
 8004b68:	9321      	str	r3, [sp, #132]	; 0x84
 8004b6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	2b07      	cmp	r3, #7
 8004b70:	9320      	str	r3, [sp, #128]	; 0x80
 8004b72:	dc5f      	bgt.n	8004c34 <_svfprintf_r+0xcdc>
 8004b74:	3408      	adds	r4, #8
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	bfac      	ite	ge
 8004b7a:	1bbe      	subge	r6, r7, r6
 8004b7c:	463e      	movlt	r6, r7
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	dd0f      	ble.n	8004ba2 <_svfprintf_r+0xc4a>
 8004b82:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004ccc <_svfprintf_r+0xd74>
 8004b86:	f8c4 9000 	str.w	r9, [r4]
 8004b8a:	2e10      	cmp	r6, #16
 8004b8c:	dc5c      	bgt.n	8004c48 <_svfprintf_r+0xcf0>
 8004b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b90:	6066      	str	r6, [r4, #4]
 8004b92:	441e      	add	r6, r3
 8004b94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b96:	9621      	str	r6, [sp, #132]	; 0x84
 8004b98:	3301      	adds	r3, #1
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	9320      	str	r3, [sp, #128]	; 0x80
 8004b9e:	dc6a      	bgt.n	8004c76 <_svfprintf_r+0xd1e>
 8004ba0:	3408      	adds	r4, #8
 8004ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ba4:	9a03      	ldr	r2, [sp, #12]
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	db01      	blt.n	8004bae <_svfprintf_r+0xc56>
 8004baa:	07e9      	lsls	r1, r5, #31
 8004bac:	d50d      	bpl.n	8004bca <_svfprintf_r+0xc72>
 8004bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	9b08      	ldr	r3, [sp, #32]
 8004bb4:	6063      	str	r3, [r4, #4]
 8004bb6:	9a08      	ldr	r2, [sp, #32]
 8004bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bba:	4413      	add	r3, r2
 8004bbc:	9321      	str	r3, [sp, #132]	; 0x84
 8004bbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	9320      	str	r3, [sp, #128]	; 0x80
 8004bc6:	dc60      	bgt.n	8004c8a <_svfprintf_r+0xd32>
 8004bc8:	3408      	adds	r4, #8
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	9a03      	ldr	r2, [sp, #12]
 8004bce:	1bde      	subs	r6, r3, r7
 8004bd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	429e      	cmp	r6, r3
 8004bd6:	bfa8      	it	ge
 8004bd8:	461e      	movge	r6, r3
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	dd0b      	ble.n	8004bf6 <_svfprintf_r+0xc9e>
 8004bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004be0:	6066      	str	r6, [r4, #4]
 8004be2:	4433      	add	r3, r6
 8004be4:	9321      	str	r3, [sp, #132]	; 0x84
 8004be6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004be8:	3301      	adds	r3, #1
 8004bea:	4447      	add	r7, r8
 8004bec:	2b07      	cmp	r3, #7
 8004bee:	6027      	str	r7, [r4, #0]
 8004bf0:	9320      	str	r3, [sp, #128]	; 0x80
 8004bf2:	dc54      	bgt.n	8004c9e <_svfprintf_r+0xd46>
 8004bf4:	3408      	adds	r4, #8
 8004bf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bf8:	9a03      	ldr	r2, [sp, #12]
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	eba2 0303 	sub.w	r3, r2, r3
 8004c00:	bfac      	ite	ge
 8004c02:	1b9e      	subge	r6, r3, r6
 8004c04:	461e      	movlt	r6, r3
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	f77f acd7 	ble.w	80045ba <_svfprintf_r+0x662>
 8004c0c:	4f2f      	ldr	r7, [pc, #188]	; (8004ccc <_svfprintf_r+0xd74>)
 8004c0e:	f04f 0810 	mov.w	r8, #16
 8004c12:	2e10      	cmp	r6, #16
 8004c14:	6027      	str	r7, [r4, #0]
 8004c16:	f77f aee7 	ble.w	80049e8 <_svfprintf_r+0xa90>
 8004c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c1c:	f8c4 8004 	str.w	r8, [r4, #4]
 8004c20:	3310      	adds	r3, #16
 8004c22:	9321      	str	r3, [sp, #132]	; 0x84
 8004c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c26:	3301      	adds	r3, #1
 8004c28:	2b07      	cmp	r3, #7
 8004c2a:	9320      	str	r3, [sp, #128]	; 0x80
 8004c2c:	dc41      	bgt.n	8004cb2 <_svfprintf_r+0xd5a>
 8004c2e:	3408      	adds	r4, #8
 8004c30:	3e10      	subs	r6, #16
 8004c32:	e7ee      	b.n	8004c12 <_svfprintf_r+0xcba>
 8004c34:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c36:	4651      	mov	r1, sl
 8004c38:	4658      	mov	r0, fp
 8004c3a:	f003 fc3c 	bl	80084b6 <__ssprint_r>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f040 80eb 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004c44:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c46:	e796      	b.n	8004b76 <_svfprintf_r+0xc1e>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	6063      	str	r3, [r4, #4]
 8004c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c4e:	3310      	adds	r3, #16
 8004c50:	9321      	str	r3, [sp, #132]	; 0x84
 8004c52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c54:	3301      	adds	r3, #1
 8004c56:	2b07      	cmp	r3, #7
 8004c58:	9320      	str	r3, [sp, #128]	; 0x80
 8004c5a:	dc02      	bgt.n	8004c62 <_svfprintf_r+0xd0a>
 8004c5c:	3408      	adds	r4, #8
 8004c5e:	3e10      	subs	r6, #16
 8004c60:	e791      	b.n	8004b86 <_svfprintf_r+0xc2e>
 8004c62:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c64:	4651      	mov	r1, sl
 8004c66:	4658      	mov	r0, fp
 8004c68:	f003 fc25 	bl	80084b6 <__ssprint_r>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f040 80d4 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004c72:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c74:	e7f3      	b.n	8004c5e <_svfprintf_r+0xd06>
 8004c76:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c78:	4651      	mov	r1, sl
 8004c7a:	4658      	mov	r0, fp
 8004c7c:	f003 fc1b 	bl	80084b6 <__ssprint_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 80ca 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004c86:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c88:	e78b      	b.n	8004ba2 <_svfprintf_r+0xc4a>
 8004c8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	4658      	mov	r0, fp
 8004c90:	f003 fc11 	bl	80084b6 <__ssprint_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 80c0 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004c9a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c9c:	e795      	b.n	8004bca <_svfprintf_r+0xc72>
 8004c9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	4658      	mov	r0, fp
 8004ca4:	f003 fc07 	bl	80084b6 <__ssprint_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	f040 80b6 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004cae:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cb0:	e7a1      	b.n	8004bf6 <_svfprintf_r+0xc9e>
 8004cb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	4658      	mov	r0, fp
 8004cb8:	f003 fbfd 	bl	80084b6 <__ssprint_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f040 80ac 	bne.w	8004e1a <_svfprintf_r+0xec2>
 8004cc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cc4:	e7b4      	b.n	8004c30 <_svfprintf_r+0xcd8>
 8004cc6:	bf00      	nop
 8004cc8:	08008b66 	.word	0x08008b66
 8004ccc:	08008b78 	.word	0x08008b78
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	dc01      	bgt.n	8004cda <_svfprintf_r+0xd82>
 8004cd6:	07ea      	lsls	r2, r5, #31
 8004cd8:	d576      	bpl.n	8004dc8 <_svfprintf_r+0xe70>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ce0:	f8c4 8000 	str.w	r8, [r4]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	9321      	str	r3, [sp, #132]	; 0x84
 8004ce8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cea:	3301      	adds	r3, #1
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	9320      	str	r3, [sp, #128]	; 0x80
 8004cf0:	dc36      	bgt.n	8004d60 <_svfprintf_r+0xe08>
 8004cf2:	3408      	adds	r4, #8
 8004cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	9b08      	ldr	r3, [sp, #32]
 8004cfa:	6063      	str	r3, [r4, #4]
 8004cfc:	9a08      	ldr	r2, [sp, #32]
 8004cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d00:	4413      	add	r3, r2
 8004d02:	9321      	str	r3, [sp, #132]	; 0x84
 8004d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d06:	3301      	adds	r3, #1
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	9320      	str	r3, [sp, #128]	; 0x80
 8004d0c:	dc31      	bgt.n	8004d72 <_svfprintf_r+0xe1a>
 8004d0e:	3408      	adds	r4, #8
 8004d10:	2300      	movs	r3, #0
 8004d12:	2200      	movs	r2, #0
 8004d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d18:	f7fb fed2 	bl	8000ac0 <__aeabi_dcmpeq>
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	1e5e      	subs	r6, r3, #1
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d12f      	bne.n	8004d84 <_svfprintf_r+0xe2c>
 8004d24:	f108 0301 	add.w	r3, r8, #1
 8004d28:	e884 0048 	stmia.w	r4, {r3, r6}
 8004d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d2e:	9a03      	ldr	r2, [sp, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	9321      	str	r3, [sp, #132]	; 0x84
 8004d36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d38:	3301      	adds	r3, #1
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d3e:	dd4a      	ble.n	8004dd6 <_svfprintf_r+0xe7e>
 8004d40:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d42:	4651      	mov	r1, sl
 8004d44:	4658      	mov	r0, fp
 8004d46:	f003 fbb6 	bl	80084b6 <__ssprint_r>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d165      	bne.n	8004e1a <_svfprintf_r+0xec2>
 8004d4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d50:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d5c:	4413      	add	r3, r2
 8004d5e:	e41c      	b.n	800459a <_svfprintf_r+0x642>
 8004d60:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d62:	4651      	mov	r1, sl
 8004d64:	4658      	mov	r0, fp
 8004d66:	f003 fba6 	bl	80084b6 <__ssprint_r>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d155      	bne.n	8004e1a <_svfprintf_r+0xec2>
 8004d6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d70:	e7c0      	b.n	8004cf4 <_svfprintf_r+0xd9c>
 8004d72:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d74:	4651      	mov	r1, sl
 8004d76:	4658      	mov	r0, fp
 8004d78:	f003 fb9d 	bl	80084b6 <__ssprint_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d14c      	bne.n	8004e1a <_svfprintf_r+0xec2>
 8004d80:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d82:	e7c5      	b.n	8004d10 <_svfprintf_r+0xdb8>
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	dde3      	ble.n	8004d50 <_svfprintf_r+0xdf8>
 8004d88:	4f59      	ldr	r7, [pc, #356]	; (8004ef0 <_svfprintf_r+0xf98>)
 8004d8a:	f04f 0810 	mov.w	r8, #16
 8004d8e:	2e10      	cmp	r6, #16
 8004d90:	6027      	str	r7, [r4, #0]
 8004d92:	dc04      	bgt.n	8004d9e <_svfprintf_r+0xe46>
 8004d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d96:	6066      	str	r6, [r4, #4]
 8004d98:	441e      	add	r6, r3
 8004d9a:	9621      	str	r6, [sp, #132]	; 0x84
 8004d9c:	e7cb      	b.n	8004d36 <_svfprintf_r+0xdde>
 8004d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004da0:	f8c4 8004 	str.w	r8, [r4, #4]
 8004da4:	3310      	adds	r3, #16
 8004da6:	9321      	str	r3, [sp, #132]	; 0x84
 8004da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004daa:	3301      	adds	r3, #1
 8004dac:	2b07      	cmp	r3, #7
 8004dae:	9320      	str	r3, [sp, #128]	; 0x80
 8004db0:	dc02      	bgt.n	8004db8 <_svfprintf_r+0xe60>
 8004db2:	3408      	adds	r4, #8
 8004db4:	3e10      	subs	r6, #16
 8004db6:	e7ea      	b.n	8004d8e <_svfprintf_r+0xe36>
 8004db8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dba:	4651      	mov	r1, sl
 8004dbc:	4658      	mov	r0, fp
 8004dbe:	f003 fb7a 	bl	80084b6 <__ssprint_r>
 8004dc2:	bb50      	cbnz	r0, 8004e1a <_svfprintf_r+0xec2>
 8004dc4:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dc6:	e7f5      	b.n	8004db4 <_svfprintf_r+0xe5c>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dce:	f8c4 8000 	str.w	r8, [r4]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	e7ae      	b.n	8004d34 <_svfprintf_r+0xddc>
 8004dd6:	3408      	adds	r4, #8
 8004dd8:	e7ba      	b.n	8004d50 <_svfprintf_r+0xdf8>
 8004dda:	3408      	adds	r4, #8
 8004ddc:	f7ff bbed 	b.w	80045ba <_svfprintf_r+0x662>
 8004de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004de4:	1a9d      	subs	r5, r3, r2
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f77f abea 	ble.w	80045c0 <_svfprintf_r+0x668>
 8004dec:	2610      	movs	r6, #16
 8004dee:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <_svfprintf_r+0xf9c>)
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	2d10      	cmp	r5, #16
 8004df4:	dc1b      	bgt.n	8004e2e <_svfprintf_r+0xed6>
 8004df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004df8:	6065      	str	r5, [r4, #4]
 8004dfa:	441d      	add	r5, r3
 8004dfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dfe:	9521      	str	r5, [sp, #132]	; 0x84
 8004e00:	3301      	adds	r3, #1
 8004e02:	2b07      	cmp	r3, #7
 8004e04:	9320      	str	r3, [sp, #128]	; 0x80
 8004e06:	f77f abdb 	ble.w	80045c0 <_svfprintf_r+0x668>
 8004e0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	4658      	mov	r0, fp
 8004e10:	f003 fb51 	bl	80084b6 <__ssprint_r>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f43f abd3 	beq.w	80045c0 <_svfprintf_r+0x668>
 8004e1a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004e1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	bf18      	it	ne
 8004e26:	f04f 33ff 	movne.w	r3, #4294967295
 8004e2a:	f7ff b8b9 	b.w	8003fa0 <_svfprintf_r+0x48>
 8004e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e30:	6066      	str	r6, [r4, #4]
 8004e32:	3310      	adds	r3, #16
 8004e34:	9321      	str	r3, [sp, #132]	; 0x84
 8004e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e38:	3301      	adds	r3, #1
 8004e3a:	2b07      	cmp	r3, #7
 8004e3c:	9320      	str	r3, [sp, #128]	; 0x80
 8004e3e:	dc02      	bgt.n	8004e46 <_svfprintf_r+0xeee>
 8004e40:	3408      	adds	r4, #8
 8004e42:	3d10      	subs	r5, #16
 8004e44:	e7d3      	b.n	8004dee <_svfprintf_r+0xe96>
 8004e46:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e48:	4651      	mov	r1, sl
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f003 fb33 	bl	80084b6 <__ssprint_r>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1e2      	bne.n	8004e1a <_svfprintf_r+0xec2>
 8004e54:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e56:	e7f4      	b.n	8004e42 <_svfprintf_r+0xeea>
 8004e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0dd      	beq.n	8004e1a <_svfprintf_r+0xec2>
 8004e5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e60:	4651      	mov	r1, sl
 8004e62:	4658      	mov	r0, fp
 8004e64:	f003 fb27 	bl	80084b6 <__ssprint_r>
 8004e68:	e7d7      	b.n	8004e1a <_svfprintf_r+0xec2>
 8004e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	f7fb fe57 	bl	8000b24 <__aeabi_dcmpun>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	f43f aa44 	beq.w	8004304 <_svfprintf_r+0x3ac>
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <_svfprintf_r+0xfa0>)
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <_svfprintf_r+0xfa4>)
 8004e80:	f7ff ba34 	b.w	80042ec <_svfprintf_r+0x394>
 8004e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e86:	eba3 0308 	sub.w	r3, r3, r8
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	f7ff bab5 	b.w	80043fa <_svfprintf_r+0x4a2>
 8004e90:	ea56 0207 	orrs.w	r2, r6, r7
 8004e94:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e96:	f43f ac2b 	beq.w	80046f0 <_svfprintf_r+0x798>
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	f43f ac9d 	beq.w	80047da <_svfprintf_r+0x882>
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	f43f acbd 	beq.w	8004820 <_svfprintf_r+0x8c8>
 8004ea6:	ab2c      	add	r3, sp, #176	; 0xb0
 8004ea8:	08f1      	lsrs	r1, r6, #3
 8004eaa:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004eae:	08f8      	lsrs	r0, r7, #3
 8004eb0:	f006 0207 	and.w	r2, r6, #7
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	3230      	adds	r2, #48	; 0x30
 8004eba:	ea56 0107 	orrs.w	r1, r6, r7
 8004ebe:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ec2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004ec6:	f47f ac86 	bne.w	80047d6 <_svfprintf_r+0x87e>
 8004eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ecc:	07c9      	lsls	r1, r1, #31
 8004ece:	d506      	bpl.n	8004ede <_svfprintf_r+0xf86>
 8004ed0:	2a30      	cmp	r2, #48	; 0x30
 8004ed2:	d004      	beq.n	8004ede <_svfprintf_r+0xf86>
 8004ed4:	2230      	movs	r2, #48	; 0x30
 8004ed6:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004eda:	f1a3 0802 	sub.w	r8, r3, #2
 8004ede:	464e      	mov	r6, r9
 8004ee0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004ee4:	eba9 0908 	sub.w	r9, r9, r8
 8004ee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004eea:	2700      	movs	r7, #0
 8004eec:	f7ff bad1 	b.w	8004492 <_svfprintf_r+0x53a>
 8004ef0:	08008b78 	.word	0x08008b78
 8004ef4:	08008b68 	.word	0x08008b68
 8004ef8:	08008b3c 	.word	0x08008b3c
 8004efc:	08008b40 	.word	0x08008b40

08004f00 <_vfprintf_r>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	b0bd      	sub	sp, #244	; 0xf4
 8004f06:	4688      	mov	r8, r1
 8004f08:	4615      	mov	r5, r2
 8004f0a:	461c      	mov	r4, r3
 8004f0c:	461f      	mov	r7, r3
 8004f0e:	4683      	mov	fp, r0
 8004f10:	f002 fb60 	bl	80075d4 <_localeconv_r>
 8004f14:	6803      	ldr	r3, [r0, #0]
 8004f16:	930d      	str	r3, [sp, #52]	; 0x34
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb f959 	bl	80001d0 <strlen>
 8004f1e:	9009      	str	r0, [sp, #36]	; 0x24
 8004f20:	f1bb 0f00 	cmp.w	fp, #0
 8004f24:	d005      	beq.n	8004f32 <_vfprintf_r+0x32>
 8004f26:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004f2a:	b913      	cbnz	r3, 8004f32 <_vfprintf_r+0x32>
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	f002 f853 	bl	8006fd8 <__sinit>
 8004f32:	4b99      	ldr	r3, [pc, #612]	; (8005198 <_vfprintf_r+0x298>)
 8004f34:	4598      	cmp	r8, r3
 8004f36:	d137      	bne.n	8004fa8 <_vfprintf_r+0xa8>
 8004f38:	f8db 8004 	ldr.w	r8, [fp, #4]
 8004f3c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004f40:	07d8      	lsls	r0, r3, #31
 8004f42:	d407      	bmi.n	8004f54 <_vfprintf_r+0x54>
 8004f44:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004f48:	0599      	lsls	r1, r3, #22
 8004f4a:	d403      	bmi.n	8004f54 <_vfprintf_r+0x54>
 8004f4c:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004f50:	f002 fb50 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8004f54:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8004f58:	049a      	lsls	r2, r3, #18
 8004f5a:	d409      	bmi.n	8004f70 <_vfprintf_r+0x70>
 8004f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f60:	f8a8 300c 	strh.w	r3, [r8, #12]
 8004f64:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f6c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8004f70:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004f74:	071e      	lsls	r6, r3, #28
 8004f76:	d502      	bpl.n	8004f7e <_vfprintf_r+0x7e>
 8004f78:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004f7c:	bb03      	cbnz	r3, 8004fc0 <_vfprintf_r+0xc0>
 8004f7e:	4641      	mov	r1, r8
 8004f80:	4658      	mov	r0, fp
 8004f82:	f001 f839 	bl	8005ff8 <__swsetup_r>
 8004f86:	b1d8      	cbz	r0, 8004fc0 <_vfprintf_r+0xc0>
 8004f88:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004f8c:	07dd      	lsls	r5, r3, #31
 8004f8e:	d407      	bmi.n	8004fa0 <_vfprintf_r+0xa0>
 8004f90:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004f94:	059c      	lsls	r4, r3, #22
 8004f96:	d403      	bmi.n	8004fa0 <_vfprintf_r+0xa0>
 8004f98:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004f9c:	f002 fb2b 	bl	80075f6 <__retarget_lock_release_recursive>
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa6:	e026      	b.n	8004ff6 <_vfprintf_r+0xf6>
 8004fa8:	4b7c      	ldr	r3, [pc, #496]	; (800519c <_vfprintf_r+0x29c>)
 8004faa:	4598      	cmp	r8, r3
 8004fac:	d102      	bne.n	8004fb4 <_vfprintf_r+0xb4>
 8004fae:	f8db 8008 	ldr.w	r8, [fp, #8]
 8004fb2:	e7c3      	b.n	8004f3c <_vfprintf_r+0x3c>
 8004fb4:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <_vfprintf_r+0x2a0>)
 8004fb6:	4598      	cmp	r8, r3
 8004fb8:	bf08      	it	eq
 8004fba:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8004fbe:	e7bd      	b.n	8004f3c <_vfprintf_r+0x3c>
 8004fc0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004fc4:	f003 021a 	and.w	r2, r3, #26
 8004fc8:	2a0a      	cmp	r2, #10
 8004fca:	d118      	bne.n	8004ffe <_vfprintf_r+0xfe>
 8004fcc:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	db14      	blt.n	8004ffe <_vfprintf_r+0xfe>
 8004fd4:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8004fd8:	07d0      	lsls	r0, r2, #31
 8004fda:	d405      	bmi.n	8004fe8 <_vfprintf_r+0xe8>
 8004fdc:	0599      	lsls	r1, r3, #22
 8004fde:	d403      	bmi.n	8004fe8 <_vfprintf_r+0xe8>
 8004fe0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004fe4:	f002 fb07 	bl	80075f6 <__retarget_lock_release_recursive>
 8004fe8:	4623      	mov	r3, r4
 8004fea:	462a      	mov	r2, r5
 8004fec:	4641      	mov	r1, r8
 8004fee:	4658      	mov	r0, fp
 8004ff0:	f000 ffc2 	bl	8005f78 <__sbprintf>
 8004ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ff8:	b03d      	add	sp, #244	; 0xf4
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8005190 <_vfprintf_r+0x290>
 8005002:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005006:	2300      	movs	r3, #0
 8005008:	ac2c      	add	r4, sp, #176	; 0xb0
 800500a:	941f      	str	r4, [sp, #124]	; 0x7c
 800500c:	9321      	str	r3, [sp, #132]	; 0x84
 800500e:	9320      	str	r3, [sp, #128]	; 0x80
 8005010:	9505      	str	r5, [sp, #20]
 8005012:	9303      	str	r3, [sp, #12]
 8005014:	9311      	str	r3, [sp, #68]	; 0x44
 8005016:	9310      	str	r3, [sp, #64]	; 0x40
 8005018:	930a      	str	r3, [sp, #40]	; 0x28
 800501a:	9d05      	ldr	r5, [sp, #20]
 800501c:	462b      	mov	r3, r5
 800501e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005022:	b112      	cbz	r2, 800502a <_vfprintf_r+0x12a>
 8005024:	2a25      	cmp	r2, #37	; 0x25
 8005026:	f040 8083 	bne.w	8005130 <_vfprintf_r+0x230>
 800502a:	9b05      	ldr	r3, [sp, #20]
 800502c:	1aee      	subs	r6, r5, r3
 800502e:	d00d      	beq.n	800504c <_vfprintf_r+0x14c>
 8005030:	e884 0048 	stmia.w	r4, {r3, r6}
 8005034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005036:	4433      	add	r3, r6
 8005038:	9321      	str	r3, [sp, #132]	; 0x84
 800503a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800503c:	3301      	adds	r3, #1
 800503e:	2b07      	cmp	r3, #7
 8005040:	9320      	str	r3, [sp, #128]	; 0x80
 8005042:	dc77      	bgt.n	8005134 <_vfprintf_r+0x234>
 8005044:	3408      	adds	r4, #8
 8005046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005048:	4433      	add	r3, r6
 800504a:	930a      	str	r3, [sp, #40]	; 0x28
 800504c:	782b      	ldrb	r3, [r5, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8739 	beq.w	8005ec6 <_vfprintf_r+0xfc6>
 8005054:	2300      	movs	r3, #0
 8005056:	1c69      	adds	r1, r5, #1
 8005058:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 3aff 	mov.w	sl, #4294967295
 8005062:	930b      	str	r3, [sp, #44]	; 0x2c
 8005064:	461d      	mov	r5, r3
 8005066:	200a      	movs	r0, #10
 8005068:	1c4e      	adds	r6, r1, #1
 800506a:	7809      	ldrb	r1, [r1, #0]
 800506c:	9605      	str	r6, [sp, #20]
 800506e:	9102      	str	r1, [sp, #8]
 8005070:	9902      	ldr	r1, [sp, #8]
 8005072:	3920      	subs	r1, #32
 8005074:	2958      	cmp	r1, #88	; 0x58
 8005076:	f200 841d 	bhi.w	80058b4 <_vfprintf_r+0x9b4>
 800507a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800507e:	00b3      	.short	0x00b3
 8005080:	041b041b 	.word	0x041b041b
 8005084:	041b00b8 	.word	0x041b00b8
 8005088:	041b041b 	.word	0x041b041b
 800508c:	041b041b 	.word	0x041b041b
 8005090:	00bb041b 	.word	0x00bb041b
 8005094:	041b0065 	.word	0x041b0065
 8005098:	00c700c4 	.word	0x00c700c4
 800509c:	00e4041b 	.word	0x00e4041b
 80050a0:	00e700e7 	.word	0x00e700e7
 80050a4:	00e700e7 	.word	0x00e700e7
 80050a8:	00e700e7 	.word	0x00e700e7
 80050ac:	00e700e7 	.word	0x00e700e7
 80050b0:	041b00e7 	.word	0x041b00e7
 80050b4:	041b041b 	.word	0x041b041b
 80050b8:	041b041b 	.word	0x041b041b
 80050bc:	041b041b 	.word	0x041b041b
 80050c0:	041b041b 	.word	0x041b041b
 80050c4:	011b041b 	.word	0x011b041b
 80050c8:	041b0131 	.word	0x041b0131
 80050cc:	041b0131 	.word	0x041b0131
 80050d0:	041b041b 	.word	0x041b041b
 80050d4:	00fa041b 	.word	0x00fa041b
 80050d8:	041b041b 	.word	0x041b041b
 80050dc:	041b0346 	.word	0x041b0346
 80050e0:	041b041b 	.word	0x041b041b
 80050e4:	041b041b 	.word	0x041b041b
 80050e8:	041b03ad 	.word	0x041b03ad
 80050ec:	0093041b 	.word	0x0093041b
 80050f0:	041b041b 	.word	0x041b041b
 80050f4:	041b041b 	.word	0x041b041b
 80050f8:	041b041b 	.word	0x041b041b
 80050fc:	041b041b 	.word	0x041b041b
 8005100:	041b041b 	.word	0x041b041b
 8005104:	006b010d 	.word	0x006b010d
 8005108:	01310131 	.word	0x01310131
 800510c:	00fd0131 	.word	0x00fd0131
 8005110:	041b006b 	.word	0x041b006b
 8005114:	0100041b 	.word	0x0100041b
 8005118:	0328041b 	.word	0x0328041b
 800511c:	037c0348 	.word	0x037c0348
 8005120:	041b0107 	.word	0x041b0107
 8005124:	041b038d 	.word	0x041b038d
 8005128:	041b03af 	.word	0x041b03af
 800512c:	03c7041b 	.word	0x03c7041b
 8005130:	461d      	mov	r5, r3
 8005132:	e773      	b.n	800501c <_vfprintf_r+0x11c>
 8005134:	aa1f      	add	r2, sp, #124	; 0x7c
 8005136:	4641      	mov	r1, r8
 8005138:	4658      	mov	r0, fp
 800513a:	f003 fa36 	bl	80085aa <__sprint_r>
 800513e:	2800      	cmp	r0, #0
 8005140:	f040 8699 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005144:	ac2c      	add	r4, sp, #176	; 0xb0
 8005146:	e77e      	b.n	8005046 <_vfprintf_r+0x146>
 8005148:	2301      	movs	r3, #1
 800514a:	222b      	movs	r2, #43	; 0x2b
 800514c:	9905      	ldr	r1, [sp, #20]
 800514e:	e78b      	b.n	8005068 <_vfprintf_r+0x168>
 8005150:	460f      	mov	r7, r1
 8005152:	e7fb      	b.n	800514c <_vfprintf_r+0x24c>
 8005154:	b10b      	cbz	r3, 800515a <_vfprintf_r+0x25a>
 8005156:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800515a:	06aa      	lsls	r2, r5, #26
 800515c:	f140 80b0 	bpl.w	80052c0 <_vfprintf_r+0x3c0>
 8005160:	3707      	adds	r7, #7
 8005162:	f027 0707 	bic.w	r7, r7, #7
 8005166:	f107 0308 	add.w	r3, r7, #8
 800516a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	2e00      	cmp	r6, #0
 8005172:	f177 0300 	sbcs.w	r3, r7, #0
 8005176:	da06      	bge.n	8005186 <_vfprintf_r+0x286>
 8005178:	4276      	negs	r6, r6
 800517a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800517e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005182:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005186:	2301      	movs	r3, #1
 8005188:	e2d0      	b.n	800572c <_vfprintf_r+0x82c>
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w
	...
 8005198:	08008bd8 	.word	0x08008bd8
 800519c:	08008bf8 	.word	0x08008bf8
 80051a0:	08008bb8 	.word	0x08008bb8
 80051a4:	b10b      	cbz	r3, 80051aa <_vfprintf_r+0x2aa>
 80051a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80051aa:	4ba2      	ldr	r3, [pc, #648]	; (8005434 <_vfprintf_r+0x534>)
 80051ac:	9311      	str	r3, [sp, #68]	; 0x44
 80051ae:	06a9      	lsls	r1, r5, #26
 80051b0:	f140 8331 	bpl.w	8005816 <_vfprintf_r+0x916>
 80051b4:	3707      	adds	r7, #7
 80051b6:	f027 0707 	bic.w	r7, r7, #7
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	e9d7 6700 	ldrd	r6, r7, [r7]
 80051c2:	9304      	str	r3, [sp, #16]
 80051c4:	07eb      	lsls	r3, r5, #31
 80051c6:	d50b      	bpl.n	80051e0 <_vfprintf_r+0x2e0>
 80051c8:	ea56 0307 	orrs.w	r3, r6, r7
 80051cc:	d008      	beq.n	80051e0 <_vfprintf_r+0x2e0>
 80051ce:	2330      	movs	r3, #48	; 0x30
 80051d0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80051d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80051d8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80051dc:	f045 0502 	orr.w	r5, r5, #2
 80051e0:	2302      	movs	r3, #2
 80051e2:	e2a0      	b.n	8005726 <_vfprintf_r+0x826>
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d1b1      	bne.n	800514c <_vfprintf_r+0x24c>
 80051e8:	2301      	movs	r3, #1
 80051ea:	2220      	movs	r2, #32
 80051ec:	e7ae      	b.n	800514c <_vfprintf_r+0x24c>
 80051ee:	f045 0501 	orr.w	r5, r5, #1
 80051f2:	e7ab      	b.n	800514c <_vfprintf_r+0x24c>
 80051f4:	683e      	ldr	r6, [r7, #0]
 80051f6:	960b      	str	r6, [sp, #44]	; 0x2c
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	f107 0104 	add.w	r1, r7, #4
 80051fe:	daa7      	bge.n	8005150 <_vfprintf_r+0x250>
 8005200:	4276      	negs	r6, r6
 8005202:	960b      	str	r6, [sp, #44]	; 0x2c
 8005204:	460f      	mov	r7, r1
 8005206:	f045 0504 	orr.w	r5, r5, #4
 800520a:	e79f      	b.n	800514c <_vfprintf_r+0x24c>
 800520c:	9905      	ldr	r1, [sp, #20]
 800520e:	1c4e      	adds	r6, r1, #1
 8005210:	7809      	ldrb	r1, [r1, #0]
 8005212:	9102      	str	r1, [sp, #8]
 8005214:	292a      	cmp	r1, #42	; 0x2a
 8005216:	d010      	beq.n	800523a <_vfprintf_r+0x33a>
 8005218:	f04f 0a00 	mov.w	sl, #0
 800521c:	9605      	str	r6, [sp, #20]
 800521e:	9902      	ldr	r1, [sp, #8]
 8005220:	3930      	subs	r1, #48	; 0x30
 8005222:	2909      	cmp	r1, #9
 8005224:	f63f af24 	bhi.w	8005070 <_vfprintf_r+0x170>
 8005228:	fb00 1a0a 	mla	sl, r0, sl, r1
 800522c:	9905      	ldr	r1, [sp, #20]
 800522e:	460e      	mov	r6, r1
 8005230:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005234:	9102      	str	r1, [sp, #8]
 8005236:	9605      	str	r6, [sp, #20]
 8005238:	e7f1      	b.n	800521e <_vfprintf_r+0x31e>
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	9605      	str	r6, [sp, #20]
 800523e:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8005242:	3704      	adds	r7, #4
 8005244:	e782      	b.n	800514c <_vfprintf_r+0x24c>
 8005246:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800524a:	e77f      	b.n	800514c <_vfprintf_r+0x24c>
 800524c:	2100      	movs	r1, #0
 800524e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005250:	9902      	ldr	r1, [sp, #8]
 8005252:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005254:	3930      	subs	r1, #48	; 0x30
 8005256:	fb00 1106 	mla	r1, r0, r6, r1
 800525a:	910b      	str	r1, [sp, #44]	; 0x2c
 800525c:	9905      	ldr	r1, [sp, #20]
 800525e:	460e      	mov	r6, r1
 8005260:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005264:	9102      	str	r1, [sp, #8]
 8005266:	9902      	ldr	r1, [sp, #8]
 8005268:	9605      	str	r6, [sp, #20]
 800526a:	3930      	subs	r1, #48	; 0x30
 800526c:	2909      	cmp	r1, #9
 800526e:	d9ef      	bls.n	8005250 <_vfprintf_r+0x350>
 8005270:	e6fe      	b.n	8005070 <_vfprintf_r+0x170>
 8005272:	f045 0508 	orr.w	r5, r5, #8
 8005276:	e769      	b.n	800514c <_vfprintf_r+0x24c>
 8005278:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800527c:	e766      	b.n	800514c <_vfprintf_r+0x24c>
 800527e:	9905      	ldr	r1, [sp, #20]
 8005280:	7809      	ldrb	r1, [r1, #0]
 8005282:	296c      	cmp	r1, #108	; 0x6c
 8005284:	d105      	bne.n	8005292 <_vfprintf_r+0x392>
 8005286:	9905      	ldr	r1, [sp, #20]
 8005288:	3101      	adds	r1, #1
 800528a:	9105      	str	r1, [sp, #20]
 800528c:	f045 0520 	orr.w	r5, r5, #32
 8005290:	e75c      	b.n	800514c <_vfprintf_r+0x24c>
 8005292:	f045 0510 	orr.w	r5, r5, #16
 8005296:	e759      	b.n	800514c <_vfprintf_r+0x24c>
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	2600      	movs	r6, #0
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80052a4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80052a8:	f04f 0a01 	mov.w	sl, #1
 80052ac:	9608      	str	r6, [sp, #32]
 80052ae:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 80052b2:	e11e      	b.n	80054f2 <_vfprintf_r+0x5f2>
 80052b4:	b10b      	cbz	r3, 80052ba <_vfprintf_r+0x3ba>
 80052b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80052ba:	f045 0510 	orr.w	r5, r5, #16
 80052be:	e74c      	b.n	800515a <_vfprintf_r+0x25a>
 80052c0:	f015 0f10 	tst.w	r5, #16
 80052c4:	f107 0304 	add.w	r3, r7, #4
 80052c8:	d003      	beq.n	80052d2 <_vfprintf_r+0x3d2>
 80052ca:	683e      	ldr	r6, [r7, #0]
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	17f7      	asrs	r7, r6, #31
 80052d0:	e74e      	b.n	8005170 <_vfprintf_r+0x270>
 80052d2:	683e      	ldr	r6, [r7, #0]
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052da:	bf18      	it	ne
 80052dc:	b236      	sxthne	r6, r6
 80052de:	e7f6      	b.n	80052ce <_vfprintf_r+0x3ce>
 80052e0:	b10b      	cbz	r3, 80052e6 <_vfprintf_r+0x3e6>
 80052e2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80052e6:	3707      	adds	r7, #7
 80052e8:	f027 0707 	bic.w	r7, r7, #7
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	ed97 7b00 	vldr	d7, [r7]
 80052f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80052fa:	9b06      	ldr	r3, [sp, #24]
 80052fc:	9312      	str	r3, [sp, #72]	; 0x48
 80052fe:	9b07      	ldr	r3, [sp, #28]
 8005300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005304:	9313      	str	r3, [sp, #76]	; 0x4c
 8005306:	f04f 32ff 	mov.w	r2, #4294967295
 800530a:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <_vfprintf_r+0x538>)
 800530c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005310:	f7fb fc08 	bl	8000b24 <__aeabi_dcmpun>
 8005314:	2800      	cmp	r0, #0
 8005316:	f040 85e3 	bne.w	8005ee0 <_vfprintf_r+0xfe0>
 800531a:	f04f 32ff 	mov.w	r2, #4294967295
 800531e:	4b46      	ldr	r3, [pc, #280]	; (8005438 <_vfprintf_r+0x538>)
 8005320:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005324:	f7fb fbe0 	bl	8000ae8 <__aeabi_dcmple>
 8005328:	2800      	cmp	r0, #0
 800532a:	f040 85d9 	bne.w	8005ee0 <_vfprintf_r+0xfe0>
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005336:	f7fb fbcd 	bl	8000ad4 <__aeabi_dcmplt>
 800533a:	b110      	cbz	r0, 8005342 <_vfprintf_r+0x442>
 800533c:	232d      	movs	r3, #45	; 0x2d
 800533e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005342:	4b3e      	ldr	r3, [pc, #248]	; (800543c <_vfprintf_r+0x53c>)
 8005344:	4a3e      	ldr	r2, [pc, #248]	; (8005440 <_vfprintf_r+0x540>)
 8005346:	9902      	ldr	r1, [sp, #8]
 8005348:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800534c:	2947      	cmp	r1, #71	; 0x47
 800534e:	bfcc      	ite	gt
 8005350:	4691      	movgt	r9, r2
 8005352:	4699      	movle	r9, r3
 8005354:	f04f 0a03 	mov.w	sl, #3
 8005358:	2600      	movs	r6, #0
 800535a:	9608      	str	r6, [sp, #32]
 800535c:	e0c9      	b.n	80054f2 <_vfprintf_r+0x5f2>
 800535e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005362:	d022      	beq.n	80053aa <_vfprintf_r+0x4aa>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	f023 0320 	bic.w	r3, r3, #32
 800536a:	2b47      	cmp	r3, #71	; 0x47
 800536c:	d104      	bne.n	8005378 <_vfprintf_r+0x478>
 800536e:	f1ba 0f00 	cmp.w	sl, #0
 8005372:	bf08      	it	eq
 8005374:	f04f 0a01 	moveq.w	sl, #1
 8005378:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800537c:	9314      	str	r3, [sp, #80]	; 0x50
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	da15      	bge.n	80053b0 <_vfprintf_r+0x4b0>
 8005384:	9b06      	ldr	r3, [sp, #24]
 8005386:	930e      	str	r3, [sp, #56]	; 0x38
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800538e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005390:	232d      	movs	r3, #45	; 0x2d
 8005392:	930c      	str	r3, [sp, #48]	; 0x30
 8005394:	9b02      	ldr	r3, [sp, #8]
 8005396:	f023 0720 	bic.w	r7, r3, #32
 800539a:	2f46      	cmp	r7, #70	; 0x46
 800539c:	d00e      	beq.n	80053bc <_vfprintf_r+0x4bc>
 800539e:	2f45      	cmp	r7, #69	; 0x45
 80053a0:	d146      	bne.n	8005430 <_vfprintf_r+0x530>
 80053a2:	f10a 0601 	add.w	r6, sl, #1
 80053a6:	2102      	movs	r1, #2
 80053a8:	e00a      	b.n	80053c0 <_vfprintf_r+0x4c0>
 80053aa:	f04f 0a06 	mov.w	sl, #6
 80053ae:	e7e3      	b.n	8005378 <_vfprintf_r+0x478>
 80053b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80053b4:	2300      	movs	r3, #0
 80053b6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80053ba:	e7ea      	b.n	8005392 <_vfprintf_r+0x492>
 80053bc:	4656      	mov	r6, sl
 80053be:	2103      	movs	r1, #3
 80053c0:	ab1d      	add	r3, sp, #116	; 0x74
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	ab1a      	add	r3, sp, #104	; 0x68
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	4632      	mov	r2, r6
 80053ca:	ab19      	add	r3, sp, #100	; 0x64
 80053cc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80053d0:	4658      	mov	r0, fp
 80053d2:	f000 ff0d 	bl	80061f0 <_dtoa_r>
 80053d6:	2f47      	cmp	r7, #71	; 0x47
 80053d8:	4681      	mov	r9, r0
 80053da:	d102      	bne.n	80053e2 <_vfprintf_r+0x4e2>
 80053dc:	07eb      	lsls	r3, r5, #31
 80053de:	f140 858c 	bpl.w	8005efa <_vfprintf_r+0xffa>
 80053e2:	eb09 0306 	add.w	r3, r9, r6
 80053e6:	2f46      	cmp	r7, #70	; 0x46
 80053e8:	9303      	str	r3, [sp, #12]
 80053ea:	d111      	bne.n	8005410 <_vfprintf_r+0x510>
 80053ec:	f899 3000 	ldrb.w	r3, [r9]
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d109      	bne.n	8005408 <_vfprintf_r+0x508>
 80053f4:	2200      	movs	r2, #0
 80053f6:	2300      	movs	r3, #0
 80053f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053fc:	f7fb fb60 	bl	8000ac0 <__aeabi_dcmpeq>
 8005400:	b910      	cbnz	r0, 8005408 <_vfprintf_r+0x508>
 8005402:	f1c6 0601 	rsb	r6, r6, #1
 8005406:	9619      	str	r6, [sp, #100]	; 0x64
 8005408:	9a03      	ldr	r2, [sp, #12]
 800540a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800540c:	441a      	add	r2, r3
 800540e:	9203      	str	r2, [sp, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005418:	f7fb fb52 	bl	8000ac0 <__aeabi_dcmpeq>
 800541c:	b990      	cbnz	r0, 8005444 <_vfprintf_r+0x544>
 800541e:	2230      	movs	r2, #48	; 0x30
 8005420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005422:	9903      	ldr	r1, [sp, #12]
 8005424:	4299      	cmp	r1, r3
 8005426:	d90f      	bls.n	8005448 <_vfprintf_r+0x548>
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	911d      	str	r1, [sp, #116]	; 0x74
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e7f7      	b.n	8005420 <_vfprintf_r+0x520>
 8005430:	4656      	mov	r6, sl
 8005432:	e7b8      	b.n	80053a6 <_vfprintf_r+0x4a6>
 8005434:	08008b44 	.word	0x08008b44
 8005438:	7fefffff 	.word	0x7fefffff
 800543c:	08008b34 	.word	0x08008b34
 8005440:	08008b38 	.word	0x08008b38
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	931d      	str	r3, [sp, #116]	; 0x74
 8005448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800544a:	2f47      	cmp	r7, #71	; 0x47
 800544c:	eba3 0309 	sub.w	r3, r3, r9
 8005450:	9303      	str	r3, [sp, #12]
 8005452:	f040 80f8 	bne.w	8005646 <_vfprintf_r+0x746>
 8005456:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005458:	1cdf      	adds	r7, r3, #3
 800545a:	db02      	blt.n	8005462 <_vfprintf_r+0x562>
 800545c:	459a      	cmp	sl, r3
 800545e:	f280 811f 	bge.w	80056a0 <_vfprintf_r+0x7a0>
 8005462:	9b02      	ldr	r3, [sp, #8]
 8005464:	3b02      	subs	r3, #2
 8005466:	9302      	str	r3, [sp, #8]
 8005468:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800546a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800546e:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8005472:	1e53      	subs	r3, r2, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	9319      	str	r3, [sp, #100]	; 0x64
 8005478:	bfb6      	itet	lt
 800547a:	f1c2 0301 	rsblt	r3, r2, #1
 800547e:	222b      	movge	r2, #43	; 0x2b
 8005480:	222d      	movlt	r2, #45	; 0x2d
 8005482:	2b09      	cmp	r3, #9
 8005484:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005488:	f340 80fa 	ble.w	8005680 <_vfprintf_r+0x780>
 800548c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005490:	260a      	movs	r6, #10
 8005492:	fb93 f0f6 	sdiv	r0, r3, r6
 8005496:	fb06 3310 	mls	r3, r6, r0, r3
 800549a:	3330      	adds	r3, #48	; 0x30
 800549c:	2809      	cmp	r0, #9
 800549e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054a2:	f102 31ff 	add.w	r1, r2, #4294967295
 80054a6:	4603      	mov	r3, r0
 80054a8:	f300 80e3 	bgt.w	8005672 <_vfprintf_r+0x772>
 80054ac:	3330      	adds	r3, #48	; 0x30
 80054ae:	f801 3c01 	strb.w	r3, [r1, #-1]
 80054b2:	3a02      	subs	r2, #2
 80054b4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80054b8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80054bc:	4282      	cmp	r2, r0
 80054be:	4619      	mov	r1, r3
 80054c0:	f0c0 80d9 	bcc.w	8005676 <_vfprintf_r+0x776>
 80054c4:	9a03      	ldr	r2, [sp, #12]
 80054c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80054c8:	1acb      	subs	r3, r1, r3
 80054ca:	2a01      	cmp	r2, #1
 80054cc:	9310      	str	r3, [sp, #64]	; 0x40
 80054ce:	eb03 0a02 	add.w	sl, r3, r2
 80054d2:	dc03      	bgt.n	80054dc <_vfprintf_r+0x5dc>
 80054d4:	f015 0301 	ands.w	r3, r5, #1
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	d003      	beq.n	80054e4 <_vfprintf_r+0x5e4>
 80054dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054de:	449a      	add	sl, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	9308      	str	r3, [sp, #32]
 80054e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e6:	b113      	cbz	r3, 80054ee <_vfprintf_r+0x5ee>
 80054e8:	232d      	movs	r3, #45	; 0x2d
 80054ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80054ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80054f0:	2600      	movs	r6, #0
 80054f2:	4556      	cmp	r6, sl
 80054f4:	4633      	mov	r3, r6
 80054f6:	bfb8      	it	lt
 80054f8:	4653      	movlt	r3, sl
 80054fa:	930c      	str	r3, [sp, #48]	; 0x30
 80054fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005500:	b113      	cbz	r3, 8005508 <_vfprintf_r+0x608>
 8005502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005504:	3301      	adds	r3, #1
 8005506:	930c      	str	r3, [sp, #48]	; 0x30
 8005508:	f015 0302 	ands.w	r3, r5, #2
 800550c:	9314      	str	r3, [sp, #80]	; 0x50
 800550e:	bf1e      	ittt	ne
 8005510:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8005512:	3302      	addne	r3, #2
 8005514:	930c      	strne	r3, [sp, #48]	; 0x30
 8005516:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800551a:	9315      	str	r3, [sp, #84]	; 0x54
 800551c:	d114      	bne.n	8005548 <_vfprintf_r+0x648>
 800551e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005522:	1a9f      	subs	r7, r3, r2
 8005524:	2f00      	cmp	r7, #0
 8005526:	dd0f      	ble.n	8005548 <_vfprintf_r+0x648>
 8005528:	4ba8      	ldr	r3, [pc, #672]	; (80057cc <_vfprintf_r+0x8cc>)
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	2f10      	cmp	r7, #16
 800552e:	f300 81d3 	bgt.w	80058d8 <_vfprintf_r+0x9d8>
 8005532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005534:	6067      	str	r7, [r4, #4]
 8005536:	441f      	add	r7, r3
 8005538:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800553a:	9721      	str	r7, [sp, #132]	; 0x84
 800553c:	3301      	adds	r3, #1
 800553e:	2b07      	cmp	r3, #7
 8005540:	9320      	str	r3, [sp, #128]	; 0x80
 8005542:	f300 81e0 	bgt.w	8005906 <_vfprintf_r+0xa06>
 8005546:	3408      	adds	r4, #8
 8005548:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800554c:	b173      	cbz	r3, 800556c <_vfprintf_r+0x66c>
 800554e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	2301      	movs	r3, #1
 8005556:	6063      	str	r3, [r4, #4]
 8005558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800555a:	3301      	adds	r3, #1
 800555c:	9321      	str	r3, [sp, #132]	; 0x84
 800555e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005560:	3301      	adds	r3, #1
 8005562:	2b07      	cmp	r3, #7
 8005564:	9320      	str	r3, [sp, #128]	; 0x80
 8005566:	f300 81d8 	bgt.w	800591a <_vfprintf_r+0xa1a>
 800556a:	3408      	adds	r4, #8
 800556c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800556e:	b16b      	cbz	r3, 800558c <_vfprintf_r+0x68c>
 8005570:	ab18      	add	r3, sp, #96	; 0x60
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2302      	movs	r3, #2
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800557a:	3302      	adds	r3, #2
 800557c:	9321      	str	r3, [sp, #132]	; 0x84
 800557e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005580:	3301      	adds	r3, #1
 8005582:	2b07      	cmp	r3, #7
 8005584:	9320      	str	r3, [sp, #128]	; 0x80
 8005586:	f300 81d2 	bgt.w	800592e <_vfprintf_r+0xa2e>
 800558a:	3408      	adds	r4, #8
 800558c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d114      	bne.n	80055bc <_vfprintf_r+0x6bc>
 8005592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005596:	1a9f      	subs	r7, r3, r2
 8005598:	2f00      	cmp	r7, #0
 800559a:	dd0f      	ble.n	80055bc <_vfprintf_r+0x6bc>
 800559c:	4b8c      	ldr	r3, [pc, #560]	; (80057d0 <_vfprintf_r+0x8d0>)
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	2f10      	cmp	r7, #16
 80055a2:	f300 81ce 	bgt.w	8005942 <_vfprintf_r+0xa42>
 80055a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a8:	6067      	str	r7, [r4, #4]
 80055aa:	441f      	add	r7, r3
 80055ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055ae:	9721      	str	r7, [sp, #132]	; 0x84
 80055b0:	3301      	adds	r3, #1
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	9320      	str	r3, [sp, #128]	; 0x80
 80055b6:	f300 81dd 	bgt.w	8005974 <_vfprintf_r+0xa74>
 80055ba:	3408      	adds	r4, #8
 80055bc:	eba6 060a 	sub.w	r6, r6, sl
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	dd0f      	ble.n	80055e4 <_vfprintf_r+0x6e4>
 80055c4:	4f82      	ldr	r7, [pc, #520]	; (80057d0 <_vfprintf_r+0x8d0>)
 80055c6:	6027      	str	r7, [r4, #0]
 80055c8:	2e10      	cmp	r6, #16
 80055ca:	f300 81dd 	bgt.w	8005988 <_vfprintf_r+0xa88>
 80055ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055d0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80055d2:	6066      	str	r6, [r4, #4]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4406      	add	r6, r0
 80055d8:	2b07      	cmp	r3, #7
 80055da:	9621      	str	r6, [sp, #132]	; 0x84
 80055dc:	9320      	str	r3, [sp, #128]	; 0x80
 80055de:	f300 81ea 	bgt.w	80059b6 <_vfprintf_r+0xab6>
 80055e2:	3408      	adds	r4, #8
 80055e4:	05e9      	lsls	r1, r5, #23
 80055e6:	f100 81f0 	bmi.w	80059ca <_vfprintf_r+0xaca>
 80055ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055ec:	e884 0600 	stmia.w	r4, {r9, sl}
 80055f0:	4453      	add	r3, sl
 80055f2:	9321      	str	r3, [sp, #132]	; 0x84
 80055f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055f6:	3301      	adds	r3, #1
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	9320      	str	r3, [sp, #128]	; 0x80
 80055fc:	f340 841b 	ble.w	8005e36 <_vfprintf_r+0xf36>
 8005600:	aa1f      	add	r2, sp, #124	; 0x7c
 8005602:	4641      	mov	r1, r8
 8005604:	4658      	mov	r0, fp
 8005606:	f002 ffd0 	bl	80085aa <__sprint_r>
 800560a:	2800      	cmp	r0, #0
 800560c:	f040 8433 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005610:	ac2c      	add	r4, sp, #176	; 0xb0
 8005612:	0768      	lsls	r0, r5, #29
 8005614:	f100 8412 	bmi.w	8005e3c <_vfprintf_r+0xf3c>
 8005618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800561c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800561e:	428a      	cmp	r2, r1
 8005620:	bfac      	ite	ge
 8005622:	189b      	addge	r3, r3, r2
 8005624:	185b      	addlt	r3, r3, r1
 8005626:	930a      	str	r3, [sp, #40]	; 0x28
 8005628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800562a:	b13b      	cbz	r3, 800563c <_vfprintf_r+0x73c>
 800562c:	aa1f      	add	r2, sp, #124	; 0x7c
 800562e:	4641      	mov	r1, r8
 8005630:	4658      	mov	r0, fp
 8005632:	f002 ffba 	bl	80085aa <__sprint_r>
 8005636:	2800      	cmp	r0, #0
 8005638:	f040 841d 	bne.w	8005e76 <_vfprintf_r+0xf76>
 800563c:	2300      	movs	r3, #0
 800563e:	9320      	str	r3, [sp, #128]	; 0x80
 8005640:	9f04      	ldr	r7, [sp, #16]
 8005642:	ac2c      	add	r4, sp, #176	; 0xb0
 8005644:	e4e9      	b.n	800501a <_vfprintf_r+0x11a>
 8005646:	9b02      	ldr	r3, [sp, #8]
 8005648:	2b65      	cmp	r3, #101	; 0x65
 800564a:	f77f af0d 	ble.w	8005468 <_vfprintf_r+0x568>
 800564e:	9b02      	ldr	r3, [sp, #8]
 8005650:	2b66      	cmp	r3, #102	; 0x66
 8005652:	d125      	bne.n	80056a0 <_vfprintf_r+0x7a0>
 8005654:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005656:	2b00      	cmp	r3, #0
 8005658:	dd1a      	ble.n	8005690 <_vfprintf_r+0x790>
 800565a:	f1ba 0f00 	cmp.w	sl, #0
 800565e:	d101      	bne.n	8005664 <_vfprintf_r+0x764>
 8005660:	07ee      	lsls	r6, r5, #31
 8005662:	d502      	bpl.n	800566a <_vfprintf_r+0x76a>
 8005664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005666:	4413      	add	r3, r2
 8005668:	4453      	add	r3, sl
 800566a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800566c:	9208      	str	r2, [sp, #32]
 800566e:	469a      	mov	sl, r3
 8005670:	e738      	b.n	80054e4 <_vfprintf_r+0x5e4>
 8005672:	460a      	mov	r2, r1
 8005674:	e70d      	b.n	8005492 <_vfprintf_r+0x592>
 8005676:	f812 1b01 	ldrb.w	r1, [r2], #1
 800567a:	f803 1b01 	strb.w	r1, [r3], #1
 800567e:	e71d      	b.n	80054bc <_vfprintf_r+0x5bc>
 8005680:	2230      	movs	r2, #48	; 0x30
 8005682:	4413      	add	r3, r2
 8005684:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005688:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800568c:	a91c      	add	r1, sp, #112	; 0x70
 800568e:	e719      	b.n	80054c4 <_vfprintf_r+0x5c4>
 8005690:	f1ba 0f00 	cmp.w	sl, #0
 8005694:	d101      	bne.n	800569a <_vfprintf_r+0x79a>
 8005696:	07ed      	lsls	r5, r5, #31
 8005698:	d515      	bpl.n	80056c6 <_vfprintf_r+0x7c6>
 800569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569c:	3301      	adds	r3, #1
 800569e:	e7e3      	b.n	8005668 <_vfprintf_r+0x768>
 80056a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	db06      	blt.n	80056b6 <_vfprintf_r+0x7b6>
 80056a8:	07e8      	lsls	r0, r5, #31
 80056aa:	d50e      	bpl.n	80056ca <_vfprintf_r+0x7ca>
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	4413      	add	r3, r2
 80056b0:	2267      	movs	r2, #103	; 0x67
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	e7d9      	b.n	800566a <_vfprintf_r+0x76a>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	440b      	add	r3, r1
 80056be:	dcf7      	bgt.n	80056b0 <_vfprintf_r+0x7b0>
 80056c0:	f1c2 0201 	rsb	r2, r2, #1
 80056c4:	e7f3      	b.n	80056ae <_vfprintf_r+0x7ae>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e7cf      	b.n	800566a <_vfprintf_r+0x76a>
 80056ca:	4613      	mov	r3, r2
 80056cc:	e7f0      	b.n	80056b0 <_vfprintf_r+0x7b0>
 80056ce:	b10b      	cbz	r3, 80056d4 <_vfprintf_r+0x7d4>
 80056d0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80056d4:	f015 0f20 	tst.w	r5, #32
 80056d8:	f107 0304 	add.w	r3, r7, #4
 80056dc:	d008      	beq.n	80056f0 <_vfprintf_r+0x7f0>
 80056de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	17ce      	asrs	r6, r1, #31
 80056e4:	4608      	mov	r0, r1
 80056e6:	4631      	mov	r1, r6
 80056e8:	e9c2 0100 	strd	r0, r1, [r2]
 80056ec:	461f      	mov	r7, r3
 80056ee:	e494      	b.n	800501a <_vfprintf_r+0x11a>
 80056f0:	06e9      	lsls	r1, r5, #27
 80056f2:	d503      	bpl.n	80056fc <_vfprintf_r+0x7fc>
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056f8:	6011      	str	r1, [r2, #0]
 80056fa:	e7f7      	b.n	80056ec <_vfprintf_r+0x7ec>
 80056fc:	066a      	lsls	r2, r5, #25
 80056fe:	d5f9      	bpl.n	80056f4 <_vfprintf_r+0x7f4>
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005706:	8011      	strh	r1, [r2, #0]
 8005708:	e7f0      	b.n	80056ec <_vfprintf_r+0x7ec>
 800570a:	f045 0510 	orr.w	r5, r5, #16
 800570e:	f015 0320 	ands.w	r3, r5, #32
 8005712:	d022      	beq.n	800575a <_vfprintf_r+0x85a>
 8005714:	3707      	adds	r7, #7
 8005716:	f027 0707 	bic.w	r7, r7, #7
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	2300      	movs	r3, #0
 8005726:	2200      	movs	r2, #0
 8005728:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800572c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005730:	f000 83e8 	beq.w	8005f04 <_vfprintf_r+0x1004>
 8005734:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005738:	9208      	str	r2, [sp, #32]
 800573a:	ea56 0207 	orrs.w	r2, r6, r7
 800573e:	f040 83e6 	bne.w	8005f0e <_vfprintf_r+0x100e>
 8005742:	f1ba 0f00 	cmp.w	sl, #0
 8005746:	f000 80a9 	beq.w	800589c <_vfprintf_r+0x99c>
 800574a:	2b01      	cmp	r3, #1
 800574c:	d075      	beq.n	800583a <_vfprintf_r+0x93a>
 800574e:	2b02      	cmp	r3, #2
 8005750:	f000 8090 	beq.w	8005874 <_vfprintf_r+0x974>
 8005754:	2600      	movs	r6, #0
 8005756:	2700      	movs	r7, #0
 8005758:	e3df      	b.n	8005f1a <_vfprintf_r+0x101a>
 800575a:	1d3a      	adds	r2, r7, #4
 800575c:	f015 0110 	ands.w	r1, r5, #16
 8005760:	9204      	str	r2, [sp, #16]
 8005762:	d002      	beq.n	800576a <_vfprintf_r+0x86a>
 8005764:	683e      	ldr	r6, [r7, #0]
 8005766:	2700      	movs	r7, #0
 8005768:	e7dd      	b.n	8005726 <_vfprintf_r+0x826>
 800576a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800576e:	d0f9      	beq.n	8005764 <_vfprintf_r+0x864>
 8005770:	883e      	ldrh	r6, [r7, #0]
 8005772:	2700      	movs	r7, #0
 8005774:	e7d6      	b.n	8005724 <_vfprintf_r+0x824>
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	2330      	movs	r3, #48	; 0x30
 800577c:	2278      	movs	r2, #120	; 0x78
 800577e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005782:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <_vfprintf_r+0x8d4>)
 8005784:	683e      	ldr	r6, [r7, #0]
 8005786:	9311      	str	r3, [sp, #68]	; 0x44
 8005788:	2700      	movs	r7, #0
 800578a:	f045 0502 	orr.w	r5, r5, #2
 800578e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005792:	2302      	movs	r3, #2
 8005794:	9202      	str	r2, [sp, #8]
 8005796:	e7c6      	b.n	8005726 <_vfprintf_r+0x826>
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	2600      	movs	r6, #0
 800579c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	f8d7 9000 	ldr.w	r9, [r7]
 80057a6:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80057aa:	d00a      	beq.n	80057c2 <_vfprintf_r+0x8c2>
 80057ac:	4652      	mov	r2, sl
 80057ae:	4631      	mov	r1, r6
 80057b0:	4648      	mov	r0, r9
 80057b2:	f7fa fd15 	bl	80001e0 <memchr>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f000 808c 	beq.w	80058d4 <_vfprintf_r+0x9d4>
 80057bc:	eba0 0a09 	sub.w	sl, r0, r9
 80057c0:	e5cb      	b.n	800535a <_vfprintf_r+0x45a>
 80057c2:	4648      	mov	r0, r9
 80057c4:	f7fa fd04 	bl	80001d0 <strlen>
 80057c8:	4682      	mov	sl, r0
 80057ca:	e5c6      	b.n	800535a <_vfprintf_r+0x45a>
 80057cc:	08008b88 	.word	0x08008b88
 80057d0:	08008b98 	.word	0x08008b98
 80057d4:	08008b55 	.word	0x08008b55
 80057d8:	f045 0510 	orr.w	r5, r5, #16
 80057dc:	06ae      	lsls	r6, r5, #26
 80057de:	d509      	bpl.n	80057f4 <_vfprintf_r+0x8f4>
 80057e0:	3707      	adds	r7, #7
 80057e2:	f027 0707 	bic.w	r7, r7, #7
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	2301      	movs	r3, #1
 80057f2:	e798      	b.n	8005726 <_vfprintf_r+0x826>
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	f015 0f10 	tst.w	r5, #16
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	d001      	beq.n	8005802 <_vfprintf_r+0x902>
 80057fe:	683e      	ldr	r6, [r7, #0]
 8005800:	e002      	b.n	8005808 <_vfprintf_r+0x908>
 8005802:	0668      	lsls	r0, r5, #25
 8005804:	d5fb      	bpl.n	80057fe <_vfprintf_r+0x8fe>
 8005806:	883e      	ldrh	r6, [r7, #0]
 8005808:	2700      	movs	r7, #0
 800580a:	e7f1      	b.n	80057f0 <_vfprintf_r+0x8f0>
 800580c:	b10b      	cbz	r3, 8005812 <_vfprintf_r+0x912>
 800580e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005812:	4ba2      	ldr	r3, [pc, #648]	; (8005a9c <_vfprintf_r+0xb9c>)
 8005814:	e4ca      	b.n	80051ac <_vfprintf_r+0x2ac>
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	f015 0f10 	tst.w	r5, #16
 800581c:	9304      	str	r3, [sp, #16]
 800581e:	d001      	beq.n	8005824 <_vfprintf_r+0x924>
 8005820:	683e      	ldr	r6, [r7, #0]
 8005822:	e002      	b.n	800582a <_vfprintf_r+0x92a>
 8005824:	066a      	lsls	r2, r5, #25
 8005826:	d5fb      	bpl.n	8005820 <_vfprintf_r+0x920>
 8005828:	883e      	ldrh	r6, [r7, #0]
 800582a:	2700      	movs	r7, #0
 800582c:	e4ca      	b.n	80051c4 <_vfprintf_r+0x2c4>
 800582e:	464b      	mov	r3, r9
 8005830:	e374      	b.n	8005f1c <_vfprintf_r+0x101c>
 8005832:	2f00      	cmp	r7, #0
 8005834:	bf08      	it	eq
 8005836:	2e0a      	cmpeq	r6, #10
 8005838:	d205      	bcs.n	8005846 <_vfprintf_r+0x946>
 800583a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800583e:	3630      	adds	r6, #48	; 0x30
 8005840:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8005844:	e385      	b.n	8005f52 <_vfprintf_r+0x1052>
 8005846:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800584a:	4630      	mov	r0, r6
 800584c:	4639      	mov	r1, r7
 800584e:	220a      	movs	r2, #10
 8005850:	2300      	movs	r3, #0
 8005852:	f7fb f9f5 	bl	8000c40 <__aeabi_uldivmod>
 8005856:	3230      	adds	r2, #48	; 0x30
 8005858:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800585c:	2300      	movs	r3, #0
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	220a      	movs	r2, #10
 8005864:	f7fb f9ec 	bl	8000c40 <__aeabi_uldivmod>
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	ea56 0307 	orrs.w	r3, r6, r7
 8005870:	d1eb      	bne.n	800584a <_vfprintf_r+0x94a>
 8005872:	e36e      	b.n	8005f52 <_vfprintf_r+0x1052>
 8005874:	2600      	movs	r6, #0
 8005876:	2700      	movs	r7, #0
 8005878:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800587c:	f006 030f 	and.w	r3, r6, #15
 8005880:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005882:	5cd3      	ldrb	r3, [r2, r3]
 8005884:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005888:	0933      	lsrs	r3, r6, #4
 800588a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800588e:	093a      	lsrs	r2, r7, #4
 8005890:	461e      	mov	r6, r3
 8005892:	4617      	mov	r7, r2
 8005894:	ea56 0307 	orrs.w	r3, r6, r7
 8005898:	d1f0      	bne.n	800587c <_vfprintf_r+0x97c>
 800589a:	e35a      	b.n	8005f52 <_vfprintf_r+0x1052>
 800589c:	b93b      	cbnz	r3, 80058ae <_vfprintf_r+0x9ae>
 800589e:	07e8      	lsls	r0, r5, #31
 80058a0:	d505      	bpl.n	80058ae <_vfprintf_r+0x9ae>
 80058a2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80058a6:	2330      	movs	r3, #48	; 0x30
 80058a8:	f809 3d41 	strb.w	r3, [r9, #-65]!
 80058ac:	e351      	b.n	8005f52 <_vfprintf_r+0x1052>
 80058ae:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80058b2:	e34e      	b.n	8005f52 <_vfprintf_r+0x1052>
 80058b4:	b10b      	cbz	r3, 80058ba <_vfprintf_r+0x9ba>
 80058b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8302 	beq.w	8005ec6 <_vfprintf_r+0xfc6>
 80058c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80058c6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80058ca:	2600      	movs	r6, #0
 80058cc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80058d0:	9704      	str	r7, [sp, #16]
 80058d2:	e4e9      	b.n	80052a8 <_vfprintf_r+0x3a8>
 80058d4:	4606      	mov	r6, r0
 80058d6:	e540      	b.n	800535a <_vfprintf_r+0x45a>
 80058d8:	2310      	movs	r3, #16
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058de:	3310      	adds	r3, #16
 80058e0:	9321      	str	r3, [sp, #132]	; 0x84
 80058e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058e4:	3301      	adds	r3, #1
 80058e6:	2b07      	cmp	r3, #7
 80058e8:	9320      	str	r3, [sp, #128]	; 0x80
 80058ea:	dc02      	bgt.n	80058f2 <_vfprintf_r+0x9f2>
 80058ec:	3408      	adds	r4, #8
 80058ee:	3f10      	subs	r7, #16
 80058f0:	e61a      	b.n	8005528 <_vfprintf_r+0x628>
 80058f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058f4:	4641      	mov	r1, r8
 80058f6:	4658      	mov	r0, fp
 80058f8:	f002 fe57 	bl	80085aa <__sprint_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f040 82ba 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005902:	ac2c      	add	r4, sp, #176	; 0xb0
 8005904:	e7f3      	b.n	80058ee <_vfprintf_r+0x9ee>
 8005906:	aa1f      	add	r2, sp, #124	; 0x7c
 8005908:	4641      	mov	r1, r8
 800590a:	4658      	mov	r0, fp
 800590c:	f002 fe4d 	bl	80085aa <__sprint_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	f040 82b0 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005916:	ac2c      	add	r4, sp, #176	; 0xb0
 8005918:	e616      	b.n	8005548 <_vfprintf_r+0x648>
 800591a:	aa1f      	add	r2, sp, #124	; 0x7c
 800591c:	4641      	mov	r1, r8
 800591e:	4658      	mov	r0, fp
 8005920:	f002 fe43 	bl	80085aa <__sprint_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	f040 82a6 	bne.w	8005e76 <_vfprintf_r+0xf76>
 800592a:	ac2c      	add	r4, sp, #176	; 0xb0
 800592c:	e61e      	b.n	800556c <_vfprintf_r+0x66c>
 800592e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005930:	4641      	mov	r1, r8
 8005932:	4658      	mov	r0, fp
 8005934:	f002 fe39 	bl	80085aa <__sprint_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	f040 829c 	bne.w	8005e76 <_vfprintf_r+0xf76>
 800593e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005940:	e624      	b.n	800558c <_vfprintf_r+0x68c>
 8005942:	2210      	movs	r2, #16
 8005944:	6062      	str	r2, [r4, #4]
 8005946:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005948:	3210      	adds	r2, #16
 800594a:	9221      	str	r2, [sp, #132]	; 0x84
 800594c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800594e:	3201      	adds	r2, #1
 8005950:	2a07      	cmp	r2, #7
 8005952:	9220      	str	r2, [sp, #128]	; 0x80
 8005954:	dc02      	bgt.n	800595c <_vfprintf_r+0xa5c>
 8005956:	3408      	adds	r4, #8
 8005958:	3f10      	subs	r7, #16
 800595a:	e620      	b.n	800559e <_vfprintf_r+0x69e>
 800595c:	aa1f      	add	r2, sp, #124	; 0x7c
 800595e:	4641      	mov	r1, r8
 8005960:	4658      	mov	r0, fp
 8005962:	9314      	str	r3, [sp, #80]	; 0x50
 8005964:	f002 fe21 	bl	80085aa <__sprint_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	f040 8284 	bne.w	8005e76 <_vfprintf_r+0xf76>
 800596e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005970:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005972:	e7f1      	b.n	8005958 <_vfprintf_r+0xa58>
 8005974:	aa1f      	add	r2, sp, #124	; 0x7c
 8005976:	4641      	mov	r1, r8
 8005978:	4658      	mov	r0, fp
 800597a:	f002 fe16 	bl	80085aa <__sprint_r>
 800597e:	2800      	cmp	r0, #0
 8005980:	f040 8279 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005984:	ac2c      	add	r4, sp, #176	; 0xb0
 8005986:	e619      	b.n	80055bc <_vfprintf_r+0x6bc>
 8005988:	2310      	movs	r3, #16
 800598a:	6063      	str	r3, [r4, #4]
 800598c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800598e:	3310      	adds	r3, #16
 8005990:	9321      	str	r3, [sp, #132]	; 0x84
 8005992:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005994:	3301      	adds	r3, #1
 8005996:	2b07      	cmp	r3, #7
 8005998:	9320      	str	r3, [sp, #128]	; 0x80
 800599a:	dc02      	bgt.n	80059a2 <_vfprintf_r+0xaa2>
 800599c:	3408      	adds	r4, #8
 800599e:	3e10      	subs	r6, #16
 80059a0:	e611      	b.n	80055c6 <_vfprintf_r+0x6c6>
 80059a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80059a4:	4641      	mov	r1, r8
 80059a6:	4658      	mov	r0, fp
 80059a8:	f002 fdff 	bl	80085aa <__sprint_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f040 8262 	bne.w	8005e76 <_vfprintf_r+0xf76>
 80059b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059b4:	e7f3      	b.n	800599e <_vfprintf_r+0xa9e>
 80059b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80059b8:	4641      	mov	r1, r8
 80059ba:	4658      	mov	r0, fp
 80059bc:	f002 fdf5 	bl	80085aa <__sprint_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f040 8258 	bne.w	8005e76 <_vfprintf_r+0xf76>
 80059c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80059c8:	e60c      	b.n	80055e4 <_vfprintf_r+0x6e4>
 80059ca:	9b02      	ldr	r3, [sp, #8]
 80059cc:	2b65      	cmp	r3, #101	; 0x65
 80059ce:	f340 81ad 	ble.w	8005d2c <_vfprintf_r+0xe2c>
 80059d2:	2200      	movs	r2, #0
 80059d4:	2300      	movs	r3, #0
 80059d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059da:	f7fb f871 	bl	8000ac0 <__aeabi_dcmpeq>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d062      	beq.n	8005aa8 <_vfprintf_r+0xba8>
 80059e2:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <_vfprintf_r+0xba0>)
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	2301      	movs	r3, #1
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ec:	3301      	adds	r3, #1
 80059ee:	9321      	str	r3, [sp, #132]	; 0x84
 80059f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059f2:	3301      	adds	r3, #1
 80059f4:	2b07      	cmp	r3, #7
 80059f6:	9320      	str	r3, [sp, #128]	; 0x80
 80059f8:	dc25      	bgt.n	8005a46 <_vfprintf_r+0xb46>
 80059fa:	3408      	adds	r4, #8
 80059fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059fe:	9a03      	ldr	r2, [sp, #12]
 8005a00:	4293      	cmp	r3, r2
 8005a02:	db02      	blt.n	8005a0a <_vfprintf_r+0xb0a>
 8005a04:	07ea      	lsls	r2, r5, #31
 8005a06:	f57f ae04 	bpl.w	8005612 <_vfprintf_r+0x712>
 8005a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a16:	4413      	add	r3, r2
 8005a18:	9321      	str	r3, [sp, #132]	; 0x84
 8005a1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	2b07      	cmp	r3, #7
 8005a20:	9320      	str	r3, [sp, #128]	; 0x80
 8005a22:	dc1a      	bgt.n	8005a5a <_vfprintf_r+0xb5a>
 8005a24:	3408      	adds	r4, #8
 8005a26:	9b03      	ldr	r3, [sp, #12]
 8005a28:	1e5e      	subs	r6, r3, #1
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	f77f adf1 	ble.w	8005612 <_vfprintf_r+0x712>
 8005a30:	4f1c      	ldr	r7, [pc, #112]	; (8005aa4 <_vfprintf_r+0xba4>)
 8005a32:	f04f 0910 	mov.w	r9, #16
 8005a36:	2e10      	cmp	r6, #16
 8005a38:	6027      	str	r7, [r4, #0]
 8005a3a:	dc18      	bgt.n	8005a6e <_vfprintf_r+0xb6e>
 8005a3c:	6066      	str	r6, [r4, #4]
 8005a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a40:	441e      	add	r6, r3
 8005a42:	9621      	str	r6, [sp, #132]	; 0x84
 8005a44:	e5d6      	b.n	80055f4 <_vfprintf_r+0x6f4>
 8005a46:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4658      	mov	r0, fp
 8005a4c:	f002 fdad 	bl	80085aa <__sprint_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 8210 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005a56:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a58:	e7d0      	b.n	80059fc <_vfprintf_r+0xafc>
 8005a5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	4658      	mov	r0, fp
 8005a60:	f002 fda3 	bl	80085aa <__sprint_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 8206 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005a6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a6c:	e7db      	b.n	8005a26 <_vfprintf_r+0xb26>
 8005a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a70:	f8c4 9004 	str.w	r9, [r4, #4]
 8005a74:	3310      	adds	r3, #16
 8005a76:	9321      	str	r3, [sp, #132]	; 0x84
 8005a78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	2b07      	cmp	r3, #7
 8005a7e:	9320      	str	r3, [sp, #128]	; 0x80
 8005a80:	dc02      	bgt.n	8005a88 <_vfprintf_r+0xb88>
 8005a82:	3408      	adds	r4, #8
 8005a84:	3e10      	subs	r6, #16
 8005a86:	e7d6      	b.n	8005a36 <_vfprintf_r+0xb36>
 8005a88:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	4658      	mov	r0, fp
 8005a8e:	f002 fd8c 	bl	80085aa <__sprint_r>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	f040 81ef 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005a98:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a9a:	e7f3      	b.n	8005a84 <_vfprintf_r+0xb84>
 8005a9c:	08008b55 	.word	0x08008b55
 8005aa0:	08008b66 	.word	0x08008b66
 8005aa4:	08008b98 	.word	0x08008b98
 8005aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dc7a      	bgt.n	8005ba4 <_vfprintf_r+0xca4>
 8005aae:	4b9d      	ldr	r3, [pc, #628]	; (8005d24 <_vfprintf_r+0xe24>)
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9321      	str	r3, [sp, #132]	; 0x84
 8005abc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005abe:	3301      	adds	r3, #1
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	9320      	str	r3, [sp, #128]	; 0x80
 8005ac4:	dc44      	bgt.n	8005b50 <_vfprintf_r+0xc50>
 8005ac6:	3408      	adds	r4, #8
 8005ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aca:	b923      	cbnz	r3, 8005ad6 <_vfprintf_r+0xbd6>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	b913      	cbnz	r3, 8005ad6 <_vfprintf_r+0xbd6>
 8005ad0:	07eb      	lsls	r3, r5, #31
 8005ad2:	f57f ad9e 	bpl.w	8005612 <_vfprintf_r+0x712>
 8005ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae2:	4413      	add	r3, r2
 8005ae4:	9321      	str	r3, [sp, #132]	; 0x84
 8005ae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ae8:	3301      	adds	r3, #1
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	9320      	str	r3, [sp, #128]	; 0x80
 8005aee:	dc39      	bgt.n	8005b64 <_vfprintf_r+0xc64>
 8005af0:	f104 0308 	add.w	r3, r4, #8
 8005af4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	da19      	bge.n	8005b2e <_vfprintf_r+0xc2e>
 8005afa:	4f8b      	ldr	r7, [pc, #556]	; (8005d28 <_vfprintf_r+0xe28>)
 8005afc:	4276      	negs	r6, r6
 8005afe:	2410      	movs	r4, #16
 8005b00:	2e10      	cmp	r6, #16
 8005b02:	601f      	str	r7, [r3, #0]
 8005b04:	dc38      	bgt.n	8005b78 <_vfprintf_r+0xc78>
 8005b06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b08:	605e      	str	r6, [r3, #4]
 8005b0a:	4416      	add	r6, r2
 8005b0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b0e:	9621      	str	r6, [sp, #132]	; 0x84
 8005b10:	3201      	adds	r2, #1
 8005b12:	2a07      	cmp	r2, #7
 8005b14:	f103 0308 	add.w	r3, r3, #8
 8005b18:	9220      	str	r2, [sp, #128]	; 0x80
 8005b1a:	dd08      	ble.n	8005b2e <_vfprintf_r+0xc2e>
 8005b1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b1e:	4641      	mov	r1, r8
 8005b20:	4658      	mov	r0, fp
 8005b22:	f002 fd42 	bl	80085aa <__sprint_r>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f040 81a5 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005b2c:	ab2c      	add	r3, sp, #176	; 0xb0
 8005b2e:	9a03      	ldr	r2, [sp, #12]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	9903      	ldr	r1, [sp, #12]
 8005b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b36:	f8c3 9000 	str.w	r9, [r3]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	9221      	str	r2, [sp, #132]	; 0x84
 8005b3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b40:	3201      	adds	r2, #1
 8005b42:	2a07      	cmp	r2, #7
 8005b44:	9220      	str	r2, [sp, #128]	; 0x80
 8005b46:	f73f ad5b 	bgt.w	8005600 <_vfprintf_r+0x700>
 8005b4a:	f103 0408 	add.w	r4, r3, #8
 8005b4e:	e560      	b.n	8005612 <_vfprintf_r+0x712>
 8005b50:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b52:	4641      	mov	r1, r8
 8005b54:	4658      	mov	r0, fp
 8005b56:	f002 fd28 	bl	80085aa <__sprint_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f040 818b 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005b60:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b62:	e7b1      	b.n	8005ac8 <_vfprintf_r+0xbc8>
 8005b64:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b66:	4641      	mov	r1, r8
 8005b68:	4658      	mov	r0, fp
 8005b6a:	f002 fd1e 	bl	80085aa <__sprint_r>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f040 8181 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005b74:	ab2c      	add	r3, sp, #176	; 0xb0
 8005b76:	e7bd      	b.n	8005af4 <_vfprintf_r+0xbf4>
 8005b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b7a:	605c      	str	r4, [r3, #4]
 8005b7c:	3210      	adds	r2, #16
 8005b7e:	9221      	str	r2, [sp, #132]	; 0x84
 8005b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b82:	3201      	adds	r2, #1
 8005b84:	2a07      	cmp	r2, #7
 8005b86:	9220      	str	r2, [sp, #128]	; 0x80
 8005b88:	dc02      	bgt.n	8005b90 <_vfprintf_r+0xc90>
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	3e10      	subs	r6, #16
 8005b8e:	e7b7      	b.n	8005b00 <_vfprintf_r+0xc00>
 8005b90:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b92:	4641      	mov	r1, r8
 8005b94:	4658      	mov	r0, fp
 8005b96:	f002 fd08 	bl	80085aa <__sprint_r>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	f040 816b 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005ba0:	ab2c      	add	r3, sp, #176	; 0xb0
 8005ba2:	e7f3      	b.n	8005b8c <_vfprintf_r+0xc8c>
 8005ba4:	9b08      	ldr	r3, [sp, #32]
 8005ba6:	9a03      	ldr	r2, [sp, #12]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bfa8      	it	ge
 8005bac:	4613      	movge	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	461e      	mov	r6, r3
 8005bb2:	dd0b      	ble.n	8005bcc <_vfprintf_r+0xccc>
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb8:	f8c4 9000 	str.w	r9, [r4]
 8005bbc:	4433      	add	r3, r6
 8005bbe:	9321      	str	r3, [sp, #132]	; 0x84
 8005bc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	2b07      	cmp	r3, #7
 8005bc6:	9320      	str	r3, [sp, #128]	; 0x80
 8005bc8:	dc62      	bgt.n	8005c90 <_vfprintf_r+0xd90>
 8005bca:	3408      	adds	r4, #8
 8005bcc:	9b08      	ldr	r3, [sp, #32]
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	bfa8      	it	ge
 8005bd2:	1b9b      	subge	r3, r3, r6
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	461e      	mov	r6, r3
 8005bd8:	dd0f      	ble.n	8005bfa <_vfprintf_r+0xcfa>
 8005bda:	4f53      	ldr	r7, [pc, #332]	; (8005d28 <_vfprintf_r+0xe28>)
 8005bdc:	f04f 0a10 	mov.w	sl, #16
 8005be0:	2e10      	cmp	r6, #16
 8005be2:	6027      	str	r7, [r4, #0]
 8005be4:	dc5e      	bgt.n	8005ca4 <_vfprintf_r+0xda4>
 8005be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005be8:	6066      	str	r6, [r4, #4]
 8005bea:	441e      	add	r6, r3
 8005bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bee:	9621      	str	r6, [sp, #132]	; 0x84
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	2b07      	cmp	r3, #7
 8005bf4:	9320      	str	r3, [sp, #128]	; 0x80
 8005bf6:	dc6c      	bgt.n	8005cd2 <_vfprintf_r+0xdd2>
 8005bf8:	3408      	adds	r4, #8
 8005bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bfc:	9a03      	ldr	r2, [sp, #12]
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	db01      	blt.n	8005c06 <_vfprintf_r+0xd06>
 8005c02:	07ef      	lsls	r7, r5, #31
 8005c04:	d50d      	bpl.n	8005c22 <_vfprintf_r+0xd22>
 8005c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c12:	4413      	add	r3, r2
 8005c14:	9321      	str	r3, [sp, #132]	; 0x84
 8005c16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c18:	3301      	adds	r3, #1
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	9320      	str	r3, [sp, #128]	; 0x80
 8005c1e:	dc62      	bgt.n	8005ce6 <_vfprintf_r+0xde6>
 8005c20:	3408      	adds	r4, #8
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	9a08      	ldr	r2, [sp, #32]
 8005c26:	1a9e      	subs	r6, r3, r2
 8005c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c2a:	9a03      	ldr	r2, [sp, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	429e      	cmp	r6, r3
 8005c30:	bfa8      	it	ge
 8005c32:	461e      	movge	r6, r3
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	dd0c      	ble.n	8005c52 <_vfprintf_r+0xd52>
 8005c38:	9b08      	ldr	r3, [sp, #32]
 8005c3a:	444b      	add	r3, r9
 8005c3c:	e884 0048 	stmia.w	r4, {r3, r6}
 8005c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c42:	4433      	add	r3, r6
 8005c44:	9321      	str	r3, [sp, #132]	; 0x84
 8005c46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c48:	3301      	adds	r3, #1
 8005c4a:	2b07      	cmp	r3, #7
 8005c4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005c4e:	dc54      	bgt.n	8005cfa <_vfprintf_r+0xdfa>
 8005c50:	3408      	adds	r4, #8
 8005c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c54:	9a03      	ldr	r2, [sp, #12]
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	eba2 0303 	sub.w	r3, r2, r3
 8005c5c:	bfac      	ite	ge
 8005c5e:	1b9e      	subge	r6, r3, r6
 8005c60:	461e      	movlt	r6, r3
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	f77f acd5 	ble.w	8005612 <_vfprintf_r+0x712>
 8005c68:	4f2f      	ldr	r7, [pc, #188]	; (8005d28 <_vfprintf_r+0xe28>)
 8005c6a:	f04f 0910 	mov.w	r9, #16
 8005c6e:	2e10      	cmp	r6, #16
 8005c70:	6027      	str	r7, [r4, #0]
 8005c72:	f77f aee3 	ble.w	8005a3c <_vfprintf_r+0xb3c>
 8005c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c78:	f8c4 9004 	str.w	r9, [r4, #4]
 8005c7c:	3310      	adds	r3, #16
 8005c7e:	9321      	str	r3, [sp, #132]	; 0x84
 8005c80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c82:	3301      	adds	r3, #1
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	9320      	str	r3, [sp, #128]	; 0x80
 8005c88:	dc41      	bgt.n	8005d0e <_vfprintf_r+0xe0e>
 8005c8a:	3408      	adds	r4, #8
 8005c8c:	3e10      	subs	r6, #16
 8005c8e:	e7ee      	b.n	8005c6e <_vfprintf_r+0xd6e>
 8005c90:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c92:	4641      	mov	r1, r8
 8005c94:	4658      	mov	r0, fp
 8005c96:	f002 fc88 	bl	80085aa <__sprint_r>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f040 80eb 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005ca0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ca2:	e793      	b.n	8005bcc <_vfprintf_r+0xccc>
 8005ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ca6:	f8c4 a004 	str.w	sl, [r4, #4]
 8005caa:	3310      	adds	r3, #16
 8005cac:	9321      	str	r3, [sp, #132]	; 0x84
 8005cae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	9320      	str	r3, [sp, #128]	; 0x80
 8005cb6:	dc02      	bgt.n	8005cbe <_vfprintf_r+0xdbe>
 8005cb8:	3408      	adds	r4, #8
 8005cba:	3e10      	subs	r6, #16
 8005cbc:	e790      	b.n	8005be0 <_vfprintf_r+0xce0>
 8005cbe:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	4658      	mov	r0, fp
 8005cc4:	f002 fc71 	bl	80085aa <__sprint_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f040 80d4 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005cce:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cd0:	e7f3      	b.n	8005cba <_vfprintf_r+0xdba>
 8005cd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	f002 fc67 	bl	80085aa <__sprint_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f040 80ca 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005ce2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ce4:	e789      	b.n	8005bfa <_vfprintf_r+0xcfa>
 8005ce6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ce8:	4641      	mov	r1, r8
 8005cea:	4658      	mov	r0, fp
 8005cec:	f002 fc5d 	bl	80085aa <__sprint_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f040 80c0 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005cf6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cf8:	e793      	b.n	8005c22 <_vfprintf_r+0xd22>
 8005cfa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f002 fc53 	bl	80085aa <__sprint_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f040 80b6 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005d0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d0c:	e7a1      	b.n	8005c52 <_vfprintf_r+0xd52>
 8005d0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d10:	4641      	mov	r1, r8
 8005d12:	4658      	mov	r0, fp
 8005d14:	f002 fc49 	bl	80085aa <__sprint_r>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f040 80ac 	bne.w	8005e76 <_vfprintf_r+0xf76>
 8005d1e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d20:	e7b4      	b.n	8005c8c <_vfprintf_r+0xd8c>
 8005d22:	bf00      	nop
 8005d24:	08008b66 	.word	0x08008b66
 8005d28:	08008b98 	.word	0x08008b98
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	dc01      	bgt.n	8005d36 <_vfprintf_r+0xe36>
 8005d32:	07ee      	lsls	r6, r5, #31
 8005d34:	d576      	bpl.n	8005e24 <_vfprintf_r+0xf24>
 8005d36:	2301      	movs	r3, #1
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d3c:	f8c4 9000 	str.w	r9, [r4]
 8005d40:	3301      	adds	r3, #1
 8005d42:	9321      	str	r3, [sp, #132]	; 0x84
 8005d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d46:	3301      	adds	r3, #1
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	9320      	str	r3, [sp, #128]	; 0x80
 8005d4c:	dc36      	bgt.n	8005dbc <_vfprintf_r+0xebc>
 8005d4e:	3408      	adds	r4, #8
 8005d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d5c:	4413      	add	r3, r2
 8005d5e:	9321      	str	r3, [sp, #132]	; 0x84
 8005d60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d62:	3301      	adds	r3, #1
 8005d64:	2b07      	cmp	r3, #7
 8005d66:	9320      	str	r3, [sp, #128]	; 0x80
 8005d68:	dc31      	bgt.n	8005dce <_vfprintf_r+0xece>
 8005d6a:	3408      	adds	r4, #8
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2200      	movs	r2, #0
 8005d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d74:	f7fa fea4 	bl	8000ac0 <__aeabi_dcmpeq>
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	1e5e      	subs	r6, r3, #1
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d12f      	bne.n	8005de0 <_vfprintf_r+0xee0>
 8005d80:	f109 0301 	add.w	r3, r9, #1
 8005d84:	e884 0048 	stmia.w	r4, {r3, r6}
 8005d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8a:	9a03      	ldr	r2, [sp, #12]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	9321      	str	r3, [sp, #132]	; 0x84
 8005d92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d94:	3301      	adds	r3, #1
 8005d96:	2b07      	cmp	r3, #7
 8005d98:	9320      	str	r3, [sp, #128]	; 0x80
 8005d9a:	dd4a      	ble.n	8005e32 <_vfprintf_r+0xf32>
 8005d9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d9e:	4641      	mov	r1, r8
 8005da0:	4658      	mov	r0, fp
 8005da2:	f002 fc02 	bl	80085aa <__sprint_r>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d165      	bne.n	8005e76 <_vfprintf_r+0xf76>
 8005daa:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dac:	ab1b      	add	r3, sp, #108	; 0x6c
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005db2:	6063      	str	r3, [r4, #4]
 8005db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db8:	4413      	add	r3, r2
 8005dba:	e41a      	b.n	80055f2 <_vfprintf_r+0x6f2>
 8005dbc:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	f002 fbf2 	bl	80085aa <__sprint_r>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d155      	bne.n	8005e76 <_vfprintf_r+0xf76>
 8005dca:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dcc:	e7c0      	b.n	8005d50 <_vfprintf_r+0xe50>
 8005dce:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f002 fbe9 	bl	80085aa <__sprint_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d14c      	bne.n	8005e76 <_vfprintf_r+0xf76>
 8005ddc:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dde:	e7c5      	b.n	8005d6c <_vfprintf_r+0xe6c>
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	dde3      	ble.n	8005dac <_vfprintf_r+0xeac>
 8005de4:	4f60      	ldr	r7, [pc, #384]	; (8005f68 <_vfprintf_r+0x1068>)
 8005de6:	f04f 0910 	mov.w	r9, #16
 8005dea:	2e10      	cmp	r6, #16
 8005dec:	6027      	str	r7, [r4, #0]
 8005dee:	dc04      	bgt.n	8005dfa <_vfprintf_r+0xefa>
 8005df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df2:	6066      	str	r6, [r4, #4]
 8005df4:	441e      	add	r6, r3
 8005df6:	9621      	str	r6, [sp, #132]	; 0x84
 8005df8:	e7cb      	b.n	8005d92 <_vfprintf_r+0xe92>
 8005dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfc:	f8c4 9004 	str.w	r9, [r4, #4]
 8005e00:	3310      	adds	r3, #16
 8005e02:	9321      	str	r3, [sp, #132]	; 0x84
 8005e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e06:	3301      	adds	r3, #1
 8005e08:	2b07      	cmp	r3, #7
 8005e0a:	9320      	str	r3, [sp, #128]	; 0x80
 8005e0c:	dc02      	bgt.n	8005e14 <_vfprintf_r+0xf14>
 8005e0e:	3408      	adds	r4, #8
 8005e10:	3e10      	subs	r6, #16
 8005e12:	e7ea      	b.n	8005dea <_vfprintf_r+0xeea>
 8005e14:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e16:	4641      	mov	r1, r8
 8005e18:	4658      	mov	r0, fp
 8005e1a:	f002 fbc6 	bl	80085aa <__sprint_r>
 8005e1e:	bb50      	cbnz	r0, 8005e76 <_vfprintf_r+0xf76>
 8005e20:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e22:	e7f5      	b.n	8005e10 <_vfprintf_r+0xf10>
 8005e24:	2301      	movs	r3, #1
 8005e26:	6063      	str	r3, [r4, #4]
 8005e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e2a:	f8c4 9000 	str.w	r9, [r4]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	e7ae      	b.n	8005d90 <_vfprintf_r+0xe90>
 8005e32:	3408      	adds	r4, #8
 8005e34:	e7ba      	b.n	8005dac <_vfprintf_r+0xeac>
 8005e36:	3408      	adds	r4, #8
 8005e38:	f7ff bbeb 	b.w	8005612 <_vfprintf_r+0x712>
 8005e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e40:	1a9d      	subs	r5, r3, r2
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	f77f abe8 	ble.w	8005618 <_vfprintf_r+0x718>
 8005e48:	2610      	movs	r6, #16
 8005e4a:	4b48      	ldr	r3, [pc, #288]	; (8005f6c <_vfprintf_r+0x106c>)
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2d10      	cmp	r5, #16
 8005e50:	dc24      	bgt.n	8005e9c <_vfprintf_r+0xf9c>
 8005e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e54:	6065      	str	r5, [r4, #4]
 8005e56:	441d      	add	r5, r3
 8005e58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e5a:	9521      	str	r5, [sp, #132]	; 0x84
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	2b07      	cmp	r3, #7
 8005e60:	9320      	str	r3, [sp, #128]	; 0x80
 8005e62:	f77f abd9 	ble.w	8005618 <_vfprintf_r+0x718>
 8005e66:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e68:	4641      	mov	r1, r8
 8005e6a:	4658      	mov	r0, fp
 8005e6c:	f002 fb9d 	bl	80085aa <__sprint_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f43f abd1 	beq.w	8005618 <_vfprintf_r+0x718>
 8005e76:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8005e7a:	07d9      	lsls	r1, r3, #31
 8005e7c:	d407      	bmi.n	8005e8e <_vfprintf_r+0xf8e>
 8005e7e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005e82:	059a      	lsls	r2, r3, #22
 8005e84:	d403      	bmi.n	8005e8e <_vfprintf_r+0xf8e>
 8005e86:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8005e8a:	f001 fbb4 	bl	80075f6 <__retarget_lock_release_recursive>
 8005e8e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005e92:	065b      	lsls	r3, r3, #25
 8005e94:	f57f a8af 	bpl.w	8004ff6 <_vfprintf_r+0xf6>
 8005e98:	f7ff b882 	b.w	8004fa0 <_vfprintf_r+0xa0>
 8005e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e9e:	6066      	str	r6, [r4, #4]
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ea4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	9320      	str	r3, [sp, #128]	; 0x80
 8005eac:	dc02      	bgt.n	8005eb4 <_vfprintf_r+0xfb4>
 8005eae:	3408      	adds	r4, #8
 8005eb0:	3d10      	subs	r5, #16
 8005eb2:	e7ca      	b.n	8005e4a <_vfprintf_r+0xf4a>
 8005eb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	4658      	mov	r0, fp
 8005eba:	f002 fb76 	bl	80085aa <__sprint_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d1d9      	bne.n	8005e76 <_vfprintf_r+0xf76>
 8005ec2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ec4:	e7f4      	b.n	8005eb0 <_vfprintf_r+0xfb0>
 8005ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ec8:	b913      	cbnz	r3, 8005ed0 <_vfprintf_r+0xfd0>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9320      	str	r3, [sp, #128]	; 0x80
 8005ece:	e7d2      	b.n	8005e76 <_vfprintf_r+0xf76>
 8005ed0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	4658      	mov	r0, fp
 8005ed6:	f002 fb68 	bl	80085aa <__sprint_r>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0f5      	beq.n	8005eca <_vfprintf_r+0xfca>
 8005ede:	e7ca      	b.n	8005e76 <_vfprintf_r+0xf76>
 8005ee0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	f7fa fe1c 	bl	8000b24 <__aeabi_dcmpun>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f43f aa36 	beq.w	800535e <_vfprintf_r+0x45e>
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <_vfprintf_r+0x1070>)
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <_vfprintf_r+0x1074>)
 8005ef6:	f7ff ba26 	b.w	8005346 <_vfprintf_r+0x446>
 8005efa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005efc:	1a1b      	subs	r3, r3, r0
 8005efe:	9303      	str	r3, [sp, #12]
 8005f00:	f7ff baa9 	b.w	8005456 <_vfprintf_r+0x556>
 8005f04:	ea56 0207 	orrs.w	r2, r6, r7
 8005f08:	9508      	str	r5, [sp, #32]
 8005f0a:	f43f ac1e 	beq.w	800574a <_vfprintf_r+0x84a>
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	f43f ac8f 	beq.w	8005832 <_vfprintf_r+0x932>
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	f43f acaf 	beq.w	8005878 <_vfprintf_r+0x978>
 8005f1a:	ab2c      	add	r3, sp, #176	; 0xb0
 8005f1c:	08f1      	lsrs	r1, r6, #3
 8005f1e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005f22:	08f8      	lsrs	r0, r7, #3
 8005f24:	f006 0207 	and.w	r2, r6, #7
 8005f28:	4607      	mov	r7, r0
 8005f2a:	460e      	mov	r6, r1
 8005f2c:	3230      	adds	r2, #48	; 0x30
 8005f2e:	ea56 0107 	orrs.w	r1, r6, r7
 8005f32:	f103 39ff 	add.w	r9, r3, #4294967295
 8005f36:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005f3a:	f47f ac78 	bne.w	800582e <_vfprintf_r+0x92e>
 8005f3e:	9908      	ldr	r1, [sp, #32]
 8005f40:	07cd      	lsls	r5, r1, #31
 8005f42:	d506      	bpl.n	8005f52 <_vfprintf_r+0x1052>
 8005f44:	2a30      	cmp	r2, #48	; 0x30
 8005f46:	d004      	beq.n	8005f52 <_vfprintf_r+0x1052>
 8005f48:	2230      	movs	r2, #48	; 0x30
 8005f4a:	f809 2c01 	strb.w	r2, [r9, #-1]
 8005f4e:	f1a3 0902 	sub.w	r9, r3, #2
 8005f52:	4656      	mov	r6, sl
 8005f54:	2300      	movs	r3, #0
 8005f56:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 8005f5a:	9d08      	ldr	r5, [sp, #32]
 8005f5c:	9308      	str	r3, [sp, #32]
 8005f5e:	ebaa 0a09 	sub.w	sl, sl, r9
 8005f62:	f7ff bac6 	b.w	80054f2 <_vfprintf_r+0x5f2>
 8005f66:	bf00      	nop
 8005f68:	08008b98 	.word	0x08008b98
 8005f6c:	08008b88 	.word	0x08008b88
 8005f70:	08008b3c 	.word	0x08008b3c
 8005f74:	08008b40 	.word	0x08008b40

08005f78 <__sbprintf>:
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8005f80:	461f      	mov	r7, r3
 8005f82:	8989      	ldrh	r1, [r1, #12]
 8005f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f86:	9319      	str	r3, [sp, #100]	; 0x64
 8005f88:	89e3      	ldrh	r3, [r4, #14]
 8005f8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005f8e:	f021 0102 	bic.w	r1, r1, #2
 8005f92:	6a23      	ldr	r3, [r4, #32]
 8005f94:	f8ad 100c 	strh.w	r1, [sp, #12]
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	a91a      	add	r1, sp, #104	; 0x68
 8005f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	9100      	str	r1, [sp, #0]
 8005fa8:	9104      	str	r1, [sp, #16]
 8005faa:	a816      	add	r0, sp, #88	; 0x58
 8005fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fb0:	9102      	str	r1, [sp, #8]
 8005fb2:	9105      	str	r1, [sp, #20]
 8005fb4:	9306      	str	r3, [sp, #24]
 8005fb6:	f001 fb1b 	bl	80075f0 <__retarget_lock_init_recursive>
 8005fba:	462a      	mov	r2, r5
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	4669      	mov	r1, sp
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7fe ff9d 	bl	8004f00 <_vfprintf_r>
 8005fc6:	1e05      	subs	r5, r0, #0
 8005fc8:	db07      	blt.n	8005fda <__sbprintf+0x62>
 8005fca:	4669      	mov	r1, sp
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 ff6f 	bl	8006eb0 <_fflush_r>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	f04f 35ff 	movne.w	r5, #4294967295
 8005fda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005fde:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005fe0:	065b      	lsls	r3, r3, #25
 8005fe2:	bf42      	ittt	mi
 8005fe4:	89a3      	ldrhmi	r3, [r4, #12]
 8005fe6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005fea:	81a3      	strhmi	r3, [r4, #12]
 8005fec:	f001 fb01 	bl	80075f2 <__retarget_lock_close_recursive>
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ff8 <__swsetup_r>:
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <__swsetup_r+0xcc>)
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	4606      	mov	r6, r0
 8006000:	460c      	mov	r4, r1
 8006002:	b125      	cbz	r5, 800600e <__swsetup_r+0x16>
 8006004:	69ab      	ldr	r3, [r5, #24]
 8006006:	b913      	cbnz	r3, 800600e <__swsetup_r+0x16>
 8006008:	4628      	mov	r0, r5
 800600a:	f000 ffe5 	bl	8006fd8 <__sinit>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <__swsetup_r+0xd0>)
 8006010:	429c      	cmp	r4, r3
 8006012:	d10f      	bne.n	8006034 <__swsetup_r+0x3c>
 8006014:	686c      	ldr	r4, [r5, #4]
 8006016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601a:	b29a      	uxth	r2, r3
 800601c:	0715      	lsls	r5, r2, #28
 800601e:	d42c      	bmi.n	800607a <__swsetup_r+0x82>
 8006020:	06d0      	lsls	r0, r2, #27
 8006022:	d411      	bmi.n	8006048 <__swsetup_r+0x50>
 8006024:	2209      	movs	r2, #9
 8006026:	6032      	str	r2, [r6, #0]
 8006028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <__swsetup_r+0xd4>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d101      	bne.n	800603e <__swsetup_r+0x46>
 800603a:	68ac      	ldr	r4, [r5, #8]
 800603c:	e7eb      	b.n	8006016 <__swsetup_r+0x1e>
 800603e:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <__swsetup_r+0xd8>)
 8006040:	429c      	cmp	r4, r3
 8006042:	bf08      	it	eq
 8006044:	68ec      	ldreq	r4, [r5, #12]
 8006046:	e7e6      	b.n	8006016 <__swsetup_r+0x1e>
 8006048:	0751      	lsls	r1, r2, #29
 800604a:	d512      	bpl.n	8006072 <__swsetup_r+0x7a>
 800604c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800604e:	b141      	cbz	r1, 8006062 <__swsetup_r+0x6a>
 8006050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006054:	4299      	cmp	r1, r3
 8006056:	d002      	beq.n	800605e <__swsetup_r+0x66>
 8006058:	4630      	mov	r0, r6
 800605a:	f001 f893 	bl	8007184 <_free_r>
 800605e:	2300      	movs	r3, #0
 8006060:	6363      	str	r3, [r4, #52]	; 0x34
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	2300      	movs	r3, #0
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	b94b      	cbnz	r3, 8006092 <__swsetup_r+0x9a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d003      	beq.n	8006092 <__swsetup_r+0x9a>
 800608a:	4621      	mov	r1, r4
 800608c:	4630      	mov	r0, r6
 800608e:	f001 fadf 	bl	8007650 <__smakebuf_r>
 8006092:	89a2      	ldrh	r2, [r4, #12]
 8006094:	f012 0301 	ands.w	r3, r2, #1
 8006098:	d00c      	beq.n	80060b4 <__swsetup_r+0xbc>
 800609a:	2300      	movs	r3, #0
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	6963      	ldr	r3, [r4, #20]
 80060a0:	425b      	negs	r3, r3
 80060a2:	61a3      	str	r3, [r4, #24]
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	b953      	cbnz	r3, 80060be <__swsetup_r+0xc6>
 80060a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80060b0:	d1ba      	bne.n	8006028 <__swsetup_r+0x30>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	0792      	lsls	r2, r2, #30
 80060b6:	bf58      	it	pl
 80060b8:	6963      	ldrpl	r3, [r4, #20]
 80060ba:	60a3      	str	r3, [r4, #8]
 80060bc:	e7f2      	b.n	80060a4 <__swsetup_r+0xac>
 80060be:	2000      	movs	r0, #0
 80060c0:	e7f7      	b.n	80060b2 <__swsetup_r+0xba>
 80060c2:	bf00      	nop
 80060c4:	20000004 	.word	0x20000004
 80060c8:	08008bd8 	.word	0x08008bd8
 80060cc:	08008bf8 	.word	0x08008bf8
 80060d0:	08008bb8 	.word	0x08008bb8

080060d4 <quorem>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	6903      	ldr	r3, [r0, #16]
 80060da:	690c      	ldr	r4, [r1, #16]
 80060dc:	429c      	cmp	r4, r3
 80060de:	4680      	mov	r8, r0
 80060e0:	f300 8082 	bgt.w	80061e8 <quorem+0x114>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	f101 0714 	add.w	r7, r1, #20
 80060ea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80060ee:	f100 0614 	add.w	r6, r0, #20
 80060f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060fa:	eb06 030e 	add.w	r3, r6, lr
 80060fe:	3501      	adds	r5, #1
 8006100:	eb07 090e 	add.w	r9, r7, lr
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	fbb0 f5f5 	udiv	r5, r0, r5
 800610a:	b395      	cbz	r5, 8006172 <quorem+0x9e>
 800610c:	f04f 0a00 	mov.w	sl, #0
 8006110:	4638      	mov	r0, r7
 8006112:	46b4      	mov	ip, r6
 8006114:	46d3      	mov	fp, sl
 8006116:	f850 2b04 	ldr.w	r2, [r0], #4
 800611a:	b293      	uxth	r3, r2
 800611c:	fb05 a303 	mla	r3, r5, r3, sl
 8006120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006124:	b29b      	uxth	r3, r3
 8006126:	ebab 0303 	sub.w	r3, fp, r3
 800612a:	0c12      	lsrs	r2, r2, #16
 800612c:	f8bc b000 	ldrh.w	fp, [ip]
 8006130:	fb05 a202 	mla	r2, r5, r2, sl
 8006134:	fa13 f38b 	uxtah	r3, r3, fp
 8006138:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800613c:	fa1f fb82 	uxth.w	fp, r2
 8006140:	f8dc 2000 	ldr.w	r2, [ip]
 8006144:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006152:	4581      	cmp	r9, r0
 8006154:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006158:	f84c 3b04 	str.w	r3, [ip], #4
 800615c:	d2db      	bcs.n	8006116 <quorem+0x42>
 800615e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006162:	b933      	cbnz	r3, 8006172 <quorem+0x9e>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	3b04      	subs	r3, #4
 8006168:	429e      	cmp	r6, r3
 800616a:	461a      	mov	r2, r3
 800616c:	d330      	bcc.n	80061d0 <quorem+0xfc>
 800616e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006172:	4640      	mov	r0, r8
 8006174:	f001 ff05 	bl	8007f82 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	db25      	blt.n	80061c8 <quorem+0xf4>
 800617c:	3501      	adds	r5, #1
 800617e:	4630      	mov	r0, r6
 8006180:	f04f 0e00 	mov.w	lr, #0
 8006184:	f857 2b04 	ldr.w	r2, [r7], #4
 8006188:	f8d0 c000 	ldr.w	ip, [r0]
 800618c:	b293      	uxth	r3, r2
 800618e:	ebae 0303 	sub.w	r3, lr, r3
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	fa13 f38c 	uxtah	r3, r3, ip
 8006198:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800619c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a6:	45b9      	cmp	r9, r7
 80061a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80061ac:	f840 3b04 	str.w	r3, [r0], #4
 80061b0:	d2e8      	bcs.n	8006184 <quorem+0xb0>
 80061b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80061b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061ba:	b92a      	cbnz	r2, 80061c8 <quorem+0xf4>
 80061bc:	3b04      	subs	r3, #4
 80061be:	429e      	cmp	r6, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	d30b      	bcc.n	80061dc <quorem+0x108>
 80061c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80061c8:	4628      	mov	r0, r5
 80061ca:	b003      	add	sp, #12
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	3b04      	subs	r3, #4
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d1ca      	bne.n	800616e <quorem+0x9a>
 80061d8:	3c01      	subs	r4, #1
 80061da:	e7c5      	b.n	8006168 <quorem+0x94>
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	3b04      	subs	r3, #4
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d1ef      	bne.n	80061c4 <quorem+0xf0>
 80061e4:	3c01      	subs	r4, #1
 80061e6:	e7ea      	b.n	80061be <quorem+0xea>
 80061e8:	2000      	movs	r0, #0
 80061ea:	e7ee      	b.n	80061ca <quorem+0xf6>
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ec57 6b10 	vmov	r6, r7, d0
 80061f8:	b097      	sub	sp, #92	; 0x5c
 80061fa:	e9cd 6700 	strd	r6, r7, [sp]
 80061fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006200:	9107      	str	r1, [sp, #28]
 8006202:	4604      	mov	r4, r0
 8006204:	920a      	str	r2, [sp, #40]	; 0x28
 8006206:	930f      	str	r3, [sp, #60]	; 0x3c
 8006208:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800620a:	b93e      	cbnz	r6, 800621c <_dtoa_r+0x2c>
 800620c:	2010      	movs	r0, #16
 800620e:	f001 fa5f 	bl	80076d0 <malloc>
 8006212:	6260      	str	r0, [r4, #36]	; 0x24
 8006214:	6046      	str	r6, [r0, #4]
 8006216:	6086      	str	r6, [r0, #8]
 8006218:	6006      	str	r6, [r0, #0]
 800621a:	60c6      	str	r6, [r0, #12]
 800621c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	b151      	cbz	r1, 8006238 <_dtoa_r+0x48>
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	604a      	str	r2, [r1, #4]
 8006226:	2301      	movs	r3, #1
 8006228:	4093      	lsls	r3, r2
 800622a:	608b      	str	r3, [r1, #8]
 800622c:	4620      	mov	r0, r4
 800622e:	f001 fcd3 	bl	8007bd8 <_Bfree>
 8006232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	bfbf      	itttt	lt
 800623e:	2301      	movlt	r3, #1
 8006240:	602b      	strlt	r3, [r5, #0]
 8006242:	9b01      	ldrlt	r3, [sp, #4]
 8006244:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006248:	bfb2      	itee	lt
 800624a:	9301      	strlt	r3, [sp, #4]
 800624c:	2300      	movge	r3, #0
 800624e:	602b      	strge	r3, [r5, #0]
 8006250:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006254:	4ba8      	ldr	r3, [pc, #672]	; (80064f8 <_dtoa_r+0x308>)
 8006256:	ea33 0308 	bics.w	r3, r3, r8
 800625a:	d11b      	bne.n	8006294 <_dtoa_r+0xa4>
 800625c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800625e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	b923      	cbnz	r3, 8006272 <_dtoa_r+0x82>
 8006268:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800626c:	2800      	cmp	r0, #0
 800626e:	f000 8578 	beq.w	8006d62 <_dtoa_r+0xb72>
 8006272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006274:	b953      	cbnz	r3, 800628c <_dtoa_r+0x9c>
 8006276:	4ba1      	ldr	r3, [pc, #644]	; (80064fc <_dtoa_r+0x30c>)
 8006278:	e021      	b.n	80062be <_dtoa_r+0xce>
 800627a:	4ba1      	ldr	r3, [pc, #644]	; (8006500 <_dtoa_r+0x310>)
 800627c:	9302      	str	r3, [sp, #8]
 800627e:	3308      	adds	r3, #8
 8006280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	9802      	ldr	r0, [sp, #8]
 8006286:	b017      	add	sp, #92	; 0x5c
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628c:	4b9b      	ldr	r3, [pc, #620]	; (80064fc <_dtoa_r+0x30c>)
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	3303      	adds	r3, #3
 8006292:	e7f5      	b.n	8006280 <_dtoa_r+0x90>
 8006294:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006298:	2200      	movs	r2, #0
 800629a:	2300      	movs	r3, #0
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	f7fa fc0e 	bl	8000ac0 <__aeabi_dcmpeq>
 80062a4:	4681      	mov	r9, r0
 80062a6:	b160      	cbz	r0, 80062c2 <_dtoa_r+0xd2>
 80062a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062aa:	2301      	movs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8553 	beq.w	8006d5c <_dtoa_r+0xb6c>
 80062b6:	4b93      	ldr	r3, [pc, #588]	; (8006504 <_dtoa_r+0x314>)
 80062b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	3b01      	subs	r3, #1
 80062be:	9302      	str	r3, [sp, #8]
 80062c0:	e7e0      	b.n	8006284 <_dtoa_r+0x94>
 80062c2:	aa14      	add	r2, sp, #80	; 0x50
 80062c4:	a915      	add	r1, sp, #84	; 0x54
 80062c6:	ec47 6b10 	vmov	d0, r6, r7
 80062ca:	4620      	mov	r0, r4
 80062cc:	f001 fed1 	bl	8008072 <__d2b>
 80062d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062d4:	4682      	mov	sl, r0
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d07e      	beq.n	80063d8 <_dtoa_r+0x1e8>
 80062da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062e2:	4630      	mov	r0, r6
 80062e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062ec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b85      	ldr	r3, [pc, #532]	; (8006508 <_dtoa_r+0x318>)
 80062f4:	f7f9 ffc8 	bl	8000288 <__aeabi_dsub>
 80062f8:	a379      	add	r3, pc, #484	; (adr r3, 80064e0 <_dtoa_r+0x2f0>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7fa f977 	bl	80005f0 <__aeabi_dmul>
 8006302:	a379      	add	r3, pc, #484	; (adr r3, 80064e8 <_dtoa_r+0x2f8>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7f9 ffc0 	bl	800028c <__adddf3>
 800630c:	4606      	mov	r6, r0
 800630e:	4628      	mov	r0, r5
 8006310:	460f      	mov	r7, r1
 8006312:	f7fa f907 	bl	8000524 <__aeabi_i2d>
 8006316:	a376      	add	r3, pc, #472	; (adr r3, 80064f0 <_dtoa_r+0x300>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7fa f968 	bl	80005f0 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ffb0 	bl	800028c <__adddf3>
 800632c:	4606      	mov	r6, r0
 800632e:	460f      	mov	r7, r1
 8006330:	f7fa fc0e 	bl	8000b50 <__aeabi_d2iz>
 8006334:	2200      	movs	r2, #0
 8006336:	4683      	mov	fp, r0
 8006338:	2300      	movs	r3, #0
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7fa fbc9 	bl	8000ad4 <__aeabi_dcmplt>
 8006342:	b158      	cbz	r0, 800635c <_dtoa_r+0x16c>
 8006344:	4658      	mov	r0, fp
 8006346:	f7fa f8ed 	bl	8000524 <__aeabi_i2d>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4630      	mov	r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	f7fa fbb5 	bl	8000ac0 <__aeabi_dcmpeq>
 8006356:	b908      	cbnz	r0, 800635c <_dtoa_r+0x16c>
 8006358:	f10b 3bff 	add.w	fp, fp, #4294967295
 800635c:	f1bb 0f16 	cmp.w	fp, #22
 8006360:	d859      	bhi.n	8006416 <_dtoa_r+0x226>
 8006362:	496a      	ldr	r1, [pc, #424]	; (800650c <_dtoa_r+0x31c>)
 8006364:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006370:	f7fa fbce 	bl	8000b10 <__aeabi_dcmpgt>
 8006374:	2800      	cmp	r0, #0
 8006376:	d050      	beq.n	800641a <_dtoa_r+0x22a>
 8006378:	f10b 3bff 	add.w	fp, fp, #4294967295
 800637c:	2300      	movs	r3, #0
 800637e:	930e      	str	r3, [sp, #56]	; 0x38
 8006380:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006382:	1b5d      	subs	r5, r3, r5
 8006384:	1e6b      	subs	r3, r5, #1
 8006386:	9306      	str	r3, [sp, #24]
 8006388:	bf45      	ittet	mi
 800638a:	f1c5 0301 	rsbmi	r3, r5, #1
 800638e:	9305      	strmi	r3, [sp, #20]
 8006390:	2300      	movpl	r3, #0
 8006392:	2300      	movmi	r3, #0
 8006394:	bf4c      	ite	mi
 8006396:	9306      	strmi	r3, [sp, #24]
 8006398:	9305      	strpl	r3, [sp, #20]
 800639a:	f1bb 0f00 	cmp.w	fp, #0
 800639e:	db3e      	blt.n	800641e <_dtoa_r+0x22e>
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80063a6:	445b      	add	r3, fp
 80063a8:	9306      	str	r3, [sp, #24]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9308      	str	r3, [sp, #32]
 80063ae:	9b07      	ldr	r3, [sp, #28]
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	f200 80af 	bhi.w	8006514 <_dtoa_r+0x324>
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	bfc4      	itt	gt
 80063ba:	3b04      	subgt	r3, #4
 80063bc:	9307      	strgt	r3, [sp, #28]
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	f1a3 0302 	sub.w	r3, r3, #2
 80063c4:	bfcc      	ite	gt
 80063c6:	2600      	movgt	r6, #0
 80063c8:	2601      	movle	r6, #1
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	f200 80ae 	bhi.w	800652c <_dtoa_r+0x33c>
 80063d0:	e8df f003 	tbb	[pc, r3]
 80063d4:	772f8482 	.word	0x772f8482
 80063d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80063dc:	441d      	add	r5, r3
 80063de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	dd11      	ble.n	800640a <_dtoa_r+0x21a>
 80063e6:	9a00      	ldr	r2, [sp, #0]
 80063e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80063f0:	fa22 f000 	lsr.w	r0, r2, r0
 80063f4:	fa08 f303 	lsl.w	r3, r8, r3
 80063f8:	4318      	orrs	r0, r3
 80063fa:	f7fa f883 	bl	8000504 <__aeabi_ui2d>
 80063fe:	2301      	movs	r3, #1
 8006400:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006404:	3d01      	subs	r5, #1
 8006406:	9312      	str	r3, [sp, #72]	; 0x48
 8006408:	e772      	b.n	80062f0 <_dtoa_r+0x100>
 800640a:	f1c3 0020 	rsb	r0, r3, #32
 800640e:	9b00      	ldr	r3, [sp, #0]
 8006410:	fa03 f000 	lsl.w	r0, r3, r0
 8006414:	e7f1      	b.n	80063fa <_dtoa_r+0x20a>
 8006416:	2301      	movs	r3, #1
 8006418:	e7b1      	b.n	800637e <_dtoa_r+0x18e>
 800641a:	900e      	str	r0, [sp, #56]	; 0x38
 800641c:	e7b0      	b.n	8006380 <_dtoa_r+0x190>
 800641e:	9b05      	ldr	r3, [sp, #20]
 8006420:	eba3 030b 	sub.w	r3, r3, fp
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f1cb 0300 	rsb	r3, fp, #0
 800642a:	9308      	str	r3, [sp, #32]
 800642c:	2300      	movs	r3, #0
 800642e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006430:	e7bd      	b.n	80063ae <_dtoa_r+0x1be>
 8006432:	2301      	movs	r3, #1
 8006434:	9309      	str	r3, [sp, #36]	; 0x24
 8006436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	dd7a      	ble.n	8006532 <_dtoa_r+0x342>
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006442:	2200      	movs	r2, #0
 8006444:	606a      	str	r2, [r5, #4]
 8006446:	2104      	movs	r1, #4
 8006448:	f101 0214 	add.w	r2, r1, #20
 800644c:	429a      	cmp	r2, r3
 800644e:	d975      	bls.n	800653c <_dtoa_r+0x34c>
 8006450:	6869      	ldr	r1, [r5, #4]
 8006452:	4620      	mov	r0, r4
 8006454:	f001 fb8c 	bl	8007b70 <_Balloc>
 8006458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645a:	6028      	str	r0, [r5, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	2b0e      	cmp	r3, #14
 8006464:	f200 80e5 	bhi.w	8006632 <_dtoa_r+0x442>
 8006468:	2e00      	cmp	r6, #0
 800646a:	f000 80e2 	beq.w	8006632 <_dtoa_r+0x442>
 800646e:	ed9d 7b00 	vldr	d7, [sp]
 8006472:	f1bb 0f00 	cmp.w	fp, #0
 8006476:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800647a:	dd74      	ble.n	8006566 <_dtoa_r+0x376>
 800647c:	4a23      	ldr	r2, [pc, #140]	; (800650c <_dtoa_r+0x31c>)
 800647e:	f00b 030f 	and.w	r3, fp, #15
 8006482:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006486:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800648a:	06f0      	lsls	r0, r6, #27
 800648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006490:	d559      	bpl.n	8006546 <_dtoa_r+0x356>
 8006492:	4b1f      	ldr	r3, [pc, #124]	; (8006510 <_dtoa_r+0x320>)
 8006494:	ec51 0b17 	vmov	r0, r1, d7
 8006498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800649c:	f7fa f9d2 	bl	8000844 <__aeabi_ddiv>
 80064a0:	e9cd 0100 	strd	r0, r1, [sp]
 80064a4:	f006 060f 	and.w	r6, r6, #15
 80064a8:	2503      	movs	r5, #3
 80064aa:	4f19      	ldr	r7, [pc, #100]	; (8006510 <_dtoa_r+0x320>)
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	d14c      	bne.n	800654a <_dtoa_r+0x35a>
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b8:	f7fa f9c4 	bl	8000844 <__aeabi_ddiv>
 80064bc:	e9cd 0100 	strd	r0, r1, [sp]
 80064c0:	e06a      	b.n	8006598 <_dtoa_r+0x3a8>
 80064c2:	2301      	movs	r3, #1
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	445b      	add	r3, fp
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	3301      	adds	r3, #1
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	bfb8      	it	lt
 80064d4:	2301      	movlt	r3, #1
 80064d6:	e7b3      	b.n	8006440 <_dtoa_r+0x250>
 80064d8:	2300      	movs	r3, #0
 80064da:	e7ab      	b.n	8006434 <_dtoa_r+0x244>
 80064dc:	2300      	movs	r3, #0
 80064de:	e7f1      	b.n	80064c4 <_dtoa_r+0x2d4>
 80064e0:	636f4361 	.word	0x636f4361
 80064e4:	3fd287a7 	.word	0x3fd287a7
 80064e8:	8b60c8b3 	.word	0x8b60c8b3
 80064ec:	3fc68a28 	.word	0x3fc68a28
 80064f0:	509f79fb 	.word	0x509f79fb
 80064f4:	3fd34413 	.word	0x3fd34413
 80064f8:	7ff00000 	.word	0x7ff00000
 80064fc:	08008bb1 	.word	0x08008bb1
 8006500:	08008ba8 	.word	0x08008ba8
 8006504:	08008b67 	.word	0x08008b67
 8006508:	3ff80000 	.word	0x3ff80000
 800650c:	08008c48 	.word	0x08008c48
 8006510:	08008c20 	.word	0x08008c20
 8006514:	2601      	movs	r6, #1
 8006516:	2300      	movs	r3, #0
 8006518:	9307      	str	r3, [sp, #28]
 800651a:	9609      	str	r6, [sp, #36]	; 0x24
 800651c:	f04f 33ff 	mov.w	r3, #4294967295
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	2312      	movs	r3, #18
 8006528:	920a      	str	r2, [sp, #40]	; 0x28
 800652a:	e789      	b.n	8006440 <_dtoa_r+0x250>
 800652c:	2301      	movs	r3, #1
 800652e:	9309      	str	r3, [sp, #36]	; 0x24
 8006530:	e7f4      	b.n	800651c <_dtoa_r+0x32c>
 8006532:	2301      	movs	r3, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	461a      	mov	r2, r3
 800653a:	e7f5      	b.n	8006528 <_dtoa_r+0x338>
 800653c:	686a      	ldr	r2, [r5, #4]
 800653e:	3201      	adds	r2, #1
 8006540:	606a      	str	r2, [r5, #4]
 8006542:	0049      	lsls	r1, r1, #1
 8006544:	e780      	b.n	8006448 <_dtoa_r+0x258>
 8006546:	2502      	movs	r5, #2
 8006548:	e7af      	b.n	80064aa <_dtoa_r+0x2ba>
 800654a:	07f1      	lsls	r1, r6, #31
 800654c:	d508      	bpl.n	8006560 <_dtoa_r+0x370>
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006556:	f7fa f84b 	bl	80005f0 <__aeabi_dmul>
 800655a:	3501      	adds	r5, #1
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	1076      	asrs	r6, r6, #1
 8006562:	3708      	adds	r7, #8
 8006564:	e7a2      	b.n	80064ac <_dtoa_r+0x2bc>
 8006566:	f000 809d 	beq.w	80066a4 <_dtoa_r+0x4b4>
 800656a:	f1cb 0600 	rsb	r6, fp, #0
 800656e:	4b9f      	ldr	r3, [pc, #636]	; (80067ec <_dtoa_r+0x5fc>)
 8006570:	4f9f      	ldr	r7, [pc, #636]	; (80067f0 <_dtoa_r+0x600>)
 8006572:	f006 020f 	and.w	r2, r6, #15
 8006576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006582:	f7fa f835 	bl	80005f0 <__aeabi_dmul>
 8006586:	e9cd 0100 	strd	r0, r1, [sp]
 800658a:	1136      	asrs	r6, r6, #4
 800658c:	2300      	movs	r3, #0
 800658e:	2502      	movs	r5, #2
 8006590:	2e00      	cmp	r6, #0
 8006592:	d17c      	bne.n	800668e <_dtoa_r+0x49e>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d191      	bne.n	80064bc <_dtoa_r+0x2cc>
 8006598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8084 	beq.w	80066a8 <_dtoa_r+0x4b8>
 80065a0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80065a4:	2200      	movs	r2, #0
 80065a6:	4b93      	ldr	r3, [pc, #588]	; (80067f4 <_dtoa_r+0x604>)
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fa92 	bl	8000ad4 <__aeabi_dcmplt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d079      	beq.n	80066a8 <_dtoa_r+0x4b8>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d076      	beq.n	80066a8 <_dtoa_r+0x4b8>
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd34      	ble.n	800662a <_dtoa_r+0x43a>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <_dtoa_r+0x608>)
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa f812 	bl	80005f0 <__aeabi_dmul>
 80065cc:	e9cd 0100 	strd	r0, r1, [sp]
 80065d0:	9e04      	ldr	r6, [sp, #16]
 80065d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80065d6:	3501      	adds	r5, #1
 80065d8:	4628      	mov	r0, r5
 80065da:	f7f9 ffa3 	bl	8000524 <__aeabi_i2d>
 80065de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e2:	f7fa f805 	bl	80005f0 <__aeabi_dmul>
 80065e6:	2200      	movs	r2, #0
 80065e8:	4b84      	ldr	r3, [pc, #528]	; (80067fc <_dtoa_r+0x60c>)
 80065ea:	f7f9 fe4f 	bl	800028c <__adddf3>
 80065ee:	4680      	mov	r8, r0
 80065f0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80065f4:	2e00      	cmp	r6, #0
 80065f6:	d15a      	bne.n	80066ae <_dtoa_r+0x4be>
 80065f8:	2200      	movs	r2, #0
 80065fa:	4b81      	ldr	r3, [pc, #516]	; (8006800 <_dtoa_r+0x610>)
 80065fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006600:	f7f9 fe42 	bl	8000288 <__aeabi_dsub>
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	e9cd 0100 	strd	r0, r1, [sp]
 800660c:	f7fa fa80 	bl	8000b10 <__aeabi_dcmpgt>
 8006610:	2800      	cmp	r0, #0
 8006612:	f040 829b 	bne.w	8006b4c <_dtoa_r+0x95c>
 8006616:	4642      	mov	r2, r8
 8006618:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800661c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006620:	f7fa fa58 	bl	8000ad4 <__aeabi_dcmplt>
 8006624:	2800      	cmp	r0, #0
 8006626:	f040 828f 	bne.w	8006b48 <_dtoa_r+0x958>
 800662a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800662e:	e9cd 2300 	strd	r2, r3, [sp]
 8006632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006634:	2b00      	cmp	r3, #0
 8006636:	f2c0 8150 	blt.w	80068da <_dtoa_r+0x6ea>
 800663a:	f1bb 0f0e 	cmp.w	fp, #14
 800663e:	f300 814c 	bgt.w	80068da <_dtoa_r+0x6ea>
 8006642:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <_dtoa_r+0x5fc>)
 8006644:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800664c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	f280 80da 	bge.w	8006808 <_dtoa_r+0x618>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f300 80d6 	bgt.w	8006808 <_dtoa_r+0x618>
 800665c:	f040 8273 	bne.w	8006b46 <_dtoa_r+0x956>
 8006660:	2200      	movs	r2, #0
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <_dtoa_r+0x610>)
 8006664:	4640      	mov	r0, r8
 8006666:	4649      	mov	r1, r9
 8006668:	f7f9 ffc2 	bl	80005f0 <__aeabi_dmul>
 800666c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006670:	f7fa fa44 	bl	8000afc <__aeabi_dcmpge>
 8006674:	9e03      	ldr	r6, [sp, #12]
 8006676:	4637      	mov	r7, r6
 8006678:	2800      	cmp	r0, #0
 800667a:	f040 824a 	bne.w	8006b12 <_dtoa_r+0x922>
 800667e:	9b02      	ldr	r3, [sp, #8]
 8006680:	9a02      	ldr	r2, [sp, #8]
 8006682:	1c5d      	adds	r5, r3, #1
 8006684:	2331      	movs	r3, #49	; 0x31
 8006686:	7013      	strb	r3, [r2, #0]
 8006688:	f10b 0b01 	add.w	fp, fp, #1
 800668c:	e245      	b.n	8006b1a <_dtoa_r+0x92a>
 800668e:	07f2      	lsls	r2, r6, #31
 8006690:	d505      	bpl.n	800669e <_dtoa_r+0x4ae>
 8006692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006696:	f7f9 ffab 	bl	80005f0 <__aeabi_dmul>
 800669a:	3501      	adds	r5, #1
 800669c:	2301      	movs	r3, #1
 800669e:	1076      	asrs	r6, r6, #1
 80066a0:	3708      	adds	r7, #8
 80066a2:	e775      	b.n	8006590 <_dtoa_r+0x3a0>
 80066a4:	2502      	movs	r5, #2
 80066a6:	e777      	b.n	8006598 <_dtoa_r+0x3a8>
 80066a8:	465f      	mov	r7, fp
 80066aa:	9e03      	ldr	r6, [sp, #12]
 80066ac:	e794      	b.n	80065d8 <_dtoa_r+0x3e8>
 80066ae:	9a02      	ldr	r2, [sp, #8]
 80066b0:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <_dtoa_r+0x5fc>)
 80066b2:	4432      	add	r2, r6
 80066b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80066b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b8:	1e71      	subs	r1, r6, #1
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	d048      	beq.n	8006750 <_dtoa_r+0x560>
 80066be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	2000      	movs	r0, #0
 80066c8:	494e      	ldr	r1, [pc, #312]	; (8006804 <_dtoa_r+0x614>)
 80066ca:	f7fa f8bb 	bl	8000844 <__aeabi_ddiv>
 80066ce:	4642      	mov	r2, r8
 80066d0:	464b      	mov	r3, r9
 80066d2:	f7f9 fdd9 	bl	8000288 <__aeabi_dsub>
 80066d6:	9d02      	ldr	r5, [sp, #8]
 80066d8:	4680      	mov	r8, r0
 80066da:	4689      	mov	r9, r1
 80066dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e0:	f7fa fa36 	bl	8000b50 <__aeabi_d2iz>
 80066e4:	4606      	mov	r6, r0
 80066e6:	f7f9 ff1d 	bl	8000524 <__aeabi_i2d>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066f2:	f7f9 fdc9 	bl	8000288 <__aeabi_dsub>
 80066f6:	3630      	adds	r6, #48	; 0x30
 80066f8:	f805 6b01 	strb.w	r6, [r5], #1
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	e9cd 0100 	strd	r0, r1, [sp]
 8006704:	f7fa f9e6 	bl	8000ad4 <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	d165      	bne.n	80067d8 <_dtoa_r+0x5e8>
 800670c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006710:	2000      	movs	r0, #0
 8006712:	4938      	ldr	r1, [pc, #224]	; (80067f4 <_dtoa_r+0x604>)
 8006714:	f7f9 fdb8 	bl	8000288 <__aeabi_dsub>
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	f7fa f9da 	bl	8000ad4 <__aeabi_dcmplt>
 8006720:	2800      	cmp	r0, #0
 8006722:	f040 80ba 	bne.w	800689a <_dtoa_r+0x6aa>
 8006726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006728:	429d      	cmp	r5, r3
 800672a:	f43f af7e 	beq.w	800662a <_dtoa_r+0x43a>
 800672e:	2200      	movs	r2, #0
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <_dtoa_r+0x608>)
 8006732:	4640      	mov	r0, r8
 8006734:	4649      	mov	r1, r9
 8006736:	f7f9 ff5b 	bl	80005f0 <__aeabi_dmul>
 800673a:	2200      	movs	r2, #0
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <_dtoa_r+0x608>)
 8006742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006746:	f7f9 ff53 	bl	80005f0 <__aeabi_dmul>
 800674a:	e9cd 0100 	strd	r0, r1, [sp]
 800674e:	e7c5      	b.n	80066dc <_dtoa_r+0x4ec>
 8006750:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675c:	f7f9 ff48 	bl	80005f0 <__aeabi_dmul>
 8006760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006764:	9d02      	ldr	r5, [sp, #8]
 8006766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800676a:	f7fa f9f1 	bl	8000b50 <__aeabi_d2iz>
 800676e:	4606      	mov	r6, r0
 8006770:	f7f9 fed8 	bl	8000524 <__aeabi_i2d>
 8006774:	3630      	adds	r6, #48	; 0x30
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800677e:	f7f9 fd83 	bl	8000288 <__aeabi_dsub>
 8006782:	f805 6b01 	strb.w	r6, [r5], #1
 8006786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006788:	42ab      	cmp	r3, r5
 800678a:	4680      	mov	r8, r0
 800678c:	4689      	mov	r9, r1
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	d125      	bne.n	80067e0 <_dtoa_r+0x5f0>
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <_dtoa_r+0x614>)
 8006796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800679a:	f7f9 fd77 	bl	800028c <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	f7fa f9b3 	bl	8000b10 <__aeabi_dcmpgt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d175      	bne.n	800689a <_dtoa_r+0x6aa>
 80067ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067b2:	2000      	movs	r0, #0
 80067b4:	4913      	ldr	r1, [pc, #76]	; (8006804 <_dtoa_r+0x614>)
 80067b6:	f7f9 fd67 	bl	8000288 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa f987 	bl	8000ad4 <__aeabi_dcmplt>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f af2f 	beq.w	800662a <_dtoa_r+0x43a>
 80067cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80067d6:	d001      	beq.n	80067dc <_dtoa_r+0x5ec>
 80067d8:	46bb      	mov	fp, r7
 80067da:	e04d      	b.n	8006878 <_dtoa_r+0x688>
 80067dc:	4615      	mov	r5, r2
 80067de:	e7f5      	b.n	80067cc <_dtoa_r+0x5dc>
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <_dtoa_r+0x608>)
 80067e2:	f7f9 ff05 	bl	80005f0 <__aeabi_dmul>
 80067e6:	e9cd 0100 	strd	r0, r1, [sp]
 80067ea:	e7bc      	b.n	8006766 <_dtoa_r+0x576>
 80067ec:	08008c48 	.word	0x08008c48
 80067f0:	08008c20 	.word	0x08008c20
 80067f4:	3ff00000 	.word	0x3ff00000
 80067f8:	40240000 	.word	0x40240000
 80067fc:	401c0000 	.word	0x401c0000
 8006800:	40140000 	.word	0x40140000
 8006804:	3fe00000 	.word	0x3fe00000
 8006808:	e9dd 6700 	ldrd	r6, r7, [sp]
 800680c:	9d02      	ldr	r5, [sp, #8]
 800680e:	4642      	mov	r2, r8
 8006810:	464b      	mov	r3, r9
 8006812:	4630      	mov	r0, r6
 8006814:	4639      	mov	r1, r7
 8006816:	f7fa f815 	bl	8000844 <__aeabi_ddiv>
 800681a:	f7fa f999 	bl	8000b50 <__aeabi_d2iz>
 800681e:	9000      	str	r0, [sp, #0]
 8006820:	f7f9 fe80 	bl	8000524 <__aeabi_i2d>
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	f7f9 fee2 	bl	80005f0 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	9e00      	ldr	r6, [sp, #0]
 800683a:	9f03      	ldr	r7, [sp, #12]
 800683c:	3630      	adds	r6, #48	; 0x30
 800683e:	f805 6b01 	strb.w	r6, [r5], #1
 8006842:	9e02      	ldr	r6, [sp, #8]
 8006844:	1bae      	subs	r6, r5, r6
 8006846:	42b7      	cmp	r7, r6
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	d138      	bne.n	80068c0 <_dtoa_r+0x6d0>
 800684e:	f7f9 fd1d 	bl	800028c <__adddf3>
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7fa f939 	bl	8000ad4 <__aeabi_dcmplt>
 8006862:	b9c8      	cbnz	r0, 8006898 <_dtoa_r+0x6a8>
 8006864:	4632      	mov	r2, r6
 8006866:	463b      	mov	r3, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7fa f928 	bl	8000ac0 <__aeabi_dcmpeq>
 8006870:	b110      	cbz	r0, 8006878 <_dtoa_r+0x688>
 8006872:	9b00      	ldr	r3, [sp, #0]
 8006874:	07db      	lsls	r3, r3, #31
 8006876:	d40f      	bmi.n	8006898 <_dtoa_r+0x6a8>
 8006878:	4651      	mov	r1, sl
 800687a:	4620      	mov	r0, r4
 800687c:	f001 f9ac 	bl	8007bd8 <_Bfree>
 8006880:	2300      	movs	r3, #0
 8006882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006884:	702b      	strb	r3, [r5, #0]
 8006886:	f10b 0301 	add.w	r3, fp, #1
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800688e:	2b00      	cmp	r3, #0
 8006890:	f43f acf8 	beq.w	8006284 <_dtoa_r+0x94>
 8006894:	601d      	str	r5, [r3, #0]
 8006896:	e4f5      	b.n	8006284 <_dtoa_r+0x94>
 8006898:	465f      	mov	r7, fp
 800689a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800689e:	2a39      	cmp	r2, #57	; 0x39
 80068a0:	f105 33ff 	add.w	r3, r5, #4294967295
 80068a4:	d106      	bne.n	80068b4 <_dtoa_r+0x6c4>
 80068a6:	9a02      	ldr	r2, [sp, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d107      	bne.n	80068bc <_dtoa_r+0x6cc>
 80068ac:	2330      	movs	r3, #48	; 0x30
 80068ae:	7013      	strb	r3, [r2, #0]
 80068b0:	3701      	adds	r7, #1
 80068b2:	4613      	mov	r3, r2
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	3201      	adds	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e78d      	b.n	80067d8 <_dtoa_r+0x5e8>
 80068bc:	461d      	mov	r5, r3
 80068be:	e7ec      	b.n	800689a <_dtoa_r+0x6aa>
 80068c0:	2200      	movs	r2, #0
 80068c2:	4ba4      	ldr	r3, [pc, #656]	; (8006b54 <_dtoa_r+0x964>)
 80068c4:	f7f9 fe94 	bl	80005f0 <__aeabi_dmul>
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	f7fa f8f6 	bl	8000ac0 <__aeabi_dcmpeq>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d09a      	beq.n	800680e <_dtoa_r+0x61e>
 80068d8:	e7ce      	b.n	8006878 <_dtoa_r+0x688>
 80068da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068dc:	2a00      	cmp	r2, #0
 80068de:	f000 80cd 	beq.w	8006a7c <_dtoa_r+0x88c>
 80068e2:	9a07      	ldr	r2, [sp, #28]
 80068e4:	2a01      	cmp	r2, #1
 80068e6:	f300 80af 	bgt.w	8006a48 <_dtoa_r+0x858>
 80068ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068ec:	2a00      	cmp	r2, #0
 80068ee:	f000 80a7 	beq.w	8006a40 <_dtoa_r+0x850>
 80068f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068f6:	9e08      	ldr	r6, [sp, #32]
 80068f8:	9d05      	ldr	r5, [sp, #20]
 80068fa:	9a05      	ldr	r2, [sp, #20]
 80068fc:	441a      	add	r2, r3
 80068fe:	9205      	str	r2, [sp, #20]
 8006900:	9a06      	ldr	r2, [sp, #24]
 8006902:	2101      	movs	r1, #1
 8006904:	441a      	add	r2, r3
 8006906:	4620      	mov	r0, r4
 8006908:	9206      	str	r2, [sp, #24]
 800690a:	f001 fa05 	bl	8007d18 <__i2b>
 800690e:	4607      	mov	r7, r0
 8006910:	2d00      	cmp	r5, #0
 8006912:	dd0c      	ble.n	800692e <_dtoa_r+0x73e>
 8006914:	9b06      	ldr	r3, [sp, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd09      	ble.n	800692e <_dtoa_r+0x73e>
 800691a:	42ab      	cmp	r3, r5
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	bfa8      	it	ge
 8006920:	462b      	movge	r3, r5
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	9205      	str	r2, [sp, #20]
 8006926:	9a06      	ldr	r2, [sp, #24]
 8006928:	1aed      	subs	r5, r5, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	9306      	str	r3, [sp, #24]
 800692e:	9b08      	ldr	r3, [sp, #32]
 8006930:	b1f3      	cbz	r3, 8006970 <_dtoa_r+0x780>
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80a5 	beq.w	8006a84 <_dtoa_r+0x894>
 800693a:	2e00      	cmp	r6, #0
 800693c:	dd10      	ble.n	8006960 <_dtoa_r+0x770>
 800693e:	4639      	mov	r1, r7
 8006940:	4632      	mov	r2, r6
 8006942:	4620      	mov	r0, r4
 8006944:	f001 fa7e 	bl	8007e44 <__pow5mult>
 8006948:	4652      	mov	r2, sl
 800694a:	4601      	mov	r1, r0
 800694c:	4607      	mov	r7, r0
 800694e:	4620      	mov	r0, r4
 8006950:	f001 f9eb 	bl	8007d2a <__multiply>
 8006954:	4651      	mov	r1, sl
 8006956:	4680      	mov	r8, r0
 8006958:	4620      	mov	r0, r4
 800695a:	f001 f93d 	bl	8007bd8 <_Bfree>
 800695e:	46c2      	mov	sl, r8
 8006960:	9b08      	ldr	r3, [sp, #32]
 8006962:	1b9a      	subs	r2, r3, r6
 8006964:	d004      	beq.n	8006970 <_dtoa_r+0x780>
 8006966:	4651      	mov	r1, sl
 8006968:	4620      	mov	r0, r4
 800696a:	f001 fa6b 	bl	8007e44 <__pow5mult>
 800696e:	4682      	mov	sl, r0
 8006970:	2101      	movs	r1, #1
 8006972:	4620      	mov	r0, r4
 8006974:	f001 f9d0 	bl	8007d18 <__i2b>
 8006978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697a:	2b00      	cmp	r3, #0
 800697c:	4606      	mov	r6, r0
 800697e:	f340 8083 	ble.w	8006a88 <_dtoa_r+0x898>
 8006982:	461a      	mov	r2, r3
 8006984:	4601      	mov	r1, r0
 8006986:	4620      	mov	r0, r4
 8006988:	f001 fa5c 	bl	8007e44 <__pow5mult>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b01      	cmp	r3, #1
 8006990:	4606      	mov	r6, r0
 8006992:	dd7c      	ble.n	8006a8e <_dtoa_r+0x89e>
 8006994:	f04f 0800 	mov.w	r8, #0
 8006998:	6933      	ldr	r3, [r6, #16]
 800699a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800699e:	6918      	ldr	r0, [r3, #16]
 80069a0:	f001 f96c 	bl	8007c7c <__hi0bits>
 80069a4:	f1c0 0020 	rsb	r0, r0, #32
 80069a8:	9b06      	ldr	r3, [sp, #24]
 80069aa:	4418      	add	r0, r3
 80069ac:	f010 001f 	ands.w	r0, r0, #31
 80069b0:	f000 8096 	beq.w	8006ae0 <_dtoa_r+0x8f0>
 80069b4:	f1c0 0320 	rsb	r3, r0, #32
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	f340 8087 	ble.w	8006acc <_dtoa_r+0x8dc>
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	f1c0 001c 	rsb	r0, r0, #28
 80069c4:	4403      	add	r3, r0
 80069c6:	9305      	str	r3, [sp, #20]
 80069c8:	9b06      	ldr	r3, [sp, #24]
 80069ca:	4405      	add	r5, r0
 80069cc:	4403      	add	r3, r0
 80069ce:	9306      	str	r3, [sp, #24]
 80069d0:	9b05      	ldr	r3, [sp, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd05      	ble.n	80069e2 <_dtoa_r+0x7f2>
 80069d6:	4651      	mov	r1, sl
 80069d8:	461a      	mov	r2, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	f001 fa80 	bl	8007ee0 <__lshift>
 80069e0:	4682      	mov	sl, r0
 80069e2:	9b06      	ldr	r3, [sp, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd05      	ble.n	80069f4 <_dtoa_r+0x804>
 80069e8:	4631      	mov	r1, r6
 80069ea:	461a      	mov	r2, r3
 80069ec:	4620      	mov	r0, r4
 80069ee:	f001 fa77 	bl	8007ee0 <__lshift>
 80069f2:	4606      	mov	r6, r0
 80069f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d074      	beq.n	8006ae4 <_dtoa_r+0x8f4>
 80069fa:	4631      	mov	r1, r6
 80069fc:	4650      	mov	r0, sl
 80069fe:	f001 fac0 	bl	8007f82 <__mcmp>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	da6e      	bge.n	8006ae4 <_dtoa_r+0x8f4>
 8006a06:	2300      	movs	r3, #0
 8006a08:	4651      	mov	r1, sl
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f001 f8fa 	bl	8007c06 <__multadd>
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a18:	4682      	mov	sl, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 81a8 	beq.w	8006d70 <_dtoa_r+0xb80>
 8006a20:	2300      	movs	r3, #0
 8006a22:	4639      	mov	r1, r7
 8006a24:	220a      	movs	r2, #10
 8006a26:	4620      	mov	r0, r4
 8006a28:	f001 f8ed 	bl	8007c06 <__multadd>
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	4607      	mov	r7, r0
 8006a32:	f300 80c8 	bgt.w	8006bc6 <_dtoa_r+0x9d6>
 8006a36:	9b07      	ldr	r3, [sp, #28]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f340 80c4 	ble.w	8006bc6 <_dtoa_r+0x9d6>
 8006a3e:	e059      	b.n	8006af4 <_dtoa_r+0x904>
 8006a40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a46:	e756      	b.n	80068f6 <_dtoa_r+0x706>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	1e5e      	subs	r6, r3, #1
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	42b3      	cmp	r3, r6
 8006a50:	bfbf      	itttt	lt
 8006a52:	9b08      	ldrlt	r3, [sp, #32]
 8006a54:	9608      	strlt	r6, [sp, #32]
 8006a56:	1af2      	sublt	r2, r6, r3
 8006a58:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006a5a:	bfb6      	itet	lt
 8006a5c:	189b      	addlt	r3, r3, r2
 8006a5e:	1b9e      	subge	r6, r3, r6
 8006a60:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	bfb8      	it	lt
 8006a66:	2600      	movlt	r6, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfb9      	ittee	lt
 8006a6c:	9b05      	ldrlt	r3, [sp, #20]
 8006a6e:	9a03      	ldrlt	r2, [sp, #12]
 8006a70:	9d05      	ldrge	r5, [sp, #20]
 8006a72:	9b03      	ldrge	r3, [sp, #12]
 8006a74:	bfbc      	itt	lt
 8006a76:	1a9d      	sublt	r5, r3, r2
 8006a78:	2300      	movlt	r3, #0
 8006a7a:	e73e      	b.n	80068fa <_dtoa_r+0x70a>
 8006a7c:	9e08      	ldr	r6, [sp, #32]
 8006a7e:	9d05      	ldr	r5, [sp, #20]
 8006a80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a82:	e745      	b.n	8006910 <_dtoa_r+0x720>
 8006a84:	9a08      	ldr	r2, [sp, #32]
 8006a86:	e76e      	b.n	8006966 <_dtoa_r+0x776>
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	dc19      	bgt.n	8006ac2 <_dtoa_r+0x8d2>
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	b9bb      	cbnz	r3, 8006ac2 <_dtoa_r+0x8d2>
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a98:	b99b      	cbnz	r3, 8006ac2 <_dtoa_r+0x8d2>
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa0:	0d1b      	lsrs	r3, r3, #20
 8006aa2:	051b      	lsls	r3, r3, #20
 8006aa4:	b183      	cbz	r3, 8006ac8 <_dtoa_r+0x8d8>
 8006aa6:	9b05      	ldr	r3, [sp, #20]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	9305      	str	r3, [sp, #20]
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	9306      	str	r3, [sp, #24]
 8006ab2:	f04f 0801 	mov.w	r8, #1
 8006ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af6d 	bne.w	8006998 <_dtoa_r+0x7a8>
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e772      	b.n	80069a8 <_dtoa_r+0x7b8>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	e7f6      	b.n	8006ab6 <_dtoa_r+0x8c6>
 8006ac8:	4698      	mov	r8, r3
 8006aca:	e7f4      	b.n	8006ab6 <_dtoa_r+0x8c6>
 8006acc:	d080      	beq.n	80069d0 <_dtoa_r+0x7e0>
 8006ace:	9a05      	ldr	r2, [sp, #20]
 8006ad0:	331c      	adds	r3, #28
 8006ad2:	441a      	add	r2, r3
 8006ad4:	9205      	str	r2, [sp, #20]
 8006ad6:	9a06      	ldr	r2, [sp, #24]
 8006ad8:	441a      	add	r2, r3
 8006ada:	441d      	add	r5, r3
 8006adc:	4613      	mov	r3, r2
 8006ade:	e776      	b.n	80069ce <_dtoa_r+0x7de>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	e7f4      	b.n	8006ace <_dtoa_r+0x8de>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dc36      	bgt.n	8006b58 <_dtoa_r+0x968>
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	dd33      	ble.n	8006b58 <_dtoa_r+0x968>
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	b963      	cbnz	r3, 8006b12 <_dtoa_r+0x922>
 8006af8:	4631      	mov	r1, r6
 8006afa:	2205      	movs	r2, #5
 8006afc:	4620      	mov	r0, r4
 8006afe:	f001 f882 	bl	8007c06 <__multadd>
 8006b02:	4601      	mov	r1, r0
 8006b04:	4606      	mov	r6, r0
 8006b06:	4650      	mov	r0, sl
 8006b08:	f001 fa3b 	bl	8007f82 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f73f adb6 	bgt.w	800667e <_dtoa_r+0x48e>
 8006b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b14:	9d02      	ldr	r5, [sp, #8]
 8006b16:	ea6f 0b03 	mvn.w	fp, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9303      	str	r3, [sp, #12]
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4620      	mov	r0, r4
 8006b22:	f001 f859 	bl	8007bd8 <_Bfree>
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	f43f aea6 	beq.w	8006878 <_dtoa_r+0x688>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	b12b      	cbz	r3, 8006b3c <_dtoa_r+0x94c>
 8006b30:	42bb      	cmp	r3, r7
 8006b32:	d003      	beq.n	8006b3c <_dtoa_r+0x94c>
 8006b34:	4619      	mov	r1, r3
 8006b36:	4620      	mov	r0, r4
 8006b38:	f001 f84e 	bl	8007bd8 <_Bfree>
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f001 f84a 	bl	8007bd8 <_Bfree>
 8006b44:	e698      	b.n	8006878 <_dtoa_r+0x688>
 8006b46:	2600      	movs	r6, #0
 8006b48:	4637      	mov	r7, r6
 8006b4a:	e7e2      	b.n	8006b12 <_dtoa_r+0x922>
 8006b4c:	46bb      	mov	fp, r7
 8006b4e:	4637      	mov	r7, r6
 8006b50:	e595      	b.n	800667e <_dtoa_r+0x48e>
 8006b52:	bf00      	nop
 8006b54:	40240000 	.word	0x40240000
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	bb93      	cbnz	r3, 8006bc2 <_dtoa_r+0x9d2>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	9d02      	ldr	r5, [sp, #8]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4650      	mov	r0, sl
 8006b66:	f7ff fab5 	bl	80060d4 <quorem>
 8006b6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b6e:	f805 9b01 	strb.w	r9, [r5], #1
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	9a04      	ldr	r2, [sp, #16]
 8006b76:	1aeb      	subs	r3, r5, r3
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	f300 80dc 	bgt.w	8006d36 <_dtoa_r+0xb46>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	2a01      	cmp	r2, #1
 8006b82:	bfac      	ite	ge
 8006b84:	189b      	addge	r3, r3, r2
 8006b86:	3301      	addlt	r3, #1
 8006b88:	4698      	mov	r8, r3
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9303      	str	r3, [sp, #12]
 8006b8e:	4651      	mov	r1, sl
 8006b90:	2201      	movs	r2, #1
 8006b92:	4620      	mov	r0, r4
 8006b94:	f001 f9a4 	bl	8007ee0 <__lshift>
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4682      	mov	sl, r0
 8006b9c:	f001 f9f1 	bl	8007f82 <__mcmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f300 808d 	bgt.w	8006cc0 <_dtoa_r+0xad0>
 8006ba6:	d103      	bne.n	8006bb0 <_dtoa_r+0x9c0>
 8006ba8:	f019 0f01 	tst.w	r9, #1
 8006bac:	f040 8088 	bne.w	8006cc0 <_dtoa_r+0xad0>
 8006bb0:	4645      	mov	r5, r8
 8006bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bb6:	2b30      	cmp	r3, #48	; 0x30
 8006bb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bbc:	d1af      	bne.n	8006b1e <_dtoa_r+0x92e>
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	e7f7      	b.n	8006bb2 <_dtoa_r+0x9c2>
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	dd05      	ble.n	8006bd6 <_dtoa_r+0x9e6>
 8006bca:	4639      	mov	r1, r7
 8006bcc:	462a      	mov	r2, r5
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f001 f986 	bl	8007ee0 <__lshift>
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	f1b8 0f00 	cmp.w	r8, #0
 8006bda:	d04c      	beq.n	8006c76 <_dtoa_r+0xa86>
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 ffc6 	bl	8007b70 <_Balloc>
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	3202      	adds	r2, #2
 8006be8:	4605      	mov	r5, r0
 8006bea:	0092      	lsls	r2, r2, #2
 8006bec:	f107 010c 	add.w	r1, r7, #12
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f000 ff83 	bl	8007afc <memcpy>
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f001 f970 	bl	8007ee0 <__lshift>
 8006c00:	9b00      	ldr	r3, [sp, #0]
 8006c02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c06:	9703      	str	r7, [sp, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	4631      	mov	r1, r6
 8006c12:	4650      	mov	r0, sl
 8006c14:	f7ff fa5e 	bl	80060d4 <quorem>
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c20:	4650      	mov	r0, sl
 8006c22:	f001 f9ae 	bl	8007f82 <__mcmp>
 8006c26:	463a      	mov	r2, r7
 8006c28:	9000      	str	r0, [sp, #0]
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f001 f9c2 	bl	8007fb6 <__mdiff>
 8006c32:	68c3      	ldr	r3, [r0, #12]
 8006c34:	4602      	mov	r2, r0
 8006c36:	bb03      	cbnz	r3, 8006c7a <_dtoa_r+0xa8a>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	9006      	str	r0, [sp, #24]
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f001 f9a0 	bl	8007f82 <__mcmp>
 8006c42:	9a06      	ldr	r2, [sp, #24]
 8006c44:	4603      	mov	r3, r0
 8006c46:	4611      	mov	r1, r2
 8006c48:	4620      	mov	r0, r4
 8006c4a:	9306      	str	r3, [sp, #24]
 8006c4c:	f000 ffc4 	bl	8007bd8 <_Bfree>
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	b9a3      	cbnz	r3, 8006c7e <_dtoa_r+0xa8e>
 8006c54:	9a07      	ldr	r2, [sp, #28]
 8006c56:	b992      	cbnz	r2, 8006c7e <_dtoa_r+0xa8e>
 8006c58:	9a05      	ldr	r2, [sp, #20]
 8006c5a:	b982      	cbnz	r2, 8006c7e <_dtoa_r+0xa8e>
 8006c5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c60:	d029      	beq.n	8006cb6 <_dtoa_r+0xac6>
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd01      	ble.n	8006c6c <_dtoa_r+0xa7c>
 8006c68:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006c6c:	f108 0501 	add.w	r5, r8, #1
 8006c70:	f888 9000 	strb.w	r9, [r8]
 8006c74:	e753      	b.n	8006b1e <_dtoa_r+0x92e>
 8006c76:	4638      	mov	r0, r7
 8006c78:	e7c2      	b.n	8006c00 <_dtoa_r+0xa10>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e7e3      	b.n	8006c46 <_dtoa_r+0xa56>
 8006c7e:	9a00      	ldr	r2, [sp, #0]
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	db04      	blt.n	8006c8e <_dtoa_r+0xa9e>
 8006c84:	d125      	bne.n	8006cd2 <_dtoa_r+0xae2>
 8006c86:	9a07      	ldr	r2, [sp, #28]
 8006c88:	bb1a      	cbnz	r2, 8006cd2 <_dtoa_r+0xae2>
 8006c8a:	9a05      	ldr	r2, [sp, #20]
 8006c8c:	bb0a      	cbnz	r2, 8006cd2 <_dtoa_r+0xae2>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	ddec      	ble.n	8006c6c <_dtoa_r+0xa7c>
 8006c92:	4651      	mov	r1, sl
 8006c94:	2201      	movs	r2, #1
 8006c96:	4620      	mov	r0, r4
 8006c98:	f001 f922 	bl	8007ee0 <__lshift>
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	f001 f96f 	bl	8007f82 <__mcmp>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dc03      	bgt.n	8006cb0 <_dtoa_r+0xac0>
 8006ca8:	d1e0      	bne.n	8006c6c <_dtoa_r+0xa7c>
 8006caa:	f019 0f01 	tst.w	r9, #1
 8006cae:	d0dd      	beq.n	8006c6c <_dtoa_r+0xa7c>
 8006cb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cb4:	d1d8      	bne.n	8006c68 <_dtoa_r+0xa78>
 8006cb6:	2339      	movs	r3, #57	; 0x39
 8006cb8:	f888 3000 	strb.w	r3, [r8]
 8006cbc:	f108 0801 	add.w	r8, r8, #1
 8006cc0:	4645      	mov	r5, r8
 8006cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cc6:	2b39      	cmp	r3, #57	; 0x39
 8006cc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ccc:	d03b      	beq.n	8006d46 <_dtoa_r+0xb56>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	e040      	b.n	8006d54 <_dtoa_r+0xb64>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f108 0501 	add.w	r5, r8, #1
 8006cd8:	dd05      	ble.n	8006ce6 <_dtoa_r+0xaf6>
 8006cda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cde:	d0ea      	beq.n	8006cb6 <_dtoa_r+0xac6>
 8006ce0:	f109 0901 	add.w	r9, r9, #1
 8006ce4:	e7c4      	b.n	8006c70 <_dtoa_r+0xa80>
 8006ce6:	9b02      	ldr	r3, [sp, #8]
 8006ce8:	9a04      	ldr	r2, [sp, #16]
 8006cea:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006cee:	1aeb      	subs	r3, r5, r3
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	46a8      	mov	r8, r5
 8006cf4:	f43f af4b 	beq.w	8006b8e <_dtoa_r+0x99e>
 8006cf8:	4651      	mov	r1, sl
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	220a      	movs	r2, #10
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 ff81 	bl	8007c06 <__multadd>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	9903      	ldr	r1, [sp, #12]
 8006d08:	42bb      	cmp	r3, r7
 8006d0a:	4682      	mov	sl, r0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	f04f 020a 	mov.w	r2, #10
 8006d14:	4620      	mov	r0, r4
 8006d16:	d104      	bne.n	8006d22 <_dtoa_r+0xb32>
 8006d18:	f000 ff75 	bl	8007c06 <__multadd>
 8006d1c:	9003      	str	r0, [sp, #12]
 8006d1e:	4607      	mov	r7, r0
 8006d20:	e776      	b.n	8006c10 <_dtoa_r+0xa20>
 8006d22:	f000 ff70 	bl	8007c06 <__multadd>
 8006d26:	2300      	movs	r3, #0
 8006d28:	9003      	str	r0, [sp, #12]
 8006d2a:	220a      	movs	r2, #10
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 ff69 	bl	8007c06 <__multadd>
 8006d34:	e7f3      	b.n	8006d1e <_dtoa_r+0xb2e>
 8006d36:	4651      	mov	r1, sl
 8006d38:	2300      	movs	r3, #0
 8006d3a:	220a      	movs	r2, #10
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 ff62 	bl	8007c06 <__multadd>
 8006d42:	4682      	mov	sl, r0
 8006d44:	e70d      	b.n	8006b62 <_dtoa_r+0x972>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d105      	bne.n	8006d58 <_dtoa_r+0xb68>
 8006d4c:	9a02      	ldr	r2, [sp, #8]
 8006d4e:	f10b 0b01 	add.w	fp, fp, #1
 8006d52:	2331      	movs	r3, #49	; 0x31
 8006d54:	7013      	strb	r3, [r2, #0]
 8006d56:	e6e2      	b.n	8006b1e <_dtoa_r+0x92e>
 8006d58:	4615      	mov	r5, r2
 8006d5a:	e7b2      	b.n	8006cc2 <_dtoa_r+0xad2>
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <_dtoa_r+0xb94>)
 8006d5e:	f7ff baae 	b.w	80062be <_dtoa_r+0xce>
 8006d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f47f aa88 	bne.w	800627a <_dtoa_r+0x8a>
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <_dtoa_r+0xb98>)
 8006d6c:	f7ff baa7 	b.w	80062be <_dtoa_r+0xce>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f73f aef4 	bgt.w	8006b60 <_dtoa_r+0x970>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f77f aef0 	ble.w	8006b60 <_dtoa_r+0x970>
 8006d80:	e6b8      	b.n	8006af4 <_dtoa_r+0x904>
 8006d82:	bf00      	nop
 8006d84:	08008b66 	.word	0x08008b66
 8006d88:	08008ba8 	.word	0x08008ba8

08006d8c <__sflush_r>:
 8006d8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d90:	b293      	uxth	r3, r2
 8006d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	4605      	mov	r5, r0
 8006d98:	0718      	lsls	r0, r3, #28
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	d461      	bmi.n	8006e62 <__sflush_r+0xd6>
 8006d9e:	684b      	ldr	r3, [r1, #4]
 8006da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	818a      	strh	r2, [r1, #12]
 8006da8:	dc05      	bgt.n	8006db6 <__sflush_r+0x2a>
 8006daa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dc02      	bgt.n	8006db6 <__sflush_r+0x2a>
 8006db0:	2000      	movs	r0, #0
 8006db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db8:	2e00      	cmp	r6, #0
 8006dba:	d0f9      	beq.n	8006db0 <__sflush_r+0x24>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dc2:	682f      	ldr	r7, [r5, #0]
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	d037      	beq.n	8006e38 <__sflush_r+0xac>
 8006dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	075a      	lsls	r2, r3, #29
 8006dce:	d505      	bpl.n	8006ddc <__sflush_r+0x50>
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	1ac0      	subs	r0, r0, r3
 8006dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dd6:	b10b      	cbz	r3, 8006ddc <__sflush_r+0x50>
 8006dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dda:	1ac0      	subs	r0, r0, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4602      	mov	r2, r0
 8006de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de2:	6a21      	ldr	r1, [r4, #32]
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b0      	blx	r6
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	d106      	bne.n	8006dfc <__sflush_r+0x70>
 8006dee:	6829      	ldr	r1, [r5, #0]
 8006df0:	291d      	cmp	r1, #29
 8006df2:	d84f      	bhi.n	8006e94 <__sflush_r+0x108>
 8006df4:	4a2d      	ldr	r2, [pc, #180]	; (8006eac <__sflush_r+0x120>)
 8006df6:	40ca      	lsrs	r2, r1
 8006df8:	07d6      	lsls	r6, r2, #31
 8006dfa:	d54b      	bpl.n	8006e94 <__sflush_r+0x108>
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e00:	b21b      	sxth	r3, r3
 8006e02:	2200      	movs	r2, #0
 8006e04:	6062      	str	r2, [r4, #4]
 8006e06:	04d9      	lsls	r1, r3, #19
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	6022      	str	r2, [r4, #0]
 8006e0e:	d504      	bpl.n	8006e1a <__sflush_r+0x8e>
 8006e10:	1c42      	adds	r2, r0, #1
 8006e12:	d101      	bne.n	8006e18 <__sflush_r+0x8c>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b903      	cbnz	r3, 8006e1a <__sflush_r+0x8e>
 8006e18:	6560      	str	r0, [r4, #84]	; 0x54
 8006e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e1c:	602f      	str	r7, [r5, #0]
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d0c6      	beq.n	8006db0 <__sflush_r+0x24>
 8006e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e26:	4299      	cmp	r1, r3
 8006e28:	d002      	beq.n	8006e30 <__sflush_r+0xa4>
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f9aa 	bl	8007184 <_free_r>
 8006e30:	2000      	movs	r0, #0
 8006e32:	6360      	str	r0, [r4, #52]	; 0x34
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	6a21      	ldr	r1, [r4, #32]
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b0      	blx	r6
 8006e40:	1c41      	adds	r1, r0, #1
 8006e42:	d1c2      	bne.n	8006dca <__sflush_r+0x3e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0bf      	beq.n	8006dca <__sflush_r+0x3e>
 8006e4a:	2b1d      	cmp	r3, #29
 8006e4c:	d001      	beq.n	8006e52 <__sflush_r+0xc6>
 8006e4e:	2b16      	cmp	r3, #22
 8006e50:	d101      	bne.n	8006e56 <__sflush_r+0xca>
 8006e52:	602f      	str	r7, [r5, #0]
 8006e54:	e7ac      	b.n	8006db0 <__sflush_r+0x24>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e62:	690f      	ldr	r7, [r1, #16]
 8006e64:	2f00      	cmp	r7, #0
 8006e66:	d0a3      	beq.n	8006db0 <__sflush_r+0x24>
 8006e68:	079b      	lsls	r3, r3, #30
 8006e6a:	680e      	ldr	r6, [r1, #0]
 8006e6c:	bf08      	it	eq
 8006e6e:	694b      	ldreq	r3, [r1, #20]
 8006e70:	600f      	str	r7, [r1, #0]
 8006e72:	bf18      	it	ne
 8006e74:	2300      	movne	r3, #0
 8006e76:	eba6 0807 	sub.w	r8, r6, r7
 8006e7a:	608b      	str	r3, [r1, #8]
 8006e7c:	f1b8 0f00 	cmp.w	r8, #0
 8006e80:	dd96      	ble.n	8006db0 <__sflush_r+0x24>
 8006e82:	4643      	mov	r3, r8
 8006e84:	463a      	mov	r2, r7
 8006e86:	6a21      	ldr	r1, [r4, #32]
 8006e88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b0      	blx	r6
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	dc07      	bgt.n	8006ea2 <__sflush_r+0x116>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea2:	4407      	add	r7, r0
 8006ea4:	eba8 0800 	sub.w	r8, r8, r0
 8006ea8:	e7e8      	b.n	8006e7c <__sflush_r+0xf0>
 8006eaa:	bf00      	nop
 8006eac:	20400001 	.word	0x20400001

08006eb0 <_fflush_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	690b      	ldr	r3, [r1, #16]
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	b913      	cbnz	r3, 8006ec0 <_fflush_r+0x10>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	b118      	cbz	r0, 8006eca <_fflush_r+0x1a>
 8006ec2:	6983      	ldr	r3, [r0, #24]
 8006ec4:	b90b      	cbnz	r3, 8006eca <_fflush_r+0x1a>
 8006ec6:	f000 f887 	bl	8006fd8 <__sinit>
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <_fflush_r+0x6c>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	d11b      	bne.n	8006f08 <_fflush_r+0x58>
 8006ed0:	686c      	ldr	r4, [r5, #4]
 8006ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ef      	beq.n	8006eba <_fflush_r+0xa>
 8006eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006edc:	07d0      	lsls	r0, r2, #31
 8006ede:	d404      	bmi.n	8006eea <_fflush_r+0x3a>
 8006ee0:	0599      	lsls	r1, r3, #22
 8006ee2:	d402      	bmi.n	8006eea <_fflush_r+0x3a>
 8006ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ee6:	f000 fb85 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8006eea:	4628      	mov	r0, r5
 8006eec:	4621      	mov	r1, r4
 8006eee:	f7ff ff4d 	bl	8006d8c <__sflush_r>
 8006ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef4:	07da      	lsls	r2, r3, #31
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	d4e0      	bmi.n	8006ebc <_fflush_r+0xc>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	d4dd      	bmi.n	8006ebc <_fflush_r+0xc>
 8006f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f02:	f000 fb78 	bl	80075f6 <__retarget_lock_release_recursive>
 8006f06:	e7d9      	b.n	8006ebc <_fflush_r+0xc>
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <_fflush_r+0x70>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <_fflush_r+0x62>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7df      	b.n	8006ed2 <_fflush_r+0x22>
 8006f12:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <_fflush_r+0x74>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7da      	b.n	8006ed2 <_fflush_r+0x22>
 8006f1c:	08008bd8 	.word	0x08008bd8
 8006f20:	08008bf8 	.word	0x08008bf8
 8006f24:	08008bb8 	.word	0x08008bb8

08006f28 <_cleanup_r>:
 8006f28:	4901      	ldr	r1, [pc, #4]	; (8006f30 <_cleanup_r+0x8>)
 8006f2a:	f000 bb35 	b.w	8007598 <_fwalk_reent>
 8006f2e:	bf00      	nop
 8006f30:	080086b5 	.word	0x080086b5

08006f34 <std.isra.0>:
 8006f34:	2300      	movs	r3, #0
 8006f36:	b510      	push	{r4, lr}
 8006f38:	4604      	mov	r4, r0
 8006f3a:	6003      	str	r3, [r0, #0]
 8006f3c:	6043      	str	r3, [r0, #4]
 8006f3e:	6083      	str	r3, [r0, #8]
 8006f40:	8181      	strh	r1, [r0, #12]
 8006f42:	6643      	str	r3, [r0, #100]	; 0x64
 8006f44:	81c2      	strh	r2, [r0, #14]
 8006f46:	6103      	str	r3, [r0, #16]
 8006f48:	6143      	str	r3, [r0, #20]
 8006f4a:	6183      	str	r3, [r0, #24]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	2208      	movs	r2, #8
 8006f50:	305c      	adds	r0, #92	; 0x5c
 8006f52:	f000 fdf8 	bl	8007b46 <memset>
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <std.isra.0+0x38>)
 8006f58:	6263      	str	r3, [r4, #36]	; 0x24
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <std.isra.0+0x3c>)
 8006f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std.isra.0+0x40>)
 8006f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std.isra.0+0x44>)
 8006f64:	6224      	str	r4, [r4, #32]
 8006f66:	6323      	str	r3, [r4, #48]	; 0x30
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08008431 	.word	0x08008431
 8006f70:	08008453 	.word	0x08008453
 8006f74:	0800848b 	.word	0x0800848b
 8006f78:	080084af 	.word	0x080084af

08006f7c <__sfmoreglue>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	1e4a      	subs	r2, r1, #1
 8006f80:	2568      	movs	r5, #104	; 0x68
 8006f82:	4355      	muls	r5, r2
 8006f84:	460e      	mov	r6, r1
 8006f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f8a:	f000 fba9 	bl	80076e0 <_malloc_r>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b140      	cbz	r0, 8006fa4 <__sfmoreglue+0x28>
 8006f92:	2100      	movs	r1, #0
 8006f94:	e880 0042 	stmia.w	r0, {r1, r6}
 8006f98:	300c      	adds	r0, #12
 8006f9a:	60a0      	str	r0, [r4, #8]
 8006f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fa0:	f000 fdd1 	bl	8007b46 <memset>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}

08006fa8 <__sfp_lock_acquire>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__sfp_lock_acquire+0x8>)
 8006faa:	f000 bb23 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	200007f8 	.word	0x200007f8

08006fb4 <__sfp_lock_release>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__sfp_lock_release+0x8>)
 8006fb6:	f000 bb1e 	b.w	80075f6 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200007f8 	.word	0x200007f8

08006fc0 <__sinit_lock_acquire>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__sinit_lock_acquire+0x8>)
 8006fc2:	f000 bb17 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	200007f3 	.word	0x200007f3

08006fcc <__sinit_lock_release>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__sinit_lock_release+0x8>)
 8006fce:	f000 bb12 	b.w	80075f6 <__retarget_lock_release_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	200007f3 	.word	0x200007f3

08006fd8 <__sinit>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	f7ff fff0 	bl	8006fc0 <__sinit_lock_acquire>
 8006fe0:	69a3      	ldr	r3, [r4, #24]
 8006fe2:	b11b      	cbz	r3, 8006fec <__sinit+0x14>
 8006fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe8:	f7ff bff0 	b.w	8006fcc <__sinit_lock_release>
 8006fec:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006ff0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8006ff4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <__sinit+0x6c>)
 8006ffa:	4a13      	ldr	r2, [pc, #76]	; (8007048 <__sinit+0x70>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	62a2      	str	r2, [r4, #40]	; 0x28
 8007000:	429c      	cmp	r4, r3
 8007002:	bf04      	itt	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	61a3      	streq	r3, [r4, #24]
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f81f 	bl	800704c <__sfp>
 800700e:	6060      	str	r0, [r4, #4]
 8007010:	4620      	mov	r0, r4
 8007012:	f000 f81b 	bl	800704c <__sfp>
 8007016:	60a0      	str	r0, [r4, #8]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 f817 	bl	800704c <__sfp>
 800701e:	2200      	movs	r2, #0
 8007020:	60e0      	str	r0, [r4, #12]
 8007022:	2104      	movs	r1, #4
 8007024:	6860      	ldr	r0, [r4, #4]
 8007026:	f7ff ff85 	bl	8006f34 <std.isra.0>
 800702a:	2201      	movs	r2, #1
 800702c:	2109      	movs	r1, #9
 800702e:	68a0      	ldr	r0, [r4, #8]
 8007030:	f7ff ff80 	bl	8006f34 <std.isra.0>
 8007034:	2202      	movs	r2, #2
 8007036:	2112      	movs	r1, #18
 8007038:	68e0      	ldr	r0, [r4, #12]
 800703a:	f7ff ff7b 	bl	8006f34 <std.isra.0>
 800703e:	2301      	movs	r3, #1
 8007040:	61a3      	str	r3, [r4, #24]
 8007042:	e7cf      	b.n	8006fe4 <__sinit+0xc>
 8007044:	08008c18 	.word	0x08008c18
 8007048:	08006f29 	.word	0x08006f29

0800704c <__sfp>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	4607      	mov	r7, r0
 8007050:	f7ff ffaa 	bl	8006fa8 <__sfp_lock_acquire>
 8007054:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <__sfp+0x88>)
 8007056:	681e      	ldr	r6, [r3, #0]
 8007058:	69b3      	ldr	r3, [r6, #24]
 800705a:	b913      	cbnz	r3, 8007062 <__sfp+0x16>
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff ffbb 	bl	8006fd8 <__sinit>
 8007062:	36d8      	adds	r6, #216	; 0xd8
 8007064:	68b4      	ldr	r4, [r6, #8]
 8007066:	6873      	ldr	r3, [r6, #4]
 8007068:	3b01      	subs	r3, #1
 800706a:	d503      	bpl.n	8007074 <__sfp+0x28>
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	b133      	cbz	r3, 800707e <__sfp+0x32>
 8007070:	6836      	ldr	r6, [r6, #0]
 8007072:	e7f7      	b.n	8007064 <__sfp+0x18>
 8007074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007078:	b17d      	cbz	r5, 800709a <__sfp+0x4e>
 800707a:	3468      	adds	r4, #104	; 0x68
 800707c:	e7f4      	b.n	8007068 <__sfp+0x1c>
 800707e:	2104      	movs	r1, #4
 8007080:	4638      	mov	r0, r7
 8007082:	f7ff ff7b 	bl	8006f7c <__sfmoreglue>
 8007086:	4604      	mov	r4, r0
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	2800      	cmp	r0, #0
 800708c:	d1f0      	bne.n	8007070 <__sfp+0x24>
 800708e:	f7ff ff91 	bl	8006fb4 <__sfp_lock_release>
 8007092:	230c      	movs	r3, #12
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4620      	mov	r0, r4
 8007098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800709e:	81e3      	strh	r3, [r4, #14]
 80070a0:	2301      	movs	r3, #1
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070a8:	6665      	str	r5, [r4, #100]	; 0x64
 80070aa:	f000 faa1 	bl	80075f0 <__retarget_lock_init_recursive>
 80070ae:	f7ff ff81 	bl	8006fb4 <__sfp_lock_release>
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	6065      	str	r5, [r4, #4]
 80070b8:	6125      	str	r5, [r4, #16]
 80070ba:	6165      	str	r5, [r4, #20]
 80070bc:	61a5      	str	r5, [r4, #24]
 80070be:	2208      	movs	r2, #8
 80070c0:	4629      	mov	r1, r5
 80070c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070c6:	f000 fd3e 	bl	8007b46 <memset>
 80070ca:	6365      	str	r5, [r4, #52]	; 0x34
 80070cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80070ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80070d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80070d2:	e7e0      	b.n	8007096 <__sfp+0x4a>
 80070d4:	08008c18 	.word	0x08008c18

080070d8 <_malloc_trim_r>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	4f25      	ldr	r7, [pc, #148]	; (8007174 <_malloc_trim_r+0x9c>)
 80070de:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007180 <_malloc_trim_r+0xa8>
 80070e2:	4689      	mov	r9, r1
 80070e4:	4606      	mov	r6, r0
 80070e6:	f000 fd37 	bl	8007b58 <__malloc_lock>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	685d      	ldr	r5, [r3, #4]
 80070ee:	f1a8 0411 	sub.w	r4, r8, #17
 80070f2:	f025 0503 	bic.w	r5, r5, #3
 80070f6:	eba4 0409 	sub.w	r4, r4, r9
 80070fa:	442c      	add	r4, r5
 80070fc:	fbb4 f4f8 	udiv	r4, r4, r8
 8007100:	3c01      	subs	r4, #1
 8007102:	fb08 f404 	mul.w	r4, r8, r4
 8007106:	4544      	cmp	r4, r8
 8007108:	da05      	bge.n	8007116 <_malloc_trim_r+0x3e>
 800710a:	4630      	mov	r0, r6
 800710c:	f000 fd2a 	bl	8007b64 <__malloc_unlock>
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	2100      	movs	r1, #0
 8007118:	4630      	mov	r0, r6
 800711a:	f001 f979 	bl	8008410 <_sbrk_r>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	442b      	add	r3, r5
 8007122:	4298      	cmp	r0, r3
 8007124:	d1f1      	bne.n	800710a <_malloc_trim_r+0x32>
 8007126:	4261      	negs	r1, r4
 8007128:	4630      	mov	r0, r6
 800712a:	f001 f971 	bl	8008410 <_sbrk_r>
 800712e:	3001      	adds	r0, #1
 8007130:	d110      	bne.n	8007154 <_malloc_trim_r+0x7c>
 8007132:	2100      	movs	r1, #0
 8007134:	4630      	mov	r0, r6
 8007136:	f001 f96b 	bl	8008410 <_sbrk_r>
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	1a83      	subs	r3, r0, r2
 800713e:	2b0f      	cmp	r3, #15
 8007140:	dde3      	ble.n	800710a <_malloc_trim_r+0x32>
 8007142:	490d      	ldr	r1, [pc, #52]	; (8007178 <_malloc_trim_r+0xa0>)
 8007144:	6809      	ldr	r1, [r1, #0]
 8007146:	1a40      	subs	r0, r0, r1
 8007148:	490c      	ldr	r1, [pc, #48]	; (800717c <_malloc_trim_r+0xa4>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6008      	str	r0, [r1, #0]
 8007150:	6053      	str	r3, [r2, #4]
 8007152:	e7da      	b.n	800710a <_malloc_trim_r+0x32>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <_malloc_trim_r+0xa4>)
 8007158:	1b2d      	subs	r5, r5, r4
 800715a:	f045 0501 	orr.w	r5, r5, #1
 800715e:	605d      	str	r5, [r3, #4]
 8007160:	6813      	ldr	r3, [r2, #0]
 8007162:	4630      	mov	r0, r6
 8007164:	1b1c      	subs	r4, r3, r4
 8007166:	6014      	str	r4, [r2, #0]
 8007168:	f000 fcfc 	bl	8007b64 <__malloc_unlock>
 800716c:	2001      	movs	r0, #1
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	bf00      	nop
 8007174:	200000f8 	.word	0x200000f8
 8007178:	20000500 	.word	0x20000500
 800717c:	20000694 	.word	0x20000694
 8007180:	00000080 	.word	0x00000080

08007184 <_free_r>:
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	4688      	mov	r8, r1
 800718c:	2900      	cmp	r1, #0
 800718e:	f000 80ab 	beq.w	80072e8 <_free_r+0x164>
 8007192:	f000 fce1 	bl	8007b58 <__malloc_lock>
 8007196:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800719a:	4d54      	ldr	r5, [pc, #336]	; (80072ec <_free_r+0x168>)
 800719c:	f022 0001 	bic.w	r0, r2, #1
 80071a0:	f1a8 0308 	sub.w	r3, r8, #8
 80071a4:	181f      	adds	r7, r3, r0
 80071a6:	68a9      	ldr	r1, [r5, #8]
 80071a8:	687e      	ldr	r6, [r7, #4]
 80071aa:	428f      	cmp	r7, r1
 80071ac:	f026 0603 	bic.w	r6, r6, #3
 80071b0:	f002 0201 	and.w	r2, r2, #1
 80071b4:	d11b      	bne.n	80071ee <_free_r+0x6a>
 80071b6:	4430      	add	r0, r6
 80071b8:	b93a      	cbnz	r2, 80071ca <_free_r+0x46>
 80071ba:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	4410      	add	r0, r2
 80071c2:	6899      	ldr	r1, [r3, #8]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	60ca      	str	r2, [r1, #12]
 80071c8:	6091      	str	r1, [r2, #8]
 80071ca:	f040 0201 	orr.w	r2, r0, #1
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	60ab      	str	r3, [r5, #8]
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <_free_r+0x16c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4298      	cmp	r0, r3
 80071d8:	d304      	bcc.n	80071e4 <_free_r+0x60>
 80071da:	4b46      	ldr	r3, [pc, #280]	; (80072f4 <_free_r+0x170>)
 80071dc:	4620      	mov	r0, r4
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	f7ff ff7a 	bl	80070d8 <_malloc_trim_r>
 80071e4:	4620      	mov	r0, r4
 80071e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	f000 bcbb 	b.w	8007b64 <__malloc_unlock>
 80071ee:	607e      	str	r6, [r7, #4]
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d139      	bne.n	8007268 <_free_r+0xe4>
 80071f4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80071f8:	1a5b      	subs	r3, r3, r1
 80071fa:	4408      	add	r0, r1
 80071fc:	6899      	ldr	r1, [r3, #8]
 80071fe:	f105 0e08 	add.w	lr, r5, #8
 8007202:	4571      	cmp	r1, lr
 8007204:	d032      	beq.n	800726c <_free_r+0xe8>
 8007206:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800720a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800720e:	f8ce 1008 	str.w	r1, [lr, #8]
 8007212:	19b9      	adds	r1, r7, r6
 8007214:	6849      	ldr	r1, [r1, #4]
 8007216:	07c9      	lsls	r1, r1, #31
 8007218:	d40a      	bmi.n	8007230 <_free_r+0xac>
 800721a:	4430      	add	r0, r6
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	bb3a      	cbnz	r2, 8007270 <_free_r+0xec>
 8007220:	4e35      	ldr	r6, [pc, #212]	; (80072f8 <_free_r+0x174>)
 8007222:	42b1      	cmp	r1, r6
 8007224:	d124      	bne.n	8007270 <_free_r+0xec>
 8007226:	616b      	str	r3, [r5, #20]
 8007228:	612b      	str	r3, [r5, #16]
 800722a:	2201      	movs	r2, #1
 800722c:	60d9      	str	r1, [r3, #12]
 800722e:	6099      	str	r1, [r3, #8]
 8007230:	f040 0101 	orr.w	r1, r0, #1
 8007234:	6059      	str	r1, [r3, #4]
 8007236:	5018      	str	r0, [r3, r0]
 8007238:	2a00      	cmp	r2, #0
 800723a:	d1d3      	bne.n	80071e4 <_free_r+0x60>
 800723c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007240:	d21a      	bcs.n	8007278 <_free_r+0xf4>
 8007242:	08c0      	lsrs	r0, r0, #3
 8007244:	1081      	asrs	r1, r0, #2
 8007246:	2201      	movs	r2, #1
 8007248:	408a      	lsls	r2, r1
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	3001      	adds	r0, #1
 800724e:	430a      	orrs	r2, r1
 8007250:	606a      	str	r2, [r5, #4]
 8007252:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007256:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800725a:	6099      	str	r1, [r3, #8]
 800725c:	3a08      	subs	r2, #8
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007264:	60cb      	str	r3, [r1, #12]
 8007266:	e7bd      	b.n	80071e4 <_free_r+0x60>
 8007268:	2200      	movs	r2, #0
 800726a:	e7d2      	b.n	8007212 <_free_r+0x8e>
 800726c:	2201      	movs	r2, #1
 800726e:	e7d0      	b.n	8007212 <_free_r+0x8e>
 8007270:	68fe      	ldr	r6, [r7, #12]
 8007272:	60ce      	str	r6, [r1, #12]
 8007274:	60b1      	str	r1, [r6, #8]
 8007276:	e7db      	b.n	8007230 <_free_r+0xac>
 8007278:	0a42      	lsrs	r2, r0, #9
 800727a:	2a04      	cmp	r2, #4
 800727c:	d813      	bhi.n	80072a6 <_free_r+0x122>
 800727e:	0982      	lsrs	r2, r0, #6
 8007280:	3238      	adds	r2, #56	; 0x38
 8007282:	1c51      	adds	r1, r2, #1
 8007284:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007288:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800728c:	428e      	cmp	r6, r1
 800728e:	d124      	bne.n	80072da <_free_r+0x156>
 8007290:	2001      	movs	r0, #1
 8007292:	1092      	asrs	r2, r2, #2
 8007294:	fa00 f202 	lsl.w	r2, r0, r2
 8007298:	6868      	ldr	r0, [r5, #4]
 800729a:	4302      	orrs	r2, r0
 800729c:	606a      	str	r2, [r5, #4]
 800729e:	60de      	str	r6, [r3, #12]
 80072a0:	6099      	str	r1, [r3, #8]
 80072a2:	60b3      	str	r3, [r6, #8]
 80072a4:	e7de      	b.n	8007264 <_free_r+0xe0>
 80072a6:	2a14      	cmp	r2, #20
 80072a8:	d801      	bhi.n	80072ae <_free_r+0x12a>
 80072aa:	325b      	adds	r2, #91	; 0x5b
 80072ac:	e7e9      	b.n	8007282 <_free_r+0xfe>
 80072ae:	2a54      	cmp	r2, #84	; 0x54
 80072b0:	d802      	bhi.n	80072b8 <_free_r+0x134>
 80072b2:	0b02      	lsrs	r2, r0, #12
 80072b4:	326e      	adds	r2, #110	; 0x6e
 80072b6:	e7e4      	b.n	8007282 <_free_r+0xfe>
 80072b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80072bc:	d802      	bhi.n	80072c4 <_free_r+0x140>
 80072be:	0bc2      	lsrs	r2, r0, #15
 80072c0:	3277      	adds	r2, #119	; 0x77
 80072c2:	e7de      	b.n	8007282 <_free_r+0xfe>
 80072c4:	f240 5154 	movw	r1, #1364	; 0x554
 80072c8:	428a      	cmp	r2, r1
 80072ca:	bf9a      	itte	ls
 80072cc:	0c82      	lsrls	r2, r0, #18
 80072ce:	327c      	addls	r2, #124	; 0x7c
 80072d0:	227e      	movhi	r2, #126	; 0x7e
 80072d2:	e7d6      	b.n	8007282 <_free_r+0xfe>
 80072d4:	6889      	ldr	r1, [r1, #8]
 80072d6:	428e      	cmp	r6, r1
 80072d8:	d004      	beq.n	80072e4 <_free_r+0x160>
 80072da:	684a      	ldr	r2, [r1, #4]
 80072dc:	f022 0203 	bic.w	r2, r2, #3
 80072e0:	4290      	cmp	r0, r2
 80072e2:	d3f7      	bcc.n	80072d4 <_free_r+0x150>
 80072e4:	68ce      	ldr	r6, [r1, #12]
 80072e6:	e7da      	b.n	800729e <_free_r+0x11a>
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	200000f8 	.word	0x200000f8
 80072f0:	20000504 	.word	0x20000504
 80072f4:	200006c4 	.word	0x200006c4
 80072f8:	20000100 	.word	0x20000100

080072fc <__sfvwrite_r>:
 80072fc:	6893      	ldr	r3, [r2, #8]
 80072fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007302:	4607      	mov	r7, r0
 8007304:	460c      	mov	r4, r1
 8007306:	4690      	mov	r8, r2
 8007308:	b91b      	cbnz	r3, 8007312 <__sfvwrite_r+0x16>
 800730a:	2000      	movs	r0, #0
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007312:	898b      	ldrh	r3, [r1, #12]
 8007314:	0718      	lsls	r0, r3, #28
 8007316:	d526      	bpl.n	8007366 <__sfvwrite_r+0x6a>
 8007318:	690b      	ldr	r3, [r1, #16]
 800731a:	b323      	cbz	r3, 8007366 <__sfvwrite_r+0x6a>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f8d8 6000 	ldr.w	r6, [r8]
 8007322:	f013 0902 	ands.w	r9, r3, #2
 8007326:	d02d      	beq.n	8007384 <__sfvwrite_r+0x88>
 8007328:	f04f 0a00 	mov.w	sl, #0
 800732c:	f8df b264 	ldr.w	fp, [pc, #612]	; 8007594 <__sfvwrite_r+0x298>
 8007330:	46d1      	mov	r9, sl
 8007332:	f1b9 0f00 	cmp.w	r9, #0
 8007336:	d01f      	beq.n	8007378 <__sfvwrite_r+0x7c>
 8007338:	45d9      	cmp	r9, fp
 800733a:	464b      	mov	r3, r9
 800733c:	4652      	mov	r2, sl
 800733e:	bf28      	it	cs
 8007340:	465b      	movcs	r3, fp
 8007342:	6a21      	ldr	r1, [r4, #32]
 8007344:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007346:	4638      	mov	r0, r7
 8007348:	47a8      	blx	r5
 800734a:	2800      	cmp	r0, #0
 800734c:	f340 8089 	ble.w	8007462 <__sfvwrite_r+0x166>
 8007350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007354:	4482      	add	sl, r0
 8007356:	eba9 0900 	sub.w	r9, r9, r0
 800735a:	1a18      	subs	r0, r3, r0
 800735c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007360:	2800      	cmp	r0, #0
 8007362:	d1e6      	bne.n	8007332 <__sfvwrite_r+0x36>
 8007364:	e7d1      	b.n	800730a <__sfvwrite_r+0xe>
 8007366:	4621      	mov	r1, r4
 8007368:	4638      	mov	r0, r7
 800736a:	f7fe fe45 	bl	8005ff8 <__swsetup_r>
 800736e:	2800      	cmp	r0, #0
 8007370:	d0d4      	beq.n	800731c <__sfvwrite_r+0x20>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	e7c9      	b.n	800730c <__sfvwrite_r+0x10>
 8007378:	f8d6 a000 	ldr.w	sl, [r6]
 800737c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007380:	3608      	adds	r6, #8
 8007382:	e7d6      	b.n	8007332 <__sfvwrite_r+0x36>
 8007384:	f013 0301 	ands.w	r3, r3, #1
 8007388:	d043      	beq.n	8007412 <__sfvwrite_r+0x116>
 800738a:	4648      	mov	r0, r9
 800738c:	46ca      	mov	sl, r9
 800738e:	46cb      	mov	fp, r9
 8007390:	f1bb 0f00 	cmp.w	fp, #0
 8007394:	f000 80d9 	beq.w	800754a <__sfvwrite_r+0x24e>
 8007398:	b950      	cbnz	r0, 80073b0 <__sfvwrite_r+0xb4>
 800739a:	465a      	mov	r2, fp
 800739c:	210a      	movs	r1, #10
 800739e:	4650      	mov	r0, sl
 80073a0:	f7f8 ff1e 	bl	80001e0 <memchr>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f000 80d5 	beq.w	8007554 <__sfvwrite_r+0x258>
 80073aa:	3001      	adds	r0, #1
 80073ac:	eba0 090a 	sub.w	r9, r0, sl
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	6921      	ldr	r1, [r4, #16]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	45d9      	cmp	r9, fp
 80073b8:	464b      	mov	r3, r9
 80073ba:	bf28      	it	cs
 80073bc:	465b      	movcs	r3, fp
 80073be:	4288      	cmp	r0, r1
 80073c0:	f240 80cb 	bls.w	800755a <__sfvwrite_r+0x25e>
 80073c4:	68a5      	ldr	r5, [r4, #8]
 80073c6:	4415      	add	r5, r2
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	f340 80c6 	ble.w	800755a <__sfvwrite_r+0x25e>
 80073ce:	4651      	mov	r1, sl
 80073d0:	462a      	mov	r2, r5
 80073d2:	f000 fb9e 	bl	8007b12 <memmove>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	442b      	add	r3, r5
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	4621      	mov	r1, r4
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff fd66 	bl	8006eb0 <_fflush_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d13c      	bne.n	8007462 <__sfvwrite_r+0x166>
 80073e8:	ebb9 0905 	subs.w	r9, r9, r5
 80073ec:	f040 80cf 	bne.w	800758e <__sfvwrite_r+0x292>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff fd5c 	bl	8006eb0 <_fflush_r>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d132      	bne.n	8007462 <__sfvwrite_r+0x166>
 80073fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007400:	44aa      	add	sl, r5
 8007402:	ebab 0b05 	sub.w	fp, fp, r5
 8007406:	1b5d      	subs	r5, r3, r5
 8007408:	f8c8 5008 	str.w	r5, [r8, #8]
 800740c:	2d00      	cmp	r5, #0
 800740e:	d1bf      	bne.n	8007390 <__sfvwrite_r+0x94>
 8007410:	e77b      	b.n	800730a <__sfvwrite_r+0xe>
 8007412:	4699      	mov	r9, r3
 8007414:	469a      	mov	sl, r3
 8007416:	f1ba 0f00 	cmp.w	sl, #0
 800741a:	d027      	beq.n	800746c <__sfvwrite_r+0x170>
 800741c:	89a2      	ldrh	r2, [r4, #12]
 800741e:	68a5      	ldr	r5, [r4, #8]
 8007420:	0591      	lsls	r1, r2, #22
 8007422:	d565      	bpl.n	80074f0 <__sfvwrite_r+0x1f4>
 8007424:	45aa      	cmp	sl, r5
 8007426:	d33b      	bcc.n	80074a0 <__sfvwrite_r+0x1a4>
 8007428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800742c:	d036      	beq.n	800749c <__sfvwrite_r+0x1a0>
 800742e:	6921      	ldr	r1, [r4, #16]
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	1a5b      	subs	r3, r3, r1
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	6963      	ldr	r3, [r4, #20]
 8007438:	2002      	movs	r0, #2
 800743a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800743e:	fb93 fbf0 	sdiv	fp, r3, r0
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	1c58      	adds	r0, r3, #1
 8007446:	4450      	add	r0, sl
 8007448:	4583      	cmp	fp, r0
 800744a:	bf38      	it	cc
 800744c:	4683      	movcc	fp, r0
 800744e:	0553      	lsls	r3, r2, #21
 8007450:	d53e      	bpl.n	80074d0 <__sfvwrite_r+0x1d4>
 8007452:	4659      	mov	r1, fp
 8007454:	4638      	mov	r0, r7
 8007456:	f000 f943 	bl	80076e0 <_malloc_r>
 800745a:	4605      	mov	r5, r0
 800745c:	b950      	cbnz	r0, 8007474 <__sfvwrite_r+0x178>
 800745e:	230c      	movs	r3, #12
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	e782      	b.n	8007372 <__sfvwrite_r+0x76>
 800746c:	e896 0600 	ldmia.w	r6, {r9, sl}
 8007470:	3608      	adds	r6, #8
 8007472:	e7d0      	b.n	8007416 <__sfvwrite_r+0x11a>
 8007474:	9a01      	ldr	r2, [sp, #4]
 8007476:	6921      	ldr	r1, [r4, #16]
 8007478:	f000 fb40 	bl	8007afc <memcpy>
 800747c:	89a2      	ldrh	r2, [r4, #12]
 800747e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007486:	81a2      	strh	r2, [r4, #12]
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	6125      	str	r5, [r4, #16]
 800748c:	441d      	add	r5, r3
 800748e:	ebab 0303 	sub.w	r3, fp, r3
 8007492:	6025      	str	r5, [r4, #0]
 8007494:	f8c4 b014 	str.w	fp, [r4, #20]
 8007498:	4655      	mov	r5, sl
 800749a:	60a3      	str	r3, [r4, #8]
 800749c:	45aa      	cmp	sl, r5
 800749e:	d200      	bcs.n	80074a2 <__sfvwrite_r+0x1a6>
 80074a0:	4655      	mov	r5, sl
 80074a2:	462a      	mov	r2, r5
 80074a4:	4649      	mov	r1, r9
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	f000 fb33 	bl	8007b12 <memmove>
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	1b5b      	subs	r3, r3, r5
 80074b0:	60a3      	str	r3, [r4, #8]
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	441d      	add	r5, r3
 80074b6:	6025      	str	r5, [r4, #0]
 80074b8:	4655      	mov	r5, sl
 80074ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074be:	44a9      	add	r9, r5
 80074c0:	ebaa 0a05 	sub.w	sl, sl, r5
 80074c4:	1b5d      	subs	r5, r3, r5
 80074c6:	f8c8 5008 	str.w	r5, [r8, #8]
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	d1a3      	bne.n	8007416 <__sfvwrite_r+0x11a>
 80074ce:	e71c      	b.n	800730a <__sfvwrite_r+0xe>
 80074d0:	465a      	mov	r2, fp
 80074d2:	4638      	mov	r0, r7
 80074d4:	f000 fe1c 	bl	8008110 <_realloc_r>
 80074d8:	4605      	mov	r5, r0
 80074da:	2800      	cmp	r0, #0
 80074dc:	d1d4      	bne.n	8007488 <__sfvwrite_r+0x18c>
 80074de:	6921      	ldr	r1, [r4, #16]
 80074e0:	4638      	mov	r0, r7
 80074e2:	f7ff fe4f 	bl	8007184 <_free_r>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	e7b6      	b.n	800745e <__sfvwrite_r+0x162>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	4298      	cmp	r0, r3
 80074f6:	d802      	bhi.n	80074fe <__sfvwrite_r+0x202>
 80074f8:	6962      	ldr	r2, [r4, #20]
 80074fa:	4592      	cmp	sl, r2
 80074fc:	d215      	bcs.n	800752a <__sfvwrite_r+0x22e>
 80074fe:	4555      	cmp	r5, sl
 8007500:	bf28      	it	cs
 8007502:	4655      	movcs	r5, sl
 8007504:	462a      	mov	r2, r5
 8007506:	4649      	mov	r1, r9
 8007508:	f000 fb03 	bl	8007b12 <memmove>
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	1b5b      	subs	r3, r3, r5
 8007512:	442a      	add	r2, r5
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1ce      	bne.n	80074ba <__sfvwrite_r+0x1be>
 800751c:	4621      	mov	r1, r4
 800751e:	4638      	mov	r0, r7
 8007520:	f7ff fcc6 	bl	8006eb0 <_fflush_r>
 8007524:	2800      	cmp	r0, #0
 8007526:	d0c8      	beq.n	80074ba <__sfvwrite_r+0x1be>
 8007528:	e79b      	b.n	8007462 <__sfvwrite_r+0x166>
 800752a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800752e:	4553      	cmp	r3, sl
 8007530:	bf28      	it	cs
 8007532:	4653      	movcs	r3, sl
 8007534:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007536:	fb93 f3f2 	sdiv	r3, r3, r2
 800753a:	6a21      	ldr	r1, [r4, #32]
 800753c:	4353      	muls	r3, r2
 800753e:	4638      	mov	r0, r7
 8007540:	464a      	mov	r2, r9
 8007542:	47a8      	blx	r5
 8007544:	1e05      	subs	r5, r0, #0
 8007546:	dcb8      	bgt.n	80074ba <__sfvwrite_r+0x1be>
 8007548:	e78b      	b.n	8007462 <__sfvwrite_r+0x166>
 800754a:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800754e:	2000      	movs	r0, #0
 8007550:	3608      	adds	r6, #8
 8007552:	e71d      	b.n	8007390 <__sfvwrite_r+0x94>
 8007554:	f10b 0901 	add.w	r9, fp, #1
 8007558:	e72a      	b.n	80073b0 <__sfvwrite_r+0xb4>
 800755a:	4293      	cmp	r3, r2
 800755c:	db09      	blt.n	8007572 <__sfvwrite_r+0x276>
 800755e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007560:	6a21      	ldr	r1, [r4, #32]
 8007562:	4613      	mov	r3, r2
 8007564:	4638      	mov	r0, r7
 8007566:	4652      	mov	r2, sl
 8007568:	47a8      	blx	r5
 800756a:	1e05      	subs	r5, r0, #0
 800756c:	f73f af3c 	bgt.w	80073e8 <__sfvwrite_r+0xec>
 8007570:	e777      	b.n	8007462 <__sfvwrite_r+0x166>
 8007572:	461a      	mov	r2, r3
 8007574:	4651      	mov	r1, sl
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	f000 facb 	bl	8007b12 <memmove>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	68a2      	ldr	r2, [r4, #8]
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	60a2      	str	r2, [r4, #8]
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	441a      	add	r2, r3
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	461d      	mov	r5, r3
 800758c:	e72c      	b.n	80073e8 <__sfvwrite_r+0xec>
 800758e:	2001      	movs	r0, #1
 8007590:	e734      	b.n	80073fc <__sfvwrite_r+0x100>
 8007592:	bf00      	nop
 8007594:	7ffffc00 	.word	0x7ffffc00

08007598 <_fwalk_reent>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	4680      	mov	r8, r0
 800759e:	4689      	mov	r9, r1
 80075a0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80075a4:	2600      	movs	r6, #0
 80075a6:	b914      	cbnz	r4, 80075ae <_fwalk_reent+0x16>
 80075a8:	4630      	mov	r0, r6
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	68a5      	ldr	r5, [r4, #8]
 80075b0:	6867      	ldr	r7, [r4, #4]
 80075b2:	3f01      	subs	r7, #1
 80075b4:	d501      	bpl.n	80075ba <_fwalk_reent+0x22>
 80075b6:	6824      	ldr	r4, [r4, #0]
 80075b8:	e7f5      	b.n	80075a6 <_fwalk_reent+0xe>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d907      	bls.n	80075d0 <_fwalk_reent+0x38>
 80075c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c4:	3301      	adds	r3, #1
 80075c6:	d003      	beq.n	80075d0 <_fwalk_reent+0x38>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4640      	mov	r0, r8
 80075cc:	47c8      	blx	r9
 80075ce:	4306      	orrs	r6, r0
 80075d0:	3568      	adds	r5, #104	; 0x68
 80075d2:	e7ee      	b.n	80075b2 <_fwalk_reent+0x1a>

080075d4 <_localeconv_r>:
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <_localeconv_r+0x14>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6a18      	ldr	r0, [r3, #32]
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <_localeconv_r+0x18>)
 80075dc:	2800      	cmp	r0, #0
 80075de:	bf08      	it	eq
 80075e0:	4618      	moveq	r0, r3
 80075e2:	30f0      	adds	r0, #240	; 0xf0
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000004 	.word	0x20000004
 80075ec:	20000508 	.word	0x20000508

080075f0 <__retarget_lock_init_recursive>:
 80075f0:	4770      	bx	lr

080075f2 <__retarget_lock_close_recursive>:
 80075f2:	4770      	bx	lr

080075f4 <__retarget_lock_acquire_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_release_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <__swhatbuf_r>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	460e      	mov	r6, r1
 80075fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007600:	2900      	cmp	r1, #0
 8007602:	b090      	sub	sp, #64	; 0x40
 8007604:	4614      	mov	r4, r2
 8007606:	461d      	mov	r5, r3
 8007608:	da09      	bge.n	800761e <__swhatbuf_r+0x26>
 800760a:	89b3      	ldrh	r3, [r6, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007612:	602a      	str	r2, [r5, #0]
 8007614:	d116      	bne.n	8007644 <__swhatbuf_r+0x4c>
 8007616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	e015      	b.n	800764a <__swhatbuf_r+0x52>
 800761e:	aa01      	add	r2, sp, #4
 8007620:	f001 f91e 	bl	8008860 <_fstat_r>
 8007624:	2800      	cmp	r0, #0
 8007626:	dbf0      	blt.n	800760a <__swhatbuf_r+0x12>
 8007628:	9a02      	ldr	r2, [sp, #8]
 800762a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800762e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007632:	425a      	negs	r2, r3
 8007634:	415a      	adcs	r2, r3
 8007636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763a:	602a      	str	r2, [r5, #0]
 800763c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	e002      	b.n	800764a <__swhatbuf_r+0x52>
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	4610      	mov	r0, r2
 800764a:	b010      	add	sp, #64	; 0x40
 800764c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007650 <__smakebuf_r>:
 8007650:	898b      	ldrh	r3, [r1, #12]
 8007652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007654:	079d      	lsls	r5, r3, #30
 8007656:	4606      	mov	r6, r0
 8007658:	460c      	mov	r4, r1
 800765a:	d507      	bpl.n	800766c <__smakebuf_r+0x1c>
 800765c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	2301      	movs	r3, #1
 8007666:	6163      	str	r3, [r4, #20]
 8007668:	b002      	add	sp, #8
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	ab01      	add	r3, sp, #4
 800766e:	466a      	mov	r2, sp
 8007670:	f7ff ffc2 	bl	80075f8 <__swhatbuf_r>
 8007674:	9900      	ldr	r1, [sp, #0]
 8007676:	4605      	mov	r5, r0
 8007678:	4630      	mov	r0, r6
 800767a:	f000 f831 	bl	80076e0 <_malloc_r>
 800767e:	b948      	cbnz	r0, 8007694 <__smakebuf_r+0x44>
 8007680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d4ef      	bmi.n	8007668 <__smakebuf_r+0x18>
 8007688:	f023 0303 	bic.w	r3, r3, #3
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	e7e3      	b.n	800765c <__smakebuf_r+0xc>
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <__smakebuf_r+0x7c>)
 8007696:	62b3      	str	r3, [r6, #40]	; 0x28
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	6020      	str	r0, [r4, #0]
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	9b00      	ldr	r3, [sp, #0]
 80076a4:	6163      	str	r3, [r4, #20]
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	6120      	str	r0, [r4, #16]
 80076aa:	b15b      	cbz	r3, 80076c4 <__smakebuf_r+0x74>
 80076ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b0:	4630      	mov	r0, r6
 80076b2:	f001 f8e7 	bl	8008884 <_isatty_r>
 80076b6:	b128      	cbz	r0, 80076c4 <__smakebuf_r+0x74>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	431d      	orrs	r5, r3
 80076c8:	81a5      	strh	r5, [r4, #12]
 80076ca:	e7cd      	b.n	8007668 <__smakebuf_r+0x18>
 80076cc:	08006f29 	.word	0x08006f29

080076d0 <malloc>:
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <malloc+0xc>)
 80076d2:	4601      	mov	r1, r0
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	f000 b803 	b.w	80076e0 <_malloc_r>
 80076da:	bf00      	nop
 80076dc:	20000004 	.word	0x20000004

080076e0 <_malloc_r>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	f101 040b 	add.w	r4, r1, #11
 80076e8:	2c16      	cmp	r4, #22
 80076ea:	4681      	mov	r9, r0
 80076ec:	d907      	bls.n	80076fe <_malloc_r+0x1e>
 80076ee:	f034 0407 	bics.w	r4, r4, #7
 80076f2:	d505      	bpl.n	8007700 <_malloc_r+0x20>
 80076f4:	230c      	movs	r3, #12
 80076f6:	f8c9 3000 	str.w	r3, [r9]
 80076fa:	2600      	movs	r6, #0
 80076fc:	e131      	b.n	8007962 <_malloc_r+0x282>
 80076fe:	2410      	movs	r4, #16
 8007700:	428c      	cmp	r4, r1
 8007702:	d3f7      	bcc.n	80076f4 <_malloc_r+0x14>
 8007704:	4648      	mov	r0, r9
 8007706:	f000 fa27 	bl	8007b58 <__malloc_lock>
 800770a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800770e:	4d9c      	ldr	r5, [pc, #624]	; (8007980 <_malloc_r+0x2a0>)
 8007710:	d236      	bcs.n	8007780 <_malloc_r+0xa0>
 8007712:	f104 0208 	add.w	r2, r4, #8
 8007716:	442a      	add	r2, r5
 8007718:	f1a2 0108 	sub.w	r1, r2, #8
 800771c:	6856      	ldr	r6, [r2, #4]
 800771e:	428e      	cmp	r6, r1
 8007720:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007724:	d102      	bne.n	800772c <_malloc_r+0x4c>
 8007726:	68d6      	ldr	r6, [r2, #12]
 8007728:	42b2      	cmp	r2, r6
 800772a:	d010      	beq.n	800774e <_malloc_r+0x6e>
 800772c:	6873      	ldr	r3, [r6, #4]
 800772e:	68f2      	ldr	r2, [r6, #12]
 8007730:	68b1      	ldr	r1, [r6, #8]
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	60ca      	str	r2, [r1, #12]
 8007738:	4433      	add	r3, r6
 800773a:	6091      	str	r1, [r2, #8]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	605a      	str	r2, [r3, #4]
 8007744:	4648      	mov	r0, r9
 8007746:	f000 fa0d 	bl	8007b64 <__malloc_unlock>
 800774a:	3608      	adds	r6, #8
 800774c:	e109      	b.n	8007962 <_malloc_r+0x282>
 800774e:	3302      	adds	r3, #2
 8007750:	4a8c      	ldr	r2, [pc, #560]	; (8007984 <_malloc_r+0x2a4>)
 8007752:	692e      	ldr	r6, [r5, #16]
 8007754:	4296      	cmp	r6, r2
 8007756:	4611      	mov	r1, r2
 8007758:	d06d      	beq.n	8007836 <_malloc_r+0x156>
 800775a:	6870      	ldr	r0, [r6, #4]
 800775c:	f020 0003 	bic.w	r0, r0, #3
 8007760:	1b07      	subs	r7, r0, r4
 8007762:	2f0f      	cmp	r7, #15
 8007764:	dd47      	ble.n	80077f6 <_malloc_r+0x116>
 8007766:	1933      	adds	r3, r6, r4
 8007768:	f044 0401 	orr.w	r4, r4, #1
 800776c:	6074      	str	r4, [r6, #4]
 800776e:	616b      	str	r3, [r5, #20]
 8007770:	612b      	str	r3, [r5, #16]
 8007772:	60da      	str	r2, [r3, #12]
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	f047 0201 	orr.w	r2, r7, #1
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	5037      	str	r7, [r6, r0]
 800777e:	e7e1      	b.n	8007744 <_malloc_r+0x64>
 8007780:	0a63      	lsrs	r3, r4, #9
 8007782:	d02a      	beq.n	80077da <_malloc_r+0xfa>
 8007784:	2b04      	cmp	r3, #4
 8007786:	d812      	bhi.n	80077ae <_malloc_r+0xce>
 8007788:	09a3      	lsrs	r3, r4, #6
 800778a:	3338      	adds	r3, #56	; 0x38
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007792:	f1a2 0008 	sub.w	r0, r2, #8
 8007796:	6856      	ldr	r6, [r2, #4]
 8007798:	4286      	cmp	r6, r0
 800779a:	d006      	beq.n	80077aa <_malloc_r+0xca>
 800779c:	6872      	ldr	r2, [r6, #4]
 800779e:	f022 0203 	bic.w	r2, r2, #3
 80077a2:	1b11      	subs	r1, r2, r4
 80077a4:	290f      	cmp	r1, #15
 80077a6:	dd1c      	ble.n	80077e2 <_malloc_r+0x102>
 80077a8:	3b01      	subs	r3, #1
 80077aa:	3301      	adds	r3, #1
 80077ac:	e7d0      	b.n	8007750 <_malloc_r+0x70>
 80077ae:	2b14      	cmp	r3, #20
 80077b0:	d801      	bhi.n	80077b6 <_malloc_r+0xd6>
 80077b2:	335b      	adds	r3, #91	; 0x5b
 80077b4:	e7ea      	b.n	800778c <_malloc_r+0xac>
 80077b6:	2b54      	cmp	r3, #84	; 0x54
 80077b8:	d802      	bhi.n	80077c0 <_malloc_r+0xe0>
 80077ba:	0b23      	lsrs	r3, r4, #12
 80077bc:	336e      	adds	r3, #110	; 0x6e
 80077be:	e7e5      	b.n	800778c <_malloc_r+0xac>
 80077c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80077c4:	d802      	bhi.n	80077cc <_malloc_r+0xec>
 80077c6:	0be3      	lsrs	r3, r4, #15
 80077c8:	3377      	adds	r3, #119	; 0x77
 80077ca:	e7df      	b.n	800778c <_malloc_r+0xac>
 80077cc:	f240 5254 	movw	r2, #1364	; 0x554
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d804      	bhi.n	80077de <_malloc_r+0xfe>
 80077d4:	0ca3      	lsrs	r3, r4, #18
 80077d6:	337c      	adds	r3, #124	; 0x7c
 80077d8:	e7d8      	b.n	800778c <_malloc_r+0xac>
 80077da:	233f      	movs	r3, #63	; 0x3f
 80077dc:	e7d6      	b.n	800778c <_malloc_r+0xac>
 80077de:	237e      	movs	r3, #126	; 0x7e
 80077e0:	e7d4      	b.n	800778c <_malloc_r+0xac>
 80077e2:	2900      	cmp	r1, #0
 80077e4:	68f1      	ldr	r1, [r6, #12]
 80077e6:	db04      	blt.n	80077f2 <_malloc_r+0x112>
 80077e8:	68b3      	ldr	r3, [r6, #8]
 80077ea:	60d9      	str	r1, [r3, #12]
 80077ec:	608b      	str	r3, [r1, #8]
 80077ee:	18b3      	adds	r3, r6, r2
 80077f0:	e7a4      	b.n	800773c <_malloc_r+0x5c>
 80077f2:	460e      	mov	r6, r1
 80077f4:	e7d0      	b.n	8007798 <_malloc_r+0xb8>
 80077f6:	2f00      	cmp	r7, #0
 80077f8:	616a      	str	r2, [r5, #20]
 80077fa:	612a      	str	r2, [r5, #16]
 80077fc:	db05      	blt.n	800780a <_malloc_r+0x12a>
 80077fe:	4430      	add	r0, r6
 8007800:	6843      	ldr	r3, [r0, #4]
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	6043      	str	r3, [r0, #4]
 8007808:	e79c      	b.n	8007744 <_malloc_r+0x64>
 800780a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800780e:	d244      	bcs.n	800789a <_malloc_r+0x1ba>
 8007810:	08c0      	lsrs	r0, r0, #3
 8007812:	1087      	asrs	r7, r0, #2
 8007814:	2201      	movs	r2, #1
 8007816:	fa02 f707 	lsl.w	r7, r2, r7
 800781a:	686a      	ldr	r2, [r5, #4]
 800781c:	3001      	adds	r0, #1
 800781e:	433a      	orrs	r2, r7
 8007820:	606a      	str	r2, [r5, #4]
 8007822:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007826:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800782a:	60b7      	str	r7, [r6, #8]
 800782c:	3a08      	subs	r2, #8
 800782e:	60f2      	str	r2, [r6, #12]
 8007830:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007834:	60fe      	str	r6, [r7, #12]
 8007836:	2001      	movs	r0, #1
 8007838:	109a      	asrs	r2, r3, #2
 800783a:	fa00 f202 	lsl.w	r2, r0, r2
 800783e:	6868      	ldr	r0, [r5, #4]
 8007840:	4282      	cmp	r2, r0
 8007842:	f200 80a1 	bhi.w	8007988 <_malloc_r+0x2a8>
 8007846:	4202      	tst	r2, r0
 8007848:	d106      	bne.n	8007858 <_malloc_r+0x178>
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	0052      	lsls	r2, r2, #1
 8007850:	4202      	tst	r2, r0
 8007852:	f103 0304 	add.w	r3, r3, #4
 8007856:	d0fa      	beq.n	800784e <_malloc_r+0x16e>
 8007858:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800785c:	46e0      	mov	r8, ip
 800785e:	469e      	mov	lr, r3
 8007860:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007864:	4546      	cmp	r6, r8
 8007866:	d153      	bne.n	8007910 <_malloc_r+0x230>
 8007868:	f10e 0e01 	add.w	lr, lr, #1
 800786c:	f01e 0f03 	tst.w	lr, #3
 8007870:	f108 0808 	add.w	r8, r8, #8
 8007874:	d1f4      	bne.n	8007860 <_malloc_r+0x180>
 8007876:	0798      	lsls	r0, r3, #30
 8007878:	d179      	bne.n	800796e <_malloc_r+0x28e>
 800787a:	686b      	ldr	r3, [r5, #4]
 800787c:	ea23 0302 	bic.w	r3, r3, r2
 8007880:	606b      	str	r3, [r5, #4]
 8007882:	6868      	ldr	r0, [r5, #4]
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	4282      	cmp	r2, r0
 8007888:	d87e      	bhi.n	8007988 <_malloc_r+0x2a8>
 800788a:	2a00      	cmp	r2, #0
 800788c:	d07c      	beq.n	8007988 <_malloc_r+0x2a8>
 800788e:	4673      	mov	r3, lr
 8007890:	4202      	tst	r2, r0
 8007892:	d1e1      	bne.n	8007858 <_malloc_r+0x178>
 8007894:	3304      	adds	r3, #4
 8007896:	0052      	lsls	r2, r2, #1
 8007898:	e7fa      	b.n	8007890 <_malloc_r+0x1b0>
 800789a:	0a42      	lsrs	r2, r0, #9
 800789c:	2a04      	cmp	r2, #4
 800789e:	d815      	bhi.n	80078cc <_malloc_r+0x1ec>
 80078a0:	0982      	lsrs	r2, r0, #6
 80078a2:	3238      	adds	r2, #56	; 0x38
 80078a4:	1c57      	adds	r7, r2, #1
 80078a6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80078aa:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80078ae:	45be      	cmp	lr, r7
 80078b0:	d126      	bne.n	8007900 <_malloc_r+0x220>
 80078b2:	2001      	movs	r0, #1
 80078b4:	1092      	asrs	r2, r2, #2
 80078b6:	fa00 f202 	lsl.w	r2, r0, r2
 80078ba:	6868      	ldr	r0, [r5, #4]
 80078bc:	4310      	orrs	r0, r2
 80078be:	6068      	str	r0, [r5, #4]
 80078c0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80078c4:	60b7      	str	r7, [r6, #8]
 80078c6:	f8ce 6008 	str.w	r6, [lr, #8]
 80078ca:	e7b3      	b.n	8007834 <_malloc_r+0x154>
 80078cc:	2a14      	cmp	r2, #20
 80078ce:	d801      	bhi.n	80078d4 <_malloc_r+0x1f4>
 80078d0:	325b      	adds	r2, #91	; 0x5b
 80078d2:	e7e7      	b.n	80078a4 <_malloc_r+0x1c4>
 80078d4:	2a54      	cmp	r2, #84	; 0x54
 80078d6:	d802      	bhi.n	80078de <_malloc_r+0x1fe>
 80078d8:	0b02      	lsrs	r2, r0, #12
 80078da:	326e      	adds	r2, #110	; 0x6e
 80078dc:	e7e2      	b.n	80078a4 <_malloc_r+0x1c4>
 80078de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80078e2:	d802      	bhi.n	80078ea <_malloc_r+0x20a>
 80078e4:	0bc2      	lsrs	r2, r0, #15
 80078e6:	3277      	adds	r2, #119	; 0x77
 80078e8:	e7dc      	b.n	80078a4 <_malloc_r+0x1c4>
 80078ea:	f240 5754 	movw	r7, #1364	; 0x554
 80078ee:	42ba      	cmp	r2, r7
 80078f0:	bf9a      	itte	ls
 80078f2:	0c82      	lsrls	r2, r0, #18
 80078f4:	327c      	addls	r2, #124	; 0x7c
 80078f6:	227e      	movhi	r2, #126	; 0x7e
 80078f8:	e7d4      	b.n	80078a4 <_malloc_r+0x1c4>
 80078fa:	68bf      	ldr	r7, [r7, #8]
 80078fc:	45be      	cmp	lr, r7
 80078fe:	d004      	beq.n	800790a <_malloc_r+0x22a>
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	f022 0203 	bic.w	r2, r2, #3
 8007906:	4290      	cmp	r0, r2
 8007908:	d3f7      	bcc.n	80078fa <_malloc_r+0x21a>
 800790a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800790e:	e7d7      	b.n	80078c0 <_malloc_r+0x1e0>
 8007910:	6870      	ldr	r0, [r6, #4]
 8007912:	68f7      	ldr	r7, [r6, #12]
 8007914:	f020 0003 	bic.w	r0, r0, #3
 8007918:	eba0 0a04 	sub.w	sl, r0, r4
 800791c:	f1ba 0f0f 	cmp.w	sl, #15
 8007920:	dd10      	ble.n	8007944 <_malloc_r+0x264>
 8007922:	68b2      	ldr	r2, [r6, #8]
 8007924:	1933      	adds	r3, r6, r4
 8007926:	f044 0401 	orr.w	r4, r4, #1
 800792a:	6074      	str	r4, [r6, #4]
 800792c:	60d7      	str	r7, [r2, #12]
 800792e:	60ba      	str	r2, [r7, #8]
 8007930:	f04a 0201 	orr.w	r2, sl, #1
 8007934:	616b      	str	r3, [r5, #20]
 8007936:	612b      	str	r3, [r5, #16]
 8007938:	60d9      	str	r1, [r3, #12]
 800793a:	6099      	str	r1, [r3, #8]
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	f846 a000 	str.w	sl, [r6, r0]
 8007942:	e6ff      	b.n	8007744 <_malloc_r+0x64>
 8007944:	f1ba 0f00 	cmp.w	sl, #0
 8007948:	db0f      	blt.n	800796a <_malloc_r+0x28a>
 800794a:	4430      	add	r0, r6
 800794c:	6843      	ldr	r3, [r0, #4]
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	6043      	str	r3, [r0, #4]
 8007954:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007958:	4648      	mov	r0, r9
 800795a:	60df      	str	r7, [r3, #12]
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	f000 f901 	bl	8007b64 <__malloc_unlock>
 8007962:	4630      	mov	r0, r6
 8007964:	b003      	add	sp, #12
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	463e      	mov	r6, r7
 800796c:	e77a      	b.n	8007864 <_malloc_r+0x184>
 800796e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007972:	4584      	cmp	ip, r0
 8007974:	f103 33ff 	add.w	r3, r3, #4294967295
 8007978:	f43f af7d 	beq.w	8007876 <_malloc_r+0x196>
 800797c:	e781      	b.n	8007882 <_malloc_r+0x1a2>
 800797e:	bf00      	nop
 8007980:	200000f8 	.word	0x200000f8
 8007984:	20000100 	.word	0x20000100
 8007988:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800798c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007990:	f026 0603 	bic.w	r6, r6, #3
 8007994:	42b4      	cmp	r4, r6
 8007996:	d803      	bhi.n	80079a0 <_malloc_r+0x2c0>
 8007998:	1b33      	subs	r3, r6, r4
 800799a:	2b0f      	cmp	r3, #15
 800799c:	f300 8096 	bgt.w	8007acc <_malloc_r+0x3ec>
 80079a0:	4a4f      	ldr	r2, [pc, #316]	; (8007ae0 <_malloc_r+0x400>)
 80079a2:	6817      	ldr	r7, [r2, #0]
 80079a4:	4a4f      	ldr	r2, [pc, #316]	; (8007ae4 <_malloc_r+0x404>)
 80079a6:	6811      	ldr	r1, [r2, #0]
 80079a8:	3710      	adds	r7, #16
 80079aa:	3101      	adds	r1, #1
 80079ac:	eb0b 0306 	add.w	r3, fp, r6
 80079b0:	4427      	add	r7, r4
 80079b2:	d005      	beq.n	80079c0 <_malloc_r+0x2e0>
 80079b4:	494c      	ldr	r1, [pc, #304]	; (8007ae8 <_malloc_r+0x408>)
 80079b6:	3901      	subs	r1, #1
 80079b8:	440f      	add	r7, r1
 80079ba:	3101      	adds	r1, #1
 80079bc:	4249      	negs	r1, r1
 80079be:	400f      	ands	r7, r1
 80079c0:	4639      	mov	r1, r7
 80079c2:	4648      	mov	r0, r9
 80079c4:	9201      	str	r2, [sp, #4]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	f000 fd22 	bl	8008410 <_sbrk_r>
 80079cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80079d0:	4680      	mov	r8, r0
 80079d2:	d056      	beq.n	8007a82 <_malloc_r+0x3a2>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	9a01      	ldr	r2, [sp, #4]
 80079d8:	4283      	cmp	r3, r0
 80079da:	d901      	bls.n	80079e0 <_malloc_r+0x300>
 80079dc:	45ab      	cmp	fp, r5
 80079de:	d150      	bne.n	8007a82 <_malloc_r+0x3a2>
 80079e0:	4842      	ldr	r0, [pc, #264]	; (8007aec <_malloc_r+0x40c>)
 80079e2:	6801      	ldr	r1, [r0, #0]
 80079e4:	4543      	cmp	r3, r8
 80079e6:	eb07 0e01 	add.w	lr, r7, r1
 80079ea:	f8c0 e000 	str.w	lr, [r0]
 80079ee:	4940      	ldr	r1, [pc, #256]	; (8007af0 <_malloc_r+0x410>)
 80079f0:	4682      	mov	sl, r0
 80079f2:	d113      	bne.n	8007a1c <_malloc_r+0x33c>
 80079f4:	420b      	tst	r3, r1
 80079f6:	d111      	bne.n	8007a1c <_malloc_r+0x33c>
 80079f8:	68ab      	ldr	r3, [r5, #8]
 80079fa:	443e      	add	r6, r7
 80079fc:	f046 0601 	orr.w	r6, r6, #1
 8007a00:	605e      	str	r6, [r3, #4]
 8007a02:	4a3c      	ldr	r2, [pc, #240]	; (8007af4 <_malloc_r+0x414>)
 8007a04:	f8da 3000 	ldr.w	r3, [sl]
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	428b      	cmp	r3, r1
 8007a0c:	bf88      	it	hi
 8007a0e:	6013      	strhi	r3, [r2, #0]
 8007a10:	4a39      	ldr	r2, [pc, #228]	; (8007af8 <_malloc_r+0x418>)
 8007a12:	6811      	ldr	r1, [r2, #0]
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf88      	it	hi
 8007a18:	6013      	strhi	r3, [r2, #0]
 8007a1a:	e032      	b.n	8007a82 <_malloc_r+0x3a2>
 8007a1c:	6810      	ldr	r0, [r2, #0]
 8007a1e:	3001      	adds	r0, #1
 8007a20:	bf1b      	ittet	ne
 8007a22:	eba8 0303 	subne.w	r3, r8, r3
 8007a26:	4473      	addne	r3, lr
 8007a28:	f8c2 8000 	streq.w	r8, [r2]
 8007a2c:	f8ca 3000 	strne.w	r3, [sl]
 8007a30:	f018 0007 	ands.w	r0, r8, #7
 8007a34:	bf1c      	itt	ne
 8007a36:	f1c0 0008 	rsbne	r0, r0, #8
 8007a3a:	4480      	addne	r8, r0
 8007a3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ae8 <_malloc_r+0x408>)
 8007a3e:	4447      	add	r7, r8
 8007a40:	4418      	add	r0, r3
 8007a42:	400f      	ands	r7, r1
 8007a44:	1bc7      	subs	r7, r0, r7
 8007a46:	4639      	mov	r1, r7
 8007a48:	4648      	mov	r0, r9
 8007a4a:	f000 fce1 	bl	8008410 <_sbrk_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	bf08      	it	eq
 8007a52:	4640      	moveq	r0, r8
 8007a54:	f8da 3000 	ldr.w	r3, [sl]
 8007a58:	f8c5 8008 	str.w	r8, [r5, #8]
 8007a5c:	bf08      	it	eq
 8007a5e:	2700      	moveq	r7, #0
 8007a60:	eba0 0008 	sub.w	r0, r0, r8
 8007a64:	443b      	add	r3, r7
 8007a66:	4407      	add	r7, r0
 8007a68:	f047 0701 	orr.w	r7, r7, #1
 8007a6c:	45ab      	cmp	fp, r5
 8007a6e:	f8ca 3000 	str.w	r3, [sl]
 8007a72:	f8c8 7004 	str.w	r7, [r8, #4]
 8007a76:	d0c4      	beq.n	8007a02 <_malloc_r+0x322>
 8007a78:	2e0f      	cmp	r6, #15
 8007a7a:	d810      	bhi.n	8007a9e <_malloc_r+0x3be>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a82:	68ab      	ldr	r3, [r5, #8]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	f022 0203 	bic.w	r2, r2, #3
 8007a8a:	4294      	cmp	r4, r2
 8007a8c:	eba2 0304 	sub.w	r3, r2, r4
 8007a90:	d801      	bhi.n	8007a96 <_malloc_r+0x3b6>
 8007a92:	2b0f      	cmp	r3, #15
 8007a94:	dc1a      	bgt.n	8007acc <_malloc_r+0x3ec>
 8007a96:	4648      	mov	r0, r9
 8007a98:	f000 f864 	bl	8007b64 <__malloc_unlock>
 8007a9c:	e62d      	b.n	80076fa <_malloc_r+0x1a>
 8007a9e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007aa2:	3e0c      	subs	r6, #12
 8007aa4:	f026 0607 	bic.w	r6, r6, #7
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	4333      	orrs	r3, r6
 8007aae:	f8cb 3004 	str.w	r3, [fp, #4]
 8007ab2:	eb0b 0306 	add.w	r3, fp, r6
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	2e0f      	cmp	r6, #15
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	609a      	str	r2, [r3, #8]
 8007abe:	d9a0      	bls.n	8007a02 <_malloc_r+0x322>
 8007ac0:	f10b 0108 	add.w	r1, fp, #8
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f7ff fb5d 	bl	8007184 <_free_r>
 8007aca:	e79a      	b.n	8007a02 <_malloc_r+0x322>
 8007acc:	68ae      	ldr	r6, [r5, #8]
 8007ace:	f044 0201 	orr.w	r2, r4, #1
 8007ad2:	4434      	add	r4, r6
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	6072      	str	r2, [r6, #4]
 8007ada:	60ac      	str	r4, [r5, #8]
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	e631      	b.n	8007744 <_malloc_r+0x64>
 8007ae0:	200006c4 	.word	0x200006c4
 8007ae4:	20000500 	.word	0x20000500
 8007ae8:	00000080 	.word	0x00000080
 8007aec:	20000694 	.word	0x20000694
 8007af0:	0000007f 	.word	0x0000007f
 8007af4:	200006bc 	.word	0x200006bc
 8007af8:	200006c0 	.word	0x200006c0

08007afc <memcpy>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	1e43      	subs	r3, r0, #1
 8007b00:	440a      	add	r2, r1
 8007b02:	4291      	cmp	r1, r2
 8007b04:	d100      	bne.n	8007b08 <memcpy+0xc>
 8007b06:	bd10      	pop	{r4, pc}
 8007b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b10:	e7f7      	b.n	8007b02 <memcpy+0x6>

08007b12 <memmove>:
 8007b12:	4288      	cmp	r0, r1
 8007b14:	b510      	push	{r4, lr}
 8007b16:	eb01 0302 	add.w	r3, r1, r2
 8007b1a:	d803      	bhi.n	8007b24 <memmove+0x12>
 8007b1c:	1e42      	subs	r2, r0, #1
 8007b1e:	4299      	cmp	r1, r3
 8007b20:	d10c      	bne.n	8007b3c <memmove+0x2a>
 8007b22:	bd10      	pop	{r4, pc}
 8007b24:	4298      	cmp	r0, r3
 8007b26:	d2f9      	bcs.n	8007b1c <memmove+0xa>
 8007b28:	1881      	adds	r1, r0, r2
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	42d3      	cmn	r3, r2
 8007b2e:	d100      	bne.n	8007b32 <memmove+0x20>
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b3a:	e7f7      	b.n	8007b2c <memmove+0x1a>
 8007b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b44:	e7eb      	b.n	8007b1e <memmove+0xc>

08007b46 <memset>:
 8007b46:	4402      	add	r2, r0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d100      	bne.n	8007b50 <memset+0xa>
 8007b4e:	4770      	bx	lr
 8007b50:	f803 1b01 	strb.w	r1, [r3], #1
 8007b54:	e7f9      	b.n	8007b4a <memset+0x4>
	...

08007b58 <__malloc_lock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__malloc_lock+0x8>)
 8007b5a:	f7ff bd4b 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	200007f4 	.word	0x200007f4

08007b64 <__malloc_unlock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__malloc_unlock+0x8>)
 8007b66:	f7ff bd46 	b.w	80075f6 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	200007f4 	.word	0x200007f4

08007b70 <_Balloc>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b74:	4604      	mov	r4, r0
 8007b76:	460e      	mov	r6, r1
 8007b78:	b93d      	cbnz	r5, 8007b8a <_Balloc+0x1a>
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f7ff fda8 	bl	80076d0 <malloc>
 8007b80:	6260      	str	r0, [r4, #36]	; 0x24
 8007b82:	6045      	str	r5, [r0, #4]
 8007b84:	6085      	str	r5, [r0, #8]
 8007b86:	6005      	str	r5, [r0, #0]
 8007b88:	60c5      	str	r5, [r0, #12]
 8007b8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b8c:	68eb      	ldr	r3, [r5, #12]
 8007b8e:	b183      	cbz	r3, 8007bb2 <_Balloc+0x42>
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b98:	b9b8      	cbnz	r0, 8007bca <_Balloc+0x5a>
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	fa01 f506 	lsl.w	r5, r1, r6
 8007ba0:	1d6a      	adds	r2, r5, #5
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 fd47 	bl	8008638 <_calloc_r>
 8007baa:	b160      	cbz	r0, 8007bc6 <_Balloc+0x56>
 8007bac:	6046      	str	r6, [r0, #4]
 8007bae:	6085      	str	r5, [r0, #8]
 8007bb0:	e00e      	b.n	8007bd0 <_Balloc+0x60>
 8007bb2:	2221      	movs	r2, #33	; 0x21
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fd3e 	bl	8008638 <_calloc_r>
 8007bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bbe:	60e8      	str	r0, [r5, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e4      	bne.n	8007b90 <_Balloc+0x20>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}
 8007bca:	6802      	ldr	r2, [r0, #0]
 8007bcc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6103      	str	r3, [r0, #16]
 8007bd4:	60c3      	str	r3, [r0, #12]
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}

08007bd8 <_Bfree>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	b93c      	cbnz	r4, 8007bf2 <_Bfree+0x1a>
 8007be2:	2010      	movs	r0, #16
 8007be4:	f7ff fd74 	bl	80076d0 <malloc>
 8007be8:	6270      	str	r0, [r6, #36]	; 0x24
 8007bea:	6044      	str	r4, [r0, #4]
 8007bec:	6084      	str	r4, [r0, #8]
 8007bee:	6004      	str	r4, [r0, #0]
 8007bf0:	60c4      	str	r4, [r0, #12]
 8007bf2:	b13d      	cbz	r5, 8007c04 <_Bfree+0x2c>
 8007bf4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bf6:	686a      	ldr	r2, [r5, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bfe:	6029      	str	r1, [r5, #0]
 8007c00:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c04:	bd70      	pop	{r4, r5, r6, pc}

08007c06 <__multadd>:
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	690d      	ldr	r5, [r1, #16]
 8007c0c:	461f      	mov	r7, r3
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	f101 0e14 	add.w	lr, r1, #20
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8de 0000 	ldr.w	r0, [lr]
 8007c1c:	b281      	uxth	r1, r0
 8007c1e:	fb02 7101 	mla	r1, r2, r1, r7
 8007c22:	0c0f      	lsrs	r7, r1, #16
 8007c24:	0c00      	lsrs	r0, r0, #16
 8007c26:	fb02 7000 	mla	r0, r2, r0, r7
 8007c2a:	b289      	uxth	r1, r1
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007c32:	429d      	cmp	r5, r3
 8007c34:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c38:	f84e 1b04 	str.w	r1, [lr], #4
 8007c3c:	dcec      	bgt.n	8007c18 <__multadd+0x12>
 8007c3e:	b1d7      	cbz	r7, 8007c76 <__multadd+0x70>
 8007c40:	68a3      	ldr	r3, [r4, #8]
 8007c42:	429d      	cmp	r5, r3
 8007c44:	db12      	blt.n	8007c6c <__multadd+0x66>
 8007c46:	6861      	ldr	r1, [r4, #4]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	3101      	adds	r1, #1
 8007c4c:	f7ff ff90 	bl	8007b70 <_Balloc>
 8007c50:	6922      	ldr	r2, [r4, #16]
 8007c52:	3202      	adds	r2, #2
 8007c54:	f104 010c 	add.w	r1, r4, #12
 8007c58:	4680      	mov	r8, r0
 8007c5a:	0092      	lsls	r2, r2, #2
 8007c5c:	300c      	adds	r0, #12
 8007c5e:	f7ff ff4d 	bl	8007afc <memcpy>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff ffb7 	bl	8007bd8 <_Bfree>
 8007c6a:	4644      	mov	r4, r8
 8007c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c70:	3501      	adds	r5, #1
 8007c72:	615f      	str	r7, [r3, #20]
 8007c74:	6125      	str	r5, [r4, #16]
 8007c76:	4620      	mov	r0, r4
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c7c <__hi0bits>:
 8007c7c:	0c02      	lsrs	r2, r0, #16
 8007c7e:	0412      	lsls	r2, r2, #16
 8007c80:	4603      	mov	r3, r0
 8007c82:	b9b2      	cbnz	r2, 8007cb2 <__hi0bits+0x36>
 8007c84:	0403      	lsls	r3, r0, #16
 8007c86:	2010      	movs	r0, #16
 8007c88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c8c:	bf04      	itt	eq
 8007c8e:	021b      	lsleq	r3, r3, #8
 8007c90:	3008      	addeq	r0, #8
 8007c92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c96:	bf04      	itt	eq
 8007c98:	011b      	lsleq	r3, r3, #4
 8007c9a:	3004      	addeq	r0, #4
 8007c9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ca0:	bf04      	itt	eq
 8007ca2:	009b      	lsleq	r3, r3, #2
 8007ca4:	3002      	addeq	r0, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	db06      	blt.n	8007cb8 <__hi0bits+0x3c>
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	d503      	bpl.n	8007cb6 <__hi0bits+0x3a>
 8007cae:	3001      	adds	r0, #1
 8007cb0:	4770      	bx	lr
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e7e8      	b.n	8007c88 <__hi0bits+0xc>
 8007cb6:	2020      	movs	r0, #32
 8007cb8:	4770      	bx	lr

08007cba <__lo0bits>:
 8007cba:	6803      	ldr	r3, [r0, #0]
 8007cbc:	f013 0207 	ands.w	r2, r3, #7
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	d00b      	beq.n	8007cdc <__lo0bits+0x22>
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	d423      	bmi.n	8007d10 <__lo0bits+0x56>
 8007cc8:	0798      	lsls	r0, r3, #30
 8007cca:	bf49      	itett	mi
 8007ccc:	085b      	lsrmi	r3, r3, #1
 8007cce:	089b      	lsrpl	r3, r3, #2
 8007cd0:	2001      	movmi	r0, #1
 8007cd2:	600b      	strmi	r3, [r1, #0]
 8007cd4:	bf5c      	itt	pl
 8007cd6:	600b      	strpl	r3, [r1, #0]
 8007cd8:	2002      	movpl	r0, #2
 8007cda:	4770      	bx	lr
 8007cdc:	b298      	uxth	r0, r3
 8007cde:	b9a8      	cbnz	r0, 8007d0c <__lo0bits+0x52>
 8007ce0:	0c1b      	lsrs	r3, r3, #16
 8007ce2:	2010      	movs	r0, #16
 8007ce4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ce8:	bf04      	itt	eq
 8007cea:	0a1b      	lsreq	r3, r3, #8
 8007cec:	3008      	addeq	r0, #8
 8007cee:	071a      	lsls	r2, r3, #28
 8007cf0:	bf04      	itt	eq
 8007cf2:	091b      	lsreq	r3, r3, #4
 8007cf4:	3004      	addeq	r0, #4
 8007cf6:	079a      	lsls	r2, r3, #30
 8007cf8:	bf04      	itt	eq
 8007cfa:	089b      	lsreq	r3, r3, #2
 8007cfc:	3002      	addeq	r0, #2
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d402      	bmi.n	8007d08 <__lo0bits+0x4e>
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	d006      	beq.n	8007d14 <__lo0bits+0x5a>
 8007d06:	3001      	adds	r0, #1
 8007d08:	600b      	str	r3, [r1, #0]
 8007d0a:	4770      	bx	lr
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	e7e9      	b.n	8007ce4 <__lo0bits+0x2a>
 8007d10:	2000      	movs	r0, #0
 8007d12:	4770      	bx	lr
 8007d14:	2020      	movs	r0, #32
 8007d16:	4770      	bx	lr

08007d18 <__i2b>:
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	f7ff ff27 	bl	8007b70 <_Balloc>
 8007d22:	2201      	movs	r2, #1
 8007d24:	6144      	str	r4, [r0, #20]
 8007d26:	6102      	str	r2, [r0, #16]
 8007d28:	bd10      	pop	{r4, pc}

08007d2a <__multiply>:
 8007d2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2e:	4614      	mov	r4, r2
 8007d30:	690a      	ldr	r2, [r1, #16]
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	bfb8      	it	lt
 8007d38:	460b      	movlt	r3, r1
 8007d3a:	4689      	mov	r9, r1
 8007d3c:	bfbc      	itt	lt
 8007d3e:	46a1      	movlt	r9, r4
 8007d40:	461c      	movlt	r4, r3
 8007d42:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d46:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007d4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d52:	eb07 060a 	add.w	r6, r7, sl
 8007d56:	429e      	cmp	r6, r3
 8007d58:	bfc8      	it	gt
 8007d5a:	3101      	addgt	r1, #1
 8007d5c:	f7ff ff08 	bl	8007b70 <_Balloc>
 8007d60:	f100 0514 	add.w	r5, r0, #20
 8007d64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d68:	462b      	mov	r3, r5
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	4543      	cmp	r3, r8
 8007d6e:	d316      	bcc.n	8007d9e <__multiply+0x74>
 8007d70:	f104 0214 	add.w	r2, r4, #20
 8007d74:	f109 0114 	add.w	r1, r9, #20
 8007d78:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007d7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	9c01      	ldr	r4, [sp, #4]
 8007d84:	4294      	cmp	r4, r2
 8007d86:	4613      	mov	r3, r2
 8007d88:	d80c      	bhi.n	8007da4 <__multiply+0x7a>
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	dd03      	ble.n	8007d96 <__multiply+0x6c>
 8007d8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d054      	beq.n	8007e40 <__multiply+0x116>
 8007d96:	6106      	str	r6, [r0, #16]
 8007d98:	b003      	add	sp, #12
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	f843 2b04 	str.w	r2, [r3], #4
 8007da2:	e7e3      	b.n	8007d6c <__multiply+0x42>
 8007da4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007da8:	3204      	adds	r2, #4
 8007daa:	f1ba 0f00 	cmp.w	sl, #0
 8007dae:	d020      	beq.n	8007df2 <__multiply+0xc8>
 8007db0:	46ae      	mov	lr, r5
 8007db2:	4689      	mov	r9, r1
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007dbc:	f8be b000 	ldrh.w	fp, [lr]
 8007dc0:	b2a3      	uxth	r3, r4
 8007dc2:	fb0a b303 	mla	r3, sl, r3, fp
 8007dc6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007dca:	f8de 4000 	ldr.w	r4, [lr]
 8007dce:	4463      	add	r3, ip
 8007dd0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007dd4:	fb0a c40b 	mla	r4, sl, fp, ip
 8007dd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007de2:	454f      	cmp	r7, r9
 8007de4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007de8:	f84e 3b04 	str.w	r3, [lr], #4
 8007dec:	d8e4      	bhi.n	8007db8 <__multiply+0x8e>
 8007dee:	f8ce c000 	str.w	ip, [lr]
 8007df2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007df6:	f1b9 0f00 	cmp.w	r9, #0
 8007dfa:	d01f      	beq.n	8007e3c <__multiply+0x112>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	46ae      	mov	lr, r5
 8007e00:	468c      	mov	ip, r1
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	f8bc 4000 	ldrh.w	r4, [ip]
 8007e0a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e0e:	fb09 b404 	mla	r4, r9, r4, fp
 8007e12:	44a2      	add	sl, r4
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007e1a:	f84e 3b04 	str.w	r3, [lr], #4
 8007e1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e22:	f8be 4000 	ldrh.w	r4, [lr]
 8007e26:	0c1b      	lsrs	r3, r3, #16
 8007e28:	fb09 4303 	mla	r3, r9, r3, r4
 8007e2c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007e30:	4567      	cmp	r7, ip
 8007e32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e36:	d8e6      	bhi.n	8007e06 <__multiply+0xdc>
 8007e38:	f8ce 3000 	str.w	r3, [lr]
 8007e3c:	3504      	adds	r5, #4
 8007e3e:	e7a0      	b.n	8007d82 <__multiply+0x58>
 8007e40:	3e01      	subs	r6, #1
 8007e42:	e7a2      	b.n	8007d8a <__multiply+0x60>

08007e44 <__pow5mult>:
 8007e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e48:	4615      	mov	r5, r2
 8007e4a:	f012 0203 	ands.w	r2, r2, #3
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	d007      	beq.n	8007e64 <__pow5mult+0x20>
 8007e54:	3a01      	subs	r2, #1
 8007e56:	4c21      	ldr	r4, [pc, #132]	; (8007edc <__pow5mult+0x98>)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e5e:	f7ff fed2 	bl	8007c06 <__multadd>
 8007e62:	4607      	mov	r7, r0
 8007e64:	10ad      	asrs	r5, r5, #2
 8007e66:	d035      	beq.n	8007ed4 <__pow5mult+0x90>
 8007e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e6a:	b93c      	cbnz	r4, 8007e7c <__pow5mult+0x38>
 8007e6c:	2010      	movs	r0, #16
 8007e6e:	f7ff fc2f 	bl	80076d0 <malloc>
 8007e72:	6270      	str	r0, [r6, #36]	; 0x24
 8007e74:	6044      	str	r4, [r0, #4]
 8007e76:	6084      	str	r4, [r0, #8]
 8007e78:	6004      	str	r4, [r0, #0]
 8007e7a:	60c4      	str	r4, [r0, #12]
 8007e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e84:	b94c      	cbnz	r4, 8007e9a <__pow5mult+0x56>
 8007e86:	f240 2171 	movw	r1, #625	; 0x271
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ff44 	bl	8007d18 <__i2b>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e96:	4604      	mov	r4, r0
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	07eb      	lsls	r3, r5, #31
 8007ea0:	d50a      	bpl.n	8007eb8 <__pow5mult+0x74>
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7ff ff3f 	bl	8007d2a <__multiply>
 8007eac:	4639      	mov	r1, r7
 8007eae:	4681      	mov	r9, r0
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff fe91 	bl	8007bd8 <_Bfree>
 8007eb6:	464f      	mov	r7, r9
 8007eb8:	106d      	asrs	r5, r5, #1
 8007eba:	d00b      	beq.n	8007ed4 <__pow5mult+0x90>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	b938      	cbnz	r0, 8007ed0 <__pow5mult+0x8c>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ff30 	bl	8007d2a <__multiply>
 8007eca:	6020      	str	r0, [r4, #0]
 8007ecc:	f8c0 8000 	str.w	r8, [r0]
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	e7e4      	b.n	8007e9e <__pow5mult+0x5a>
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	bf00      	nop
 8007edc:	08008d10 	.word	0x08008d10

08007ee0 <__lshift>:
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6849      	ldr	r1, [r1, #4]
 8007eee:	eb0a 0903 	add.w	r9, sl, r3
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	f109 0501 	add.w	r5, r9, #1
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	db31      	blt.n	8007f64 <__lshift+0x84>
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7ff fe35 	bl	8007b70 <_Balloc>
 8007f06:	2200      	movs	r2, #0
 8007f08:	4680      	mov	r8, r0
 8007f0a:	f100 0314 	add.w	r3, r0, #20
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4552      	cmp	r2, sl
 8007f12:	db2a      	blt.n	8007f6a <__lshift+0x8a>
 8007f14:	6920      	ldr	r0, [r4, #16]
 8007f16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f1a:	f104 0114 	add.w	r1, r4, #20
 8007f1e:	f016 021f 	ands.w	r2, r6, #31
 8007f22:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007f26:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007f2a:	d022      	beq.n	8007f72 <__lshift+0x92>
 8007f2c:	f1c2 0c20 	rsb	ip, r2, #32
 8007f30:	2000      	movs	r0, #0
 8007f32:	680e      	ldr	r6, [r1, #0]
 8007f34:	4096      	lsls	r6, r2
 8007f36:	4330      	orrs	r0, r6
 8007f38:	f843 0b04 	str.w	r0, [r3], #4
 8007f3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007f40:	458e      	cmp	lr, r1
 8007f42:	fa20 f00c 	lsr.w	r0, r0, ip
 8007f46:	d8f4      	bhi.n	8007f32 <__lshift+0x52>
 8007f48:	6018      	str	r0, [r3, #0]
 8007f4a:	b108      	cbz	r0, 8007f50 <__lshift+0x70>
 8007f4c:	f109 0502 	add.w	r5, r9, #2
 8007f50:	3d01      	subs	r5, #1
 8007f52:	4638      	mov	r0, r7
 8007f54:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7ff fe3d 	bl	8007bd8 <_Bfree>
 8007f5e:	4640      	mov	r0, r8
 8007f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f64:	3101      	adds	r1, #1
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	e7c8      	b.n	8007efc <__lshift+0x1c>
 8007f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f6e:	3201      	adds	r2, #1
 8007f70:	e7ce      	b.n	8007f10 <__lshift+0x30>
 8007f72:	3b04      	subs	r3, #4
 8007f74:	f851 2b04 	ldr.w	r2, [r1], #4
 8007f78:	f843 2f04 	str.w	r2, [r3, #4]!
 8007f7c:	458e      	cmp	lr, r1
 8007f7e:	d8f9      	bhi.n	8007f74 <__lshift+0x94>
 8007f80:	e7e6      	b.n	8007f50 <__lshift+0x70>

08007f82 <__mcmp>:
 8007f82:	6903      	ldr	r3, [r0, #16]
 8007f84:	690a      	ldr	r2, [r1, #16]
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	d10c      	bne.n	8007fa6 <__mcmp+0x24>
 8007f8c:	0092      	lsls	r2, r2, #2
 8007f8e:	3014      	adds	r0, #20
 8007f90:	3114      	adds	r1, #20
 8007f92:	1884      	adds	r4, r0, r2
 8007f94:	4411      	add	r1, r2
 8007f96:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f9a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f9e:	4295      	cmp	r5, r2
 8007fa0:	d003      	beq.n	8007faa <__mcmp+0x28>
 8007fa2:	d305      	bcc.n	8007fb0 <__mcmp+0x2e>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	bd30      	pop	{r4, r5, pc}
 8007faa:	42a0      	cmp	r0, r4
 8007fac:	d3f3      	bcc.n	8007f96 <__mcmp+0x14>
 8007fae:	e7fa      	b.n	8007fa6 <__mcmp+0x24>
 8007fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb4:	e7f7      	b.n	8007fa6 <__mcmp+0x24>

08007fb6 <__mdiff>:
 8007fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fba:	460d      	mov	r5, r1
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	f7ff ffdd 	bl	8007f82 <__mcmp>
 8007fc8:	1e06      	subs	r6, r0, #0
 8007fca:	d108      	bne.n	8007fde <__mdiff+0x28>
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f7ff fdce 	bl	8007b70 <_Balloc>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	6103      	str	r3, [r0, #16]
 8007fd8:	6146      	str	r6, [r0, #20]
 8007fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fde:	bfa4      	itt	ge
 8007fe0:	4623      	movge	r3, r4
 8007fe2:	462c      	movge	r4, r5
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	6861      	ldr	r1, [r4, #4]
 8007fe8:	bfa6      	itte	ge
 8007fea:	461d      	movge	r5, r3
 8007fec:	2600      	movge	r6, #0
 8007fee:	2601      	movlt	r6, #1
 8007ff0:	f7ff fdbe 	bl	8007b70 <_Balloc>
 8007ff4:	692b      	ldr	r3, [r5, #16]
 8007ff6:	60c6      	str	r6, [r0, #12]
 8007ff8:	6926      	ldr	r6, [r4, #16]
 8007ffa:	f105 0914 	add.w	r9, r5, #20
 8007ffe:	f104 0214 	add.w	r2, r4, #20
 8008002:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008006:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800800a:	f100 0514 	add.w	r5, r0, #20
 800800e:	f04f 0c00 	mov.w	ip, #0
 8008012:	f852 ab04 	ldr.w	sl, [r2], #4
 8008016:	f859 4b04 	ldr.w	r4, [r9], #4
 800801a:	fa1c f18a 	uxtah	r1, ip, sl
 800801e:	b2a3      	uxth	r3, r4
 8008020:	1ac9      	subs	r1, r1, r3
 8008022:	0c23      	lsrs	r3, r4, #16
 8008024:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008028:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800802c:	b289      	uxth	r1, r1
 800802e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008032:	45c8      	cmp	r8, r9
 8008034:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008038:	4696      	mov	lr, r2
 800803a:	f845 3b04 	str.w	r3, [r5], #4
 800803e:	d8e8      	bhi.n	8008012 <__mdiff+0x5c>
 8008040:	45be      	cmp	lr, r7
 8008042:	d305      	bcc.n	8008050 <__mdiff+0x9a>
 8008044:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008048:	b18b      	cbz	r3, 800806e <__mdiff+0xb8>
 800804a:	6106      	str	r6, [r0, #16]
 800804c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008050:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008054:	fa1c f381 	uxtah	r3, ip, r1
 8008058:	141a      	asrs	r2, r3, #16
 800805a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008068:	f845 3b04 	str.w	r3, [r5], #4
 800806c:	e7e8      	b.n	8008040 <__mdiff+0x8a>
 800806e:	3e01      	subs	r6, #1
 8008070:	e7e8      	b.n	8008044 <__mdiff+0x8e>

08008072 <__d2b>:
 8008072:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008076:	460e      	mov	r6, r1
 8008078:	2101      	movs	r1, #1
 800807a:	ec59 8b10 	vmov	r8, r9, d0
 800807e:	4615      	mov	r5, r2
 8008080:	f7ff fd76 	bl	8007b70 <_Balloc>
 8008084:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008088:	4607      	mov	r7, r0
 800808a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800808e:	bb34      	cbnz	r4, 80080de <__d2b+0x6c>
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	f1b8 0f00 	cmp.w	r8, #0
 8008096:	d027      	beq.n	80080e8 <__d2b+0x76>
 8008098:	a802      	add	r0, sp, #8
 800809a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800809e:	f7ff fe0c 	bl	8007cba <__lo0bits>
 80080a2:	9900      	ldr	r1, [sp, #0]
 80080a4:	b1f0      	cbz	r0, 80080e4 <__d2b+0x72>
 80080a6:	9a01      	ldr	r2, [sp, #4]
 80080a8:	f1c0 0320 	rsb	r3, r0, #32
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	430b      	orrs	r3, r1
 80080b2:	40c2      	lsrs	r2, r0
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	9201      	str	r2, [sp, #4]
 80080b8:	9b01      	ldr	r3, [sp, #4]
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf14      	ite	ne
 80080c0:	2102      	movne	r1, #2
 80080c2:	2101      	moveq	r1, #1
 80080c4:	6139      	str	r1, [r7, #16]
 80080c6:	b1c4      	cbz	r4, 80080fa <__d2b+0x88>
 80080c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080cc:	4404      	add	r4, r0
 80080ce:	6034      	str	r4, [r6, #0]
 80080d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080d4:	6028      	str	r0, [r5, #0]
 80080d6:	4638      	mov	r0, r7
 80080d8:	b003      	add	sp, #12
 80080da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e2:	e7d5      	b.n	8008090 <__d2b+0x1e>
 80080e4:	6179      	str	r1, [r7, #20]
 80080e6:	e7e7      	b.n	80080b8 <__d2b+0x46>
 80080e8:	a801      	add	r0, sp, #4
 80080ea:	f7ff fde6 	bl	8007cba <__lo0bits>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	2101      	movs	r1, #1
 80080f4:	6139      	str	r1, [r7, #16]
 80080f6:	3020      	adds	r0, #32
 80080f8:	e7e5      	b.n	80080c6 <__d2b+0x54>
 80080fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008102:	6030      	str	r0, [r6, #0]
 8008104:	6918      	ldr	r0, [r3, #16]
 8008106:	f7ff fdb9 	bl	8007c7c <__hi0bits>
 800810a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800810e:	e7e1      	b.n	80080d4 <__d2b+0x62>

08008110 <_realloc_r>:
 8008110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4682      	mov	sl, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b929      	cbnz	r1, 8008126 <_realloc_r+0x16>
 800811a:	4611      	mov	r1, r2
 800811c:	b003      	add	sp, #12
 800811e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008122:	f7ff badd 	b.w	80076e0 <_malloc_r>
 8008126:	9201      	str	r2, [sp, #4]
 8008128:	f7ff fd16 	bl	8007b58 <__malloc_lock>
 800812c:	9a01      	ldr	r2, [sp, #4]
 800812e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008132:	f102 080b 	add.w	r8, r2, #11
 8008136:	f1b8 0f16 	cmp.w	r8, #22
 800813a:	f1a4 0908 	sub.w	r9, r4, #8
 800813e:	f025 0603 	bic.w	r6, r5, #3
 8008142:	d90a      	bls.n	800815a <_realloc_r+0x4a>
 8008144:	f038 0807 	bics.w	r8, r8, #7
 8008148:	d509      	bpl.n	800815e <_realloc_r+0x4e>
 800814a:	230c      	movs	r3, #12
 800814c:	f8ca 3000 	str.w	r3, [sl]
 8008150:	2700      	movs	r7, #0
 8008152:	4638      	mov	r0, r7
 8008154:	b003      	add	sp, #12
 8008156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815a:	f04f 0810 	mov.w	r8, #16
 800815e:	4590      	cmp	r8, r2
 8008160:	d3f3      	bcc.n	800814a <_realloc_r+0x3a>
 8008162:	45b0      	cmp	r8, r6
 8008164:	f340 8145 	ble.w	80083f2 <_realloc_r+0x2e2>
 8008168:	4ba8      	ldr	r3, [pc, #672]	; (800840c <_realloc_r+0x2fc>)
 800816a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800816e:	eb09 0106 	add.w	r1, r9, r6
 8008172:	4571      	cmp	r1, lr
 8008174:	469b      	mov	fp, r3
 8008176:	684b      	ldr	r3, [r1, #4]
 8008178:	d005      	beq.n	8008186 <_realloc_r+0x76>
 800817a:	f023 0001 	bic.w	r0, r3, #1
 800817e:	4408      	add	r0, r1
 8008180:	6840      	ldr	r0, [r0, #4]
 8008182:	07c7      	lsls	r7, r0, #31
 8008184:	d447      	bmi.n	8008216 <_realloc_r+0x106>
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	4571      	cmp	r1, lr
 800818c:	eb06 0703 	add.w	r7, r6, r3
 8008190:	d119      	bne.n	80081c6 <_realloc_r+0xb6>
 8008192:	f108 0010 	add.w	r0, r8, #16
 8008196:	4287      	cmp	r7, r0
 8008198:	db3f      	blt.n	800821a <_realloc_r+0x10a>
 800819a:	eb09 0308 	add.w	r3, r9, r8
 800819e:	eba7 0708 	sub.w	r7, r7, r8
 80081a2:	f047 0701 	orr.w	r7, r7, #1
 80081a6:	f8cb 3008 	str.w	r3, [fp, #8]
 80081aa:	605f      	str	r7, [r3, #4]
 80081ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	ea43 0308 	orr.w	r3, r3, r8
 80081b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80081bc:	4650      	mov	r0, sl
 80081be:	f7ff fcd1 	bl	8007b64 <__malloc_unlock>
 80081c2:	4627      	mov	r7, r4
 80081c4:	e7c5      	b.n	8008152 <_realloc_r+0x42>
 80081c6:	45b8      	cmp	r8, r7
 80081c8:	dc27      	bgt.n	800821a <_realloc_r+0x10a>
 80081ca:	68cb      	ldr	r3, [r1, #12]
 80081cc:	688a      	ldr	r2, [r1, #8]
 80081ce:	60d3      	str	r3, [r2, #12]
 80081d0:	609a      	str	r2, [r3, #8]
 80081d2:	eba7 0008 	sub.w	r0, r7, r8
 80081d6:	280f      	cmp	r0, #15
 80081d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80081dc:	eb09 0207 	add.w	r2, r9, r7
 80081e0:	f240 8109 	bls.w	80083f6 <_realloc_r+0x2e6>
 80081e4:	eb09 0108 	add.w	r1, r9, r8
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	ea43 0308 	orr.w	r3, r3, r8
 80081f0:	f040 0001 	orr.w	r0, r0, #1
 80081f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80081f8:	6048      	str	r0, [r1, #4]
 80081fa:	6853      	ldr	r3, [r2, #4]
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	3108      	adds	r1, #8
 8008204:	4650      	mov	r0, sl
 8008206:	f7fe ffbd 	bl	8007184 <_free_r>
 800820a:	4650      	mov	r0, sl
 800820c:	f7ff fcaa 	bl	8007b64 <__malloc_unlock>
 8008210:	f109 0708 	add.w	r7, r9, #8
 8008214:	e79d      	b.n	8008152 <_realloc_r+0x42>
 8008216:	2300      	movs	r3, #0
 8008218:	4619      	mov	r1, r3
 800821a:	07e8      	lsls	r0, r5, #31
 800821c:	f100 8084 	bmi.w	8008328 <_realloc_r+0x218>
 8008220:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008224:	eba9 0505 	sub.w	r5, r9, r5
 8008228:	6868      	ldr	r0, [r5, #4]
 800822a:	f020 0003 	bic.w	r0, r0, #3
 800822e:	4430      	add	r0, r6
 8008230:	2900      	cmp	r1, #0
 8008232:	d076      	beq.n	8008322 <_realloc_r+0x212>
 8008234:	4571      	cmp	r1, lr
 8008236:	d150      	bne.n	80082da <_realloc_r+0x1ca>
 8008238:	4403      	add	r3, r0
 800823a:	f108 0110 	add.w	r1, r8, #16
 800823e:	428b      	cmp	r3, r1
 8008240:	db6f      	blt.n	8008322 <_realloc_r+0x212>
 8008242:	462f      	mov	r7, r5
 8008244:	68ea      	ldr	r2, [r5, #12]
 8008246:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800824a:	60ca      	str	r2, [r1, #12]
 800824c:	6091      	str	r1, [r2, #8]
 800824e:	1f32      	subs	r2, r6, #4
 8008250:	2a24      	cmp	r2, #36	; 0x24
 8008252:	d83b      	bhi.n	80082cc <_realloc_r+0x1bc>
 8008254:	2a13      	cmp	r2, #19
 8008256:	d936      	bls.n	80082c6 <_realloc_r+0x1b6>
 8008258:	6821      	ldr	r1, [r4, #0]
 800825a:	60a9      	str	r1, [r5, #8]
 800825c:	6861      	ldr	r1, [r4, #4]
 800825e:	60e9      	str	r1, [r5, #12]
 8008260:	2a1b      	cmp	r2, #27
 8008262:	d81c      	bhi.n	800829e <_realloc_r+0x18e>
 8008264:	f105 0210 	add.w	r2, r5, #16
 8008268:	f104 0108 	add.w	r1, r4, #8
 800826c:	6808      	ldr	r0, [r1, #0]
 800826e:	6010      	str	r0, [r2, #0]
 8008270:	6848      	ldr	r0, [r1, #4]
 8008272:	6050      	str	r0, [r2, #4]
 8008274:	6889      	ldr	r1, [r1, #8]
 8008276:	6091      	str	r1, [r2, #8]
 8008278:	eb05 0208 	add.w	r2, r5, r8
 800827c:	eba3 0308 	sub.w	r3, r3, r8
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	f8cb 2008 	str.w	r2, [fp, #8]
 8008288:	6053      	str	r3, [r2, #4]
 800828a:	686b      	ldr	r3, [r5, #4]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	ea43 0308 	orr.w	r3, r3, r8
 8008294:	606b      	str	r3, [r5, #4]
 8008296:	4650      	mov	r0, sl
 8008298:	f7ff fc64 	bl	8007b64 <__malloc_unlock>
 800829c:	e759      	b.n	8008152 <_realloc_r+0x42>
 800829e:	68a1      	ldr	r1, [r4, #8]
 80082a0:	6129      	str	r1, [r5, #16]
 80082a2:	68e1      	ldr	r1, [r4, #12]
 80082a4:	6169      	str	r1, [r5, #20]
 80082a6:	2a24      	cmp	r2, #36	; 0x24
 80082a8:	bf01      	itttt	eq
 80082aa:	6922      	ldreq	r2, [r4, #16]
 80082ac:	61aa      	streq	r2, [r5, #24]
 80082ae:	6960      	ldreq	r0, [r4, #20]
 80082b0:	61e8      	streq	r0, [r5, #28]
 80082b2:	bf19      	ittee	ne
 80082b4:	f105 0218 	addne.w	r2, r5, #24
 80082b8:	f104 0110 	addne.w	r1, r4, #16
 80082bc:	f105 0220 	addeq.w	r2, r5, #32
 80082c0:	f104 0118 	addeq.w	r1, r4, #24
 80082c4:	e7d2      	b.n	800826c <_realloc_r+0x15c>
 80082c6:	463a      	mov	r2, r7
 80082c8:	4621      	mov	r1, r4
 80082ca:	e7cf      	b.n	800826c <_realloc_r+0x15c>
 80082cc:	4621      	mov	r1, r4
 80082ce:	4638      	mov	r0, r7
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f7ff fc1e 	bl	8007b12 <memmove>
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	e7ce      	b.n	8008278 <_realloc_r+0x168>
 80082da:	18c7      	adds	r7, r0, r3
 80082dc:	45b8      	cmp	r8, r7
 80082de:	dc20      	bgt.n	8008322 <_realloc_r+0x212>
 80082e0:	68cb      	ldr	r3, [r1, #12]
 80082e2:	688a      	ldr	r2, [r1, #8]
 80082e4:	60d3      	str	r3, [r2, #12]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	4628      	mov	r0, r5
 80082ea:	68eb      	ldr	r3, [r5, #12]
 80082ec:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80082f0:	60d3      	str	r3, [r2, #12]
 80082f2:	609a      	str	r2, [r3, #8]
 80082f4:	1f32      	subs	r2, r6, #4
 80082f6:	2a24      	cmp	r2, #36	; 0x24
 80082f8:	d842      	bhi.n	8008380 <_realloc_r+0x270>
 80082fa:	2a13      	cmp	r2, #19
 80082fc:	d93e      	bls.n	800837c <_realloc_r+0x26c>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	60ab      	str	r3, [r5, #8]
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	60eb      	str	r3, [r5, #12]
 8008306:	2a1b      	cmp	r2, #27
 8008308:	d824      	bhi.n	8008354 <_realloc_r+0x244>
 800830a:	f105 0010 	add.w	r0, r5, #16
 800830e:	f104 0308 	add.w	r3, r4, #8
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	6002      	str	r2, [r0, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	6042      	str	r2, [r0, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	6083      	str	r3, [r0, #8]
 800831e:	46a9      	mov	r9, r5
 8008320:	e757      	b.n	80081d2 <_realloc_r+0xc2>
 8008322:	4580      	cmp	r8, r0
 8008324:	4607      	mov	r7, r0
 8008326:	dddf      	ble.n	80082e8 <_realloc_r+0x1d8>
 8008328:	4611      	mov	r1, r2
 800832a:	4650      	mov	r0, sl
 800832c:	f7ff f9d8 	bl	80076e0 <_malloc_r>
 8008330:	4607      	mov	r7, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d0af      	beq.n	8008296 <_realloc_r+0x186>
 8008336:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	f1a0 0208 	sub.w	r2, r0, #8
 8008342:	444b      	add	r3, r9
 8008344:	429a      	cmp	r2, r3
 8008346:	d11f      	bne.n	8008388 <_realloc_r+0x278>
 8008348:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800834c:	f027 0703 	bic.w	r7, r7, #3
 8008350:	4437      	add	r7, r6
 8008352:	e73e      	b.n	80081d2 <_realloc_r+0xc2>
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	612b      	str	r3, [r5, #16]
 8008358:	68e3      	ldr	r3, [r4, #12]
 800835a:	616b      	str	r3, [r5, #20]
 800835c:	2a24      	cmp	r2, #36	; 0x24
 800835e:	bf01      	itttt	eq
 8008360:	6923      	ldreq	r3, [r4, #16]
 8008362:	61ab      	streq	r3, [r5, #24]
 8008364:	6962      	ldreq	r2, [r4, #20]
 8008366:	61ea      	streq	r2, [r5, #28]
 8008368:	bf19      	ittee	ne
 800836a:	f105 0018 	addne.w	r0, r5, #24
 800836e:	f104 0310 	addne.w	r3, r4, #16
 8008372:	f105 0020 	addeq.w	r0, r5, #32
 8008376:	f104 0318 	addeq.w	r3, r4, #24
 800837a:	e7ca      	b.n	8008312 <_realloc_r+0x202>
 800837c:	4623      	mov	r3, r4
 800837e:	e7c8      	b.n	8008312 <_realloc_r+0x202>
 8008380:	4621      	mov	r1, r4
 8008382:	f7ff fbc6 	bl	8007b12 <memmove>
 8008386:	e7ca      	b.n	800831e <_realloc_r+0x20e>
 8008388:	1f32      	subs	r2, r6, #4
 800838a:	2a24      	cmp	r2, #36	; 0x24
 800838c:	d82d      	bhi.n	80083ea <_realloc_r+0x2da>
 800838e:	2a13      	cmp	r2, #19
 8008390:	d928      	bls.n	80083e4 <_realloc_r+0x2d4>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	6043      	str	r3, [r0, #4]
 800839a:	2a1b      	cmp	r2, #27
 800839c:	d80e      	bhi.n	80083bc <_realloc_r+0x2ac>
 800839e:	f100 0308 	add.w	r3, r0, #8
 80083a2:	f104 0208 	add.w	r2, r4, #8
 80083a6:	6811      	ldr	r1, [r2, #0]
 80083a8:	6019      	str	r1, [r3, #0]
 80083aa:	6851      	ldr	r1, [r2, #4]
 80083ac:	6059      	str	r1, [r3, #4]
 80083ae:	6892      	ldr	r2, [r2, #8]
 80083b0:	609a      	str	r2, [r3, #8]
 80083b2:	4621      	mov	r1, r4
 80083b4:	4650      	mov	r0, sl
 80083b6:	f7fe fee5 	bl	8007184 <_free_r>
 80083ba:	e76c      	b.n	8008296 <_realloc_r+0x186>
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	6083      	str	r3, [r0, #8]
 80083c0:	68e3      	ldr	r3, [r4, #12]
 80083c2:	60c3      	str	r3, [r0, #12]
 80083c4:	2a24      	cmp	r2, #36	; 0x24
 80083c6:	bf01      	itttt	eq
 80083c8:	6923      	ldreq	r3, [r4, #16]
 80083ca:	6103      	streq	r3, [r0, #16]
 80083cc:	6961      	ldreq	r1, [r4, #20]
 80083ce:	6141      	streq	r1, [r0, #20]
 80083d0:	bf19      	ittee	ne
 80083d2:	f100 0310 	addne.w	r3, r0, #16
 80083d6:	f104 0210 	addne.w	r2, r4, #16
 80083da:	f100 0318 	addeq.w	r3, r0, #24
 80083de:	f104 0218 	addeq.w	r2, r4, #24
 80083e2:	e7e0      	b.n	80083a6 <_realloc_r+0x296>
 80083e4:	4603      	mov	r3, r0
 80083e6:	4622      	mov	r2, r4
 80083e8:	e7dd      	b.n	80083a6 <_realloc_r+0x296>
 80083ea:	4621      	mov	r1, r4
 80083ec:	f7ff fb91 	bl	8007b12 <memmove>
 80083f0:	e7df      	b.n	80083b2 <_realloc_r+0x2a2>
 80083f2:	4637      	mov	r7, r6
 80083f4:	e6ed      	b.n	80081d2 <_realloc_r+0xc2>
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	431f      	orrs	r7, r3
 80083fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8008400:	6853      	ldr	r3, [r2, #4]
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	6053      	str	r3, [r2, #4]
 8008408:	e6ff      	b.n	800820a <_realloc_r+0xfa>
 800840a:	bf00      	nop
 800840c:	200000f8 	.word	0x200000f8

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4c06      	ldr	r4, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4605      	mov	r5, r0
 8008418:	4608      	mov	r0, r1
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	f7fb fc4c 	bl	8003cb8 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	200007ec 	.word	0x200007ec

08008430 <__sread>:
 8008430:	b510      	push	{r4, lr}
 8008432:	460c      	mov	r4, r1
 8008434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008438:	f000 fa66 	bl	8008908 <_read_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	bfab      	itete	ge
 8008440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008442:	89a3      	ldrhlt	r3, [r4, #12]
 8008444:	181b      	addge	r3, r3, r0
 8008446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800844a:	bfac      	ite	ge
 800844c:	6563      	strge	r3, [r4, #84]	; 0x54
 800844e:	81a3      	strhlt	r3, [r4, #12]
 8008450:	bd10      	pop	{r4, pc}

08008452 <__swrite>:
 8008452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	461f      	mov	r7, r3
 8008458:	898b      	ldrh	r3, [r1, #12]
 800845a:	05db      	lsls	r3, r3, #23
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	4616      	mov	r6, r2
 8008462:	d505      	bpl.n	8008470 <__swrite+0x1e>
 8008464:	2302      	movs	r3, #2
 8008466:	2200      	movs	r2, #0
 8008468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846c:	f000 fa28 	bl	80088c0 <_lseek_r>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008486:	f000 b8c5 	b.w	8008614 <_write_r>

0800848a <__sseek>:
 800848a:	b510      	push	{r4, lr}
 800848c:	460c      	mov	r4, r1
 800848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008492:	f000 fa15 	bl	80088c0 <_lseek_r>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	bf15      	itete	ne
 800849c:	6560      	strne	r0, [r4, #84]	; 0x54
 800849e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084a6:	81a3      	strheq	r3, [r4, #12]
 80084a8:	bf18      	it	ne
 80084aa:	81a3      	strhne	r3, [r4, #12]
 80084ac:	bd10      	pop	{r4, pc}

080084ae <__sclose>:
 80084ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b2:	f000 b8ef 	b.w	8008694 <_close_r>

080084b6 <__ssprint_r>:
 80084b6:	6893      	ldr	r3, [r2, #8]
 80084b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	4681      	mov	r9, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	4617      	mov	r7, r2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d060      	beq.n	8008588 <__ssprint_r+0xd2>
 80084c6:	f04f 0b00 	mov.w	fp, #0
 80084ca:	f8d2 a000 	ldr.w	sl, [r2]
 80084ce:	465e      	mov	r6, fp
 80084d0:	b356      	cbz	r6, 8008528 <__ssprint_r+0x72>
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	429e      	cmp	r6, r3
 80084d6:	d344      	bcc.n	8008562 <__ssprint_r+0xac>
 80084d8:	89a2      	ldrh	r2, [r4, #12]
 80084da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084de:	d03e      	beq.n	800855e <__ssprint_r+0xa8>
 80084e0:	6825      	ldr	r5, [r4, #0]
 80084e2:	6921      	ldr	r1, [r4, #16]
 80084e4:	eba5 0801 	sub.w	r8, r5, r1
 80084e8:	6965      	ldr	r5, [r4, #20]
 80084ea:	2302      	movs	r3, #2
 80084ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80084f4:	f108 0301 	add.w	r3, r8, #1
 80084f8:	4433      	add	r3, r6
 80084fa:	429d      	cmp	r5, r3
 80084fc:	bf38      	it	cc
 80084fe:	461d      	movcc	r5, r3
 8008500:	0553      	lsls	r3, r2, #21
 8008502:	d546      	bpl.n	8008592 <__ssprint_r+0xdc>
 8008504:	4629      	mov	r1, r5
 8008506:	4648      	mov	r0, r9
 8008508:	f7ff f8ea 	bl	80076e0 <_malloc_r>
 800850c:	b998      	cbnz	r0, 8008536 <__ssprint_r+0x80>
 800850e:	230c      	movs	r3, #12
 8008510:	f8c9 3000 	str.w	r3, [r9]
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	607b      	str	r3, [r7, #4]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	e031      	b.n	800858c <__ssprint_r+0xd6>
 8008528:	f8da b000 	ldr.w	fp, [sl]
 800852c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008530:	f10a 0a08 	add.w	sl, sl, #8
 8008534:	e7cc      	b.n	80084d0 <__ssprint_r+0x1a>
 8008536:	4642      	mov	r2, r8
 8008538:	6921      	ldr	r1, [r4, #16]
 800853a:	9001      	str	r0, [sp, #4]
 800853c:	f7ff fade 	bl	8007afc <memcpy>
 8008540:	89a2      	ldrh	r2, [r4, #12]
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800854c:	81a2      	strh	r2, [r4, #12]
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	6165      	str	r5, [r4, #20]
 8008552:	4443      	add	r3, r8
 8008554:	eba5 0508 	sub.w	r5, r5, r8
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	60a5      	str	r5, [r4, #8]
 800855c:	4633      	mov	r3, r6
 800855e:	429e      	cmp	r6, r3
 8008560:	d200      	bcs.n	8008564 <__ssprint_r+0xae>
 8008562:	4633      	mov	r3, r6
 8008564:	461a      	mov	r2, r3
 8008566:	4659      	mov	r1, fp
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	f7ff fad1 	bl	8007b12 <memmove>
 8008570:	68a2      	ldr	r2, [r4, #8]
 8008572:	9b01      	ldr	r3, [sp, #4]
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	60a2      	str	r2, [r4, #8]
 8008578:	6822      	ldr	r2, [r4, #0]
 800857a:	4413      	add	r3, r2
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	1b9e      	subs	r6, r3, r6
 8008582:	60be      	str	r6, [r7, #8]
 8008584:	2e00      	cmp	r6, #0
 8008586:	d1cf      	bne.n	8008528 <__ssprint_r+0x72>
 8008588:	2000      	movs	r0, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	b003      	add	sp, #12
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	462a      	mov	r2, r5
 8008594:	4648      	mov	r0, r9
 8008596:	f7ff fdbb 	bl	8008110 <_realloc_r>
 800859a:	4603      	mov	r3, r0
 800859c:	2800      	cmp	r0, #0
 800859e:	d1d6      	bne.n	800854e <__ssprint_r+0x98>
 80085a0:	6921      	ldr	r1, [r4, #16]
 80085a2:	4648      	mov	r0, r9
 80085a4:	f7fe fdee 	bl	8007184 <_free_r>
 80085a8:	e7b1      	b.n	800850e <__ssprint_r+0x58>

080085aa <__sprint_r>:
 80085aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ae:	6893      	ldr	r3, [r2, #8]
 80085b0:	4680      	mov	r8, r0
 80085b2:	460f      	mov	r7, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	b91b      	cbnz	r3, 80085c0 <__sprint_r+0x16>
 80085b8:	6053      	str	r3, [r2, #4]
 80085ba:	4618      	mov	r0, r3
 80085bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80085c2:	049d      	lsls	r5, r3, #18
 80085c4:	d523      	bpl.n	800860e <__sprint_r+0x64>
 80085c6:	6815      	ldr	r5, [r2, #0]
 80085c8:	68a0      	ldr	r0, [r4, #8]
 80085ca:	3508      	adds	r5, #8
 80085cc:	b920      	cbnz	r0, 80085d8 <__sprint_r+0x2e>
 80085ce:	2300      	movs	r3, #0
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	6063      	str	r3, [r4, #4]
 80085d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80085dc:	f855 bc08 	ldr.w	fp, [r5, #-8]
 80085e0:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80085e4:	f04f 0900 	mov.w	r9, #0
 80085e8:	45ca      	cmp	sl, r9
 80085ea:	dc05      	bgt.n	80085f8 <__sprint_r+0x4e>
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	f026 0603 	bic.w	r6, r6, #3
 80085f2:	1b9e      	subs	r6, r3, r6
 80085f4:	60a6      	str	r6, [r4, #8]
 80085f6:	e7e7      	b.n	80085c8 <__sprint_r+0x1e>
 80085f8:	463a      	mov	r2, r7
 80085fa:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80085fe:	4640      	mov	r0, r8
 8008600:	f000 f905 	bl	800880e <_fputwc_r>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d0e2      	beq.n	80085ce <__sprint_r+0x24>
 8008608:	f109 0901 	add.w	r9, r9, #1
 800860c:	e7ec      	b.n	80085e8 <__sprint_r+0x3e>
 800860e:	f7fe fe75 	bl	80072fc <__sfvwrite_r>
 8008612:	e7dc      	b.n	80085ce <__sprint_r+0x24>

08008614 <_write_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4c07      	ldr	r4, [pc, #28]	; (8008634 <_write_r+0x20>)
 8008618:	4605      	mov	r5, r0
 800861a:	4608      	mov	r0, r1
 800861c:	4611      	mov	r1, r2
 800861e:	2200      	movs	r2, #0
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	f7fb fb32 	bl	8003c8c <_write>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_write_r+0x1e>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	b103      	cbz	r3, 8008632 <_write_r+0x1e>
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	200007ec 	.word	0x200007ec

08008638 <_calloc_r>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4351      	muls	r1, r2
 800863c:	f7ff f850 	bl	80076e0 <_malloc_r>
 8008640:	4604      	mov	r4, r0
 8008642:	b198      	cbz	r0, 800866c <_calloc_r+0x34>
 8008644:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008648:	f022 0203 	bic.w	r2, r2, #3
 800864c:	3a04      	subs	r2, #4
 800864e:	2a24      	cmp	r2, #36	; 0x24
 8008650:	d81b      	bhi.n	800868a <_calloc_r+0x52>
 8008652:	2a13      	cmp	r2, #19
 8008654:	d917      	bls.n	8008686 <_calloc_r+0x4e>
 8008656:	2100      	movs	r1, #0
 8008658:	2a1b      	cmp	r2, #27
 800865a:	6001      	str	r1, [r0, #0]
 800865c:	6041      	str	r1, [r0, #4]
 800865e:	d807      	bhi.n	8008670 <_calloc_r+0x38>
 8008660:	f100 0308 	add.w	r3, r0, #8
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	4620      	mov	r0, r4
 800866e:	bd10      	pop	{r4, pc}
 8008670:	2a24      	cmp	r2, #36	; 0x24
 8008672:	6081      	str	r1, [r0, #8]
 8008674:	60c1      	str	r1, [r0, #12]
 8008676:	bf11      	iteee	ne
 8008678:	f100 0310 	addne.w	r3, r0, #16
 800867c:	6101      	streq	r1, [r0, #16]
 800867e:	f100 0318 	addeq.w	r3, r0, #24
 8008682:	6141      	streq	r1, [r0, #20]
 8008684:	e7ee      	b.n	8008664 <_calloc_r+0x2c>
 8008686:	4603      	mov	r3, r0
 8008688:	e7ec      	b.n	8008664 <_calloc_r+0x2c>
 800868a:	2100      	movs	r1, #0
 800868c:	f7ff fa5b 	bl	8007b46 <memset>
 8008690:	e7ec      	b.n	800866c <_calloc_r+0x34>
	...

08008694 <_close_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4c06      	ldr	r4, [pc, #24]	; (80086b0 <_close_r+0x1c>)
 8008698:	2300      	movs	r3, #0
 800869a:	4605      	mov	r5, r0
 800869c:	4608      	mov	r0, r1
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	f7fb fb18 	bl	8003cd4 <_close>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_close_r+0x1a>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_close_r+0x1a>
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200007ec 	.word	0x200007ec

080086b4 <_fclose_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	b911      	cbnz	r1, 80086c2 <_fclose_r+0xe>
 80086bc:	2600      	movs	r6, #0
 80086be:	4630      	mov	r0, r6
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	b118      	cbz	r0, 80086cc <_fclose_r+0x18>
 80086c4:	6983      	ldr	r3, [r0, #24]
 80086c6:	b90b      	cbnz	r3, 80086cc <_fclose_r+0x18>
 80086c8:	f7fe fc86 	bl	8006fd8 <__sinit>
 80086cc:	4b2c      	ldr	r3, [pc, #176]	; (8008780 <_fclose_r+0xcc>)
 80086ce:	429c      	cmp	r4, r3
 80086d0:	d114      	bne.n	80086fc <_fclose_r+0x48>
 80086d2:	686c      	ldr	r4, [r5, #4]
 80086d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086d6:	07d8      	lsls	r0, r3, #31
 80086d8:	d405      	bmi.n	80086e6 <_fclose_r+0x32>
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	0599      	lsls	r1, r3, #22
 80086de:	d402      	bmi.n	80086e6 <_fclose_r+0x32>
 80086e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086e2:	f7fe ff87 	bl	80075f4 <__retarget_lock_acquire_recursive>
 80086e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ea:	b98b      	cbnz	r3, 8008710 <_fclose_r+0x5c>
 80086ec:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80086ee:	f016 0601 	ands.w	r6, r6, #1
 80086f2:	d1e3      	bne.n	80086bc <_fclose_r+0x8>
 80086f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f6:	f7fe ff7e 	bl	80075f6 <__retarget_lock_release_recursive>
 80086fa:	e7e0      	b.n	80086be <_fclose_r+0xa>
 80086fc:	4b21      	ldr	r3, [pc, #132]	; (8008784 <_fclose_r+0xd0>)
 80086fe:	429c      	cmp	r4, r3
 8008700:	d101      	bne.n	8008706 <_fclose_r+0x52>
 8008702:	68ac      	ldr	r4, [r5, #8]
 8008704:	e7e6      	b.n	80086d4 <_fclose_r+0x20>
 8008706:	4b20      	ldr	r3, [pc, #128]	; (8008788 <_fclose_r+0xd4>)
 8008708:	429c      	cmp	r4, r3
 800870a:	bf08      	it	eq
 800870c:	68ec      	ldreq	r4, [r5, #12]
 800870e:	e7e1      	b.n	80086d4 <_fclose_r+0x20>
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	f7fe fb3a 	bl	8006d8c <__sflush_r>
 8008718:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800871a:	4606      	mov	r6, r0
 800871c:	b133      	cbz	r3, 800872c <_fclose_r+0x78>
 800871e:	6a21      	ldr	r1, [r4, #32]
 8008720:	4628      	mov	r0, r5
 8008722:	4798      	blx	r3
 8008724:	2800      	cmp	r0, #0
 8008726:	bfb8      	it	lt
 8008728:	f04f 36ff 	movlt.w	r6, #4294967295
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	061a      	lsls	r2, r3, #24
 8008730:	d503      	bpl.n	800873a <_fclose_r+0x86>
 8008732:	6921      	ldr	r1, [r4, #16]
 8008734:	4628      	mov	r0, r5
 8008736:	f7fe fd25 	bl	8007184 <_free_r>
 800873a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873c:	b141      	cbz	r1, 8008750 <_fclose_r+0x9c>
 800873e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008742:	4299      	cmp	r1, r3
 8008744:	d002      	beq.n	800874c <_fclose_r+0x98>
 8008746:	4628      	mov	r0, r5
 8008748:	f7fe fd1c 	bl	8007184 <_free_r>
 800874c:	2300      	movs	r3, #0
 800874e:	6363      	str	r3, [r4, #52]	; 0x34
 8008750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008752:	b121      	cbz	r1, 800875e <_fclose_r+0xaa>
 8008754:	4628      	mov	r0, r5
 8008756:	f7fe fd15 	bl	8007184 <_free_r>
 800875a:	2300      	movs	r3, #0
 800875c:	64a3      	str	r3, [r4, #72]	; 0x48
 800875e:	f7fe fc23 	bl	8006fa8 <__sfp_lock_acquire>
 8008762:	2300      	movs	r3, #0
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008768:	07db      	lsls	r3, r3, #31
 800876a:	d402      	bmi.n	8008772 <_fclose_r+0xbe>
 800876c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800876e:	f7fe ff42 	bl	80075f6 <__retarget_lock_release_recursive>
 8008772:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008774:	f7fe ff3d 	bl	80075f2 <__retarget_lock_close_recursive>
 8008778:	f7fe fc1c 	bl	8006fb4 <__sfp_lock_release>
 800877c:	e79f      	b.n	80086be <_fclose_r+0xa>
 800877e:	bf00      	nop
 8008780:	08008bd8 	.word	0x08008bd8
 8008784:	08008bf8 	.word	0x08008bf8
 8008788:	08008bb8 	.word	0x08008bb8

0800878c <__fputwc>:
 800878c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008790:	4680      	mov	r8, r0
 8008792:	460e      	mov	r6, r1
 8008794:	4614      	mov	r4, r2
 8008796:	f000 f885 	bl	80088a4 <__locale_mb_cur_max>
 800879a:	2801      	cmp	r0, #1
 800879c:	d11c      	bne.n	80087d8 <__fputwc+0x4c>
 800879e:	1e73      	subs	r3, r6, #1
 80087a0:	2bfe      	cmp	r3, #254	; 0xfe
 80087a2:	d819      	bhi.n	80087d8 <__fputwc+0x4c>
 80087a4:	f88d 6004 	strb.w	r6, [sp, #4]
 80087a8:	4605      	mov	r5, r0
 80087aa:	2700      	movs	r7, #0
 80087ac:	f10d 0904 	add.w	r9, sp, #4
 80087b0:	42af      	cmp	r7, r5
 80087b2:	d020      	beq.n	80087f6 <__fputwc+0x6a>
 80087b4:	68a3      	ldr	r3, [r4, #8]
 80087b6:	f817 1009 	ldrb.w	r1, [r7, r9]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	60a3      	str	r3, [r4, #8]
 80087c0:	da04      	bge.n	80087cc <__fputwc+0x40>
 80087c2:	69a2      	ldr	r2, [r4, #24]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	db1a      	blt.n	80087fe <__fputwc+0x72>
 80087c8:	290a      	cmp	r1, #10
 80087ca:	d018      	beq.n	80087fe <__fputwc+0x72>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	7019      	strb	r1, [r3, #0]
 80087d4:	3701      	adds	r7, #1
 80087d6:	e7eb      	b.n	80087b0 <__fputwc+0x24>
 80087d8:	4632      	mov	r2, r6
 80087da:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80087de:	a901      	add	r1, sp, #4
 80087e0:	4640      	mov	r0, r8
 80087e2:	f000 f901 	bl	80089e8 <_wcrtomb_r>
 80087e6:	1c42      	adds	r2, r0, #1
 80087e8:	4605      	mov	r5, r0
 80087ea:	d1de      	bne.n	80087aa <__fputwc+0x1e>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	4606      	mov	r6, r0
 80087f6:	4630      	mov	r0, r6
 80087f8:	b003      	add	sp, #12
 80087fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087fe:	4622      	mov	r2, r4
 8008800:	4640      	mov	r0, r8
 8008802:	f000 f893 	bl	800892c <__swbuf_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d1e4      	bne.n	80087d4 <__fputwc+0x48>
 800880a:	4606      	mov	r6, r0
 800880c:	e7f3      	b.n	80087f6 <__fputwc+0x6a>

0800880e <_fputwc_r>:
 800880e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008810:	07db      	lsls	r3, r3, #31
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	4605      	mov	r5, r0
 8008816:	460e      	mov	r6, r1
 8008818:	4614      	mov	r4, r2
 800881a:	d405      	bmi.n	8008828 <_fputwc_r+0x1a>
 800881c:	8993      	ldrh	r3, [r2, #12]
 800881e:	0598      	lsls	r0, r3, #22
 8008820:	d402      	bmi.n	8008828 <_fputwc_r+0x1a>
 8008822:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8008824:	f7fe fee6 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	0499      	lsls	r1, r3, #18
 800882e:	d406      	bmi.n	800883e <_fputwc_r+0x30>
 8008830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800883c:	6663      	str	r3, [r4, #100]	; 0x64
 800883e:	4622      	mov	r2, r4
 8008840:	4628      	mov	r0, r5
 8008842:	4631      	mov	r1, r6
 8008844:	f7ff ffa2 	bl	800878c <__fputwc>
 8008848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800884a:	07da      	lsls	r2, r3, #31
 800884c:	4605      	mov	r5, r0
 800884e:	d405      	bmi.n	800885c <_fputwc_r+0x4e>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	059b      	lsls	r3, r3, #22
 8008854:	d402      	bmi.n	800885c <_fputwc_r+0x4e>
 8008856:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008858:	f7fe fecd 	bl	80075f6 <__retarget_lock_release_recursive>
 800885c:	4628      	mov	r0, r5
 800885e:	bd70      	pop	{r4, r5, r6, pc}

08008860 <_fstat_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4c07      	ldr	r4, [pc, #28]	; (8008880 <_fstat_r+0x20>)
 8008864:	2300      	movs	r3, #0
 8008866:	4605      	mov	r5, r0
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	f7fb fa39 	bl	8003ce4 <_fstat>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d102      	bne.n	800887c <_fstat_r+0x1c>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	b103      	cbz	r3, 800887c <_fstat_r+0x1c>
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	200007ec 	.word	0x200007ec

08008884 <_isatty_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4c06      	ldr	r4, [pc, #24]	; (80088a0 <_isatty_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4605      	mov	r5, r0
 800888c:	4608      	mov	r0, r1
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	f7fb fa30 	bl	8003cf4 <_isatty>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_isatty_r+0x1a>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	b103      	cbz	r3, 800889e <_isatty_r+0x1a>
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200007ec 	.word	0x200007ec

080088a4 <__locale_mb_cur_max>:
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <__locale_mb_cur_max+0x14>)
 80088a6:	4a05      	ldr	r2, [pc, #20]	; (80088bc <__locale_mb_cur_max+0x18>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf08      	it	eq
 80088b0:	4613      	moveq	r3, r2
 80088b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80088b6:	4770      	bx	lr
 80088b8:	20000004 	.word	0x20000004
 80088bc:	20000508 	.word	0x20000508

080088c0 <_lseek_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4c07      	ldr	r4, [pc, #28]	; (80088e0 <_lseek_r+0x20>)
 80088c4:	4605      	mov	r5, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	4611      	mov	r1, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7fb fa18 	bl	8003d04 <_lseek>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_lseek_r+0x1e>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	b103      	cbz	r3, 80088de <_lseek_r+0x1e>
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	200007ec 	.word	0x200007ec

080088e4 <__ascii_mbtowc>:
 80088e4:	b082      	sub	sp, #8
 80088e6:	b901      	cbnz	r1, 80088ea <__ascii_mbtowc+0x6>
 80088e8:	a901      	add	r1, sp, #4
 80088ea:	b142      	cbz	r2, 80088fe <__ascii_mbtowc+0x1a>
 80088ec:	b14b      	cbz	r3, 8008902 <__ascii_mbtowc+0x1e>
 80088ee:	7813      	ldrb	r3, [r2, #0]
 80088f0:	600b      	str	r3, [r1, #0]
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	1c10      	adds	r0, r2, #0
 80088f6:	bf18      	it	ne
 80088f8:	2001      	movne	r0, #1
 80088fa:	b002      	add	sp, #8
 80088fc:	4770      	bx	lr
 80088fe:	4610      	mov	r0, r2
 8008900:	e7fb      	b.n	80088fa <__ascii_mbtowc+0x16>
 8008902:	f06f 0001 	mvn.w	r0, #1
 8008906:	e7f8      	b.n	80088fa <__ascii_mbtowc+0x16>

08008908 <_read_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4c07      	ldr	r4, [pc, #28]	; (8008928 <_read_r+0x20>)
 800890c:	4605      	mov	r5, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7fb f9fc 	bl	8003d14 <_read>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_read_r+0x1e>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	b103      	cbz	r3, 8008926 <_read_r+0x1e>
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	200007ec 	.word	0x200007ec

0800892c <__swbuf_r>:
 800892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892e:	460e      	mov	r6, r1
 8008930:	4614      	mov	r4, r2
 8008932:	4605      	mov	r5, r0
 8008934:	b118      	cbz	r0, 800893e <__swbuf_r+0x12>
 8008936:	6983      	ldr	r3, [r0, #24]
 8008938:	b90b      	cbnz	r3, 800893e <__swbuf_r+0x12>
 800893a:	f7fe fb4d 	bl	8006fd8 <__sinit>
 800893e:	4b27      	ldr	r3, [pc, #156]	; (80089dc <__swbuf_r+0xb0>)
 8008940:	429c      	cmp	r4, r3
 8008942:	d12f      	bne.n	80089a4 <__swbuf_r+0x78>
 8008944:	686c      	ldr	r4, [r5, #4]
 8008946:	69a3      	ldr	r3, [r4, #24]
 8008948:	60a3      	str	r3, [r4, #8]
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	0719      	lsls	r1, r3, #28
 800894e:	d533      	bpl.n	80089b8 <__swbuf_r+0x8c>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d030      	beq.n	80089b8 <__swbuf_r+0x8c>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	b2f6      	uxtb	r6, r6
 800895c:	049a      	lsls	r2, r3, #18
 800895e:	4637      	mov	r7, r6
 8008960:	d534      	bpl.n	80089cc <__swbuf_r+0xa0>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	1ac0      	subs	r0, r0, r3
 8008968:	6963      	ldr	r3, [r4, #20]
 800896a:	4298      	cmp	r0, r3
 800896c:	db04      	blt.n	8008978 <__swbuf_r+0x4c>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f7fe fa9d 	bl	8006eb0 <_fflush_r>
 8008976:	bb28      	cbnz	r0, 80089c4 <__swbuf_r+0x98>
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	3b01      	subs	r3, #1
 800897c:	60a3      	str	r3, [r4, #8]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	6022      	str	r2, [r4, #0]
 8008984:	701e      	strb	r6, [r3, #0]
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	3001      	adds	r0, #1
 800898a:	4298      	cmp	r0, r3
 800898c:	d004      	beq.n	8008998 <__swbuf_r+0x6c>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	07db      	lsls	r3, r3, #31
 8008992:	d519      	bpl.n	80089c8 <__swbuf_r+0x9c>
 8008994:	2e0a      	cmp	r6, #10
 8008996:	d117      	bne.n	80089c8 <__swbuf_r+0x9c>
 8008998:	4621      	mov	r1, r4
 800899a:	4628      	mov	r0, r5
 800899c:	f7fe fa88 	bl	8006eb0 <_fflush_r>
 80089a0:	b190      	cbz	r0, 80089c8 <__swbuf_r+0x9c>
 80089a2:	e00f      	b.n	80089c4 <__swbuf_r+0x98>
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <__swbuf_r+0xb4>)
 80089a6:	429c      	cmp	r4, r3
 80089a8:	d101      	bne.n	80089ae <__swbuf_r+0x82>
 80089aa:	68ac      	ldr	r4, [r5, #8]
 80089ac:	e7cb      	b.n	8008946 <__swbuf_r+0x1a>
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <__swbuf_r+0xb8>)
 80089b0:	429c      	cmp	r4, r3
 80089b2:	bf08      	it	eq
 80089b4:	68ec      	ldreq	r4, [r5, #12]
 80089b6:	e7c6      	b.n	8008946 <__swbuf_r+0x1a>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7fd fb1c 	bl	8005ff8 <__swsetup_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d0c8      	beq.n	8008956 <__swbuf_r+0x2a>
 80089c4:	f04f 37ff 	mov.w	r7, #4294967295
 80089c8:	4638      	mov	r0, r7
 80089ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089d8:	6663      	str	r3, [r4, #100]	; 0x64
 80089da:	e7c2      	b.n	8008962 <__swbuf_r+0x36>
 80089dc:	08008bd8 	.word	0x08008bd8
 80089e0:	08008bf8 	.word	0x08008bf8
 80089e4:	08008bb8 	.word	0x08008bb8

080089e8 <_wcrtomb_r>:
 80089e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ea:	4605      	mov	r5, r0
 80089ec:	b085      	sub	sp, #20
 80089ee:	461e      	mov	r6, r3
 80089f0:	460f      	mov	r7, r1
 80089f2:	4c0f      	ldr	r4, [pc, #60]	; (8008a30 <_wcrtomb_r+0x48>)
 80089f4:	b991      	cbnz	r1, 8008a1c <_wcrtomb_r+0x34>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	490e      	ldr	r1, [pc, #56]	; (8008a34 <_wcrtomb_r+0x4c>)
 80089fa:	6a12      	ldr	r2, [r2, #32]
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	bf08      	it	eq
 8008a00:	460a      	moveq	r2, r1
 8008a02:	a901      	add	r1, sp, #4
 8008a04:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8008a08:	463a      	mov	r2, r7
 8008a0a:	47a0      	blx	r4
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	bf01      	itttt	eq
 8008a10:	2300      	moveq	r3, #0
 8008a12:	6033      	streq	r3, [r6, #0]
 8008a14:	238a      	moveq	r3, #138	; 0x8a
 8008a16:	602b      	streq	r3, [r5, #0]
 8008a18:	b005      	add	sp, #20
 8008a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1c:	6824      	ldr	r4, [r4, #0]
 8008a1e:	4f05      	ldr	r7, [pc, #20]	; (8008a34 <_wcrtomb_r+0x4c>)
 8008a20:	6a24      	ldr	r4, [r4, #32]
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	bf08      	it	eq
 8008a26:	463c      	moveq	r4, r7
 8008a28:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008a2c:	e7ed      	b.n	8008a0a <_wcrtomb_r+0x22>
 8008a2e:	bf00      	nop
 8008a30:	20000004 	.word	0x20000004
 8008a34:	20000508 	.word	0x20000508

08008a38 <__ascii_wctomb>:
 8008a38:	b149      	cbz	r1, 8008a4e <__ascii_wctomb+0x16>
 8008a3a:	2aff      	cmp	r2, #255	; 0xff
 8008a3c:	bf85      	ittet	hi
 8008a3e:	238a      	movhi	r3, #138	; 0x8a
 8008a40:	6003      	strhi	r3, [r0, #0]
 8008a42:	700a      	strbls	r2, [r1, #0]
 8008a44:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a48:	bf98      	it	ls
 8008a4a:	2001      	movls	r0, #1
 8008a4c:	4770      	bx	lr
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4770      	bx	lr
	...

08008a54 <_init>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr

08008a60 <_fini>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	bf00      	nop
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr
